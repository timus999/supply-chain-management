import {
  require_events
} from "./chunk-YIR22XEO.js";
import {
  require_cjs
} from "./chunk-SSPUAQ3Z.js";
import {
  safeJsonParse,
  safeJsonStringify
} from "./chunk-ZD6L6BH6.js";
import {
  __commonJS,
  __esm,
  __export,
  __reExport,
  __toCommonJS,
  __toESM
} from "./chunk-3VPM5DSM.js";

// node_modules/@walletconnect/environment/node_modules/tslib/tslib.es6.js
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __read: () => __read,
  __rest: () => __rest,
  __spread: () => __spread,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values
});
function __extends(d3, b2) {
  extendStatics(d3, b2);
  function __() {
    this.constructor = d3;
  }
  d3.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
}
function __rest(s2, e2) {
  var t = {};
  for (var p2 in s2) if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
    t[p2] = s2[p2];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t[p2[i2]] = s2[p2[i2]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c3 = arguments.length, r3 = c3 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d3;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r3 = Reflect.decorate(decorators, target, key, desc);
  else for (var i2 = decorators.length - 1; i2 >= 0; i2--) if (d3 = decorators[i2]) r3 = (c3 < 3 ? d3(r3) : c3 > 3 ? d3(target, key, r3) : d3(target, key)) || r3;
  return c3 > 3 && r3 && Object.defineProperty(target, key, r3), r3;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P3, generator) {
  function adopt(value) {
    return value instanceof P3 ? value : new P3(function(resolve) {
      resolve(value);
    });
  }
  return new (P3 || (P3 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f3, y, t, g3;
  return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n3) {
    return function(v3) {
      return step([n3, v3]);
    };
  }
  function step(op) {
    if (f3) throw new TypeError("Generator is already executing.");
    while (_) try {
      if (f3 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e2) {
      op = [6, e2];
      y = 0;
    } finally {
      f3 = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding(o5, m2, k2, k22) {
  if (k22 === void 0) k22 = k2;
  o5[k22] = m2[k2];
}
function __exportStar(m2, exports) {
  for (var p2 in m2) if (p2 !== "default" && !exports.hasOwnProperty(p2)) exports[p2] = m2[p2];
}
function __values(o5) {
  var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o5[s2], i2 = 0;
  if (m2) return m2.call(o5);
  if (o5 && typeof o5.length === "number") return {
    next: function() {
      if (o5 && i2 >= o5.length) o5 = void 0;
      return { value: o5 && o5[i2++], done: !o5 };
    }
  };
  throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o5, n3) {
  var m2 = typeof Symbol === "function" && o5[Symbol.iterator];
  if (!m2) return o5;
  var i2 = m2.call(o5), r3, ar2 = [], e2;
  try {
    while ((n3 === void 0 || n3-- > 0) && !(r3 = i2.next()).done) ar2.push(r3.value);
  } catch (error) {
    e2 = { error };
  } finally {
    try {
      if (r3 && !r3.done && (m2 = i2["return"])) m2.call(i2);
    } finally {
      if (e2) throw e2.error;
    }
  }
  return ar2;
}
function __spread() {
  for (var ar2 = [], i2 = 0; i2 < arguments.length; i2++)
    ar2 = ar2.concat(__read(arguments[i2]));
  return ar2;
}
function __spreadArrays() {
  for (var s2 = 0, i2 = 0, il = arguments.length; i2 < il; i2++) s2 += arguments[i2].length;
  for (var r3 = Array(s2), k2 = 0, i2 = 0; i2 < il; i2++)
    for (var a2 = arguments[i2], j3 = 0, jl = a2.length; j3 < jl; j3++, k2++)
      r3[k2] = a2[j3];
  return r3;
}
function __await(v3) {
  return this instanceof __await ? (this.v = v3, this) : new __await(v3);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g3 = generator.apply(thisArg, _arguments || []), i2, q = [];
  return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
    return this;
  }, i2;
  function verb(n3) {
    if (g3[n3]) i2[n3] = function(v3) {
      return new Promise(function(a2, b2) {
        q.push([n3, v3, a2, b2]) > 1 || resume(n3, v3);
      });
    };
  }
  function resume(n3, v3) {
    try {
      step(g3[n3](v3));
    } catch (e2) {
      settle(q[0][3], e2);
    }
  }
  function step(r3) {
    r3.value instanceof __await ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q[0][2], r3);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f3, v3) {
    if (f3(v3), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o5) {
  var i2, p2;
  return i2 = {}, verb("next"), verb("throw", function(e2) {
    throw e2;
  }), verb("return"), i2[Symbol.iterator] = function() {
    return this;
  }, i2;
  function verb(n3, f3) {
    i2[n3] = o5[n3] ? function(v3) {
      return (p2 = !p2) ? { value: __await(o5[n3](v3)), done: n3 === "return" } : f3 ? f3(v3) : v3;
    } : f3;
  }
}
function __asyncValues(o5) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m2 = o5[Symbol.asyncIterator], i2;
  return m2 ? m2.call(o5) : (o5 = typeof __values === "function" ? __values(o5) : o5[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
    return this;
  }, i2);
  function verb(n3) {
    i2[n3] = o5[n3] && function(v3) {
      return new Promise(function(resolve, reject) {
        v3 = o5[n3](v3), settle(resolve, reject, v3.done, v3.value);
      });
    };
  }
  function settle(resolve, reject, d3, v3) {
    Promise.resolve(v3).then(function(v4) {
      resolve({ value: v4, done: d3 });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) {
    for (var k2 in mod) if (Object.hasOwnProperty.call(mod, k2)) result[k2] = mod[k2];
  }
  result.default = mod;
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var extendStatics, __assign;
var init_tslib_es6 = __esm({
  "node_modules/@walletconnect/environment/node_modules/tslib/tslib.es6.js"() {
    extendStatics = function(d3, b2) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b3) {
        d4.__proto__ = b3;
      } || function(d4, b3) {
        for (var p2 in b3) if (b3.hasOwnProperty(p2)) d4[p2] = b3[p2];
      };
      return extendStatics(d3, b2);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s2, i2 = 1, n3 = arguments.length; i2 < n3; i2++) {
          s2 = arguments[i2];
          for (var p2 in s2) if (Object.prototype.hasOwnProperty.call(s2, p2)) t[p2] = s2[p2];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
  }
});

// node_modules/@walletconnect/environment/dist/cjs/crypto.js
var require_crypto = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowserCryptoAvailable = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;
    function getBrowerCrypto() {
      return (global === null || global === void 0 ? void 0 : global.crypto) || (global === null || global === void 0 ? void 0 : global.msCrypto) || {};
    }
    exports.getBrowerCrypto = getBrowerCrypto;
    function getSubtleCrypto() {
      const browserCrypto = getBrowerCrypto();
      return browserCrypto.subtle || browserCrypto.webkitSubtle;
    }
    exports.getSubtleCrypto = getSubtleCrypto;
    function isBrowserCryptoAvailable() {
      return !!getBrowerCrypto() && !!getSubtleCrypto();
    }
    exports.isBrowserCryptoAvailable = isBrowserCryptoAvailable;
  }
});

// node_modules/@walletconnect/environment/dist/cjs/env.js
var require_env = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/env.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowser = exports.isNode = exports.isReactNative = void 0;
    function isReactNative() {
      return typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative";
    }
    exports.isReactNative = isReactNative;
    function isNode2() {
      return typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined";
    }
    exports.isNode = isNode2;
    function isBrowser() {
      return !isReactNative() && !isNode2();
    }
    exports.isBrowser = isBrowser;
  }
});

// node_modules/@walletconnect/environment/dist/cjs/index.js
var require_cjs2 = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_crypto(), exports);
    tslib_1.__exportStar(require_env(), exports);
  }
});

// node_modules/@walletconnect/jsonrpc-http-connection/node_modules/cross-fetch/dist/browser-ponyfill.js
var require_browser_ponyfill = __commonJS({
  "node_modules/@walletconnect/jsonrpc-http-connection/node_modules/cross-fetch/dist/browser-ponyfill.js"(exports, module) {
    var __global__ = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || typeof global !== "undefined" && global;
    var __globalThis__ = function() {
      function F() {
        this.fetch = false;
        this.DOMException = __global__.DOMException;
      }
      F.prototype = __global__;
      return new F();
    }();
    (function(globalThis2) {
      var irrelevant = function(exports2) {
        var g3 = typeof globalThis2 !== "undefined" && globalThis2 || typeof self !== "undefined" && self || // eslint-disable-next-line no-undef
        typeof global !== "undefined" && global || {};
        var support = {
          searchParams: "URLSearchParams" in g3,
          iterable: "Symbol" in g3 && "iterator" in Symbol,
          blob: "FileReader" in g3 && "Blob" in g3 && function() {
            try {
              new Blob();
              return true;
            } catch (e2) {
              return false;
            }
          }(),
          formData: "FormData" in g3,
          arrayBuffer: "ArrayBuffer" in g3
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name) {
          if (typeof name !== "string") {
            name = String(name);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === "") {
            throw new TypeError('Invalid character in header field name: "' + name + '"');
          }
          return name.toLowerCase();
        }
        function normalizeValue(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers(headers) {
          this.map = {};
          if (headers instanceof Headers) {
            headers.forEach(function(value, name) {
              this.append(name, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              if (header.length != 2) {
                throw new TypeError("Headers constructor: expected name/value pair to be length 2, found" + header.length);
              }
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
              this.append(name, headers[name]);
            }, this);
          }
        }
        Headers.prototype.append = function(name, value) {
          name = normalizeName(name);
          value = normalizeValue(value);
          var oldValue = this.map[name];
          this.map[name] = oldValue ? oldValue + ", " + value : value;
        };
        Headers.prototype["delete"] = function(name) {
          delete this.map[normalizeName(name)];
        };
        Headers.prototype.get = function(name) {
          name = normalizeName(name);
          return this.has(name) ? this.map[name] : null;
        };
        Headers.prototype.has = function(name) {
          return this.map.hasOwnProperty(normalizeName(name));
        };
        Headers.prototype.set = function(name, value) {
          this.map[normalizeName(name)] = normalizeValue(value);
        };
        Headers.prototype.forEach = function(callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this);
            }
          }
        };
        Headers.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push(name);
          });
          return iteratorFor(items);
        };
        Headers.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push([name, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
        }
        function consumed(body) {
          if (body._noBody) return;
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
          var encoding = match ? match[1] : "utf-8";
          reader.readAsText(blob, encoding);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i2 = 0; i2 < view.length; i2++) {
            chars[i2] = String.fromCharCode(view[i2]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this.bodyUsed = this.bodyUsed;
            this._bodyInit = body;
            if (!body) {
              this._noBody = true;
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
          }
          this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
              var isConsumed = consumed(this);
              if (isConsumed) {
                return isConsumed;
              } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                return Promise.resolve(
                  this._bodyArrayBuffer.buffer.slice(
                    this._bodyArrayBuffer.byteOffset,
                    this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                  )
                );
              } else {
                return Promise.resolve(this._bodyArrayBuffer);
              }
            } else if (support.blob) {
              return this.blob().then(readBlobAsArrayBuffer);
            } else {
              throw new Error("could not read as ArrayBuffer");
            }
          };
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["CONNECT", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request(input, options) {
          if (!(this instanceof Request)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          options = options || {};
          var body = options.body;
          if (input instanceof Request) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal || function() {
            if ("AbortController" in g3) {
              var ctrl = new AbortController();
              return ctrl.signal;
            }
          }();
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
          if (this.method === "GET" || this.method === "HEAD") {
            if (options.cache === "no-store" || options.cache === "no-cache") {
              var reParamSearch = /([?&])_=[^&]*/;
              if (reParamSearch.test(this.url)) {
                this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
              } else {
                var reQueryString = /\?/;
                this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
              }
            }
          }
        }
        Request.prototype.clone = function() {
          return new Request(this, { body: this._bodyInit });
        };
        function decode(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split("=");
              var name = split.shift().replace(/\+/g, " ");
              var value = split.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split("\r").map(function(header) {
            return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
          }).forEach(function(line) {
            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              try {
                headers.append(key, value);
              } catch (error) {
                console.warn("Response " + error.message);
              }
            }
          });
          return headers;
        }
        Body.call(Request.prototype);
        function Response(bodyInit, options) {
          if (!(this instanceof Response)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          if (this.status < 200 || this.status > 599) {
            throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
          }
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
          this.headers = new Headers(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response.prototype);
        Response.prototype.clone = function() {
          return new Response(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url
          });
        };
        Response.error = function() {
          var response = new Response(null, { status: 200, statusText: "" });
          response.ok = false;
          response.status = 0;
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response(null, { status, headers: { location: url } });
        };
        exports2.DOMException = g3.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name) {
            this.message = message;
            this.name = name;
            var error = Error(message);
            this.stack = error.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch(input, init) {
          return new Promise(function(resolve, reject) {
            var request = new Request(input, init);
            if (request.signal && request.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              if (request.url.indexOf("file://") === 0 && (xhr.status < 200 || xhr.status > 599)) {
                options.status = 200;
              } else {
                options.status = xhr.status;
              }
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              setTimeout(function() {
                resolve(new Response(body, options));
              }, 0);
            };
            xhr.onerror = function() {
              setTimeout(function() {
                reject(new TypeError("Network request failed"));
              }, 0);
            };
            xhr.ontimeout = function() {
              setTimeout(function() {
                reject(new TypeError("Network request timed out"));
              }, 0);
            };
            xhr.onabort = function() {
              setTimeout(function() {
                reject(new exports2.DOMException("Aborted", "AbortError"));
              }, 0);
            };
            function fixUrl(url) {
              try {
                return url === "" && g3.location.href ? g3.location.href : url;
              } catch (e2) {
                return url;
              }
            }
            xhr.open(request.method, fixUrl(request.url), true);
            if (request.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr) {
              if (support.blob) {
                xhr.responseType = "blob";
              } else if (support.arrayBuffer) {
                xhr.responseType = "arraybuffer";
              }
            }
            if (init && typeof init.headers === "object" && !(init.headers instanceof Headers || g3.Headers && init.headers instanceof g3.Headers)) {
              var names = [];
              Object.getOwnPropertyNames(init.headers).forEach(function(name) {
                names.push(normalizeName(name));
                xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
              });
              request.headers.forEach(function(value, name) {
                if (names.indexOf(name) === -1) {
                  xhr.setRequestHeader(name, value);
                }
              });
            } else {
              request.headers.forEach(function(value, name) {
                xhr.setRequestHeader(name, value);
              });
            }
            if (request.signal) {
              request.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
          });
        }
        fetch.polyfill = true;
        if (!g3.fetch) {
          g3.fetch = fetch;
          g3.Headers = Headers;
          g3.Request = Request;
          g3.Response = Response;
        }
        exports2.Headers = Headers;
        exports2.Request = Request;
        exports2.Response = Response;
        exports2.fetch = fetch;
        Object.defineProperty(exports2, "__esModule", { value: true });
        return exports2;
      }({});
    })(__globalThis__);
    __globalThis__.fetch.ponyfill = true;
    delete __globalThis__.fetch.polyfill;
    var ctx = __global__.fetch ? __global__ : __globalThis__;
    exports = ctx.fetch;
    exports.default = ctx.fetch;
    exports.fetch = ctx.fetch;
    exports.Headers = ctx.Headers;
    exports.Request = ctx.Request;
    exports.Response = ctx.Response;
    module.exports = exports;
  }
});

// node_modules/ws/browser.js
var require_browser = __commonJS({
  "node_modules/ws/browser.js"(exports, module) {
    "use strict";
    module.exports = function() {
      throw new Error(
        "ws does not work in the browser. Browser clients must use the native WebSocket object"
      );
    };
  }
});

// node_modules/base-x/src/esm/index.js
function base(ALPHABET2) {
  if (ALPHABET2.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  const BASE_MAP = new Uint8Array(256);
  for (let j3 = 0; j3 < BASE_MAP.length; j3++) {
    BASE_MAP[j3] = 255;
  }
  for (let i2 = 0; i2 < ALPHABET2.length; i2++) {
    const x2 = ALPHABET2.charAt(i2);
    const xc = x2.charCodeAt(0);
    if (BASE_MAP[xc] !== 255) {
      throw new TypeError(x2 + " is ambiguous");
    }
    BASE_MAP[xc] = i2;
  }
  const BASE = ALPHABET2.length;
  const LEADER = ALPHABET2.charAt(0);
  const FACTOR = Math.log(BASE) / Math.log(256);
  const iFACTOR = Math.log(256) / Math.log(BASE);
  function encode(source) {
    if (source instanceof Uint8Array) {
    } else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError("Expected Uint8Array");
    }
    if (source.length === 0) {
      return "";
    }
    let zeroes = 0;
    let length = 0;
    let pbegin = 0;
    const pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    const size = (pend - pbegin) * iFACTOR + 1 >>> 0;
    const b58 = new Uint8Array(size);
    while (pbegin !== pend) {
      let carry = source[pbegin];
      let i2 = 0;
      for (let it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length = i2;
      pbegin++;
    }
    let it2 = size - length;
    while (it2 !== size && b58[it2] === 0) {
      it2++;
    }
    let str = LEADER.repeat(zeroes);
    for (; it2 < size; ++it2) {
      str += ALPHABET2.charAt(b58[it2]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    let psz = 0;
    let zeroes = 0;
    let length = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    const size = (source.length - psz) * FACTOR + 1 >>> 0;
    const b256 = new Uint8Array(size);
    while (psz < source.length) {
      const charCode = source.charCodeAt(psz);
      if (charCode > 255) {
        return;
      }
      let carry = BASE_MAP[charCode];
      if (carry === 255) {
        return;
      }
      let i2 = 0;
      for (let it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++) {
        carry += BASE * b256[it3] >>> 0;
        b256[it3] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length = i2;
      psz++;
    }
    let it4 = size - length;
    while (it4 !== size && b256[it4] === 0) {
      it4++;
    }
    const vch = new Uint8Array(zeroes + (size - it4));
    let j3 = zeroes;
    while (it4 !== size) {
      vch[j3++] = b256[it4++];
    }
    return vch;
  }
  function decode(string) {
    const buffer = decodeUnsafe(string);
    if (buffer) {
      return buffer;
    }
    throw new Error("Non-base" + BASE + " character");
  }
  return {
    encode,
    decodeUnsafe,
    decode
  };
}
var esm_default = base;

// node_modules/bs58/src/esm/index.js
var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
var esm_default2 = esm_default(ALPHABET);

// node_modules/@walletconnect/relay-auth/dist/index.es.js
var import_time = __toESM(require_cjs());
function En(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function fe(t, ...e2) {
  if (!En(t)) throw new Error("Uint8Array expected");
  if (e2.length > 0 && !e2.includes(t.length)) throw new Error("Uint8Array expected of length " + e2 + ", got length=" + t.length);
}
function De(t, e2 = true) {
  if (t.destroyed) throw new Error("Hash instance has been destroyed");
  if (e2 && t.finished) throw new Error("Hash#digest() has already been called");
}
function gn(t, e2) {
  fe(t);
  const n3 = e2.outputLen;
  if (t.length < n3) throw new Error("digestInto() expects output buffer of length at least " + n3);
}
var it = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
var _t = (t) => new DataView(t.buffer, t.byteOffset, t.byteLength);
function yn(t) {
  if (typeof t != "string") throw new Error("utf8ToBytes expected string, got " + typeof t);
  return new Uint8Array(new TextEncoder().encode(t));
}
function de(t) {
  return typeof t == "string" && (t = yn(t)), fe(t), t;
}
var xn = class {
  clone() {
    return this._cloneInto();
  }
};
function Bn(t) {
  const e2 = (r3) => t().update(de(r3)).digest(), n3 = t();
  return e2.outputLen = n3.outputLen, e2.blockLen = n3.blockLen, e2.create = () => t(), e2;
}
function he(t = 32) {
  if (it && typeof it.getRandomValues == "function") return it.getRandomValues(new Uint8Array(t));
  if (it && typeof it.randomBytes == "function") return it.randomBytes(t);
  throw new Error("crypto.getRandomValues must be defined");
}
function Cn(t, e2, n3, r3) {
  if (typeof t.setBigUint64 == "function") return t.setBigUint64(e2, n3, r3);
  const o5 = BigInt(32), s2 = BigInt(4294967295), a2 = Number(n3 >> o5 & s2), u = Number(n3 & s2), i2 = r3 ? 4 : 0, D = r3 ? 0 : 4;
  t.setUint32(e2 + i2, a2, r3), t.setUint32(e2 + D, u, r3);
}
var An = class extends xn {
  constructor(e2, n3, r3, o5) {
    super(), this.blockLen = e2, this.outputLen = n3, this.padOffset = r3, this.isLE = o5, this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.buffer = new Uint8Array(e2), this.view = _t(this.buffer);
  }
  update(e2) {
    De(this);
    const { view: n3, buffer: r3, blockLen: o5 } = this;
    e2 = de(e2);
    const s2 = e2.length;
    for (let a2 = 0; a2 < s2; ) {
      const u = Math.min(o5 - this.pos, s2 - a2);
      if (u === o5) {
        const i2 = _t(e2);
        for (; o5 <= s2 - a2; a2 += o5) this.process(i2, a2);
        continue;
      }
      r3.set(e2.subarray(a2, a2 + u), this.pos), this.pos += u, a2 += u, this.pos === o5 && (this.process(n3, 0), this.pos = 0);
    }
    return this.length += e2.length, this.roundClean(), this;
  }
  digestInto(e2) {
    De(this), gn(e2, this), this.finished = true;
    const { buffer: n3, view: r3, blockLen: o5, isLE: s2 } = this;
    let { pos: a2 } = this;
    n3[a2++] = 128, this.buffer.subarray(a2).fill(0), this.padOffset > o5 - a2 && (this.process(r3, 0), a2 = 0);
    for (let l4 = a2; l4 < o5; l4++) n3[l4] = 0;
    Cn(r3, o5 - 8, BigInt(this.length * 8), s2), this.process(r3, 0);
    const u = _t(e2), i2 = this.outputLen;
    if (i2 % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
    const D = i2 / 4, c3 = this.get();
    if (D > c3.length) throw new Error("_sha2: outputLen bigger than state");
    for (let l4 = 0; l4 < D; l4++) u.setUint32(4 * l4, c3[l4], s2);
  }
  digest() {
    const { buffer: e2, outputLen: n3 } = this;
    this.digestInto(e2);
    const r3 = e2.slice(0, n3);
    return this.destroy(), r3;
  }
  _cloneInto(e2) {
    e2 || (e2 = new this.constructor()), e2.set(...this.get());
    const { blockLen: n3, buffer: r3, length: o5, finished: s2, destroyed: a2, pos: u } = this;
    return e2.length = o5, e2.pos = u, e2.finished = s2, e2.destroyed = a2, o5 % n3 && e2.buffer.set(r3), e2;
  }
};
var wt = BigInt(2 ** 32 - 1);
var St = BigInt(32);
function le(t, e2 = false) {
  return e2 ? { h: Number(t & wt), l: Number(t >> St & wt) } : { h: Number(t >> St & wt) | 0, l: Number(t & wt) | 0 };
}
function mn(t, e2 = false) {
  let n3 = new Uint32Array(t.length), r3 = new Uint32Array(t.length);
  for (let o5 = 0; o5 < t.length; o5++) {
    const { h: s2, l: a2 } = le(t[o5], e2);
    [n3[o5], r3[o5]] = [s2, a2];
  }
  return [n3, r3];
}
var _n = (t, e2) => BigInt(t >>> 0) << St | BigInt(e2 >>> 0);
var Sn = (t, e2, n3) => t >>> n3;
var vn = (t, e2, n3) => t << 32 - n3 | e2 >>> n3;
var In = (t, e2, n3) => t >>> n3 | e2 << 32 - n3;
var Un = (t, e2, n3) => t << 32 - n3 | e2 >>> n3;
var Tn = (t, e2, n3) => t << 64 - n3 | e2 >>> n3 - 32;
var Fn = (t, e2, n3) => t >>> n3 - 32 | e2 << 64 - n3;
var Nn = (t, e2) => e2;
var Ln = (t, e2) => t;
var On = (t, e2, n3) => t << n3 | e2 >>> 32 - n3;
var Hn = (t, e2, n3) => e2 << n3 | t >>> 32 - n3;
var zn = (t, e2, n3) => e2 << n3 - 32 | t >>> 64 - n3;
var Mn = (t, e2, n3) => t << n3 - 32 | e2 >>> 64 - n3;
function qn(t, e2, n3, r3) {
  const o5 = (e2 >>> 0) + (r3 >>> 0);
  return { h: t + n3 + (o5 / 2 ** 32 | 0) | 0, l: o5 | 0 };
}
var $n = (t, e2, n3) => (t >>> 0) + (e2 >>> 0) + (n3 >>> 0);
var kn = (t, e2, n3, r3) => e2 + n3 + r3 + (t / 2 ** 32 | 0) | 0;
var Rn = (t, e2, n3, r3) => (t >>> 0) + (e2 >>> 0) + (n3 >>> 0) + (r3 >>> 0);
var jn = (t, e2, n3, r3, o5) => e2 + n3 + r3 + o5 + (t / 2 ** 32 | 0) | 0;
var Zn = (t, e2, n3, r3, o5) => (t >>> 0) + (e2 >>> 0) + (n3 >>> 0) + (r3 >>> 0) + (o5 >>> 0);
var Gn = (t, e2, n3, r3, o5, s2) => e2 + n3 + r3 + o5 + s2 + (t / 2 ** 32 | 0) | 0;
var x = { fromBig: le, split: mn, toBig: _n, shrSH: Sn, shrSL: vn, rotrSH: In, rotrSL: Un, rotrBH: Tn, rotrBL: Fn, rotr32H: Nn, rotr32L: Ln, rotlSH: On, rotlSL: Hn, rotlBH: zn, rotlBL: Mn, add: qn, add3L: $n, add3H: kn, add4L: Rn, add4H: jn, add5H: Gn, add5L: Zn };
var [Vn, Yn] = (() => x.split(["0x428a2f98d728ae22", "0x7137449123ef65cd", "0xb5c0fbcfec4d3b2f", "0xe9b5dba58189dbbc", "0x3956c25bf348b538", "0x59f111f1b605d019", "0x923f82a4af194f9b", "0xab1c5ed5da6d8118", "0xd807aa98a3030242", "0x12835b0145706fbe", "0x243185be4ee4b28c", "0x550c7dc3d5ffb4e2", "0x72be5d74f27b896f", "0x80deb1fe3b1696b1", "0x9bdc06a725c71235", "0xc19bf174cf692694", "0xe49b69c19ef14ad2", "0xefbe4786384f25e3", "0x0fc19dc68b8cd5b5", "0x240ca1cc77ac9c65", "0x2de92c6f592b0275", "0x4a7484aa6ea6e483", "0x5cb0a9dcbd41fbd4", "0x76f988da831153b5", "0x983e5152ee66dfab", "0xa831c66d2db43210", "0xb00327c898fb213f", "0xbf597fc7beef0ee4", "0xc6e00bf33da88fc2", "0xd5a79147930aa725", "0x06ca6351e003826f", "0x142929670a0e6e70", "0x27b70a8546d22ffc", "0x2e1b21385c26c926", "0x4d2c6dfc5ac42aed", "0x53380d139d95b3df", "0x650a73548baf63de", "0x766a0abb3c77b2a8", "0x81c2c92e47edaee6", "0x92722c851482353b", "0xa2bfe8a14cf10364", "0xa81a664bbc423001", "0xc24b8b70d0f89791", "0xc76c51a30654be30", "0xd192e819d6ef5218", "0xd69906245565a910", "0xf40e35855771202a", "0x106aa07032bbd1b8", "0x19a4c116b8d2d0c8", "0x1e376c085141ab53", "0x2748774cdf8eeb99", "0x34b0bcb5e19b48a8", "0x391c0cb3c5c95a63", "0x4ed8aa4ae3418acb", "0x5b9cca4f7763e373", "0x682e6ff3d6b2b8a3", "0x748f82ee5defb2fc", "0x78a5636f43172f60", "0x84c87814a1f0ab72", "0x8cc702081a6439ec", "0x90befffa23631e28", "0xa4506cebde82bde9", "0xbef9a3f7b2c67915", "0xc67178f2e372532b", "0xca273eceea26619c", "0xd186b8c721c0c207", "0xeada7dd6cde0eb1e", "0xf57d4f7fee6ed178", "0x06f067aa72176fba", "0x0a637dc5a2c898a6", "0x113f9804bef90dae", "0x1b710b35131c471b", "0x28db77f523047d84", "0x32caab7b40c72493", "0x3c9ebe0a15c9bebc", "0x431d67c49c100d4c", "0x4cc5d4becb3e42b6", "0x597f299cfc657e2a", "0x5fcb6fab3ad6faec", "0x6c44198c4a475817"].map((t) => BigInt(t))))();
var P = new Uint32Array(80);
var Q = new Uint32Array(80);
var Jn = class extends An {
  constructor() {
    super(128, 64, 16, false), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  get() {
    const { Ah: e2, Al: n3, Bh: r3, Bl: o5, Ch: s2, Cl: a2, Dh: u, Dl: i2, Eh: D, El: c3, Fh: l4, Fl: p2, Gh: w3, Gl: h2, Hh: g3, Hl: S } = this;
    return [e2, n3, r3, o5, s2, a2, u, i2, D, c3, l4, p2, w3, h2, g3, S];
  }
  set(e2, n3, r3, o5, s2, a2, u, i2, D, c3, l4, p2, w3, h2, g3, S) {
    this.Ah = e2 | 0, this.Al = n3 | 0, this.Bh = r3 | 0, this.Bl = o5 | 0, this.Ch = s2 | 0, this.Cl = a2 | 0, this.Dh = u | 0, this.Dl = i2 | 0, this.Eh = D | 0, this.El = c3 | 0, this.Fh = l4 | 0, this.Fl = p2 | 0, this.Gh = w3 | 0, this.Gl = h2 | 0, this.Hh = g3 | 0, this.Hl = S | 0;
  }
  process(e2, n3) {
    for (let d3 = 0; d3 < 16; d3++, n3 += 4) P[d3] = e2.getUint32(n3), Q[d3] = e2.getUint32(n3 += 4);
    for (let d3 = 16; d3 < 80; d3++) {
      const m2 = P[d3 - 15] | 0, F = Q[d3 - 15] | 0, q = x.rotrSH(m2, F, 1) ^ x.rotrSH(m2, F, 8) ^ x.shrSH(m2, F, 7), z = x.rotrSL(m2, F, 1) ^ x.rotrSL(m2, F, 8) ^ x.shrSL(m2, F, 7), I = P[d3 - 2] | 0, O2 = Q[d3 - 2] | 0, ot = x.rotrSH(I, O2, 19) ^ x.rotrBH(I, O2, 61) ^ x.shrSH(I, O2, 6), tt = x.rotrSL(I, O2, 19) ^ x.rotrBL(I, O2, 61) ^ x.shrSL(I, O2, 6), st = x.add4L(z, tt, Q[d3 - 7], Q[d3 - 16]), at = x.add4H(st, q, ot, P[d3 - 7], P[d3 - 16]);
      P[d3] = at | 0, Q[d3] = st | 0;
    }
    let { Ah: r3, Al: o5, Bh: s2, Bl: a2, Ch: u, Cl: i2, Dh: D, Dl: c3, Eh: l4, El: p2, Fh: w3, Fl: h2, Gh: g3, Gl: S, Hh: v3, Hl: L2 } = this;
    for (let d3 = 0; d3 < 80; d3++) {
      const m2 = x.rotrSH(l4, p2, 14) ^ x.rotrSH(l4, p2, 18) ^ x.rotrBH(l4, p2, 41), F = x.rotrSL(l4, p2, 14) ^ x.rotrSL(l4, p2, 18) ^ x.rotrBL(l4, p2, 41), q = l4 & w3 ^ ~l4 & g3, z = p2 & h2 ^ ~p2 & S, I = x.add5L(L2, F, z, Yn[d3], Q[d3]), O2 = x.add5H(I, v3, m2, q, Vn[d3], P[d3]), ot = I | 0, tt = x.rotrSH(r3, o5, 28) ^ x.rotrBH(r3, o5, 34) ^ x.rotrBH(r3, o5, 39), st = x.rotrSL(r3, o5, 28) ^ x.rotrBL(r3, o5, 34) ^ x.rotrBL(r3, o5, 39), at = r3 & s2 ^ r3 & u ^ s2 & u, Ct = o5 & a2 ^ o5 & i2 ^ a2 & i2;
      v3 = g3 | 0, L2 = S | 0, g3 = w3 | 0, S = h2 | 0, w3 = l4 | 0, h2 = p2 | 0, { h: l4, l: p2 } = x.add(D | 0, c3 | 0, O2 | 0, ot | 0), D = u | 0, c3 = i2 | 0, u = s2 | 0, i2 = a2 | 0, s2 = r3 | 0, a2 = o5 | 0;
      const At = x.add3L(ot, st, Ct);
      r3 = x.add3H(At, O2, tt, at), o5 = At | 0;
    }
    ({ h: r3, l: o5 } = x.add(this.Ah | 0, this.Al | 0, r3 | 0, o5 | 0)), { h: s2, l: a2 } = x.add(this.Bh | 0, this.Bl | 0, s2 | 0, a2 | 0), { h: u, l: i2 } = x.add(this.Ch | 0, this.Cl | 0, u | 0, i2 | 0), { h: D, l: c3 } = x.add(this.Dh | 0, this.Dl | 0, D | 0, c3 | 0), { h: l4, l: p2 } = x.add(this.Eh | 0, this.El | 0, l4 | 0, p2 | 0), { h: w3, l: h2 } = x.add(this.Fh | 0, this.Fl | 0, w3 | 0, h2 | 0), { h: g3, l: S } = x.add(this.Gh | 0, this.Gl | 0, g3 | 0, S | 0), { h: v3, l: L2 } = x.add(this.Hh | 0, this.Hl | 0, v3 | 0, L2 | 0), this.set(r3, o5, s2, a2, u, i2, D, c3, l4, p2, w3, h2, g3, S, v3, L2);
  }
  roundClean() {
    P.fill(0), Q.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var Kn = Bn(() => new Jn());
var vt = BigInt(0);
var be = BigInt(1);
var Wn = BigInt(2);
function It(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function Ut(t) {
  if (!It(t)) throw new Error("Uint8Array expected");
}
function Tt(t, e2) {
  if (typeof e2 != "boolean") throw new Error(t + " boolean expected, got " + e2);
}
var Xn = Array.from({ length: 256 }, (t, e2) => e2.toString(16).padStart(2, "0"));
function Ft(t) {
  Ut(t);
  let e2 = "";
  for (let n3 = 0; n3 < t.length; n3++) e2 += Xn[t[n3]];
  return e2;
}
function pe(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  return t === "" ? vt : BigInt("0x" + t);
}
var K = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function we(t) {
  if (t >= K._0 && t <= K._9) return t - K._0;
  if (t >= K.A && t <= K.F) return t - (K.A - 10);
  if (t >= K.a && t <= K.f) return t - (K.a - 10);
}
function Ee(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  const e2 = t.length, n3 = e2 / 2;
  if (e2 % 2) throw new Error("hex string expected, got unpadded hex of length " + e2);
  const r3 = new Uint8Array(n3);
  for (let o5 = 0, s2 = 0; o5 < n3; o5++, s2 += 2) {
    const a2 = we(t.charCodeAt(s2)), u = we(t.charCodeAt(s2 + 1));
    if (a2 === void 0 || u === void 0) {
      const i2 = t[s2] + t[s2 + 1];
      throw new Error('hex string expected, got non-hex character "' + i2 + '" at index ' + s2);
    }
    r3[o5] = a2 * 16 + u;
  }
  return r3;
}
function Pn(t) {
  return pe(Ft(t));
}
function Et(t) {
  return Ut(t), pe(Ft(Uint8Array.from(t).reverse()));
}
function ge(t, e2) {
  return Ee(t.toString(16).padStart(e2 * 2, "0"));
}
function Nt(t, e2) {
  return ge(t, e2).reverse();
}
function W(t, e2, n3) {
  let r3;
  if (typeof e2 == "string") try {
    r3 = Ee(e2);
  } catch (s2) {
    throw new Error(t + " must be hex string or Uint8Array, cause: " + s2);
  }
  else if (It(e2)) r3 = Uint8Array.from(e2);
  else throw new Error(t + " must be hex string or Uint8Array");
  const o5 = r3.length;
  if (typeof n3 == "number" && o5 !== n3) throw new Error(t + " of length " + n3 + " expected, got " + o5);
  return r3;
}
function ye(...t) {
  let e2 = 0;
  for (let r3 = 0; r3 < t.length; r3++) {
    const o5 = t[r3];
    Ut(o5), e2 += o5.length;
  }
  const n3 = new Uint8Array(e2);
  for (let r3 = 0, o5 = 0; r3 < t.length; r3++) {
    const s2 = t[r3];
    n3.set(s2, o5), o5 += s2.length;
  }
  return n3;
}
var Lt = (t) => typeof t == "bigint" && vt <= t;
function Qn(t, e2, n3) {
  return Lt(t) && Lt(e2) && Lt(n3) && e2 <= t && t < n3;
}
function ft(t, e2, n3, r3) {
  if (!Qn(e2, n3, r3)) throw new Error("expected valid " + t + ": " + n3 + " <= n < " + r3 + ", got " + e2);
}
function tr(t) {
  let e2;
  for (e2 = 0; t > vt; t >>= be, e2 += 1) ;
  return e2;
}
var er = (t) => (Wn << BigInt(t - 1)) - be;
var nr = { bigint: (t) => typeof t == "bigint", function: (t) => typeof t == "function", boolean: (t) => typeof t == "boolean", string: (t) => typeof t == "string", stringOrUint8Array: (t) => typeof t == "string" || It(t), isSafeInteger: (t) => Number.isSafeInteger(t), array: (t) => Array.isArray(t), field: (t, e2) => e2.Fp.isValid(t), hash: (t) => typeof t == "function" && Number.isSafeInteger(t.outputLen) };
function Ot(t, e2, n3 = {}) {
  const r3 = (o5, s2, a2) => {
    const u = nr[s2];
    if (typeof u != "function") throw new Error("invalid validator function");
    const i2 = t[o5];
    if (!(a2 && i2 === void 0) && !u(i2, t)) throw new Error("param " + String(o5) + " is invalid. Expected " + s2 + ", got " + i2);
  };
  for (const [o5, s2] of Object.entries(e2)) r3(o5, s2, false);
  for (const [o5, s2] of Object.entries(n3)) r3(o5, s2, true);
  return t;
}
function xe(t) {
  const e2 = /* @__PURE__ */ new WeakMap();
  return (n3, ...r3) => {
    const o5 = e2.get(n3);
    if (o5 !== void 0) return o5;
    const s2 = t(n3, ...r3);
    return e2.set(n3, s2), s2;
  };
}
var M = BigInt(0);
var N = BigInt(1);
var nt = BigInt(2);
var rr = BigInt(3);
var Ht = BigInt(4);
var Be = BigInt(5);
var Ce = BigInt(8);
function H(t, e2) {
  const n3 = t % e2;
  return n3 >= M ? n3 : e2 + n3;
}
function or(t, e2, n3) {
  if (e2 < M) throw new Error("invalid exponent, negatives unsupported");
  if (n3 <= M) throw new Error("invalid modulus");
  if (n3 === N) return M;
  let r3 = N;
  for (; e2 > M; ) e2 & N && (r3 = r3 * t % n3), t = t * t % n3, e2 >>= N;
  return r3;
}
function J(t, e2, n3) {
  let r3 = t;
  for (; e2-- > M; ) r3 *= r3, r3 %= n3;
  return r3;
}
function Ae(t, e2) {
  if (t === M) throw new Error("invert: expected non-zero number");
  if (e2 <= M) throw new Error("invert: expected positive modulus, got " + e2);
  let n3 = H(t, e2), r3 = e2, o5 = M, s2 = N;
  for (; n3 !== M; ) {
    const u = r3 / n3, i2 = r3 % n3, D = o5 - s2 * u;
    r3 = n3, n3 = i2, o5 = s2, s2 = D;
  }
  if (r3 !== N) throw new Error("invert: does not exist");
  return H(o5, e2);
}
function sr(t) {
  const e2 = (t - N) / nt;
  let n3, r3, o5;
  for (n3 = t - N, r3 = 0; n3 % nt === M; n3 /= nt, r3++) ;
  for (o5 = nt; o5 < t && or(o5, e2, t) !== t - N; o5++) if (o5 > 1e3) throw new Error("Cannot find square root: likely non-prime P");
  if (r3 === 1) {
    const a2 = (t + N) / Ht;
    return function(i2, D) {
      const c3 = i2.pow(D, a2);
      if (!i2.eql(i2.sqr(c3), D)) throw new Error("Cannot find square root");
      return c3;
    };
  }
  const s2 = (n3 + N) / nt;
  return function(u, i2) {
    if (u.pow(i2, e2) === u.neg(u.ONE)) throw new Error("Cannot find square root");
    let D = r3, c3 = u.pow(u.mul(u.ONE, o5), n3), l4 = u.pow(i2, s2), p2 = u.pow(i2, n3);
    for (; !u.eql(p2, u.ONE); ) {
      if (u.eql(p2, u.ZERO)) return u.ZERO;
      let w3 = 1;
      for (let g3 = u.sqr(p2); w3 < D && !u.eql(g3, u.ONE); w3++) g3 = u.sqr(g3);
      const h2 = u.pow(c3, N << BigInt(D - w3 - 1));
      c3 = u.sqr(h2), l4 = u.mul(l4, h2), p2 = u.mul(p2, c3), D = w3;
    }
    return l4;
  };
}
function ir(t) {
  if (t % Ht === rr) {
    const e2 = (t + N) / Ht;
    return function(r3, o5) {
      const s2 = r3.pow(o5, e2);
      if (!r3.eql(r3.sqr(s2), o5)) throw new Error("Cannot find square root");
      return s2;
    };
  }
  if (t % Ce === Be) {
    const e2 = (t - Be) / Ce;
    return function(r3, o5) {
      const s2 = r3.mul(o5, nt), a2 = r3.pow(s2, e2), u = r3.mul(o5, a2), i2 = r3.mul(r3.mul(u, nt), a2), D = r3.mul(u, r3.sub(i2, r3.ONE));
      if (!r3.eql(r3.sqr(D), o5)) throw new Error("Cannot find square root");
      return D;
    };
  }
  return sr(t);
}
var ur = (t, e2) => (H(t, e2) & N) === N;
var cr = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function ar(t) {
  const e2 = { ORDER: "bigint", MASK: "bigint", BYTES: "isSafeInteger", BITS: "isSafeInteger" }, n3 = cr.reduce((r3, o5) => (r3[o5] = "function", r3), e2);
  return Ot(t, n3);
}
function fr(t, e2, n3) {
  if (n3 < M) throw new Error("invalid exponent, negatives unsupported");
  if (n3 === M) return t.ONE;
  if (n3 === N) return e2;
  let r3 = t.ONE, o5 = e2;
  for (; n3 > M; ) n3 & N && (r3 = t.mul(r3, o5)), o5 = t.sqr(o5), n3 >>= N;
  return r3;
}
function Dr(t, e2) {
  const n3 = new Array(e2.length), r3 = e2.reduce((s2, a2, u) => t.is0(a2) ? s2 : (n3[u] = s2, t.mul(s2, a2)), t.ONE), o5 = t.inv(r3);
  return e2.reduceRight((s2, a2, u) => t.is0(a2) ? s2 : (n3[u] = t.mul(s2, n3[u]), t.mul(s2, a2)), o5), n3;
}
function me(t, e2) {
  const n3 = e2 !== void 0 ? e2 : t.toString(2).length, r3 = Math.ceil(n3 / 8);
  return { nBitLength: n3, nByteLength: r3 };
}
function _e(t, e2, n3 = false, r3 = {}) {
  if (t <= M) throw new Error("invalid field: expected ORDER > 0, got " + t);
  const { nBitLength: o5, nByteLength: s2 } = me(t, e2);
  if (s2 > 2048) throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let a2;
  const u = Object.freeze({ ORDER: t, isLE: n3, BITS: o5, BYTES: s2, MASK: er(o5), ZERO: M, ONE: N, create: (i2) => H(i2, t), isValid: (i2) => {
    if (typeof i2 != "bigint") throw new Error("invalid field element: expected bigint, got " + typeof i2);
    return M <= i2 && i2 < t;
  }, is0: (i2) => i2 === M, isOdd: (i2) => (i2 & N) === N, neg: (i2) => H(-i2, t), eql: (i2, D) => i2 === D, sqr: (i2) => H(i2 * i2, t), add: (i2, D) => H(i2 + D, t), sub: (i2, D) => H(i2 - D, t), mul: (i2, D) => H(i2 * D, t), pow: (i2, D) => fr(u, i2, D), div: (i2, D) => H(i2 * Ae(D, t), t), sqrN: (i2) => i2 * i2, addN: (i2, D) => i2 + D, subN: (i2, D) => i2 - D, mulN: (i2, D) => i2 * D, inv: (i2) => Ae(i2, t), sqrt: r3.sqrt || ((i2) => (a2 || (a2 = ir(t)), a2(u, i2))), invertBatch: (i2) => Dr(u, i2), cmov: (i2, D, c3) => c3 ? D : i2, toBytes: (i2) => n3 ? Nt(i2, s2) : ge(i2, s2), fromBytes: (i2) => {
    if (i2.length !== s2) throw new Error("Field.fromBytes: expected " + s2 + " bytes, got " + i2.length);
    return n3 ? Et(i2) : Pn(i2);
  } });
  return Object.freeze(u);
}
var Se = BigInt(0);
var gt = BigInt(1);
function zt(t, e2) {
  const n3 = e2.negate();
  return t ? n3 : e2;
}
function ve(t, e2) {
  if (!Number.isSafeInteger(t) || t <= 0 || t > e2) throw new Error("invalid window size, expected [1.." + e2 + "], got W=" + t);
}
function Mt(t, e2) {
  ve(t, e2);
  const n3 = Math.ceil(e2 / t) + 1, r3 = 2 ** (t - 1);
  return { windows: n3, windowSize: r3 };
}
function dr(t, e2) {
  if (!Array.isArray(t)) throw new Error("array expected");
  t.forEach((n3, r3) => {
    if (!(n3 instanceof e2)) throw new Error("invalid point at index " + r3);
  });
}
function hr(t, e2) {
  if (!Array.isArray(t)) throw new Error("array of scalars expected");
  t.forEach((n3, r3) => {
    if (!e2.isValid(n3)) throw new Error("invalid scalar at index " + r3);
  });
}
var qt = /* @__PURE__ */ new WeakMap();
var Ie = /* @__PURE__ */ new WeakMap();
function $t(t) {
  return Ie.get(t) || 1;
}
function lr(t, e2) {
  return { constTimeNegate: zt, hasPrecomputes(n3) {
    return $t(n3) !== 1;
  }, unsafeLadder(n3, r3, o5 = t.ZERO) {
    let s2 = n3;
    for (; r3 > Se; ) r3 & gt && (o5 = o5.add(s2)), s2 = s2.double(), r3 >>= gt;
    return o5;
  }, precomputeWindow(n3, r3) {
    const { windows: o5, windowSize: s2 } = Mt(r3, e2), a2 = [];
    let u = n3, i2 = u;
    for (let D = 0; D < o5; D++) {
      i2 = u, a2.push(i2);
      for (let c3 = 1; c3 < s2; c3++) i2 = i2.add(u), a2.push(i2);
      u = i2.double();
    }
    return a2;
  }, wNAF(n3, r3, o5) {
    const { windows: s2, windowSize: a2 } = Mt(n3, e2);
    let u = t.ZERO, i2 = t.BASE;
    const D = BigInt(2 ** n3 - 1), c3 = 2 ** n3, l4 = BigInt(n3);
    for (let p2 = 0; p2 < s2; p2++) {
      const w3 = p2 * a2;
      let h2 = Number(o5 & D);
      o5 >>= l4, h2 > a2 && (h2 -= c3, o5 += gt);
      const g3 = w3, S = w3 + Math.abs(h2) - 1, v3 = p2 % 2 !== 0, L2 = h2 < 0;
      h2 === 0 ? i2 = i2.add(zt(v3, r3[g3])) : u = u.add(zt(L2, r3[S]));
    }
    return { p: u, f: i2 };
  }, wNAFUnsafe(n3, r3, o5, s2 = t.ZERO) {
    const { windows: a2, windowSize: u } = Mt(n3, e2), i2 = BigInt(2 ** n3 - 1), D = 2 ** n3, c3 = BigInt(n3);
    for (let l4 = 0; l4 < a2; l4++) {
      const p2 = l4 * u;
      if (o5 === Se) break;
      let w3 = Number(o5 & i2);
      if (o5 >>= c3, w3 > u && (w3 -= D, o5 += gt), w3 === 0) continue;
      let h2 = r3[p2 + Math.abs(w3) - 1];
      w3 < 0 && (h2 = h2.negate()), s2 = s2.add(h2);
    }
    return s2;
  }, getPrecomputes(n3, r3, o5) {
    let s2 = qt.get(r3);
    return s2 || (s2 = this.precomputeWindow(r3, n3), n3 !== 1 && qt.set(r3, o5(s2))), s2;
  }, wNAFCached(n3, r3, o5) {
    const s2 = $t(n3);
    return this.wNAF(s2, this.getPrecomputes(s2, n3, o5), r3);
  }, wNAFCachedUnsafe(n3, r3, o5, s2) {
    const a2 = $t(n3);
    return a2 === 1 ? this.unsafeLadder(n3, r3, s2) : this.wNAFUnsafe(a2, this.getPrecomputes(a2, n3, o5), r3, s2);
  }, setWindowSize(n3, r3) {
    ve(r3, e2), Ie.set(n3, r3), qt.delete(n3);
  } };
}
function br(t, e2, n3, r3) {
  if (dr(n3, t), hr(r3, e2), n3.length !== r3.length) throw new Error("arrays of points and scalars must have equal length");
  const o5 = t.ZERO, s2 = tr(BigInt(n3.length)), a2 = s2 > 12 ? s2 - 3 : s2 > 4 ? s2 - 2 : s2 ? 2 : 1, u = (1 << a2) - 1, i2 = new Array(u + 1).fill(o5), D = Math.floor((e2.BITS - 1) / a2) * a2;
  let c3 = o5;
  for (let l4 = D; l4 >= 0; l4 -= a2) {
    i2.fill(o5);
    for (let w3 = 0; w3 < r3.length; w3++) {
      const h2 = r3[w3], g3 = Number(h2 >> BigInt(l4) & BigInt(u));
      i2[g3] = i2[g3].add(n3[w3]);
    }
    let p2 = o5;
    for (let w3 = i2.length - 1, h2 = o5; w3 > 0; w3--) h2 = h2.add(i2[w3]), p2 = p2.add(h2);
    if (c3 = c3.add(p2), l4 !== 0) for (let w3 = 0; w3 < a2; w3++) c3 = c3.double();
  }
  return c3;
}
function pr(t) {
  return ar(t.Fp), Ot(t, { n: "bigint", h: "bigint", Gx: "field", Gy: "field" }, { nBitLength: "isSafeInteger", nByteLength: "isSafeInteger" }), Object.freeze({ ...me(t.n, t.nBitLength), ...t, p: t.Fp.ORDER });
}
var G = BigInt(0);
var j = BigInt(1);
var yt = BigInt(2);
var wr = BigInt(8);
var Er = { zip215: true };
function gr(t) {
  const e2 = pr(t);
  return Ot(t, { hash: "function", a: "bigint", d: "bigint", randomBytes: "function" }, { adjustScalarBytes: "function", domain: "function", uvRatio: "function", mapToCurve: "function" }), Object.freeze({ ...e2 });
}
function yr(t) {
  const e2 = gr(t), { Fp: n3, n: r3, prehash: o5, hash: s2, randomBytes: a2, nByteLength: u, h: i2 } = e2, D = yt << BigInt(u * 8) - j, c3 = n3.create, l4 = _e(e2.n, e2.nBitLength), p2 = e2.uvRatio || ((y, f3) => {
    try {
      return { isValid: true, value: n3.sqrt(y * n3.inv(f3)) };
    } catch {
      return { isValid: false, value: G };
    }
  }), w3 = e2.adjustScalarBytes || ((y) => y), h2 = e2.domain || ((y, f3, b2) => {
    if (Tt("phflag", b2), f3.length || b2) throw new Error("Contexts/pre-hash are not supported");
    return y;
  });
  function g3(y, f3) {
    ft("coordinate " + y, f3, G, D);
  }
  function S(y) {
    if (!(y instanceof d3)) throw new Error("ExtendedPoint expected");
  }
  const v3 = xe((y, f3) => {
    const { ex: b2, ey: E2, ez: B } = y, C = y.is0();
    f3 == null && (f3 = C ? wr : n3.inv(B));
    const A = c3(b2 * f3), U = c3(E2 * f3), _ = c3(B * f3);
    if (C) return { x: G, y: j };
    if (_ !== j) throw new Error("invZ was invalid");
    return { x: A, y: U };
  }), L2 = xe((y) => {
    const { a: f3, d: b2 } = e2;
    if (y.is0()) throw new Error("bad point: ZERO");
    const { ex: E2, ey: B, ez: C, et: A } = y, U = c3(E2 * E2), _ = c3(B * B), T2 = c3(C * C), $ = c3(T2 * T2), R = c3(U * f3), V = c3(T2 * c3(R + _)), Y = c3($ + c3(b2 * c3(U * _)));
    if (V !== Y) throw new Error("bad point: equation left != right (1)");
    const Z = c3(E2 * B), X = c3(C * A);
    if (Z !== X) throw new Error("bad point: equation left != right (2)");
    return true;
  });
  class d3 {
    constructor(f3, b2, E2, B) {
      this.ex = f3, this.ey = b2, this.ez = E2, this.et = B, g3("x", f3), g3("y", b2), g3("z", E2), g3("t", B), Object.freeze(this);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static fromAffine(f3) {
      if (f3 instanceof d3) throw new Error("extended point not allowed");
      const { x: b2, y: E2 } = f3 || {};
      return g3("x", b2), g3("y", E2), new d3(b2, E2, j, c3(b2 * E2));
    }
    static normalizeZ(f3) {
      const b2 = n3.invertBatch(f3.map((E2) => E2.ez));
      return f3.map((E2, B) => E2.toAffine(b2[B])).map(d3.fromAffine);
    }
    static msm(f3, b2) {
      return br(d3, l4, f3, b2);
    }
    _setWindowSize(f3) {
      q.setWindowSize(this, f3);
    }
    assertValidity() {
      L2(this);
    }
    equals(f3) {
      S(f3);
      const { ex: b2, ey: E2, ez: B } = this, { ex: C, ey: A, ez: U } = f3, _ = c3(b2 * U), T2 = c3(C * B), $ = c3(E2 * U), R = c3(A * B);
      return _ === T2 && $ === R;
    }
    is0() {
      return this.equals(d3.ZERO);
    }
    negate() {
      return new d3(c3(-this.ex), this.ey, this.ez, c3(-this.et));
    }
    double() {
      const { a: f3 } = e2, { ex: b2, ey: E2, ez: B } = this, C = c3(b2 * b2), A = c3(E2 * E2), U = c3(yt * c3(B * B)), _ = c3(f3 * C), T2 = b2 + E2, $ = c3(c3(T2 * T2) - C - A), R = _ + A, V = R - U, Y = _ - A, Z = c3($ * V), X = c3(R * Y), et = c3($ * Y), pt = c3(V * R);
      return new d3(Z, X, pt, et);
    }
    add(f3) {
      S(f3);
      const { a: b2, d: E2 } = e2, { ex: B, ey: C, ez: A, et: U } = this, { ex: _, ey: T2, ez: $, et: R } = f3;
      if (b2 === BigInt(-1)) {
        const re = c3((C - B) * (T2 + _)), oe = c3((C + B) * (T2 - _)), mt = c3(oe - re);
        if (mt === G) return this.double();
        const se = c3(A * yt * R), ie = c3(U * yt * $), ue = ie + se, ce = oe + re, ae = ie - se, Dn = c3(ue * mt), dn = c3(ce * ae), hn = c3(ue * ae), ln = c3(mt * ce);
        return new d3(Dn, dn, ln, hn);
      }
      const V = c3(B * _), Y = c3(C * T2), Z = c3(U * E2 * R), X = c3(A * $), et = c3((B + C) * (_ + T2) - V - Y), pt = X - Z, ee = X + Z, ne = c3(Y - b2 * V), un = c3(et * pt), cn = c3(ee * ne), an = c3(et * ne), fn = c3(pt * ee);
      return new d3(un, cn, fn, an);
    }
    subtract(f3) {
      return this.add(f3.negate());
    }
    wNAF(f3) {
      return q.wNAFCached(this, f3, d3.normalizeZ);
    }
    multiply(f3) {
      const b2 = f3;
      ft("scalar", b2, j, r3);
      const { p: E2, f: B } = this.wNAF(b2);
      return d3.normalizeZ([E2, B])[0];
    }
    multiplyUnsafe(f3, b2 = d3.ZERO) {
      const E2 = f3;
      return ft("scalar", E2, G, r3), E2 === G ? F : this.is0() || E2 === j ? this : q.wNAFCachedUnsafe(this, E2, d3.normalizeZ, b2);
    }
    isSmallOrder() {
      return this.multiplyUnsafe(i2).is0();
    }
    isTorsionFree() {
      return q.unsafeLadder(this, r3).is0();
    }
    toAffine(f3) {
      return v3(this, f3);
    }
    clearCofactor() {
      const { h: f3 } = e2;
      return f3 === j ? this : this.multiplyUnsafe(f3);
    }
    static fromHex(f3, b2 = false) {
      const { d: E2, a: B } = e2, C = n3.BYTES;
      f3 = W("pointHex", f3, C), Tt("zip215", b2);
      const A = f3.slice(), U = f3[C - 1];
      A[C - 1] = U & -129;
      const _ = Et(A), T2 = b2 ? D : n3.ORDER;
      ft("pointHex.y", _, G, T2);
      const $ = c3(_ * _), R = c3($ - j), V = c3(E2 * $ - B);
      let { isValid: Y, value: Z } = p2(R, V);
      if (!Y) throw new Error("Point.fromHex: invalid y coordinate");
      const X = (Z & j) === j, et = (U & 128) !== 0;
      if (!b2 && Z === G && et) throw new Error("Point.fromHex: x=0 and x_0=1");
      return et !== X && (Z = c3(-Z)), d3.fromAffine({ x: Z, y: _ });
    }
    static fromPrivateKey(f3) {
      return O2(f3).point;
    }
    toRawBytes() {
      const { x: f3, y: b2 } = this.toAffine(), E2 = Nt(b2, n3.BYTES);
      return E2[E2.length - 1] |= f3 & j ? 128 : 0, E2;
    }
    toHex() {
      return Ft(this.toRawBytes());
    }
  }
  d3.BASE = new d3(e2.Gx, e2.Gy, j, c3(e2.Gx * e2.Gy)), d3.ZERO = new d3(G, j, j, G);
  const { BASE: m2, ZERO: F } = d3, q = lr(d3, u * 8);
  function z(y) {
    return H(y, r3);
  }
  function I(y) {
    return z(Et(y));
  }
  function O2(y) {
    const f3 = n3.BYTES;
    y = W("private key", y, f3);
    const b2 = W("hashed private key", s2(y), 2 * f3), E2 = w3(b2.slice(0, f3)), B = b2.slice(f3, 2 * f3), C = I(E2), A = m2.multiply(C), U = A.toRawBytes();
    return { head: E2, prefix: B, scalar: C, point: A, pointBytes: U };
  }
  function ot(y) {
    return O2(y).pointBytes;
  }
  function tt(y = new Uint8Array(), ...f3) {
    const b2 = ye(...f3);
    return I(s2(h2(b2, W("context", y), !!o5)));
  }
  function st(y, f3, b2 = {}) {
    y = W("message", y), o5 && (y = o5(y));
    const { prefix: E2, scalar: B, pointBytes: C } = O2(f3), A = tt(b2.context, E2, y), U = m2.multiply(A).toRawBytes(), _ = tt(b2.context, U, C, y), T2 = z(A + _ * B);
    ft("signature.s", T2, G, r3);
    const $ = ye(U, Nt(T2, n3.BYTES));
    return W("result", $, n3.BYTES * 2);
  }
  const at = Er;
  function Ct(y, f3, b2, E2 = at) {
    const { context: B, zip215: C } = E2, A = n3.BYTES;
    y = W("signature", y, 2 * A), f3 = W("message", f3), b2 = W("publicKey", b2, A), C !== void 0 && Tt("zip215", C), o5 && (f3 = o5(f3));
    const U = Et(y.slice(A, 2 * A));
    let _, T2, $;
    try {
      _ = d3.fromHex(b2, C), T2 = d3.fromHex(y.slice(0, A), C), $ = m2.multiplyUnsafe(U);
    } catch {
      return false;
    }
    if (!C && _.isSmallOrder()) return false;
    const R = tt(B, T2.toRawBytes(), _.toRawBytes(), f3);
    return T2.add(_.multiplyUnsafe(R)).subtract($).clearCofactor().equals(d3.ZERO);
  }
  return m2._setWindowSize(8), { CURVE: e2, getPublicKey: ot, sign: st, verify: Ct, ExtendedPoint: d3, utils: { getExtendedPublicKey: O2, randomPrivateKey: () => a2(n3.BYTES), precompute(y = 8, f3 = d3.BASE) {
    return f3._setWindowSize(y), f3.multiply(BigInt(3)), f3;
  } } };
}
BigInt(0), BigInt(1);
var kt = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
var Ue = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
BigInt(0);
var xr = BigInt(1);
var Te = BigInt(2);
BigInt(3);
var Br = BigInt(5);
var Cr = BigInt(8);
function Ar(t) {
  const e2 = BigInt(10), n3 = BigInt(20), r3 = BigInt(40), o5 = BigInt(80), s2 = kt, u = t * t % s2 * t % s2, i2 = J(u, Te, s2) * u % s2, D = J(i2, xr, s2) * t % s2, c3 = J(D, Br, s2) * D % s2, l4 = J(c3, e2, s2) * c3 % s2, p2 = J(l4, n3, s2) * l4 % s2, w3 = J(p2, r3, s2) * p2 % s2, h2 = J(w3, o5, s2) * w3 % s2, g3 = J(h2, o5, s2) * w3 % s2, S = J(g3, e2, s2) * c3 % s2;
  return { pow_p_5_8: J(S, Te, s2) * t % s2, b2: u };
}
function mr(t) {
  return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;
}
function _r(t, e2) {
  const n3 = kt, r3 = H(e2 * e2 * e2, n3), o5 = H(r3 * r3 * e2, n3), s2 = Ar(t * o5).pow_p_5_8;
  let a2 = H(t * r3 * s2, n3);
  const u = H(e2 * a2 * a2, n3), i2 = a2, D = H(a2 * Ue, n3), c3 = u === t, l4 = u === H(-t, n3), p2 = u === H(-t * Ue, n3);
  return c3 && (a2 = i2), (l4 || p2) && (a2 = D), ur(a2, n3) && (a2 = H(-a2, n3)), { isValid: c3 || l4, value: a2 };
}
var Sr = (() => _e(kt, void 0, true))();
var vr = (() => ({ a: BigInt(-1), d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"), Fp: Sr, n: BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"), h: Cr, Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"), Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"), hash: Kn, randomBytes: he, adjustScalarBytes: mr, uvRatio: _r }))();
var Rt = (() => yr(vr))();
var jt = "EdDSA";
var Zt = "JWT";
var ut = ".";
var Dt = "base64url";
var Gt = "utf8";
var xt = "utf8";
var Vt = ":";
var Yt = "did";
var Jt = "key";
var dt = "base58btc";
var Kt = "z";
var Wt = "K36";
var Ne = 32;
function Xt(t) {
  return globalThis.Buffer != null ? new Uint8Array(t.buffer, t.byteOffset, t.byteLength) : t;
}
function Le(t = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? Xt(globalThis.Buffer.allocUnsafe(t)) : new Uint8Array(t);
}
function Oe(t, e2) {
  e2 || (e2 = t.reduce((o5, s2) => o5 + s2.length, 0));
  const n3 = Le(e2);
  let r3 = 0;
  for (const o5 of t) n3.set(o5, r3), r3 += o5.length;
  return Xt(n3);
}
function Ir(t, e2) {
  if (t.length >= 255) throw new TypeError("Alphabet too long");
  for (var n3 = new Uint8Array(256), r3 = 0; r3 < n3.length; r3++) n3[r3] = 255;
  for (var o5 = 0; o5 < t.length; o5++) {
    var s2 = t.charAt(o5), a2 = s2.charCodeAt(0);
    if (n3[a2] !== 255) throw new TypeError(s2 + " is ambiguous");
    n3[a2] = o5;
  }
  var u = t.length, i2 = t.charAt(0), D = Math.log(u) / Math.log(256), c3 = Math.log(256) / Math.log(u);
  function l4(h2) {
    if (h2 instanceof Uint8Array || (ArrayBuffer.isView(h2) ? h2 = new Uint8Array(h2.buffer, h2.byteOffset, h2.byteLength) : Array.isArray(h2) && (h2 = Uint8Array.from(h2))), !(h2 instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (h2.length === 0) return "";
    for (var g3 = 0, S = 0, v3 = 0, L2 = h2.length; v3 !== L2 && h2[v3] === 0; ) v3++, g3++;
    for (var d3 = (L2 - v3) * c3 + 1 >>> 0, m2 = new Uint8Array(d3); v3 !== L2; ) {
      for (var F = h2[v3], q = 0, z = d3 - 1; (F !== 0 || q < S) && z !== -1; z--, q++) F += 256 * m2[z] >>> 0, m2[z] = F % u >>> 0, F = F / u >>> 0;
      if (F !== 0) throw new Error("Non-zero carry");
      S = q, v3++;
    }
    for (var I = d3 - S; I !== d3 && m2[I] === 0; ) I++;
    for (var O2 = i2.repeat(g3); I < d3; ++I) O2 += t.charAt(m2[I]);
    return O2;
  }
  function p2(h2) {
    if (typeof h2 != "string") throw new TypeError("Expected String");
    if (h2.length === 0) return new Uint8Array();
    var g3 = 0;
    if (h2[g3] !== " ") {
      for (var S = 0, v3 = 0; h2[g3] === i2; ) S++, g3++;
      for (var L2 = (h2.length - g3) * D + 1 >>> 0, d3 = new Uint8Array(L2); h2[g3]; ) {
        var m2 = n3[h2.charCodeAt(g3)];
        if (m2 === 255) return;
        for (var F = 0, q = L2 - 1; (m2 !== 0 || F < v3) && q !== -1; q--, F++) m2 += u * d3[q] >>> 0, d3[q] = m2 % 256 >>> 0, m2 = m2 / 256 >>> 0;
        if (m2 !== 0) throw new Error("Non-zero carry");
        v3 = F, g3++;
      }
      if (h2[g3] !== " ") {
        for (var z = L2 - v3; z !== L2 && d3[z] === 0; ) z++;
        for (var I = new Uint8Array(S + (L2 - z)), O2 = S; z !== L2; ) I[O2++] = d3[z++];
        return I;
      }
    }
  }
  function w3(h2) {
    var g3 = p2(h2);
    if (g3) return g3;
    throw new Error(`Non-${e2} character`);
  }
  return { encode: l4, decodeUnsafe: p2, decode: w3 };
}
var Ur = Ir;
var Tr = Ur;
var He = (t) => {
  if (t instanceof Uint8Array && t.constructor.name === "Uint8Array") return t;
  if (t instanceof ArrayBuffer) return new Uint8Array(t);
  if (ArrayBuffer.isView(t)) return new Uint8Array(t.buffer, t.byteOffset, t.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var Fr = (t) => new TextEncoder().encode(t);
var Nr = (t) => new TextDecoder().decode(t);
var Lr = class {
  constructor(e2, n3, r3) {
    this.name = e2, this.prefix = n3, this.baseEncode = r3;
  }
  encode(e2) {
    if (e2 instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e2)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var Or = class {
  constructor(e2, n3, r3) {
    if (this.name = e2, this.prefix = n3, n3.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
    this.prefixCodePoint = n3.codePointAt(0), this.baseDecode = r3;
  }
  decode(e2) {
    if (typeof e2 == "string") {
      if (e2.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e2)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e2.slice(this.prefix.length));
    } else throw Error("Can only multibase decode strings");
  }
  or(e2) {
    return ze(this, e2);
  }
};
var Hr = class {
  constructor(e2) {
    this.decoders = e2;
  }
  or(e2) {
    return ze(this, e2);
  }
  decode(e2) {
    const n3 = e2[0], r3 = this.decoders[n3];
    if (r3) return r3.decode(e2);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e2)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var ze = (t, e2) => new Hr({ ...t.decoders || { [t.prefix]: t }, ...e2.decoders || { [e2.prefix]: e2 } });
var zr = class {
  constructor(e2, n3, r3, o5) {
    this.name = e2, this.prefix = n3, this.baseEncode = r3, this.baseDecode = o5, this.encoder = new Lr(e2, n3, r3), this.decoder = new Or(e2, n3, o5);
  }
  encode(e2) {
    return this.encoder.encode(e2);
  }
  decode(e2) {
    return this.decoder.decode(e2);
  }
};
var Bt = ({ name: t, prefix: e2, encode: n3, decode: r3 }) => new zr(t, e2, n3, r3);
var ht = ({ prefix: t, name: e2, alphabet: n3 }) => {
  const { encode: r3, decode: o5 } = Tr(n3, e2);
  return Bt({ prefix: t, name: e2, encode: r3, decode: (s2) => He(o5(s2)) });
};
var Mr = (t, e2, n3, r3) => {
  const o5 = {};
  for (let c3 = 0; c3 < e2.length; ++c3) o5[e2[c3]] = c3;
  let s2 = t.length;
  for (; t[s2 - 1] === "="; ) --s2;
  const a2 = new Uint8Array(s2 * n3 / 8 | 0);
  let u = 0, i2 = 0, D = 0;
  for (let c3 = 0; c3 < s2; ++c3) {
    const l4 = o5[t[c3]];
    if (l4 === void 0) throw new SyntaxError(`Non-${r3} character`);
    i2 = i2 << n3 | l4, u += n3, u >= 8 && (u -= 8, a2[D++] = 255 & i2 >> u);
  }
  if (u >= n3 || 255 & i2 << 8 - u) throw new SyntaxError("Unexpected end of data");
  return a2;
};
var qr = (t, e2, n3) => {
  const r3 = e2[e2.length - 1] === "=", o5 = (1 << n3) - 1;
  let s2 = "", a2 = 0, u = 0;
  for (let i2 = 0; i2 < t.length; ++i2) for (u = u << 8 | t[i2], a2 += 8; a2 > n3; ) a2 -= n3, s2 += e2[o5 & u >> a2];
  if (a2 && (s2 += e2[o5 & u << n3 - a2]), r3) for (; s2.length * n3 & 7; ) s2 += "=";
  return s2;
};
var k = ({ name: t, prefix: e2, bitsPerChar: n3, alphabet: r3 }) => Bt({ prefix: e2, name: t, encode(o5) {
  return qr(o5, r3, n3);
}, decode(o5) {
  return Mr(o5, r3, n3, t);
} });
var $r = Bt({ prefix: "\0", name: "identity", encode: (t) => Nr(t), decode: (t) => Fr(t) });
var kr = Object.freeze({ __proto__: null, identity: $r });
var Rr = k({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var jr = Object.freeze({ __proto__: null, base2: Rr });
var Zr = k({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var Gr = Object.freeze({ __proto__: null, base8: Zr });
var Vr = ht({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Yr = Object.freeze({ __proto__: null, base10: Vr });
var Jr = k({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Kr = k({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Wr = Object.freeze({ __proto__: null, base16: Jr, base16upper: Kr });
var Xr = k({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Pr = k({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var Qr = k({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var to = k({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var eo = k({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var no = k({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var ro = k({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var oo = k({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var so = k({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var io = Object.freeze({ __proto__: null, base32: Xr, base32upper: Pr, base32pad: Qr, base32padupper: to, base32hex: eo, base32hexupper: no, base32hexpad: ro, base32hexpadupper: oo, base32z: so });
var uo = ht({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var co = ht({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var ao = Object.freeze({ __proto__: null, base36: uo, base36upper: co });
var fo = ht({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Do = ht({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var ho = Object.freeze({ __proto__: null, base58btc: fo, base58flickr: Do });
var lo = k({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var bo = k({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var po = k({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var wo = k({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Eo = Object.freeze({ __proto__: null, base64: lo, base64pad: bo, base64url: po, base64urlpad: wo });
var Me = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var go = Me.reduce((t, e2, n3) => (t[n3] = e2, t), []);
var yo = Me.reduce((t, e2, n3) => (t[e2.codePointAt(0)] = n3, t), []);
function xo(t) {
  return t.reduce((e2, n3) => (e2 += go[n3], e2), "");
}
function Bo(t) {
  const e2 = [];
  for (const n3 of t) {
    const r3 = yo[n3.codePointAt(0)];
    if (r3 === void 0) throw new Error(`Non-base256emoji character: ${n3}`);
    e2.push(r3);
  }
  return new Uint8Array(e2);
}
var Co = Bt({ prefix: "🚀", name: "base256emoji", encode: xo, decode: Bo });
var Ao = Object.freeze({ __proto__: null, base256emoji: Co });
var mo = $e;
var qe = 128;
var _o = 127;
var So = ~_o;
var vo = Math.pow(2, 31);
function $e(t, e2, n3) {
  e2 = e2 || [], n3 = n3 || 0;
  for (var r3 = n3; t >= vo; ) e2[n3++] = t & 255 | qe, t /= 128;
  for (; t & So; ) e2[n3++] = t & 255 | qe, t >>>= 7;
  return e2[n3] = t | 0, $e.bytes = n3 - r3 + 1, e2;
}
var Io = Pt;
var Uo = 128;
var ke = 127;
function Pt(t, r3) {
  var n3 = 0, r3 = r3 || 0, o5 = 0, s2 = r3, a2, u = t.length;
  do {
    if (s2 >= u) throw Pt.bytes = 0, new RangeError("Could not decode varint");
    a2 = t[s2++], n3 += o5 < 28 ? (a2 & ke) << o5 : (a2 & ke) * Math.pow(2, o5), o5 += 7;
  } while (a2 >= Uo);
  return Pt.bytes = s2 - r3, n3;
}
var To = Math.pow(2, 7);
var Fo = Math.pow(2, 14);
var No = Math.pow(2, 21);
var Lo = Math.pow(2, 28);
var Oo = Math.pow(2, 35);
var Ho = Math.pow(2, 42);
var zo = Math.pow(2, 49);
var Mo = Math.pow(2, 56);
var qo = Math.pow(2, 63);
var $o = function(t) {
  return t < To ? 1 : t < Fo ? 2 : t < No ? 3 : t < Lo ? 4 : t < Oo ? 5 : t < Ho ? 6 : t < zo ? 7 : t < Mo ? 8 : t < qo ? 9 : 10;
};
var ko = { encode: mo, decode: Io, encodingLength: $o };
var Re = ko;
var je = (t, e2, n3 = 0) => (Re.encode(t, e2, n3), e2);
var Ze = (t) => Re.encodingLength(t);
var Qt = (t, e2) => {
  const n3 = e2.byteLength, r3 = Ze(t), o5 = r3 + Ze(n3), s2 = new Uint8Array(o5 + n3);
  return je(t, s2, 0), je(n3, s2, r3), s2.set(e2, o5), new Ro(t, n3, e2, s2);
};
var Ro = class {
  constructor(e2, n3, r3, o5) {
    this.code = e2, this.size = n3, this.digest = r3, this.bytes = o5;
  }
};
var Ge = ({ name: t, code: e2, encode: n3 }) => new jo(t, e2, n3);
var jo = class {
  constructor(e2, n3, r3) {
    this.name = e2, this.code = n3, this.encode = r3;
  }
  digest(e2) {
    if (e2 instanceof Uint8Array) {
      const n3 = this.encode(e2);
      return n3 instanceof Uint8Array ? Qt(this.code, n3) : n3.then((r3) => Qt(this.code, r3));
    } else throw Error("Unknown type, must be binary type");
  }
};
var Ve = (t) => async (e2) => new Uint8Array(await crypto.subtle.digest(t, e2));
var Zo = Ge({ name: "sha2-256", code: 18, encode: Ve("SHA-256") });
var Go = Ge({ name: "sha2-512", code: 19, encode: Ve("SHA-512") });
var Vo = Object.freeze({ __proto__: null, sha256: Zo, sha512: Go });
var Ye = 0;
var Yo = "identity";
var Je = He;
var Jo = (t) => Qt(Ye, Je(t));
var Ko = { code: Ye, name: Yo, encode: Je, digest: Jo };
var Wo = Object.freeze({ __proto__: null, identity: Ko });
new TextEncoder(), new TextDecoder();
var Ke = { ...kr, ...jr, ...Gr, ...Yr, ...Wr, ...io, ...ao, ...ho, ...Eo, ...Ao };
({ ...Vo, ...Wo });
function We(t, e2, n3, r3) {
  return { name: t, prefix: e2, encoder: { name: t, prefix: e2, encode: n3 }, decoder: { decode: r3 } };
}
var Xe = We("utf8", "u", (t) => "u" + new TextDecoder("utf8").decode(t), (t) => new TextEncoder().encode(t.substring(1)));
var te = We("ascii", "a", (t) => {
  let e2 = "a";
  for (let n3 = 0; n3 < t.length; n3++) e2 += String.fromCharCode(t[n3]);
  return e2;
}, (t) => {
  t = t.substring(1);
  const e2 = Le(t.length);
  for (let n3 = 0; n3 < t.length; n3++) e2[n3] = t.charCodeAt(n3);
  return e2;
});
var Pe = { utf8: Xe, "utf-8": Xe, hex: Ke.base16, latin1: te, ascii: te, binary: te, ...Ke };
function ct(t, e2 = "utf8") {
  const n3 = Pe[e2];
  if (!n3) throw new Error(`Unsupported encoding "${e2}"`);
  return (e2 === "utf8" || e2 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(t.buffer, t.byteOffset, t.byteLength).toString("utf8") : n3.encoder.encode(t).substring(1);
}
function rt(t, e2 = "utf8") {
  const n3 = Pe[e2];
  if (!n3) throw new Error(`Unsupported encoding "${e2}"`);
  return (e2 === "utf8" || e2 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? Xt(globalThis.Buffer.from(t, "utf-8")) : n3.decoder.decode(`${n3.prefix}${t}`);
}
function lt(t) {
  return safeJsonParse(ct(rt(t, Dt), Gt));
}
function bt(t) {
  return ct(rt(safeJsonStringify(t), Gt), Dt);
}
function Qe(t) {
  const e2 = rt(Wt, dt), n3 = Kt + ct(Oe([e2, t]), dt);
  return [Yt, Jt, n3].join(Vt);
}
function en(t) {
  return ct(t, Dt);
}
function nn(t) {
  return rt(t, Dt);
}
function rn(t) {
  return rt([bt(t.header), bt(t.payload)].join(ut), xt);
}
function on(t) {
  return [bt(t.header), bt(t.payload), en(t.signature)].join(ut);
}
function sn(t) {
  const e2 = t.split(ut), n3 = lt(e2[0]), r3 = lt(e2[1]), o5 = nn(e2[2]), s2 = rt(e2.slice(0, 2).join(ut), xt);
  return { header: n3, payload: r3, signature: o5, data: s2 };
}
function Po(t = he(Ne)) {
  const e2 = Rt.getPublicKey(t);
  return { secretKey: Oe([t, e2]), publicKey: e2 };
}
async function Qo(t, e2, n3, r3, o5 = (0, import_time.fromMiliseconds)(Date.now())) {
  const s2 = { alg: jt, typ: Zt }, a2 = Qe(r3.publicKey), u = o5 + n3, i2 = { iss: a2, sub: t, aud: e2, iat: o5, exp: u }, D = rn({ header: s2, payload: i2 }), c3 = Rt.sign(D, r3.secretKey.slice(0, 32));
  return on({ header: s2, payload: i2, signature: c3 });
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js
var PARSE_ERROR = "PARSE_ERROR";
var INVALID_REQUEST = "INVALID_REQUEST";
var METHOD_NOT_FOUND = "METHOD_NOT_FOUND";
var INVALID_PARAMS = "INVALID_PARAMS";
var INTERNAL_ERROR = "INTERNAL_ERROR";
var SERVER_ERROR = "SERVER_ERROR";
var RESERVED_ERROR_CODES = [-32700, -32600, -32601, -32602, -32603];
var SERVER_ERROR_CODE_RANGE = [-32e3, -32099];
var STANDARD_ERROR_MAP = {
  [PARSE_ERROR]: { code: -32700, message: "Parse error" },
  [INVALID_REQUEST]: { code: -32600, message: "Invalid Request" },
  [METHOD_NOT_FOUND]: { code: -32601, message: "Method not found" },
  [INVALID_PARAMS]: { code: -32602, message: "Invalid params" },
  [INTERNAL_ERROR]: { code: -32603, message: "Internal error" },
  [SERVER_ERROR]: { code: -32e3, message: "Server error" }
};
var DEFAULT_ERROR = SERVER_ERROR;

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js
function isServerErrorCode(code) {
  return code <= SERVER_ERROR_CODE_RANGE[0] && code >= SERVER_ERROR_CODE_RANGE[1];
}
function isReservedErrorCode(code) {
  return RESERVED_ERROR_CODES.includes(code);
}
function isValidErrorCode(code) {
  return typeof code === "number";
}
function getError(type) {
  if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return STANDARD_ERROR_MAP[type];
}
function getErrorByCode(code) {
  const match = Object.values(STANDARD_ERROR_MAP).find((e2) => e2.code === code);
  if (!match) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return match;
}
function validateJsonRpcError(response) {
  if (typeof response.error.code === "undefined") {
    return { valid: false, error: "Missing code for JSON-RPC error" };
  }
  if (typeof response.error.message === "undefined") {
    return { valid: false, error: "Missing message for JSON-RPC error" };
  }
  if (!isValidErrorCode(response.error.code)) {
    return {
      valid: false,
      error: `Invalid error code type for JSON-RPC: ${response.error.code}`
    };
  }
  if (isReservedErrorCode(response.error.code)) {
    const error = getErrorByCode(response.error.code);
    if (error.message !== STANDARD_ERROR_MAP[DEFAULT_ERROR].message && response.error.message === error.message) {
      return {
        valid: false,
        error: `Invalid error code message for JSON-RPC: ${response.error.code}`
      };
    }
  }
  return { valid: true };
}
function parseConnectionError(e2, url, type) {
  return e2.message.includes("getaddrinfo ENOTFOUND") || e2.message.includes("connect ECONNREFUSED") ? new Error(`Unavailable ${type} RPC url at ${url}`) : e2;
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js
function payloadId(entropy = 3) {
  const date = Date.now() * Math.pow(10, entropy);
  const extra = Math.floor(Math.random() * Math.pow(10, entropy));
  return date + extra;
}
function getBigIntRpcId(entropy = 6) {
  return BigInt(payloadId(entropy));
}
function formatJsonRpcRequest(method, params, id) {
  return {
    id: id || payloadId(),
    jsonrpc: "2.0",
    method,
    params
  };
}
function formatJsonRpcResult(id, result) {
  return {
    id,
    jsonrpc: "2.0",
    result
  };
}
function formatJsonRpcError(id, error, data) {
  return {
    id,
    jsonrpc: "2.0",
    error: formatErrorMessage(error, data)
  };
}
function formatErrorMessage(error, data) {
  if (typeof error === "undefined") {
    return getError(INTERNAL_ERROR);
  }
  if (typeof error === "string") {
    error = Object.assign(Object.assign({}, getError(SERVER_ERROR)), { message: error });
  }
  if (typeof data !== "undefined") {
    error.data = data;
  }
  if (isReservedErrorCode(error.code)) {
    error = getErrorByCode(error.code);
  }
  return error;
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  DEFAULT_ERROR: () => DEFAULT_ERROR,
  IBaseJsonRpcProvider: () => n,
  IEvents: () => e,
  IJsonRpcConnection: () => o,
  IJsonRpcProvider: () => r,
  INTERNAL_ERROR: () => INTERNAL_ERROR,
  INVALID_PARAMS: () => INVALID_PARAMS,
  INVALID_REQUEST: () => INVALID_REQUEST,
  METHOD_NOT_FOUND: () => METHOD_NOT_FOUND,
  PARSE_ERROR: () => PARSE_ERROR,
  RESERVED_ERROR_CODES: () => RESERVED_ERROR_CODES,
  SERVER_ERROR: () => SERVER_ERROR,
  SERVER_ERROR_CODE_RANGE: () => SERVER_ERROR_CODE_RANGE,
  STANDARD_ERROR_MAP: () => STANDARD_ERROR_MAP,
  formatErrorMessage: () => formatErrorMessage,
  formatJsonRpcError: () => formatJsonRpcError,
  formatJsonRpcRequest: () => formatJsonRpcRequest,
  formatJsonRpcResult: () => formatJsonRpcResult,
  getBigIntRpcId: () => getBigIntRpcId,
  getError: () => getError,
  getErrorByCode: () => getErrorByCode,
  isHttpUrl: () => isHttpUrl,
  isJsonRpcError: () => isJsonRpcError,
  isJsonRpcPayload: () => isJsonRpcPayload,
  isJsonRpcRequest: () => isJsonRpcRequest,
  isJsonRpcResponse: () => isJsonRpcResponse,
  isJsonRpcResult: () => isJsonRpcResult,
  isJsonRpcValidationInvalid: () => isJsonRpcValidationInvalid,
  isLocalhostUrl: () => isLocalhostUrl,
  isNodeJs: () => isNodeJs,
  isReservedErrorCode: () => isReservedErrorCode,
  isServerErrorCode: () => isServerErrorCode,
  isValidDefaultRoute: () => isValidDefaultRoute,
  isValidErrorCode: () => isValidErrorCode,
  isValidLeadingWildcardRoute: () => isValidLeadingWildcardRoute,
  isValidRoute: () => isValidRoute,
  isValidTrailingWildcardRoute: () => isValidTrailingWildcardRoute,
  isValidWildcardRoute: () => isValidWildcardRoute,
  isWsUrl: () => isWsUrl,
  parseConnectionError: () => parseConnectionError,
  payloadId: () => payloadId,
  validateJsonRpcError: () => validateJsonRpcError
});

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js
var env_exports = {};
__export(env_exports, {
  isNodeJs: () => isNodeJs
});
var import_environment = __toESM(require_cjs2());
__reExport(env_exports, __toESM(require_cjs2()));
var isNodeJs = import_environment.isNode;

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js
__reExport(esm_exports, env_exports);

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js
function isValidRoute(route) {
  if (route.includes("*")) {
    return isValidWildcardRoute(route);
  }
  if (/\W/g.test(route)) {
    return false;
  }
  return true;
}
function isValidDefaultRoute(route) {
  return route === "*";
}
function isValidWildcardRoute(route) {
  if (isValidDefaultRoute(route)) {
    return true;
  }
  if (!route.includes("*")) {
    return false;
  }
  if (route.split("*").length !== 2) {
    return false;
  }
  if (route.split("*").filter((x2) => x2.trim() === "").length !== 1) {
    return false;
  }
  return true;
}
function isValidLeadingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[0].trim();
}
function isValidTrailingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[1].trim();
}

// node_modules/@walletconnect/jsonrpc-types/dist/index.es.js
var e = class {
};
var o = class extends e {
  constructor(c3) {
    super();
  }
};
var n = class extends e {
  constructor() {
    super();
  }
};
var r = class extends n {
  constructor(c3) {
    super();
  }
};

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js
var HTTP_REGEX = "^https?:";
var WS_REGEX = "^wss?:";
function getUrlProtocol(url) {
  const matches = url.match(new RegExp(/^\w+:/, "gi"));
  if (!matches || !matches.length)
    return;
  return matches[0];
}
function matchRegexProtocol(url, regex) {
  const protocol = getUrlProtocol(url);
  if (typeof protocol === "undefined")
    return false;
  return new RegExp(regex).test(protocol);
}
function isHttpUrl(url) {
  return matchRegexProtocol(url, HTTP_REGEX);
}
function isWsUrl(url) {
  return matchRegexProtocol(url, WS_REGEX);
}
function isLocalhostUrl(url) {
  return new RegExp("wss?://localhost(:d{2,5})?").test(url);
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js
function isJsonRpcPayload(payload) {
  return typeof payload === "object" && "id" in payload && "jsonrpc" in payload && payload.jsonrpc === "2.0";
}
function isJsonRpcRequest(payload) {
  return isJsonRpcPayload(payload) && "method" in payload;
}
function isJsonRpcResponse(payload) {
  return isJsonRpcPayload(payload) && (isJsonRpcResult(payload) || isJsonRpcError(payload));
}
function isJsonRpcResult(payload) {
  return "result" in payload;
}
function isJsonRpcError(payload) {
  return "error" in payload;
}
function isJsonRpcValidationInvalid(validation) {
  return "error" in validation && validation.valid === false;
}

// node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js
var import_events = __toESM(require_events());
var o2 = class extends r {
  constructor(t) {
    super(t), this.events = new import_events.EventEmitter(), this.hasRegisteredEventListeners = false, this.connection = this.setConnection(t), this.connection.connected && this.registerEventListeners();
  }
  async connect(t = this.connection) {
    await this.open(t);
  }
  async disconnect() {
    await this.close();
  }
  on(t, e2) {
    this.events.on(t, e2);
  }
  once(t, e2) {
    this.events.once(t, e2);
  }
  off(t, e2) {
    this.events.off(t, e2);
  }
  removeListener(t, e2) {
    this.events.removeListener(t, e2);
  }
  async request(t, e2) {
    return this.requestStrict(formatJsonRpcRequest(t.method, t.params || [], t.id || getBigIntRpcId().toString()), e2);
  }
  async requestStrict(t, e2) {
    return new Promise(async (i2, s2) => {
      if (!this.connection.connected) try {
        await this.open();
      } catch (n3) {
        s2(n3);
      }
      this.events.on(`${t.id}`, (n3) => {
        isJsonRpcError(n3) ? s2(n3.error) : i2(n3.result);
      });
      try {
        await this.connection.send(t, e2);
      } catch (n3) {
        s2(n3);
      }
    });
  }
  setConnection(t = this.connection) {
    return t;
  }
  onPayload(t) {
    this.events.emit("payload", t), isJsonRpcResponse(t) ? this.events.emit(`${t.id}`, t) : this.events.emit("message", { type: t.method, data: t.params });
  }
  onClose(t) {
    t && t.code === 3e3 && this.events.emit("error", new Error(`WebSocket connection closed abnormally with code: ${t.code} ${t.reason ? `(${t.reason})` : ""}`)), this.events.emit("disconnect");
  }
  async open(t = this.connection) {
    this.connection === t && this.connection.connected || (this.connection.connected && this.close(), typeof t == "string" && (await this.connection.open(t), t = this.connection), this.connection = this.setConnection(t), await this.connection.open(), this.registerEventListeners(), this.events.emit("connect"));
  }
  async close() {
    await this.connection.close();
  }
  registerEventListeners() {
    this.hasRegisteredEventListeners || (this.connection.on("payload", (t) => this.onPayload(t)), this.connection.on("close", (t) => this.onClose(t)), this.connection.on("error", (t) => this.events.emit("error", t)), this.connection.on("register_error", (t) => this.onClose()), this.hasRegisteredEventListeners = true);
  }
};

// node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js
var import_events2 = __toESM(require_events());
var import_cross_fetch = __toESM(require_browser_ponyfill());
var P2 = Object.defineProperty;
var w = Object.defineProperties;
var E = Object.getOwnPropertyDescriptors;
var c2 = Object.getOwnPropertySymbols;
var L = Object.prototype.hasOwnProperty;
var O = Object.prototype.propertyIsEnumerable;
var l = (r3, t, e2) => t in r3 ? P2(r3, t, { enumerable: true, configurable: true, writable: true, value: e2 }) : r3[t] = e2;
var p = (r3, t) => {
  for (var e2 in t || (t = {})) L.call(t, e2) && l(r3, e2, t[e2]);
  if (c2) for (var e2 of c2(t)) O.call(t, e2) && l(r3, e2, t[e2]);
  return r3;
};
var v = (r3, t) => w(r3, E(t));
var j2 = { Accept: "application/json", "Content-Type": "application/json" };
var T = "POST";
var d = { headers: j2, method: T };
var g = 10;
var f = class {
  constructor(t, e2 = false) {
    if (this.url = t, this.disableProviderPing = e2, this.events = new import_events2.EventEmitter(), this.isAvailable = false, this.registering = false, !isHttpUrl(t)) throw new Error(`Provided URL is not compatible with HTTP connection: ${t}`);
    this.url = t, this.disableProviderPing = e2;
  }
  get connected() {
    return this.isAvailable;
  }
  get connecting() {
    return this.registering;
  }
  on(t, e2) {
    this.events.on(t, e2);
  }
  once(t, e2) {
    this.events.once(t, e2);
  }
  off(t, e2) {
    this.events.off(t, e2);
  }
  removeListener(t, e2) {
    this.events.removeListener(t, e2);
  }
  async open(t = this.url) {
    await this.register(t);
  }
  async close() {
    if (!this.isAvailable) throw new Error("Connection already closed");
    this.onClose();
  }
  async send(t) {
    this.isAvailable || await this.register();
    try {
      const e2 = safeJsonStringify(t), s2 = await (await (0, import_cross_fetch.default)(this.url, v(p({}, d), { body: e2 }))).json();
      this.onPayload({ data: s2 });
    } catch (e2) {
      this.onError(t.id, e2);
    }
  }
  async register(t = this.url) {
    if (!isHttpUrl(t)) throw new Error(`Provided URL is not compatible with HTTP connection: ${t}`);
    if (this.registering) {
      const e2 = this.events.getMaxListeners();
      return (this.events.listenerCount("register_error") >= e2 || this.events.listenerCount("open") >= e2) && this.events.setMaxListeners(e2 + 1), new Promise((s2, i2) => {
        this.events.once("register_error", (n3) => {
          this.resetMaxListeners(), i2(n3);
        }), this.events.once("open", () => {
          if (this.resetMaxListeners(), typeof this.isAvailable > "u") return i2(new Error("HTTP connection is missing or invalid"));
          s2();
        });
      });
    }
    this.url = t, this.registering = true;
    try {
      if (!this.disableProviderPing) {
        const e2 = safeJsonStringify({ id: 1, jsonrpc: "2.0", method: "test", params: [] });
        await (0, import_cross_fetch.default)(t, v(p({}, d), { body: e2 }));
      }
      this.onOpen();
    } catch (e2) {
      const s2 = this.parseError(e2);
      throw this.events.emit("register_error", s2), this.onClose(), s2;
    }
  }
  onOpen() {
    this.isAvailable = true, this.registering = false, this.events.emit("open");
  }
  onClose() {
    this.isAvailable = false, this.registering = false, this.events.emit("close");
  }
  onPayload(t) {
    if (typeof t.data > "u") return;
    const e2 = typeof t.data == "string" ? safeJsonParse(t.data) : t.data;
    this.events.emit("payload", e2);
  }
  onError(t, e2) {
    const s2 = this.parseError(e2), i2 = s2.message || s2.toString(), n3 = formatJsonRpcError(t, i2);
    this.events.emit("payload", n3);
  }
  parseError(t, e2 = this.url) {
    return parseConnectionError(t, e2, "HTTP");
  }
  resetMaxListeners() {
    this.events.getMaxListeners() > g && this.events.setMaxListeners(g);
  }
};

// node_modules/@walletconnect/events/dist/esm/events.js
var IEvents = class {
};

// node_modules/@walletconnect/heartbeat/dist/index.es.js
var import_events3 = __toESM(require_events());
var import_time2 = __toESM(require_cjs());
var n2 = class extends IEvents {
  constructor(e2) {
    super();
  }
};
var s = import_time2.FIVE_SECONDS;
var r2 = { pulse: "heartbeat_pulse" };
var i = class _i extends n2 {
  constructor(e2) {
    super(e2), this.events = new import_events3.EventEmitter(), this.interval = s, this.interval = (e2 == null ? void 0 : e2.interval) || s;
  }
  static async init(e2) {
    const t = new _i(e2);
    return await t.init(), t;
  }
  async init() {
    await this.initialize();
  }
  stop() {
    clearInterval(this.intervalRef);
  }
  on(e2, t) {
    this.events.on(e2, t);
  }
  once(e2, t) {
    this.events.once(e2, t);
  }
  off(e2, t) {
    this.events.off(e2, t);
  }
  removeListener(e2, t) {
    this.events.removeListener(e2, t);
  }
  async initialize() {
    this.intervalRef = setInterval(() => this.pulse(), (0, import_time2.toMiliseconds)(this.interval));
  }
  pulse() {
    this.events.emit(r2.pulse);
  }
};

// node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js
var import_events5 = __toESM(require_events());
var v2 = () => typeof WebSocket < "u" ? WebSocket : typeof global < "u" && typeof global.WebSocket < "u" ? global.WebSocket : typeof window < "u" && typeof window.WebSocket < "u" ? window.WebSocket : typeof self < "u" && typeof self.WebSocket < "u" ? self.WebSocket : require_browser();
var w2 = () => typeof WebSocket < "u" || typeof global < "u" && typeof global.WebSocket < "u" || typeof window < "u" && typeof window.WebSocket < "u" || typeof self < "u" && typeof self.WebSocket < "u";
var d2 = (r3) => r3.split("?")[0];
var h = 10;
var b = v2();
var f2 = class {
  constructor(e2) {
    if (this.url = e2, this.events = new import_events5.EventEmitter(), this.registering = false, !isWsUrl(e2)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e2}`);
    this.url = e2;
  }
  get connected() {
    return typeof this.socket < "u";
  }
  get connecting() {
    return this.registering;
  }
  on(e2, t) {
    this.events.on(e2, t);
  }
  once(e2, t) {
    this.events.once(e2, t);
  }
  off(e2, t) {
    this.events.off(e2, t);
  }
  removeListener(e2, t) {
    this.events.removeListener(e2, t);
  }
  async open(e2 = this.url) {
    await this.register(e2);
  }
  async close() {
    return new Promise((e2, t) => {
      if (typeof this.socket > "u") {
        t(new Error("Connection already closed"));
        return;
      }
      this.socket.onclose = (n3) => {
        this.onClose(n3), e2();
      }, this.socket.close();
    });
  }
  async send(e2) {
    typeof this.socket > "u" && (this.socket = await this.register());
    try {
      this.socket.send(safeJsonStringify(e2));
    } catch (t) {
      this.onError(e2.id, t);
    }
  }
  register(e2 = this.url) {
    if (!isWsUrl(e2)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e2}`);
    if (this.registering) {
      const t = this.events.getMaxListeners();
      return (this.events.listenerCount("register_error") >= t || this.events.listenerCount("open") >= t) && this.events.setMaxListeners(t + 1), new Promise((n3, s2) => {
        this.events.once("register_error", (o5) => {
          this.resetMaxListeners(), s2(o5);
        }), this.events.once("open", () => {
          if (this.resetMaxListeners(), typeof this.socket > "u") return s2(new Error("WebSocket connection is missing or invalid"));
          n3(this.socket);
        });
      });
    }
    return this.url = e2, this.registering = true, new Promise((t, n3) => {
      const s2 = (0, esm_exports.isReactNative)() ? void 0 : { rejectUnauthorized: !isLocalhostUrl(e2) }, o5 = new b(e2, [], s2);
      w2() ? o5.onerror = (i2) => {
        const a2 = i2;
        n3(this.emitError(a2.error));
      } : o5.on("error", (i2) => {
        n3(this.emitError(i2));
      }), o5.onopen = () => {
        this.onOpen(o5), t(o5);
      };
    });
  }
  onOpen(e2) {
    e2.onmessage = (t) => this.onPayload(t), e2.onclose = (t) => this.onClose(t), this.socket = e2, this.registering = false, this.events.emit("open");
  }
  onClose(e2) {
    this.socket = void 0, this.registering = false, this.events.emit("close", e2);
  }
  onPayload(e2) {
    if (typeof e2.data > "u") return;
    const t = typeof e2.data == "string" ? safeJsonParse(e2.data) : e2.data;
    this.events.emit("payload", t);
  }
  onError(e2, t) {
    const n3 = this.parseError(t), s2 = n3.message || n3.toString(), o5 = formatJsonRpcError(e2, s2);
    this.events.emit("payload", o5);
  }
  parseError(e2, t = this.url) {
    return parseConnectionError(e2, d2(t), "WS");
  }
  resetMaxListeners() {
    this.events.getMaxListeners() > h && this.events.setMaxListeners(h);
  }
  emitError(e2) {
    const t = this.parseError(new Error((e2 == null ? void 0 : e2.message) || `WebSocket connection failed for host: ${d2(this.url)}`));
    return this.events.emit("register_error", t), t;
  }
};

// node_modules/idb-keyval/dist/index.js
function promisifyRequest(request) {
  return new Promise((resolve, reject) => {
    request.oncomplete = request.onsuccess = () => resolve(request.result);
    request.onabort = request.onerror = () => reject(request.error);
  });
}
function createStore(dbName, storeName) {
  let dbp;
  const getDB = () => {
    if (dbp)
      return dbp;
    const request = indexedDB.open(dbName);
    request.onupgradeneeded = () => request.result.createObjectStore(storeName);
    dbp = promisifyRequest(request);
    dbp.then((db) => {
      db.onclose = () => dbp = void 0;
    }, () => {
    });
    return dbp;
  };
  return (txMode, callback) => getDB().then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));
}
var defaultGetStoreFunc;
function defaultGetStore() {
  if (!defaultGetStoreFunc) {
    defaultGetStoreFunc = createStore("keyval-store", "keyval");
  }
  return defaultGetStoreFunc;
}
function get(key, customStore = defaultGetStore()) {
  return customStore("readonly", (store) => promisifyRequest(store.get(key)));
}
function set(key, value, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.put(value, key);
    return promisifyRequest(store.transaction);
  });
}
function del(key, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.delete(key);
    return promisifyRequest(store.transaction);
  });
}
function clear(customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.clear();
    return promisifyRequest(store.transaction);
  });
}
function eachCursor(store, callback) {
  store.openCursor().onsuccess = function() {
    if (!this.result)
      return;
    callback(this.result);
    this.result.continue();
  };
  return promisifyRequest(store.transaction);
}
function keys(customStore = defaultGetStore()) {
  return customStore("readonly", (store) => {
    if (store.getAllKeys) {
      return promisifyRequest(store.getAllKeys());
    }
    const items = [];
    return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);
  });
}

// node_modules/destr/dist/index.mjs
var suspectProtoRx = /"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/;
var suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
var JsonSigRx = /^\s*["[{]|^\s*-?\d{1,16}(\.\d{1,17})?([Ee][+-]?\d+)?\s*$/;
function jsonParseTransform(key, value) {
  if (key === "__proto__" || key === "constructor" && value && typeof value === "object" && "prototype" in value) {
    warnKeyDropped(key);
    return;
  }
  return value;
}
function warnKeyDropped(key) {
  console.warn(`[destr] Dropping "${key}" key to prevent prototype pollution.`);
}
function destr(value, options = {}) {
  if (typeof value !== "string") {
    return value;
  }
  if (value[0] === '"' && value[value.length - 1] === '"' && value.indexOf("\\") === -1) {
    return value.slice(1, -1);
  }
  const _value = value.trim();
  if (_value.length <= 9) {
    switch (_value.toLowerCase()) {
      case "true": {
        return true;
      }
      case "false": {
        return false;
      }
      case "undefined": {
        return void 0;
      }
      case "null": {
        return null;
      }
      case "nan": {
        return Number.NaN;
      }
      case "infinity": {
        return Number.POSITIVE_INFINITY;
      }
      case "-infinity": {
        return Number.NEGATIVE_INFINITY;
      }
    }
  }
  if (!JsonSigRx.test(value)) {
    if (options.strict) {
      throw new SyntaxError("[destr] Invalid JSON");
    }
    return value;
  }
  try {
    if (suspectProtoRx.test(value) || suspectConstructorRx.test(value)) {
      if (options.strict) {
        throw new Error("[destr] Possible prototype pollution");
      }
      return JSON.parse(value, jsonParseTransform);
    }
    return JSON.parse(value);
  } catch (error) {
    if (options.strict) {
      throw error;
    }
    return value;
  }
}

export {
  esm_default2 as esm_default,
  Qe,
  sn,
  Po,
  Qo,
  IEvents,
  r2 as r,
  i,
  destr,
  createStore,
  get,
  set,
  del,
  clear,
  keys,
  payloadId,
  getBigIntRpcId,
  formatJsonRpcRequest,
  formatJsonRpcResult,
  formatJsonRpcError,
  isJsonRpcRequest,
  isJsonRpcResponse,
  isJsonRpcResult,
  isJsonRpcError,
  esm_exports,
  o2 as o,
  f2 as f,
  f as f2
};
/*! Bundled license information:

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

@walletconnect/relay-auth/dist/index.es.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=chunk-PTQCXBJB.js.map
