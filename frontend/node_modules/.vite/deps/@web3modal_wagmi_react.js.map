{
  "version": 3,
  "sources": ["../../ox/node_modules/eventemitter3/index.js", "../../@web3modal/scaffold-utils/src/ConstantsUtil.ts", "../../@web3modal/scaffold-utils/src/PresetsUtil.ts", "../../@web3modal/scaffold-utils/src/HelpersUtil.ts", "../../@web3modal/scaffold-utils/src/TypeUtil.ts", "../../@web3modal/base/src/client.ts", "../../@web3modal/scaffold-ui/src/modal/w3m-account-button/index.ts", "../../@web3modal/scaffold-ui/src/modal/w3m-button/styles.ts", "../../@web3modal/scaffold-ui/src/modal/w3m-button/index.ts", "../../@web3modal/scaffold-ui/src/modal/w3m-connect-button/index.ts", "../../@web3modal/scaffold-ui/src/modal/w3m-network-button/styles.ts", "../../@web3modal/scaffold-ui/src/modal/w3m-network-button/index.ts", "../../@web3modal/scaffold-ui/src/modal/w3m-router/styles.ts", "../../@web3modal/scaffold-ui/src/utils/ConstantsUtil.ts", "../../@web3modal/scaffold-ui/src/modal/w3m-router/index.ts", "../../@web3modal/scaffold-ui/src/modal/w3m-onramp-widget/styles.ts", "../../@web3modal/scaffold-ui/src/modal/w3m-onramp-widget/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-account-settings-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-account-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-all-wallets-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-buy-in-progress-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-buy-in-progress-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-connect-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-connect-view/index.ts", "../../@web3modal/scaffold-ui/src/utils/w3m-connecting-widget/styles.ts", "../../@web3modal/scaffold-ui/src/utils/w3m-connecting-widget/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-connecting-external-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-connecting-multi-chain-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-connecting-multi-chain-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-connecting-wc-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-choose-account-name-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-choose-account-name-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-downloads-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-get-wallet-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-register-account-name-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-register-account-name-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-register-account-name-success-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-register-account-name-success-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-network-switch-view/styles.ts", "../../@web3modal/scaffold-ui/src/utils/NetworkUtil.ts", "../../@web3modal/scaffold-ui/src/views/w3m-network-switch-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-networks-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-networks-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-onramp-activity-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-onramp-activity-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-onramp-fiat-select-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-onramp-fiat-select-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-onramp-providers-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-onramp-tokens-select-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-onramp-tokens-select-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-swap-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-swap-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-switch-active-chain-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-switch-active-chain-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-swap-preview-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-swap-preview-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-swap-select-token-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-swap-select-token-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-transactions-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-transactions-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-what-is-a-network-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-what-is-a-wallet-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-what-is-a-buy-view/index.ts", "../../@web3modal/scaffold-ui/src/utils/w3m-email-otp-widget/styles.ts", "../../@web3modal/scaffold-ui/src/utils/w3m-email-otp-widget/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-email-verify-otp-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-email-verify-device-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-email-verify-device-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-approve-transaction-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-approve-transaction-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-upgrade-wallet-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-upgrade-to-smart-account-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-update-email-wallet-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-update-email-wallet-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-update-email-primary-otp-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-update-email-secondary-otp-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-unsupported-chain-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-unsupported-chain-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-wallet-receive-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-wallet-receive-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-wallet-compatible-networks-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-wallet-compatible-networks-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-wallet-send-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-wallet-send-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-wallet-send-select-token-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-wallet-send-select-token-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-wallet-send-preview-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-wallet-send-preview-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-connect-wallets-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-connect-wallets-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-connect-socials-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-connect-socials-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-connecting-social-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-connecting-social-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-profile-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-profile-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-select-addresses-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-select-addresses-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-switch-address-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-switch-address-view/index.ts", "../../@web3modal/scaffold-ui/src/views/w3m-connecting-farcaster-view/styles.ts", "../../@web3modal/scaffold-ui/src/views/w3m-connecting-farcaster-view/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-all-wallets-list/styles.ts", "../../@web3modal/scaffold-ui/src/utils/markWalletsAsInstalled.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-all-wallets-list/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-all-wallets-list-item/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-all-wallets-list-item/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-all-wallets-search/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-all-wallets-search/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-connecting-header/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-connecting-wc-browser/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-connecting-wc-desktop/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-connecting-wc-mobile/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-connecting-wc-qrcode/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-connecting-wc-qrcode/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-connecting-wc-unsupported/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-connecting-wc-web/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-swap-details/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-swap-details/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-swap-input/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-swap-input/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-swap-input-skeleton/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-swap-input-skeleton/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-header/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-header/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-help-widget/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-onramp-activity-item/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-onramp-activity-item/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-onramp-input/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-onramp-input/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-onramp-provider-item/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-onramp-provider-item/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-legal-footer/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-legal-footer/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-mobile-download-links/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-mobile-download-links/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-onramp-providers-footer/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-onramp-providers-footer/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-snackbar/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-snackbar/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-email-login-widget/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-email-login-widget/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-account-default-widget/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-account-default-widget/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-account-wallet-features-widget/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-account-wallet-features-widget/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-account-activity-widget/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-account-activity-widget/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-account-nfts-widget/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-account-nfts-widget/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-account-tokens-widget/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-account-tokens-widget/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-activity-list/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-activity-list/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-input-token/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-input-token/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-input-address/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-input-address/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-wallet-send-details/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-wallet-send-details/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-tooltip/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-tooltip/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-tooltip-trigger/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-tooltip-trigger/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-social-login-widget/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-social-login-widget/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-wallet-login-list/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-social-login-list/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-social-login-list/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-connect-announced-widget/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-connect-custom-widget/index.ts", "../../@web3modal/scaffold-ui/src/utils/WalletUtil.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-connect-featured-widget/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-connect-injected-widget/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-connect-multi-chain-widget/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-connect-external-widget/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-connect-recent-widget/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-connect-recommended-widget/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-connect-walletconnect-widget/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-connector-list/styles.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-connector-list/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-all-wallets-widget/index.ts", "../../@web3modal/scaffold-ui/src/partials/w3m-account-auth-button/index.ts", "../../@web3modal/base/node_modules/@walletconnect/relay-auth/src/api.ts", "../../@web3modal/base/adapters/evm/wagmi/utils/helpers.ts", "../../ox/core/Ens.ts", "../../@adraffy/ens-normalize/dist/index.mjs", "../../ox/core/Abi.ts", "../../ox/core/internal/abi.ts", "../../ox/core/AbiError.ts", "../../ox/core/AbiEvent.ts", "../../ox/core/AccessList.ts", "../../ox/_esm/core/AccountProof.js", "../../ox/core/AesGcm.ts", "../../ox/core/Authorization.ts", "../../ox/core/Rlp.ts", "../../ox/core/Signature.ts", "../../ox/node_modules/@noble/curves/src/abstract/modular.ts", "../../ox/node_modules/@noble/curves/src/abstract/curve.ts", "../../ox/node_modules/@noble/curves/src/abstract/weierstrass.ts", "../../ox/node_modules/@noble/curves/src/_shortw_utils.ts", "../../ox/node_modules/@noble/curves/src/abstract/hash-to-curve.ts", "../../ox/node_modules/@noble/curves/src/secp256k1.ts", "../../ox/core/Base58.ts", "../../ox/core/internal/base58.ts", "../../ox/core/Base64.ts", "../../ox/core/BinaryStateTree.ts", "../../@noble/hashes/src/_blake.ts", "../../@noble/hashes/src/blake2.ts", "../../@noble/hashes/src/blake3.ts", "../../ox/core/Blobs.ts", "../../ox/core/Kzg.ts", "../../ox/core/Block.ts", "../../ox/core/Transaction.ts", "../../ox/core/Bloom.ts", "../../ox/core/Bls.ts", "../../ox/node_modules/@noble/curves/src/abstract/bls.ts", "../../ox/node_modules/@noble/curves/src/abstract/tower.ts", "../../ox/node_modules/@noble/curves/src/bls12-381.ts", "../../ox/core/BlsPoint.ts", "../../ox/core/ContractAddress.ts", "../../ox/core/Filter.ts", "../../ox/core/HdKey.ts", "../../@scure/base/index.ts", "../../ox/node_modules/@scure/bip32/index.ts", "../../ox/core/Secp256k1.ts", "../../ox/core/internal/entropy.ts", "../../ox/core/internal/hdKey.ts", "../../ox/_esm/core/Fee.js", "../../ox/core/Keystore.ts", "../../ox/node_modules/@noble/ciphers/src/utils.ts", "../../ox/node_modules/@noble/ciphers/src/_polyval.ts", "../../ox/node_modules/@noble/ciphers/src/aes.ts", "../../@noble/hashes/src/pbkdf2.ts", "../../@noble/hashes/src/scrypt.ts", "../../ox/core/Log.ts", "../../ox/core/Mnemonic.ts", "../../ox/node_modules/@scure/bip39/esm/index.js", "../../ox/node_modules/@scure/bip39/esm/wordlists/czech.js", "../../ox/node_modules/@scure/bip39/esm/wordlists/english.js", "../../ox/node_modules/@scure/bip39/esm/wordlists/french.js", "../../ox/node_modules/@scure/bip39/esm/wordlists/italian.js", "../../ox/node_modules/@scure/bip39/esm/wordlists/japanese.js", "../../ox/node_modules/@scure/bip39/esm/wordlists/korean.js", "../../ox/node_modules/@scure/bip39/esm/wordlists/portuguese.js", "../../ox/node_modules/@scure/bip39/esm/wordlists/simplified-chinese.js", "../../ox/node_modules/@scure/bip39/esm/wordlists/spanish.js", "../../ox/node_modules/@scure/bip39/esm/wordlists/traditional-chinese.js", "../../ox/core/PersonalMessage.ts", "../../ox/core/Provider.ts", "../../ox/node_modules/eventemitter3/index.mjs", "../../ox/core/RpcResponse.ts", "../../ox/core/RpcSchema.ts", "../../ox/core/RpcRequest.ts", "../../ox/core/RpcTransport.ts", "../../ox/core/internal/promise.ts", "../../ox/core/internal/rpcTransport.ts", "../../ox/core/P256.ts", "../../ox/node_modules/@noble/curves/src/nist.ts", "../../ox/node_modules/@noble/curves/src/p256.ts", "../../ox/core/Siwe.ts", "../../ox/core/internal/uid.ts", "../../ox/core/StateOverrides.ts", "../../ox/core/TransactionEnvelope.ts", "../../ox/core/Value.ts", "../../ox/core/TransactionEnvelopeLegacy.ts", "../../ox/core/TransactionEnvelopeEip1559.ts", "../../ox/core/TransactionEnvelopeEip2930.ts", "../../ox/core/TransactionEnvelopeEip4844.ts", "../../ox/core/TransactionEnvelopeEip7702.ts", "../../ox/core/TransactionReceipt.ts", "../../ox/core/TransactionRequest.ts", "../../ox/core/TypedData.ts", "../../ox/core/ValidatorData.ts", "../../ox/core/WebAuthnP256.ts", "../../ox/core/internal/webauthn.ts", "../../ox/core/WebCryptoP256.ts", "../../ox/core/internal/ens.ts", "../../viem/utils/ens/normalize.ts", "../../@web3modal/base/adapters/evm/wagmi/client.ts", "../../@web3modal/base/adapters/evm/wagmi/connectors/AuthConnector.ts", "../../@web3modal/base/adapters/evm/wagmi/utils/defaultConfig.ts", "../../@web3modal/base/utils/library/react/index.ts", "../../@web3modal/wagmi/exports/react/index.ts"],
  "sourcesContent": ["'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "import { ens_normalize } from '@adraffy/ens-normalize'\nimport * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as Hex from './Hex.js'\nimport * as internal from './internal/ens.js'\n\n/**\n * Hashes ENS label.\n *\n * Since ENS labels prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS labels](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `labelhash`. You can use the built-in {@link ox#Ens.(normalize:function)} function for this.\n *\n * @example\n * ```ts twoslash\n * import { Ens } from 'ox'\n * Ens.labelhash('eth')\n * '0x4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0'\n * ```\n *\n * @param label - ENS label.\n * @returns ENS labelhash.\n */\nexport function labelhash(label: string) {\n  const result = new Uint8Array(32).fill(0)\n  if (!label) return Hex.fromBytes(result)\n  return (\n    internal.unwrapLabelhash(label) || Hash.keccak256(Hex.fromString(label))\n  )\n}\n\nexport declare namespace labelhash {\n  type ErrorType =\n    | Hex.fromBytes.ErrorType\n    | internal.unwrapLabelhash.ErrorType\n    | Hash.keccak256.ErrorType\n    | Hex.fromString.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Hashes ENS name.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `namehash`. You can use the built-in {@link ox#Ens.(normalize:function)} function for this.\n *\n * @example\n * ```ts twoslash\n * import { Ens } from 'ox'\n * Ens.namehash('wevm.eth')\n * // @log: '0xf246651c1b9a6b141d19c2604e9a58f567973833990f830d882534a747801359'\n * ```\n *\n * @param name - ENS name.\n * @returns ENS namehash.\n */\nexport function namehash(name: string) {\n  let result = new Uint8Array(32).fill(0)\n  if (!name) return Hex.fromBytes(result)\n\n  const labels = name.split('.')\n  // Iterate in reverse order building up hash\n  for (let i = labels.length - 1; i >= 0; i -= 1) {\n    const hashFromEncodedLabel = internal.unwrapLabelhash(labels[i]!)\n    const hashed = hashFromEncodedLabel\n      ? Bytes.fromHex(hashFromEncodedLabel)\n      : Hash.keccak256(Bytes.fromString(labels[i]!), { as: 'Bytes' })\n    result = Hash.keccak256(Bytes.concat(result, hashed), { as: 'Bytes' })\n  }\n\n  return Hex.fromBytes(result)\n}\n\nexport declare namespace namehash {\n  type ErrorType =\n    | Hex.fromBytes.ErrorType\n    | internal.unwrapLabelhash.ErrorType\n    | Bytes.fromHex.ErrorType\n    | Hash.keccak256.ErrorType\n    | Bytes.fromString.ErrorType\n    | Bytes.concat.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Normalizes ENS name according to [ENSIP-15](https://github.com/ensdomains/docs/blob/9edf9443de4333a0ea7ec658a870672d5d180d53/ens-improvement-proposals/ensip-15-normalization-standard.md).\n *\n * For more info see [ENS documentation](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) on name processing.\n *\n * @example\n * ```ts twoslash\n * import { Ens } from 'ox'\n * Ens.normalize('wevm.eth')\n * // @log: 'wevm.eth'\n * ```\n *\n * @param name - ENS name.\n * @returns Normalized ENS name.\n */\nexport function normalize(name: string): string {\n  return ens_normalize(name)\n}\n\nexport declare namespace normalize {\n  type ErrorType = Errors.GlobalErrorType\n}\n", "// created 2024-09-13T06:42:45.675Z\n// compressed base64-encoded blob for include-ens data\n// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js\n// see: https://github.com/adraffy/ens-normalize.js#security\n// SHA-256: 0ca3917bee1eee342d64c631cb1dbaac37b167d848887d59f6d68328dc99ac09\nvar COMPRESSED$1 = '';\nconst FENCED = new Map([[8217,\"apostrophe\"],[8260,\"fraction slash\"],[12539,\"middle dot\"]]);\nconst NSM_MAX = 4;\n\nfunction decode_arithmetic(bytes) {\r\n\tlet pos = 0;\r\n\tfunction u16() { return (bytes[pos++] << 8) | bytes[pos++]; }\r\n\t\r\n\t// decode the frequency table\r\n\tlet symbol_count = u16();\r\n\tlet total = 1;\r\n\tlet acc = [0, 1]; // first symbol has frequency 1\r\n\tfor (let i = 1; i < symbol_count; i++) {\r\n\t\tacc.push(total += u16());\r\n\t}\r\n\r\n\t// skip the sized-payload that the last 3 symbols index into\r\n\tlet skip = u16();\r\n\tlet pos_payload = pos;\r\n\tpos += skip;\r\n\r\n\tlet read_width = 0;\r\n\tlet read_buffer = 0; \r\n\tfunction read_bit() {\r\n\t\tif (read_width == 0) {\r\n\t\t\t// this will read beyond end of buffer\r\n\t\t\t// but (undefined|0) => zero pad\r\n\t\t\tread_buffer = (read_buffer << 8) | bytes[pos++];\r\n\t\t\tread_width = 8;\r\n\t\t}\r\n\t\treturn (read_buffer >> --read_width) & 1;\r\n\t}\r\n\r\n\tconst N = 31;\r\n\tconst FULL = 2**N;\r\n\tconst HALF = FULL >>> 1;\r\n\tconst QRTR = HALF >> 1;\r\n\tconst MASK = FULL - 1;\r\n\r\n\t// fill register\r\n\tlet register = 0;\r\n\tfor (let i = 0; i < N; i++) register = (register << 1) | read_bit();\r\n\r\n\tlet symbols = [];\r\n\tlet low = 0;\r\n\tlet range = FULL; // treat like a float\r\n\twhile (true) {\r\n\t\tlet value = Math.floor((((register - low + 1) * total) - 1) / range);\r\n\t\tlet start = 0;\r\n\t\tlet end = symbol_count;\r\n\t\twhile (end - start > 1) { // binary search\r\n\t\t\tlet mid = (start + end) >>> 1;\r\n\t\t\tif (value < acc[mid]) {\r\n\t\t\t\tend = mid;\r\n\t\t\t} else {\r\n\t\t\t\tstart = mid;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (start == 0) break; // first symbol is end mark\r\n\t\tsymbols.push(start);\r\n\t\tlet a = low + Math.floor(range * acc[start]   / total);\r\n\t\tlet b = low + Math.floor(range * acc[start+1] / total) - 1;\r\n\t\twhile (((a ^ b) & HALF) == 0) {\r\n\t\t\tregister = (register << 1) & MASK | read_bit();\r\n\t\t\ta = (a << 1) & MASK;\r\n\t\t\tb = (b << 1) & MASK | 1;\r\n\t\t}\r\n\t\twhile (a & ~b & QRTR) {\r\n\t\t\tregister = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();\r\n\t\t\ta = (a << 1) ^ HALF;\r\n\t\t\tb = ((b ^ HALF) << 1) | HALF | 1;\r\n\t\t}\r\n\t\tlow = a;\r\n\t\trange = 1 + b - a;\r\n\t}\r\n\tlet offset = symbol_count - 4;\r\n\treturn symbols.map(x => { // index into payload\r\n\t\tswitch (x - offset) {\r\n\t\t\tcase 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);\r\n\t\t\tcase 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);\r\n\t\t\tcase 1: return offset + bytes[pos_payload++];\r\n\t\t\tdefault: return x - 1;\r\n\t\t}\r\n\t});\r\n}\t\r\n\r\n// returns an iterator which returns the next symbol\r\nfunction read_payload(v) {\r\n\tlet pos = 0;\r\n\treturn () => v[pos++];\r\n}\r\nfunction read_compressed_payload(s) {\r\n\treturn read_payload(decode_arithmetic(unsafe_atob(s)));\r\n}\r\n\r\n// unsafe in the sense:\r\n// expected well-formed Base64 w/o padding \r\n// 20220922: added for https://github.com/adraffy/ens-normalize.js/issues/4\r\nfunction unsafe_atob(s) {\r\n\tlet lookup = [];\r\n\t[...'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'].forEach((c, i) => lookup[c.charCodeAt(0)] = i);\r\n\tlet n = s.length;\r\n\tlet ret = new Uint8Array((6 * n) >> 3);\r\n\tfor (let i = 0, pos = 0, width = 0, carry = 0; i < n; i++) {\r\n\t\tcarry = (carry << 6) | lookup[s.charCodeAt(i)];\r\n\t\twidth += 6;\r\n\t\tif (width >= 8) {\r\n\t\t\tret[pos++] = (carry >> (width -= 8));\r\n\t\t}\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\r\nfunction signed(i) { \r\n\treturn (i & 1) ? (~i >> 1) : (i >> 1);\r\n}\r\n\r\nfunction read_deltas(n, next) {\r\n\tlet v = Array(n);\r\n\tfor (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());\r\n\treturn v;\r\n}\r\n\r\n// [123][5] => [0 3] [1 1] [0 0]\r\nfunction read_sorted(next, prev = 0) {\r\n\tlet ret = [];\r\n\twhile (true) {\r\n\t\tlet x = next();\r\n\t\tlet n = next();\r\n\t\tif (!n) break;\r\n\t\tprev += x;\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tret.push(prev + i);\r\n\t\t}\r\n\t\tprev += n + 1;\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction read_sorted_arrays(next) {\r\n\treturn read_array_while(() => { \r\n\t\tlet v = read_sorted(next);\r\n\t\tif (v.length) return v;\r\n\t});\r\n}\r\n\r\n// returns map of x => ys\r\nfunction read_mapped(next) {\r\n\tlet ret = [];\r\n\twhile (true) {\r\n\t\tlet w = next();\r\n\t\tif (w == 0) break;\r\n\t\tret.push(read_linear_table(w, next));\r\n\t}\r\n\twhile (true) {\r\n\t\tlet w = next() - 1;\r\n\t\tif (w < 0) break;\r\n\t\tret.push(read_replacement_table(w, next));\r\n\t}\r\n\treturn ret.flat();\r\n}\r\n\r\n// read until next is falsy\r\n// return array of read values\r\nfunction read_array_while(next) {\r\n\tlet v = [];\r\n\twhile (true) {\r\n\t\tlet x = next(v.length);\r\n\t\tif (!x) break;\r\n\t\tv.push(x);\r\n\t}\r\n\treturn v;\r\n}\r\n\r\n// read w columns of length n\r\n// return as n rows of length w\r\nfunction read_transposed(n, w, next) {\r\n\tlet m = Array(n).fill().map(() => []);\r\n\tfor (let i = 0; i < w; i++) {\r\n\t\tread_deltas(n, next).forEach((x, j) => m[j].push(x));\r\n\t}\r\n\treturn m;\r\n}\r\n \r\n// returns [[x, ys], [x+dx, ys+dy], [x+2*dx, ys+2*dy], ...]\r\n// where dx/dy = steps, n = run size, w = length of y\r\nfunction read_linear_table(w, next) {\r\n\tlet dx = 1 + next();\r\n\tlet dy = next();\r\n\tlet vN = read_array_while(next);\r\n\tlet m = read_transposed(vN.length, 1+w, next);\r\n\treturn m.flatMap((v, i) => {\r\n\t\tlet [x, ...ys] = v;\r\n\t\treturn Array(vN[i]).fill().map((_, j) => {\r\n\t\t\tlet j_dy = j * dy;\r\n\t\t\treturn [x + j * dx, ys.map(y => y + j_dy)];\r\n\t\t});\r\n\t});\r\n}\r\n\r\n// return [[x, ys...], ...]\r\n// where w = length of y\r\nfunction read_replacement_table(w, next) { \r\n\tlet n = 1 + next();\r\n\tlet m = read_transposed(n, 1+w, next);\r\n\treturn m.map(v => [v[0], v.slice(1)]);\r\n}\r\n\r\n\r\nfunction read_trie(next) {\r\n\tlet ret = [];\r\n\tlet sorted = read_sorted(next); \r\n\texpand(decode([]), []);\r\n\treturn ret; // not sorted\r\n\tfunction decode(Q) { // characters that lead into this node\r\n\t\tlet S = next(); // state: valid, save, check\r\n\t\tlet B = read_array_while(() => { // buckets leading to new nodes\r\n\t\t\tlet cps = read_sorted(next).map(i => sorted[i]);\r\n\t\t\tif (cps.length) return decode(cps);\r\n\t\t});\r\n\t\treturn {S, B, Q};\r\n\t}\r\n\tfunction expand({S, B}, cps, saved) {\r\n\t\tif (S & 4 && saved === cps[cps.length-1]) return;\r\n\t\tif (S & 2) saved = cps[cps.length-1];\r\n\t\tif (S & 1) ret.push(cps); \r\n\t\tfor (let br of B) {\r\n\t\t\tfor (let cp of br.Q) {\r\n\t\t\t\texpand(br, [...cps, cp], saved);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\n\nfunction hex_cp(cp) {\r\n\treturn cp.toString(16).toUpperCase().padStart(2, '0');\r\n}\r\n\r\nfunction quote_cp(cp) {\r\n\treturn `{${hex_cp(cp)}}`; // raffy convention: like \"\\u{X}\" w/o the \"\\u\"\r\n}\r\n\r\n/*\r\nexport function explode_cp(s) {\r\n\treturn [...s].map(c => c.codePointAt(0));\r\n}\r\n*/\r\nfunction explode_cp(s) { // this is about 2x faster\r\n\tlet cps = [];\r\n\tfor (let pos = 0, len = s.length; pos < len; ) {\r\n\t\tlet cp = s.codePointAt(pos);\r\n\t\tpos += cp < 0x10000 ? 1 : 2;\r\n\t\tcps.push(cp);\r\n\t}\r\n\treturn cps;\r\n}\r\n\r\nfunction str_from_cps(cps) {\r\n\tconst chunk = 4096;\r\n\tlet len = cps.length;\r\n\tif (len < chunk) return String.fromCodePoint(...cps);\r\n\tlet buf = [];\r\n\tfor (let i = 0; i < len; ) {\r\n\t\tbuf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));\r\n\t}\r\n\treturn buf.join('');\r\n}\r\n\r\nfunction compare_arrays(a, b) {\r\n\tlet n = a.length;\r\n\tlet c = n - b.length;\r\n\tfor (let i = 0; c == 0 && i < n; i++) c = a[i] - b[i];\r\n\treturn c;\r\n}\r\n\r\nfunction array_replace(v, a, b) {\r\n\tlet prev = 0;\r\n\twhile (true) {\r\n\t\tlet next = v.indexOf(a, prev);\r\n\t\tif (next < 0) break;\r\n\t\tv[next] = b; \r\n\t\tprev = next + 1;\r\n\t}\r\n}\n\n// created 2024-09-13T06:42:45.675Z\n// compressed base64-encoded blob for include-nf data\n// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js\n// see: https://github.com/adraffy/ens-normalize.js#security\n// SHA-256: a79d5f9b1879a7b416aa659f4a3d788f80a8cf5f0ab955a456592c02f556a28c\nvar COMPRESSED = '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';\n\n// https://unicode.org/reports/tr15/\r\n// for reference implementation\r\n// see: /derive/nf.js\r\n\r\n\r\n// algorithmic hangul\r\n// https://www.unicode.org/versions/Unicode15.0.0/ch03.pdf (page 144)\r\nconst S0 = 0xAC00;\r\nconst L0 = 0x1100;\r\nconst V0 = 0x1161;\r\nconst T0 = 0x11A7;\r\nconst L_COUNT = 19;\r\nconst V_COUNT = 21;\r\nconst T_COUNT = 28;\r\nconst N_COUNT = V_COUNT * T_COUNT;\r\nconst S_COUNT = L_COUNT * N_COUNT;\r\nconst S1 = S0 + S_COUNT;\r\nconst L1 = L0 + L_COUNT;\r\nconst V1 = V0 + V_COUNT;\r\nconst T1 = T0 + T_COUNT;\r\n\r\nfunction unpack_cc(packed) {\r\n\treturn (packed >> 24) & 0xFF;\r\n}\r\nfunction unpack_cp(packed) {\r\n\treturn packed & 0xFFFFFF;\r\n}\r\n\r\nlet SHIFTED_RANK, EXCLUSIONS, DECOMP, RECOMP;\r\n\r\n// export function nf_deinit() {\r\n// \tif (!SHIFTED_RANK) return;\r\n// \tSHIFTED_RANK = EXCLUSIONS = DECOMP = RECOMP = undefined;\r\n// }\r\n\r\nfunction init$1() {\r\n\t//console.time('nf');\r\n\tlet r = read_compressed_payload(COMPRESSED);\r\n\tSHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i) => v.map(x => [x, (i+1) << 24]))); // pre-shifted\r\n\tEXCLUSIONS = new Set(read_sorted(r));\r\n\tDECOMP = new Map();\r\n\tRECOMP = new Map();\r\n\tfor (let [cp, cps] of read_mapped(r)) {\r\n\t\tif (!EXCLUSIONS.has(cp) && cps.length == 2) {\r\n\t\t\tlet [a, b] = cps;\r\n\t\t\tlet bucket = RECOMP.get(a);\r\n\t\t\tif (!bucket) {\r\n\t\t\t\tbucket = new Map();\r\n\t\t\t\tRECOMP.set(a, bucket);\r\n\t\t\t}\r\n\t\t\tbucket.set(b, cp);\r\n\t\t}\r\n\t\tDECOMP.set(cp, cps.reverse()); // stored reversed\r\n\t}\r\n\t//console.timeEnd('nf');\r\n\t// 20230905: 11ms\r\n}\r\n\r\nfunction is_hangul(cp) {\r\n\treturn cp >= S0 && cp < S1;\r\n}\r\n\r\nfunction compose_pair(a, b) {\r\n\tif (a >= L0 && a < L1 && b >= V0 && b < V1) {\r\n\t\treturn S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;\r\n\t} else if (is_hangul(a) && b > T0 && b < T1 && (a - S0) % T_COUNT == 0) {\r\n\t\treturn a + (b - T0);\r\n\t} else {\r\n\t\tlet recomp = RECOMP.get(a);\r\n\t\tif (recomp) {\r\n\t\t\trecomp = recomp.get(b);\r\n\t\t\tif (recomp) {\r\n\t\t\t\treturn recomp;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n}\r\n\r\nfunction decomposed(cps) {\r\n\tif (!SHIFTED_RANK) init$1();\r\n\tlet ret = [];\r\n\tlet buf = [];\r\n\tlet check_order = false;\r\n\tfunction add(cp) {\r\n\t\tlet cc = SHIFTED_RANK.get(cp);\r\n\t\tif (cc) {\r\n\t\t\tcheck_order = true;\r\n\t\t\tcp |= cc;\r\n\t\t}\r\n\t\tret.push(cp);\r\n\t}\r\n\tfor (let cp of cps) {\r\n\t\twhile (true) {\r\n\t\t\tif (cp < 0x80) {\r\n\t\t\t\tret.push(cp);\r\n\t\t\t} else if (is_hangul(cp)) {\r\n\t\t\t\tlet s_index = cp - S0;\r\n\t\t\t\tlet l_index = s_index / N_COUNT | 0;\r\n\t\t\t\tlet v_index = (s_index % N_COUNT) / T_COUNT | 0;\r\n\t\t\t\tlet t_index = s_index % T_COUNT;\r\n\t\t\t\tadd(L0 + l_index);\r\n\t\t\t\tadd(V0 + v_index);\r\n\t\t\t\tif (t_index > 0) add(T0 + t_index);\r\n\t\t\t} else {\r\n\t\t\t\tlet mapped = DECOMP.get(cp);\r\n\t\t\t\tif (mapped) {\r\n\t\t\t\t\tbuf.push(...mapped);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tadd(cp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!buf.length) break;\r\n\t\t\tcp = buf.pop();\r\n\t\t}\r\n\t}\r\n\tif (check_order && ret.length > 1) {\r\n\t\tlet prev_cc = unpack_cc(ret[0]);\r\n\t\tfor (let i = 1; i < ret.length; i++) {\r\n\t\t\tlet cc = unpack_cc(ret[i]);\r\n\t\t\tif (cc == 0 || prev_cc <= cc) {\r\n\t\t\t\tprev_cc = cc;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tlet j = i-1;\r\n\t\t\twhile (true) {\r\n\t\t\t\tlet tmp = ret[j+1];\r\n\t\t\t\tret[j+1] = ret[j];\r\n\t\t\t\tret[j] = tmp;\r\n\t\t\t\tif (!j) break;\r\n\t\t\t\tprev_cc = unpack_cc(ret[--j]);\r\n\t\t\t\tif (prev_cc <= cc) break;\r\n\t\t\t}\r\n\t\t\tprev_cc = unpack_cc(ret[i]);\r\n\t\t}\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction composed_from_decomposed(v) {\r\n\tlet ret = [];\r\n\tlet stack = [];\r\n\tlet prev_cp = -1;\r\n\tlet prev_cc = 0;\r\n\tfor (let packed of v) {\r\n\t\tlet cc = unpack_cc(packed);\r\n\t\tlet cp = unpack_cp(packed);\r\n\t\tif (prev_cp == -1) {\r\n\t\t\tif (cc == 0) {\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tret.push(cp);\r\n\t\t\t}\r\n\t\t} else if (prev_cc > 0 && prev_cc >= cc) {\r\n\t\t\tif (cc == 0) {\r\n\t\t\t\tret.push(prev_cp, ...stack);\r\n\t\t\t\tstack.length = 0;\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tstack.push(cp);\r\n\t\t\t}\r\n\t\t\tprev_cc = cc;\r\n\t\t} else {\r\n\t\t\tlet composed = compose_pair(prev_cp, cp);\r\n\t\t\tif (composed >= 0) {\r\n\t\t\t\tprev_cp = composed;\r\n\t\t\t} else if (prev_cc == 0 && cc == 0) {\r\n\t\t\t\tret.push(prev_cp);\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tstack.push(cp);\r\n\t\t\t\tprev_cc = cc;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (prev_cp >= 0) {\r\n\t\tret.push(prev_cp, ...stack);\t\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\n// note: cps can be iterable\r\nfunction nfd(cps) {\r\n\treturn decomposed(cps).map(unpack_cp);\r\n}\r\nfunction nfc(cps) {\r\n\treturn composed_from_decomposed(decomposed(cps));\r\n}\n\nconst HYPHEN = 0x2D;\r\nconst STOP = 0x2E;\r\nconst STOP_CH = '.';\r\nconst FE0F = 0xFE0F;\r\nconst UNIQUE_PH = 1;\r\n\r\n// 20230913: replace [...v] with Array_from(v) to avoid large spreads\r\nconst Array_from = x => Array.from(x); // Array.from.bind(Array);\r\n\r\nfunction group_has_cp(g, cp) {\r\n\t// 20230913: keep primary and secondary distinct instead of creating valid union\r\n\treturn g.P.has(cp) || g.Q.has(cp);\r\n}\r\n\r\nclass Emoji extends Array {\r\n\tget is_emoji() { return true; } // free tagging system\r\n}\r\n\r\nlet MAPPED, IGNORED, CM, NSM, ESCAPE, NFC_CHECK, GROUPS, WHOLE_VALID, WHOLE_MAP, VALID, EMOJI_LIST, EMOJI_ROOT;\r\n\r\n// export function ens_deinit() {\r\n// \tnf_deinit();\r\n// \tif (!MAPPED) return;\r\n// \tMAPPED = IGNORED = CM = NSM = ESCAPE = NFC_CHECK = GROUPS = WHOLE_VALID = WHOLE_MAP = VALID = EMOJI_LIST = EMOJI_ROOT = undefined;\r\n// }\r\n\r\nfunction init() {\r\n\tif (MAPPED) return;\r\n\t\r\n\tlet r = read_compressed_payload(COMPRESSED$1);\r\n\tconst read_sorted_array = () => read_sorted(r);\r\n\tconst read_sorted_set = () => new Set(read_sorted_array());\r\n\tconst set_add_many = (set, v) => v.forEach(x => set.add(x));\r\n\r\n\tMAPPED = new Map(read_mapped(r)); \r\n\tIGNORED = read_sorted_set(); // ignored characters are not valid, so just read raw codepoints\r\n\r\n\t/*\r\n\t// direct include from payload is smaller than the decompression code\r\n\tconst FENCED = new Map(read_array_while(() => {\r\n\t\tlet cp = r();\r\n\t\tif (cp) return [cp, read_str(r())];\r\n\t}));\r\n\t*/\r\n\t// 20230217: we still need all CM for proper error formatting\r\n\t// but norm only needs NSM subset that are potentially-valid\r\n\tCM = read_sorted_array();\r\n\tNSM = new Set(read_sorted_array().map(i => CM[i]));\r\n\tCM = new Set(CM);\r\n\t\r\n\tESCAPE = read_sorted_set(); // characters that should not be printed\r\n\tNFC_CHECK = read_sorted_set(); // only needed to illustrate ens_tokenize() transformations\r\n\r\n\tlet chunks = read_sorted_arrays(r);\r\n\tlet unrestricted = r();\r\n\t//const read_chunked = () => new Set(read_sorted_array().flatMap(i => chunks[i]).concat(read_sorted_array()));\r\n\tconst read_chunked = () => {\r\n\t\t// 20230921: build set in parts, 2x faster\r\n\t\tlet set = new Set();\r\n\t\tread_sorted_array().forEach(i => set_add_many(set, chunks[i]));\r\n\t\tset_add_many(set, read_sorted_array());\r\n\t\treturn set; \r\n\t};\r\n\tGROUPS = read_array_while(i => {\r\n\t\t// minifier property mangling seems unsafe\r\n\t\t// so these are manually renamed to single chars\r\n\t\tlet N = read_array_while(r).map(x => x+0x60);\r\n\t\tif (N.length) {\r\n\t\t\tlet R = i >= unrestricted; // unrestricted then restricted\r\n\t\t\tN[0] -= 32; // capitalize\r\n\t\t\tN = str_from_cps(N);\r\n\t\t\tif (R) N=`Restricted[${N}]`;\r\n\t\t\tlet P = read_chunked(); // primary\r\n\t\t\tlet Q = read_chunked(); // secondary\r\n\t\t\tlet M = !r(); // not-whitelisted, check for NSM\r\n\t\t\t// *** this code currently isn't needed ***\r\n\t\t\t/*\r\n\t\t\tlet V = [...P, ...Q].sort((a, b) => a-b); // derive: sorted valid\r\n\t\t\tlet M = r()-1; // number of combining mark\r\n\t\t\tif (M < 0) { // whitelisted\r\n\t\t\t\tM = new Map(read_array_while(() => {\r\n\t\t\t\t\tlet i = r();\r\n\t\t\t\t\tif (i) return [V[i-1], read_array_while(() => {\r\n\t\t\t\t\t\tlet v = read_array_while(r);\r\n\t\t\t\t\t\tif (v.length) return v.map(x => x-1);\r\n\t\t\t\t\t})];\r\n\t\t\t\t}));\r\n\t\t\t}*/\r\n\t\t\treturn {N, P, Q, M, R};\r\n\t\t}\r\n\t});\r\n\r\n\t// decode compressed wholes\r\n\tWHOLE_VALID = read_sorted_set();\r\n\tWHOLE_MAP = new Map();\r\n\tlet wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b) => a-b); // must be sorted\r\n\twholes.forEach((cp, i) => {\r\n\t\tlet d = r(); \r\n\t\tlet w = wholes[i] = d ? wholes[i-d] : {V: [], M: new Map()};\r\n\t\tw.V.push(cp); // add to member set\r\n\t\tif (!WHOLE_VALID.has(cp)) {\r\n\t\t\tWHOLE_MAP.set(cp, w);  // register with whole map\r\n\t\t}\r\n\t});\r\n\r\n\t// compute confusable-extent complements\r\n\t// usage: WHOLE_MAP.get(cp).M.get(cp) = complement set\r\n\tfor (let {V, M} of new Set(WHOLE_MAP.values())) {\r\n\t\t// connect all groups that have each whole character\r\n\t\tlet recs = [];\r\n\t\tfor (let cp of V) {\r\n\t\t\tlet gs = GROUPS.filter(g => group_has_cp(g, cp));\r\n\t\t\tlet rec = recs.find(({G}) => gs.some(g => G.has(g)));\r\n\t\t\tif (!rec) {\r\n\t\t\t\trec = {G: new Set(), V: []};\r\n\t\t\t\trecs.push(rec);\r\n\t\t\t}\r\n\t\t\trec.V.push(cp);\r\n\t\t\tset_add_many(rec.G, gs);\r\n\t\t}\r\n\t\t// per character cache groups which are not a member of the extent\r\n\t\tlet union = recs.flatMap(x => Array_from(x.G)); // all of the groups used by this whole\r\n\t\tfor (let {G, V} of recs) {\r\n\t\t\tlet complement = new Set(union.filter(g => !G.has(g))); // groups not covered by the extent\r\n\t\t\tfor (let cp of V) {\r\n\t\t\t\tM.set(cp, complement); // this is the same reference\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// compute valid set\r\n\t// 20230924: VALID was union but can be re-used\r\n\tVALID = new Set(); // exists in 1+ groups\r\n\tlet multi = new Set(); // exists in 2+ groups\r\n\tconst add_to_union = cp => VALID.has(cp) ? multi.add(cp) : VALID.add(cp);\r\n\tfor (let g of GROUPS) {\r\n\t\tfor (let cp of g.P) add_to_union(cp);\r\n\t\tfor (let cp of g.Q) add_to_union(cp);\r\n\t}\r\n\t// dual purpose WHOLE_MAP: return placeholder if unique non-confusable\r\n\tfor (let cp of VALID) {\r\n\t\tif (!WHOLE_MAP.has(cp) && !multi.has(cp)) {\r\n\t\t\tWHOLE_MAP.set(cp, UNIQUE_PH);\r\n\t\t}\r\n\t}\r\n\t// add all decomposed parts\r\n\t// see derive: \"Valid is Closed (via Brute-force)\"\r\n\tset_add_many(VALID, nfd(VALID));\r\n\t\r\n\t// decode emoji\r\n\t// 20230719: emoji are now fully-expanded to avoid quirk logic \r\n\tEMOJI_LIST = read_trie(r).map(v => Emoji.from(v)).sort(compare_arrays);\r\n\tEMOJI_ROOT = new Map(); // this has approx 7K nodes (2+ per emoji)\r\n\tfor (let cps of EMOJI_LIST) {\r\n\t\t// 20230719: change to *slightly* stricter algorithm which disallows \r\n\t\t// insertion of misplaced FE0F in emoji sequences (matching ENSIP-15)\r\n\t\t// example: beautified [A B] (eg. flag emoji) \r\n\t\t//  before: allow: [A FE0F B], error: [A FE0F FE0F B] \r\n\t\t//   after: error: both\r\n\t\t// note: this code now matches ENSNormalize.{cs,java} logic\r\n\t\tlet prev = [EMOJI_ROOT];\r\n\t\tfor (let cp of cps) {\r\n\t\t\tlet next = prev.map(node => {\r\n\t\t\t\tlet child = node.get(cp);\r\n\t\t\t\tif (!child) {\r\n\t\t\t\t\t// should this be object? \r\n\t\t\t\t\t// (most have 1-2 items, few have many)\r\n\t\t\t\t\t// 20230719: no, v8 default map is 4?\r\n\t\t\t\t\tchild = new Map();\r\n\t\t\t\t\tnode.set(cp, child);\r\n\t\t\t\t}\r\n\t\t\t\treturn child;\r\n\t\t\t});\r\n\t\t\tif (cp === FE0F) {\r\n\t\t\t\tprev.push(...next); // less than 20 elements\r\n\t\t\t} else {\r\n\t\t\t\tprev = next;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let x of prev) {\r\n\t\t\tx.V = cps;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// if escaped: {HEX}\r\n//       else: \"x\" {HEX}\r\nfunction quoted_cp(cp) {\r\n\treturn (should_escape(cp) ? '' : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);\r\n}\r\n\r\n// 20230211: some messages can be mixed-directional and result in spillover\r\n// use 200E after a quoted string to force the remainder of a string from \r\n// acquring the direction of the quote\r\n// https://www.w3.org/International/questions/qa-bidi-unicode-controls#exceptions\r\nfunction bidi_qq(s) {\r\n\treturn `\"${s}\"\\u200E`; // strong LTR\r\n}\r\n\r\nfunction check_label_extension(cps) {\r\n\tif (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {\r\n\t\tthrow new Error(`invalid label extension: \"${str_from_cps(cps.slice(0, 4))}\"`); // this can only be ascii so cant be bidi\r\n\t}\r\n}\r\nfunction check_leading_underscore(cps) {\r\n\tconst UNDERSCORE = 0x5F;\r\n\tfor (let i = cps.lastIndexOf(UNDERSCORE); i > 0; ) {\r\n\t\tif (cps[--i] !== UNDERSCORE) {\r\n\t\t\tthrow new Error('underscore allowed only at start');\r\n\t\t}\r\n\t}\r\n}\r\n// check that a fenced cp is not leading, trailing, or touching another fenced cp\r\nfunction check_fenced(cps) {\r\n\tlet cp = cps[0];\r\n\tlet prev = FENCED.get(cp);\r\n\tif (prev) throw error_placement(`leading ${prev}`);\r\n\tlet n = cps.length;\r\n\tlet last = -1; // prevents trailing from throwing\r\n\tfor (let i = 1; i < n; i++) {\r\n\t\tcp = cps[i];\r\n\t\tlet match = FENCED.get(cp);\r\n\t\tif (match) {\r\n\t\t\t// since cps[0] isn't fenced, cps[1] cannot throw\r\n\t\t\tif (last == i) throw error_placement(`${prev} + ${match}`);\r\n\t\t\tlast = i + 1;\r\n\t\t\tprev = match;\r\n\t\t}\r\n\t}\r\n\tif (last == n) throw error_placement(`trailing ${prev}`);\r\n}\r\n\r\n// create a safe to print string \r\n// invisibles are escaped\r\n// leading cm uses placeholder\r\n// if cps exceed max, middle truncate with ellipsis\r\n// quoter(cp) => string, eg. 3000 => \"{3000}\"\r\n// note: in html, you'd call this function then replace [<>&] with entities\r\nfunction safe_str_from_cps(cps, max = Infinity, quoter = quote_cp) {\r\n\t//if (Number.isInteger(cps)) cps = [cps];\r\n\t//if (!Array.isArray(cps)) throw new TypeError(`expected codepoints`);\r\n\tlet buf = [];\r\n\tif (is_combining_mark(cps[0])) buf.push('◌');\r\n\tif (cps.length > max) {\r\n\t\tmax >>= 1;\r\n\t\tcps = [...cps.slice(0, max), 0x2026, ...cps.slice(-max)];\r\n\t}\r\n\tlet prev = 0;\r\n\tlet n = cps.length;\r\n\tfor (let i = 0; i < n; i++) {\r\n\t\tlet cp = cps[i];\r\n\t\tif (should_escape(cp)) {\r\n\t\t\tbuf.push(str_from_cps(cps.slice(prev, i)));\r\n\t\t\tbuf.push(quoter(cp));\r\n\t\t\tprev = i + 1;\r\n\t\t}\r\n\t}\r\n\tbuf.push(str_from_cps(cps.slice(prev, n)));\r\n\treturn buf.join('');\r\n}\r\n\r\n// note: set(s) cannot be exposed because they can be modified\r\n// note: Object.freeze() doesn't work\r\nfunction is_combining_mark(cp, only_nsm) { // 20240127: add extra argument\r\n\tinit();\r\n\treturn only_nsm ? NSM.has(cp) : CM.has(cp);\r\n}\r\nfunction should_escape(cp) {\r\n\tinit();\r\n\treturn ESCAPE.has(cp);\r\n}\r\n\r\n// return all supported emoji as fully-qualified emoji \r\n// ordered by length then lexicographic \r\nfunction ens_emoji() {\r\n\tinit();\r\n\treturn EMOJI_LIST.map(x => x.slice()); // emoji are exposed so copy\r\n}\r\n\r\nfunction ens_normalize_fragment(frag, decompose) {\r\n\tinit();\r\n\tlet nf = decompose ? nfd : nfc;\r\n\treturn frag.split(STOP_CH).map(label => str_from_cps(tokens_from_str(explode_cp(label), nf, filter_fe0f).flat())).join(STOP_CH);\r\n}\r\n\r\nfunction ens_normalize(name) {\r\n\treturn flatten(split(name, nfc, filter_fe0f));\r\n}\r\n\r\nfunction ens_beautify(name) {\r\n\tlet labels = split(name, nfc, x => x); // emoji not exposed\r\n\tfor (let {type, output, error} of labels) {\r\n\t\tif (error) break; // flatten will throw\r\n\r\n\t\t// replace leading/trailing hyphen\r\n\t\t// 20230121: consider beautifing all or leading/trailing hyphen to unicode variant\r\n\t\t// not exactly the same in every font, but very similar: \"-\" vs \"‐\"\r\n\t\t/*\r\n\t\tconst UNICODE_HYPHEN = 0x2010;\r\n\t\t// maybe this should replace all for visual consistancy?\r\n\t\t// `node tools/reg-count.js regex ^-\\{2,\\}` => 592\r\n\t\t//for (let i = 0; i < output.length; i++) if (output[i] == 0x2D) output[i] = 0x2010;\r\n\t\tif (output[0] == HYPHEN) output[0] = UNICODE_HYPHEN;\r\n\t\tlet end = output.length-1;\r\n\t\tif (output[end] == HYPHEN) output[end] = UNICODE_HYPHEN;\r\n\t\t*/\r\n\t\t// 20230123: WHATWG URL uses \"CheckHyphens\" false\r\n\t\t// https://url.spec.whatwg.org/#idna\r\n\r\n\t\t// update ethereum symbol\r\n\t\t// ξ => Ξ if not greek\r\n\t\tif (type !== 'Greek') array_replace(output, 0x3BE, 0x39E);\r\n\r\n\t\t// 20221213: fixes bidi subdomain issue, but breaks invariant (200E is disallowed)\r\n\t\t// could be fixed with special case for: 2D (.) + 200E (LTR)\r\n\t\t// https://discuss.ens.domains/t/bidi-label-ordering-spoof/15824\r\n\t\t//output.splice(0, 0, 0x200E);\r\n\t}\r\n\treturn flatten(labels);\r\n}\r\n\r\nfunction ens_split(name, preserve_emoji) {\r\n\treturn split(name, nfc, preserve_emoji ? x => x.slice() : filter_fe0f); // emoji are exposed so copy\r\n}\r\n\r\nfunction split(name, nf, ef) {\r\n\tif (!name) return []; // 20230719: empty name allowance\r\n\tinit();\r\n\tlet offset = 0;\r\n\t// https://unicode.org/reports/tr46/#Validity_Criteria\r\n\t// 4.) \"The label must not contain a U+002E ( . ) FULL STOP.\"\r\n\treturn name.split(STOP_CH).map(label => {\r\n\t\tlet input = explode_cp(label);\r\n\t\tlet info = {\r\n\t\t\tinput,\r\n\t\t\toffset, // codepoint, not substring!\r\n\t\t};\r\n\t\toffset += input.length + 1; // + stop\r\n\t\ttry {\r\n\t\t\t// 1.) \"The label must be in Unicode Normalization Form NFC\"\r\n\t\t\tlet tokens = info.tokens = tokens_from_str(input, nf, ef);\r\n\t\t\tlet token_count = tokens.length;\r\n\t\t\tlet type;\r\n\t\t\tif (!token_count) { // the label was effectively empty (could of had ignored characters)\r\n\t\t\t\t//norm = [];\r\n\t\t\t\t//type = 'None'; // use this instead of next match, \"ASCII\"\r\n\t\t\t\t// 20230120: change to strict\r\n\t\t\t\t// https://discuss.ens.domains/t/ens-name-normalization-2nd/14564/59\r\n\t\t\t\tthrow new Error(`empty label`);\r\n\t\t\t} \r\n\t\t\tlet norm = info.output = tokens.flat();\r\n\t\t\tcheck_leading_underscore(norm);\r\n\t\t\tlet emoji = info.emoji = token_count > 1 || tokens[0].is_emoji; // same as: tokens.some(x => x.is_emoji);\r\n\t\t\tif (!emoji && norm.every(cp => cp < 0x80)) { // special case for ascii\r\n\t\t\t\t// 20230123: matches matches WHATWG, see note 3.3\r\n\t\t\t\tcheck_label_extension(norm); // only needed for ascii\r\n\t\t\t\t// cant have fenced\r\n\t\t\t\t// cant have cm\r\n\t\t\t\t// cant have wholes\r\n\t\t\t\t// see derive: \"Fastpath ASCII\"\r\n\t\t\t\ttype = 'ASCII';\r\n\t\t\t} else {\r\n\t\t\t\tlet chars = tokens.flatMap(x => x.is_emoji ? [] : x); // all of the nfc tokens concat together\r\n\t\t\t\tif (!chars.length) { // theres no text, just emoji\r\n\t\t\t\t\ttype = 'Emoji';\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// 5.) \"The label must not begin with a combining mark, that is: General_Category=Mark.\"\r\n\t\t\t\t\tif (CM.has(norm[0])) throw error_placement('leading combining mark');\r\n\t\t\t\t\tfor (let i = 1; i < token_count; i++) { // we've already checked the first token\r\n\t\t\t\t\t\tlet cps = tokens[i];\r\n\t\t\t\t\t\tif (!cps.is_emoji && CM.has(cps[0])) { // every text token has emoji neighbors, eg. EtEEEtEt...\r\n\t\t\t\t\t\t\t// bidi_qq() not needed since emoji is LTR and cps is a CM\r\n\t\t\t\t\t\t\tthrow error_placement(`emoji + combining mark: \"${str_from_cps(tokens[i-1])} + ${safe_str_from_cps([cps[0]])}\"`); \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcheck_fenced(norm);\r\n\t\t\t\t\tlet unique = Array_from(new Set(chars));\r\n\t\t\t\t\tlet [g] = determine_group(unique); // take the first match\r\n\t\t\t\t\t// see derive: \"Matching Groups have Same CM Style\"\r\n\t\t\t\t\t// alternative: could form a hybrid type: Latin/Japanese/...\t\r\n\t\t\t\t\tcheck_group(g, chars); // need text in order\r\n\t\t\t\t\tcheck_whole(g, unique); // only need unique text (order would be required for multiple-char confusables)\r\n\t\t\t\t\ttype = g.N;\r\n\t\t\t\t\t// 20230121: consider exposing restricted flag\r\n\t\t\t\t\t// it's simpler to just check for 'Restricted'\r\n\t\t\t\t\t// or even better: type.endsWith(']')\r\n\t\t\t\t\t//if (g.R) info.restricted = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tinfo.type = type;\r\n\t\t} catch (err) {\r\n\t\t\tinfo.error = err; // use full error object\r\n\t\t}\r\n\t\treturn info;\r\n\t});\r\n}\r\n\r\nfunction check_whole(group, unique) {\r\n\tlet maker;\r\n\tlet shared = [];\r\n\tfor (let cp of unique) {\r\n\t\tlet whole = WHOLE_MAP.get(cp);\r\n\t\tif (whole === UNIQUE_PH) return; // unique, non-confusable\r\n\t\tif (whole) {\r\n\t\t\tlet set = whole.M.get(cp); // groups which have a character that look-like this character\r\n\t\t\tmaker = maker ? maker.filter(g => set.has(g)) : Array_from(set);\r\n\t\t\tif (!maker.length) return; // confusable intersection is empty\r\n\t\t} else {\r\n\t\t\tshared.push(cp); \r\n\t\t}\r\n\t}\r\n\tif (maker) {\r\n\t\t// we have 1+ confusable\r\n\t\t// check if any of the remaining groups\r\n\t\t// contain the shared characters too\r\n\t\tfor (let g of maker) {\r\n\t\t\tif (shared.every(cp => group_has_cp(g, cp))) {\r\n\t\t\t\tthrow new Error(`whole-script confusable: ${group.N}/${g.N}`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// assumption: unique.size > 0\r\n// returns list of matching groups\r\nfunction determine_group(unique) {\r\n\tlet groups = GROUPS;\r\n\tfor (let cp of unique) {\r\n\t\t// note: we need to dodge CM that are whitelisted\r\n\t\t// but that code isn't currently necessary\r\n\t\tlet gs = groups.filter(g => group_has_cp(g, cp));\r\n\t\tif (!gs.length) {\r\n\t\t\tif (!GROUPS.some(g => group_has_cp(g, cp))) { \r\n\t\t\t\t// the character was composed of valid parts\r\n\t\t\t\t// but it's NFC form is invalid\r\n\t\t\t\t// 20230716: change to more exact statement, see: ENSNormalize.{cs,java}\r\n\t\t\t\t// note: this doesn't have to be a composition\r\n\t\t\t\t// 20230720: change to full check\r\n\t\t\t\tthrow error_disallowed(cp); // this should be rare\r\n\t\t\t} else {\r\n\t\t\t\t// there is no group that contains all these characters\r\n\t\t\t\t// throw using the highest priority group that matched\r\n\t\t\t\t// https://www.unicode.org/reports/tr39/#mixed_script_confusables\r\n\t\t\t\tthrow error_group_member(groups[0], cp);\r\n\t\t\t}\r\n\t\t}\r\n\t\tgroups = gs;\r\n\t\tif (gs.length == 1) break; // there is only one group left\r\n\t}\r\n\t// there are at least 1 group(s) with all of these characters\r\n\treturn groups;\r\n}\r\n\r\n// throw on first error\r\nfunction flatten(split) {\r\n\treturn split.map(({input, error, output}) => {\r\n\t\tif (error) {\r\n\t\t\t// don't print label again if just a single label\r\n\t\t\tlet msg = error.message;\r\n\t\t\t// bidi_qq() only necessary if msg is digits\r\n\t\t\tthrow new Error(split.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input, 63))}: ${msg}`); \r\n\t\t}\r\n\t\treturn str_from_cps(output);\r\n\t}).join(STOP_CH);\r\n}\r\n\r\nfunction error_disallowed(cp) {\r\n\t// TODO: add cp to error?\r\n\treturn new Error(`disallowed character: ${quoted_cp(cp)}`); \r\n}\r\nfunction error_group_member(g, cp) {\r\n\tlet quoted = quoted_cp(cp);\r\n\tlet gg = GROUPS.find(g => g.P.has(cp)); // only check primary\r\n\tif (gg) {\r\n\t\tquoted = `${gg.N} ${quoted}`;\r\n\t}\r\n\treturn new Error(`illegal mixture: ${g.N} + ${quoted}`);\r\n}\r\nfunction error_placement(where) {\r\n\treturn new Error(`illegal placement: ${where}`);\r\n}\r\n\r\n// assumption: cps.length > 0\r\n// assumption: cps[0] isn't a CM\r\n// assumption: the previous character isn't an emoji\r\nfunction check_group(g, cps) {\r\n\tfor (let cp of cps) {\r\n\t\tif (!group_has_cp(g, cp)) {\r\n\t\t\t// for whitelisted scripts, this will throw illegal mixture on invalid cm, eg. \"e{300}{300}\"\r\n\t\t\t// at the moment, it's unnecessary to introduce an extra error type\r\n\t\t\t// until there exists a whitelisted multi-character\r\n\t\t\t//   eg. if (M < 0 && is_combining_mark(cp)) { ... }\r\n\t\t\t// there are 3 cases:\r\n\t\t\t//   1. illegal cm for wrong group => mixture error\r\n\t\t\t//   2. illegal cm for same group => cm error\r\n\t\t\t//       requires set of whitelist cm per group: \r\n\t\t\t//        eg. new Set([...g.P, ...g.Q].flatMap(nfc).filter(cp => CM.has(cp)))\r\n\t\t\t//   3. wrong group => mixture error\r\n\t\t\tthrow error_group_member(g, cp);\r\n\t\t}\r\n\t}\r\n\t//if (M >= 0) { // we have a known fixed cm count\r\n\tif (g.M) { // we need to check for NSM\r\n\t\tlet decomposed = nfd(cps);\r\n\t\tfor (let i = 1, e = decomposed.length; i < e; i++) { // see: assumption\r\n\t\t\t// 20230210: bugfix: using cps instead of decomposed h/t Carbon225\r\n\t\t\t/*\r\n\t\t\tif (CM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\twhile (j < e && CM.has(decomposed[j])) j++;\r\n\t\t\t\tif (j - i > M) {\r\n\t\t\t\t\tthrow new Error(`too many combining marks: ${g.N} ${bidi_qq(str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${M})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\t// 20230217: switch to NSM counting\r\n\t\t\t// https://www.unicode.org/reports/tr39/#Optional_Detection\r\n\t\t\tif (NSM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\tfor (let cp; j < e && NSM.has(cp = decomposed[j]); j++) {\r\n\t\t\t\t\t// a. Forbid sequences of the same nonspacing mark.\r\n\t\t\t\t\tfor (let k = i; k < j; k++) { // O(n^2) but n < 100\r\n\t\t\t\t\t\tif (decomposed[k] == cp) {\r\n\t\t\t\t\t\t\tthrow new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// parse to end so we have full nsm count\r\n\t\t\t\t// b. Forbid sequences of more than 4 nonspacing marks (gc=Mn or gc=Me).\r\n\t\t\t\tif (j - i > NSM_MAX) {\r\n\t\t\t\t\t// note: this slice starts with a base char or spacing-mark cm\r\n\t\t\t\t\tthrow new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${NSM_MAX})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// *** this code currently isn't needed ***\r\n\t/*\r\n\tlet cm_whitelist = M instanceof Map;\r\n\tfor (let i = 0, e = cps.length; i < e; ) {\r\n\t\tlet cp = cps[i++];\r\n\t\tlet seqs = cm_whitelist && M.get(cp);\r\n\t\tif (seqs) { \r\n\t\t\t// list of codepoints that can follow\r\n\t\t\t// if this exists, this will always be 1+\r\n\t\t\tlet j = i;\r\n\t\t\twhile (j < e && CM.has(cps[j])) j++;\r\n\t\t\tlet cms = cps.slice(i, j);\r\n\t\t\tlet match = seqs.find(seq => !compare_arrays(seq, cms));\r\n\t\t\tif (!match) throw new Error(`disallowed combining mark sequence: \"${safe_str_from_cps([cp, ...cms])}\"`);\r\n\t\t\ti = j;\r\n\t\t} else if (!V.has(cp)) {\r\n\t\t\t// https://www.unicode.org/reports/tr39/#mixed_script_confusables\r\n\t\t\tlet quoted = quoted_cp(cp);\r\n\t\t\tfor (let cp of cps) {\r\n\t\t\t\tlet u = UNIQUE.get(cp);\r\n\t\t\t\tif (u && u !== g) {\r\n\t\t\t\t\t// if both scripts are restricted this error is confusing\r\n\t\t\t\t\t// because we don't differentiate RestrictedA from RestrictedB \r\n\t\t\t\t\tif (!u.R) quoted = `${quoted} is ${u.N}`;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthrow new Error(`disallowed ${g.N} character: ${quoted}`);\r\n\t\t\t//throw new Error(`disallowed character: ${quoted} (expected ${g.N})`);\r\n\t\t\t//throw new Error(`${g.N} does not allow: ${quoted}`);\r\n\t\t}\r\n\t}\r\n\tif (!cm_whitelist) {\r\n\t\tlet decomposed = nfd(cps);\r\n\t\tfor (let i = 1, e = decomposed.length; i < e; i++) { // we know it can't be cm leading\r\n\t\t\tif (CM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\twhile (j < e && CM.has(decomposed[j])) j++;\r\n\t\t\t\tif (j - i > M) {\r\n\t\t\t\t\tthrow new Error(`too many combining marks: \"${str_from_cps(decomposed.slice(i-1, j))}\" (${j-i}/${M})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t*/\r\n}\r\n\r\n// given a list of codepoints\r\n// returns a list of lists, where emoji are a fully-qualified (as Array subclass)\r\n// eg. explode_cp(\"abc💩d\") => [[61, 62, 63], Emoji[1F4A9, FE0F], [64]]\r\n// 20230818: rename for 'process' name collision h/t Javarome\r\n// https://github.com/adraffy/ens-normalize.js/issues/23\r\nfunction tokens_from_str(input, nf, ef) {\r\n\tlet ret = [];\r\n\tlet chars = [];\r\n\tinput = input.slice().reverse(); // flip so we can pop\r\n\twhile (input.length) {\r\n\t\tlet emoji = consume_emoji_reversed(input);\r\n\t\tif (emoji) {\r\n\t\t\tif (chars.length) {\r\n\t\t\t\tret.push(nf(chars));\r\n\t\t\t\tchars = [];\r\n\t\t\t}\r\n\t\t\tret.push(ef(emoji));\r\n\t\t} else {\r\n\t\t\tlet cp = input.pop();\r\n\t\t\tif (VALID.has(cp)) {\r\n\t\t\t\tchars.push(cp);\r\n\t\t\t} else {\r\n\t\t\t\tlet cps = MAPPED.get(cp);\r\n\t\t\t\tif (cps) {\r\n\t\t\t\t\tchars.push(...cps); // less than 10 elements\r\n\t\t\t\t} else if (!IGNORED.has(cp)) {\r\n\t\t\t\t\t// 20230912: unicode 15.1 changed the order of processing such that\r\n\t\t\t\t\t// disallowed parts are only rejected after NFC\r\n\t\t\t\t\t// https://unicode.org/reports/tr46/#Validity_Criteria\r\n\t\t\t\t\t// this doesn't impact normalization as of today\r\n\t\t\t\t\t// technically, this error can be removed as the group logic will apply similar logic\r\n\t\t\t\t\t// however the error type might be less clear\r\n\t\t\t\t\tthrow error_disallowed(cp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (chars.length) {\r\n\t\tret.push(nf(chars));\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction filter_fe0f(cps) {\r\n\treturn cps.filter(cp => cp != FE0F);\r\n}\r\n\r\n// given array of codepoints\r\n// returns the longest valid emoji sequence (or undefined if no match)\r\n// *MUTATES* the supplied array\r\n// disallows interleaved ignored characters\r\n// fills (optional) eaten array with matched codepoints\r\nfunction consume_emoji_reversed(cps, eaten) {\r\n\tlet node = EMOJI_ROOT;\r\n\tlet emoji;\r\n\tlet pos = cps.length;\r\n\twhile (pos) {\r\n\t\tnode = node.get(cps[--pos]);\r\n\t\tif (!node) break;\r\n\t\tlet {V} = node;\r\n\t\tif (V) { // this is a valid emoji (so far)\r\n\t\t\temoji = V;\r\n\t\t\tif (eaten) eaten.push(...cps.slice(pos).reverse()); // (optional) copy input, used for ens_tokenize()\r\n\t\t\tcps.length = pos; // truncate\r\n\t\t}\r\n\t}\r\n\treturn emoji;\r\n}\r\n\r\n// ************************************************************\r\n// tokenizer \r\n\r\nconst TY_VALID = 'valid';\r\nconst TY_MAPPED = 'mapped';\r\nconst TY_IGNORED = 'ignored';\r\nconst TY_DISALLOWED = 'disallowed';\r\nconst TY_EMOJI = 'emoji';\r\nconst TY_NFC = 'nfc';\r\nconst TY_STOP = 'stop';\r\n\r\nfunction ens_tokenize(name, {\r\n\tnf = true, // collapse unnormalized runs into a single token\r\n} = {}) {\r\n\tinit();\r\n\tlet input = explode_cp(name).reverse();\r\n\tlet eaten = [];\r\n\tlet tokens = [];\r\n\twhile (input.length) {\r\n\t\tlet emoji = consume_emoji_reversed(input, eaten);\r\n\t\tif (emoji) {\r\n\t\t\ttokens.push({\r\n\t\t\t\ttype: TY_EMOJI,\r\n\t\t\t\temoji: emoji.slice(), // copy emoji\r\n\t\t\t\tinput: eaten,\r\n\t\t\t\tcps: filter_fe0f(emoji)\r\n\t\t\t});\r\n\t\t\teaten = []; // reset buffer\r\n\t\t} else {\r\n\t\t\tlet cp = input.pop();\r\n\t\t\tif (cp == STOP) {\r\n\t\t\t\ttokens.push({type: TY_STOP, cp});\r\n\t\t\t} else if (VALID.has(cp)) {\r\n\t\t\t\ttokens.push({type: TY_VALID, cps: [cp]});\r\n\t\t\t} else if (IGNORED.has(cp)) {\r\n\t\t\t\ttokens.push({type: TY_IGNORED, cp});\r\n\t\t\t} else {\r\n\t\t\t\tlet cps = MAPPED.get(cp);\r\n\t\t\t\tif (cps) {\r\n\t\t\t\t\ttokens.push({type: TY_MAPPED, cp, cps: cps.slice()});\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttokens.push({type: TY_DISALLOWED, cp});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (nf) {\r\n\t\tfor (let i = 0, start = -1; i < tokens.length; i++) {\r\n\t\t\tlet token = tokens[i];\r\n\t\t\tif (is_valid_or_mapped(token.type)) {\r\n\t\t\t\tif (requires_check(token.cps)) { // normalization might be needed\r\n\t\t\t\t\tlet end = i + 1;\r\n\t\t\t\t\tfor (let pos = end; pos < tokens.length; pos++) { // find adjacent text\r\n\t\t\t\t\t\tlet {type, cps} = tokens[pos];\r\n\t\t\t\t\t\tif (is_valid_or_mapped(type)) {\r\n\t\t\t\t\t\t\tif (!requires_check(cps)) break;\r\n\t\t\t\t\t\t\tend = pos + 1;\r\n\t\t\t\t\t\t} else if (type !== TY_IGNORED) { // || type !== TY_DISALLOWED) { \r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (start < 0) start = i;\r\n\t\t\t\t\tlet slice = tokens.slice(start, end);\r\n\t\t\t\t\tlet cps0 = slice.flatMap(x => is_valid_or_mapped(x.type) ? x.cps : []); // strip junk tokens\r\n\t\t\t\t\tlet cps = nfc(cps0);\r\n\t\t\t\t\tif (compare_arrays(cps, cps0)) { // bundle into an nfc token\r\n\t\t\t\t\t\ttokens.splice(start, end - start, {\r\n\t\t\t\t\t\t\ttype: TY_NFC, \r\n\t\t\t\t\t\t\tinput: cps0, // there are 3 states: tokens0 ==(process)=> input ==(nfc)=> tokens/cps\r\n\t\t\t\t\t\t\tcps, \r\n\t\t\t\t\t\t\ttokens0: collapse_valid_tokens(slice),\r\n\t\t\t\t\t\t\ttokens: ens_tokenize(str_from_cps(cps), {nf: false})\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\ti = start;\r\n\t\t\t\t\t} else { \r\n\t\t\t\t\t\ti = end - 1; // skip to end of slice\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstart = -1; // reset\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstart = i; // remember last\r\n\t\t\t\t}\r\n\t\t\t} else if (token.type !== TY_IGNORED) { // 20221024: is this correct?\r\n\t\t\t\tstart = -1; // reset\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn collapse_valid_tokens(tokens);\r\n}\r\n\r\nfunction is_valid_or_mapped(type) {\r\n\treturn type == TY_VALID || type == TY_MAPPED;\r\n}\r\n\r\nfunction requires_check(cps) {\r\n\treturn cps.some(cp => NFC_CHECK.has(cp));\r\n}\r\n\r\nfunction collapse_valid_tokens(tokens) {\r\n\tfor (let i = 0; i < tokens.length; i++) {\r\n\t\tif (tokens[i].type == TY_VALID) {\r\n\t\t\tlet j = i + 1;\r\n\t\t\twhile (j < tokens.length && tokens[j].type == TY_VALID) j++;\r\n\t\t\ttokens.splice(i, j - i, {type: TY_VALID, cps: tokens.slice(i, j).flatMap(x => x.cps)});\r\n\t\t}\r\n\t}\r\n\treturn tokens;\r\n}\n\nexport { ens_beautify, ens_emoji, ens_normalize, ens_normalize_fragment, ens_split, ens_tokenize, is_combining_mark, nfc, nfd, safe_str_from_cps, should_escape };\n", "import * as abitype from 'abitype'\nimport type * as Errors from './Errors.js'\nimport * as internal from './internal/abi.js'\nimport type * as AbiItem_internal from './internal/abiItem.js'\n\n/** Root type for an ABI. */\nexport type Abi = abitype.Abi\n\n/** @internal */\nexport function format<const abi extends Abi>(abi: abi): format.ReturnType<abi>\n/**\n * Formats an {@link ox#Abi.Abi} into a **Human Readable ABI**.\n *\n * @example\n * ```ts twoslash\n * import { Abi } from 'ox'\n *\n * const formatted = Abi.format([{\n *   type: 'function',\n *   name: 'approve',\n *   stateMutability: 'nonpayable',\n *   inputs: [\n *     {\n *       name: 'spender',\n *       type: 'address',\n *     },\n *     {\n *       name: 'amount',\n *       type: 'uint256',\n *     },\n *   ],\n *   outputs: [{ type: 'bool' }],\n * }])\n *\n * formatted\n * //    ^?\n *\n *\n *\n * ```\n *\n * @param abi - The ABI to format.\n * @returns The formatted ABI.\n */\nexport function format(abi: Abi | readonly unknown[]): readonly string[]\n/** @internal */\nexport function format(abi: Abi | readonly unknown[]): format.ReturnType {\n  return abitype.formatAbi(abi) as never\n}\n\nexport declare namespace format {\n  type ReturnType<abi extends Abi | readonly unknown[] = Abi> =\n    abitype.FormatAbi<abi>\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function from<const abi extends Abi | readonly string[]>(\n  abi: abi &\n    (abi extends readonly string[]\n      ? AbiItem_internal.Signatures<abi>\n      : unknown),\n): from.ReturnType<abi>\n/**\n * Parses an arbitrary **JSON ABI** or **Human Readable ABI** into a typed {@link ox#Abi.Abi}.\n *\n * @example\n * ### JSON ABIs\n *\n * ```ts twoslash\n * import { Abi } from 'ox'\n *\n * const abi = Abi.from([{\n *   type: 'function',\n *   name: 'approve',\n *   stateMutability: 'nonpayable',\n *   inputs: [\n *     {\n *       name: 'spender',\n *       type: 'address',\n *     },\n *     {\n *       name: 'amount',\n *       type: 'uint256',\n *     },\n *   ],\n *   outputs: [{ type: 'bool' }],\n * }])\n *\n * abi\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Human Readable ABIs\n *\n * ```ts twoslash\n * import { Abi } from 'ox'\n *\n * const abi = Abi.from([\n *   'function approve(address spender, uint256 amount) returns (bool)'\n * ])\n *\n * abi\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @param abi - The ABI to parse.\n * @returns The typed ABI.\n */\nexport function from(abi: Abi | readonly string[]): Abi\n/** @internal */\nexport function from(abi: Abi | readonly string[]): from.ReturnType {\n  if (internal.isSignatures(abi)) return abitype.parseAbi(abi)\n  return abi\n}\n\nexport declare namespace from {\n  type ReturnType<\n    abi extends Abi | readonly string[] | readonly unknown[] = Abi,\n  > = abi extends readonly string[] ? abitype.ParseAbi<abi> : abi\n\n  type ErrorType = Errors.GlobalErrorType\n}\n", "import type * as Abi from '../Abi.js'\n\n/** @internal */\nexport function isSignatures(\n  value: Abi.Abi | readonly string[],\n): value is readonly string[] {\n  for (const item of value) {\n    if (typeof item !== 'string') return false\n  }\n  return true\n}\n", "import * as abitype from 'abitype'\nimport type * as Abi from './Abi.js'\nimport * as AbiItem from './AbiItem.js'\nimport * as AbiParameters from './AbiParameters.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport type * as internal from './internal/abiError.js'\nimport type * as AbiItem_internal from './internal/abiItem.js'\nimport type { IsNarrowable, IsNever } from './internal/types.js'\n\n/** Root type for an {@link ox#AbiItem.AbiItem} with an `error` type. */\nexport type AbiError = abitype.AbiError & {\n  hash?: Hex.Hex | undefined\n  overloads?: readonly AbiError[] | undefined\n}\n\n/** @internal */\nexport function decode<\n  const abiError extends AbiError,\n  as extends 'Object' | 'Array' = 'Array',\n>(\n  abiError: abiError,\n  data: Hex.Hex,\n  options?: decode.Options<as> | undefined,\n): decode.ReturnType<abiError, as>\n/**\n * ABI-decodes the provided error input (`inputs`).\n *\n * :::tip\n *\n * This function is typically used to decode contract function reverts (e.g. a JSON-RPC error response).\n *\n * See the [End-to-end Example](#end-to-end).\n *\n * :::\n *\n * @example\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const error = AbiError.from('error InvalidSignature(uint r, uint s, uint8 yParity)')\n *\n * const value = AbiError.decode(error, '0xecde634900000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001')\n * // @log: [420n, 69n, 1]\n * ```\n *\n * @example\n * You can extract an ABI Error from a JSON ABI with {@link ox#AbiError.(fromAbi:function)}:\n *\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiError } from 'ox'\n *\n * const abi = Abi.from([...]) // [!code hl]\n * const error = AbiError.fromAbi(abi, 'InvalidSignature') // [!code hl]\n *\n * const value = AbiError.decode(error, '0xecde634900000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001')\n * // @log: [420n, 69n, 1]\n * ```\n *\n * @example\n * You can pass the error `data` to the `name` property of {@link ox#AbiError.(fromAbi:function)} to extract and infer the error by its 4-byte selector:\n *\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiError } from 'ox'\n *\n * const data = '0xecde634900000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001'\n *\n * const abi = Abi.from([...])\n * const error = AbiError.fromAbi(abi, data) // [!code hl]\n *\n * const value = AbiError.decode(error, data)\n * // @log: [420n, 69n, 1]\n * ```\n *\n * @example\n * ### End-to-end\n *\n * Below is an end-to-end example of using `AbiError.decode` to decode the revert error of an `approve` contract call on the [Wagmi Mint Example contract](https://etherscan.io/address/0xfba3912ca04dd458c843e2ee08967fc04f3579c2).\n *\n * ```ts twoslash\n * // @noErrors\n * import 'ox/window'\n * import { Abi, AbiError, AbiFunction } from 'ox'\n *\n * // 1. Extract the Function from the Contract's ABI.\n * const abi = Abi.from([\n *   // ...\n *   {\n *     inputs: [\n *       { name: 'to', type: 'address' },\n *       { name: 'tokenId', type: 'uint256' },\n *     ],\n *     name: 'approve',\n *     outputs: [],\n *     stateMutability: 'nonpayable',\n *     type: 'function',\n *   },\n *   // ...\n * ])\n * const approve = AbiFunction.fromAbi(abi, 'approve')\n *\n * // 2. Encode the Function Input.\n * const data = AbiFunction.encodeData(\n *   approve,\n *   ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 69420n]\n * )\n *\n * try {\n *   // 3. Attempt to perform the the Contract Call.\n *   await window.ethereum!.request({\n *     method: 'eth_call',\n *     params: [\n *       {\n *         data,\n *         to: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n *       },\n *     ],\n *   })\n * } catch (e) { // [!code focus]\n *   // 4. Extract and decode the Error. // [!code focus]\n *   const error = AbiError.fromAbi(abi, e.data) // [!code focus]\n *   const value = AbiError.decode(error, e.data) // [!code focus]\n *   console.error(`${error.name}(${value})`) // [!code focus]\n * // @error:   Error(ERC721: approve caller is not owner nor approved for all)\n * } // [!code focus]\n * ```\n *\n * :::note\n *\n * For simplicity, the above example uses `window.ethereum.request`, but you can use any\n * type of JSON-RPC interface.\n *\n * :::\n *\n * @param abiError - The ABI Error to decode.\n * @param data - The error data.\n * @param options - Decoding options.\n * @returns The decoded error.\n */\nexport function decode(\n  abiError: AbiError,\n  data: Hex.Hex,\n  options?: decode.Options | undefined,\n): unknown | readonly unknown[] | undefined\n/** @internal */\nexport function decode(\n  abiError: AbiError,\n  data: Hex.Hex,\n  options: decode.Options = {},\n): decode.ReturnType {\n  if (Hex.size(data) < 4) throw new AbiItem.InvalidSelectorSizeError({ data })\n  if (abiError.inputs.length === 0) return undefined\n\n  const values = AbiParameters.decode(\n    abiError.inputs,\n    Hex.slice(data, 4),\n    options,\n  )\n  if (values && Object.keys(values).length === 1) {\n    if (Array.isArray(values)) return values[0]\n    return Object.values(values)[0]\n  }\n  return values\n}\n\nexport declare namespace decode {\n  type Options<as extends 'Object' | 'Array' = 'Array'> = {\n    /**\n     * Whether the decoded values should be returned as an `Object` or `Array`.\n     *\n     * @default \"Array\"\n     */\n    as?: as | 'Array' | 'Object' | undefined\n  }\n\n  type ReturnType<\n    abiError extends AbiError = AbiError,\n    as extends 'Object' | 'Array' = 'Array',\n  > = IsNarrowable<abiError, AbiError> extends true\n    ? abiError['inputs'] extends readonly []\n      ? undefined\n      : abiError['inputs'] extends readonly [\n            infer type extends abitype.AbiParameter,\n          ]\n        ? abitype.AbiParameterToPrimitiveType<type>\n        : AbiParameters.decode.ReturnType<\n              abiError['inputs'],\n              as\n            > extends infer types\n          ? types extends readonly []\n            ? undefined\n            : types extends readonly [infer type]\n              ? type\n              : types\n          : never\n    : unknown | readonly unknown[] | undefined\n\n  type ErrorType =\n    | AbiParameters.decode.ErrorType\n    | Hex.size.ErrorType\n    | typeof AbiItem.InvalidSelectorSizeError\n    | Errors.GlobalErrorType\n}\n\n/**\n * ABI-encodes the provided error input (`inputs`), prefixed with the 4 byte error selector.\n *\n * @example\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const error = AbiError.from(\n *   'error InvalidSignature(uint r, uint s, uint8 yParity)'\n * )\n *\n * const data = AbiError.encode( // [!code focus]\n *   error, // [!code focus]\n *   [1n, 2n, 0] // [!code focus]\n * ) // [!code focus]\n * // @log: '0x095ea7b3000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa960450000000000000000000000000000000000000000000000000000000000010f2c'\n * ```\n *\n * @example\n * You can extract an ABI Error from a JSON ABI with {@link ox#AbiError.(fromAbi:function)}:\n *\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiError } from 'ox'\n *\n * const abi = Abi.from([ // [!code hl]\n *   // ... // [!code hl]\n *   { // [!code hl]\n *     name: 'InvalidSignature', // [!code hl]\n *     type: 'error', // [!code hl]\n *     inputs: [ // [!code hl]\n *       { name: 'r', type: 'uint256' }, // [!code hl]\n *       { name: 's', type: 'uint256' }, // [!code hl]\n *       { name: 'yParity', type: 'uint8' }, // [!code hl]\n *     ], // [!code hl]\n *   }, // [!code hl]\n *   // ... // [!code hl]\n * ]) // [!code hl]\n * const error = AbiError.fromAbi(abi, 'InvalidSignature') // [!code hl]\n *\n * const data = AbiError.encode(\n *   error,\n *   ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 69420n]\n * )\n * // @log: '0x095ea7b3000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa960450000000000000000000000000000000000000000000000000000000000010f2c'\n * ```\n *\n * @param abiError - ABI Error to encode\n * @param args - Error arguments\n * @returns ABI-encoded error name and arguments\n */\nexport function encode<const abiError extends AbiError>(\n  abiError: abiError,\n  ...args: encode.Args<abiError>\n): encode.ReturnType {\n  const selector = getSelector(abiError)\n\n  const data =\n    args.length > 0\n      ? AbiParameters.encode(abiError.inputs, (args as any)[0])\n      : undefined\n\n  return data ? Hex.concat(selector, data) : selector\n}\n\nexport declare namespace encode {\n  type Args<abiError extends AbiError = AbiError> = IsNarrowable<\n    abiError,\n    AbiError\n  > extends true\n    ? abitype.AbiParametersToPrimitiveTypes<\n        abiError['inputs']\n      > extends readonly []\n      ? []\n      : [abitype.AbiParametersToPrimitiveTypes<abiError['inputs']>]\n    : readonly unknown[]\n\n  type ReturnType = Hex.Hex\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Formats an {@link ox#AbiError.AbiError} into a **Human Readable ABI Error**.\n *\n * @example\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const formatted = AbiError.format({\n *   type: 'error',\n *   name: 'Example',\n *   inputs: [\n *     {\n *       name: 'spender',\n *       type: 'address',\n *     },\n *     {\n *       name: 'amount',\n *       type: 'uint256',\n *     },\n *   ],\n * })\n *\n * formatted\n * //    ^?\n *\n *\n * ```\n *\n * @param abiError - The ABI Error to format.\n * @returns The formatted ABI Error.\n */\nexport function format<const abiError extends AbiError>(\n  abiError: abiError | AbiError,\n): abitype.FormatAbiItem<abiError> {\n  return abitype.formatAbiItem(abiError) as never\n}\n\nexport declare namespace format {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Parses an arbitrary **JSON ABI Error** or **Human Readable ABI Error** into a typed {@link ox#AbiError.AbiError}.\n *\n * @example\n * ### JSON ABIs\n *\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const badSignatureVError = AbiError.from({\n *   inputs: [{ name: 'v', type: 'uint8' }],\n *   name: 'BadSignatureV',\n *   type: 'error',\n * })\n *\n * badSignatureVError\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Human Readable ABIs\n *\n * A Human Readable ABI can be parsed into a typed ABI object:\n *\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const badSignatureVError = AbiError.from(\n *   'error BadSignatureV(uint8 v)' // [!code hl]\n * )\n *\n * badSignatureVError\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * It is possible to specify `struct`s along with your definitions:\n *\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const badSignatureVError = AbiError.from([\n *   'struct Signature { uint8 v; }', // [!code hl]\n *   'error BadSignatureV(Signature signature)',\n * ])\n *\n * badSignatureVError\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n *\n *\n * @param abiError - The ABI Error to parse.\n * @returns Typed ABI Error.\n */\nexport function from<\n  const abiError extends AbiError | string | readonly string[],\n>(\n  abiError: (abiError | AbiError | string | readonly string[]) &\n    (\n      | (abiError extends string ? internal.Signature<abiError> : never)\n      | (abiError extends readonly string[]\n          ? internal.Signatures<abiError>\n          : never)\n      | AbiError\n    ),\n  options: from.Options = {},\n): from.ReturnType<abiError> {\n  return AbiItem.from(abiError as AbiError, options) as never\n}\n\nexport declare namespace from {\n  type Options = {\n    /**\n     * Whether or not to prepare the extracted function (optimization for encoding performance).\n     * When `true`, the `hash` property is computed and included in the returned value.\n     *\n     * @default true\n     */\n    prepare?: boolean | undefined\n  }\n\n  type ReturnType<abiError extends AbiError | string | readonly string[]> =\n    AbiItem.from.ReturnType<abiError>\n\n  type ErrorType = AbiItem.from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Extracts an {@link ox#AbiError.AbiError} from an {@link ox#Abi.Abi} given a name and optional arguments.\n *\n * @example\n * ### Extracting by Name\n *\n * ABI Errors can be extracted by their name using the `name` option:\n *\n * ```ts twoslash\n * import { Abi, AbiError } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo()',\n *   'error BadSignatureV(uint8 v)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n *\n * const item = AbiError.fromAbi(abi, 'BadSignatureV') // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Extracting by Selector\n *\n * ABI Errors can be extract by their selector when {@link ox#Hex.Hex} is provided to `name`.\n *\n * ```ts twoslash\n * import { Abi, AbiError } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo()',\n *   'error BadSignatureV(uint8 v)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n * const item = AbiError.fromAbi(abi, '0x095ea7b3') // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * :::note\n *\n * Extracting via a hex selector is useful when extracting an ABI Error from JSON-RPC error data.\n *\n * :::\n *\n * @param abi - The ABI to extract from.\n * @param name - The name (or selector) of the ABI item to extract.\n * @param options - Extraction options.\n * @returns The ABI item.\n */\nexport function fromAbi<\n  const abi extends Abi.Abi | readonly unknown[],\n  name extends Name<abi>,\n  const args extends\n    | AbiItem_internal.ExtractArgs<abi, name>\n    | undefined = undefined,\n  //\n  allNames = Name<abi>,\n>(\n  abi: abi | Abi.Abi | readonly unknown[],\n  name: Hex.Hex | (name extends allNames ? name : never),\n  options?: AbiItem.fromAbi.Options<\n    abi,\n    name,\n    args,\n    AbiItem_internal.ExtractArgs<abi, name>\n  >,\n): fromAbi.ReturnType<abi, name, args> {\n  if (name === 'Error') return solidityError as never\n  if (name === 'Panic') return solidityPanic as never\n  if (Hex.validate(name, { strict: false })) {\n    const selector = Hex.slice(name, 0, 4)\n    if (selector === solidityErrorSelector) return solidityError as never\n    if (selector === solidityPanicSelector) return solidityPanic as never\n  }\n\n  const item = AbiItem.fromAbi(abi, name, options as any)\n  if (item.type !== 'error')\n    throw new AbiItem.NotFoundError({ name, type: 'error' })\n  return item as never\n}\n\nexport declare namespace fromAbi {\n  type ReturnType<\n    abi extends Abi.Abi | readonly unknown[] = Abi.Abi,\n    name extends Name<abi> = Name<abi>,\n    args extends\n      | AbiItem_internal.ExtractArgs<abi, name>\n      | undefined = AbiItem_internal.ExtractArgs<abi, name>,\n  > = IsNarrowable<name, Name<abi>> extends true\n    ?\n        | (name extends 'Error' ? typeof solidityError : never)\n        | (name extends 'Panic'\n            ? typeof solidityPanic\n            : never) extends infer result\n      ? IsNever<result> extends true\n        ? AbiItem.fromAbi.ReturnType<abi, name, args, AbiError>\n        : result\n      : never\n    :\n        | AbiItem.fromAbi.ReturnType<abi, name, args, AbiError>\n        | typeof solidityError\n        | typeof solidityPanic\n\n  type ErrorType = AbiItem.fromAbi.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Computes the [4-byte selector](https://solidity-by-example.org/function-selector/) for an {@link ox#AbiError.AbiError}.\n *\n * @example\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const selector = AbiError.getSelector('error BadSignatureV(uint8 v)')\n * // @log: '0x6352211e'\n * ```\n *\n * @example\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const selector = AbiError.getSelector({\n *   inputs: [{ name: 'v', type: 'uint8' }],\n *   name: 'BadSignatureV',\n *   type: 'error'\n * })\n * // @log: '0x6352211e'\n * ```\n *\n * @param abiItem - The ABI item to compute the selector for.\n * @returns The first 4 bytes of the {@link ox#Hash.(keccak256:function)} hash of the error signature.\n */\nexport function getSelector(abiItem: string | AbiError): Hex.Hex {\n  return AbiItem.getSelector(abiItem)\n}\n\nexport declare namespace getSelector {\n  type ErrorType = AbiItem.getSelector.ErrorType | Errors.GlobalErrorType\n}\n\n// https://docs.soliditylang.org/en/v0.8.16/control-structures.html#panic-via-assert-and-error-via-require\nexport const panicReasons = {\n  1: 'An `assert` condition failed.',\n  17: 'Arithmetic operation resulted in underflow or overflow.',\n  18: 'Division or modulo by zero (e.g. `5 / 0` or `23 % 0`).',\n  33: 'Attempted to convert to an invalid type.',\n  34: 'Attempted to access a storage byte array that is incorrectly encoded.',\n  49: 'Performed `.pop()` on an empty array',\n  50: 'Array index is out of bounds.',\n  65: 'Allocated too much memory or created an array which is too large.',\n  81: 'Attempted to call a zero-initialized variable of internal function type.',\n} as Record<number, string>\n\nexport const solidityError = /*#__PURE__*/ from({\n  inputs: [\n    {\n      name: 'message',\n      type: 'string',\n    },\n  ],\n  name: 'Error',\n  type: 'error',\n})\n\nexport const solidityErrorSelector = '0x08c379a0'\n\nexport const solidityPanic = /*#__PURE__*/ from({\n  inputs: [\n    {\n      name: 'reason',\n      type: 'uint8',\n    },\n  ],\n  name: 'Panic',\n  type: 'error',\n})\n\nexport const solidityPanicSelector = '0x4e487b71'\n\n/**\n * Extracts an {@link ox#AbiError.AbiError} item from an {@link ox#Abi.Abi}, given a name.\n *\n * @example\n * ```ts twoslash\n * import { Abi, AbiError } from 'ox'\n *\n * const abi = Abi.from([\n *   'error Foo(string)',\n *   'error Bar(uint256)',\n * ])\n *\n * type Foo = AbiError.FromAbi<typeof abi, 'Foo'>\n * //   ^?\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n */\nexport type FromAbi<\n  abi extends Abi.Abi,\n  name extends ExtractNames<abi>,\n> = abitype.ExtractAbiError<abi, name>\n\n/**\n * Extracts the names of all {@link ox#AbiError.AbiError} items in an {@link ox#Abi.Abi}.\n *\n * @example\n * ```ts twoslash\n * import { Abi, AbiError } from 'ox'\n *\n * const abi = Abi.from([\n *   'error Foo(string)',\n *   'error Bar(uint256)',\n * ])\n *\n * type names = AbiError.Name<typeof abi>\n * //   ^?\n * ```\n */\nexport type Name<abi extends Abi.Abi | readonly unknown[] = Abi.Abi> =\n  abi extends Abi.Abi ? ExtractNames<abi> : string\n\nexport type ExtractNames<abi extends Abi.Abi> =\n  | abitype.ExtractAbiErrorNames<abi>\n  | 'Panic'\n  | 'Error'\n", "import * as abitype from 'abitype'\nimport type * as Abi from './Abi.js'\nimport * as AbiItem from './AbiItem.js'\nimport * as AbiParameters from './AbiParameters.js'\nimport * as Address from './Address.js'\nimport * as Bytes from './Bytes.js'\nimport * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as Hex from './Hex.js'\nimport type * as internal from './internal/abiEvent.js'\nimport type * as AbiItem_internal from './internal/abiItem.js'\nimport * as Cursor from './internal/cursor.js'\nimport { prettyPrint } from './internal/errors.js'\nimport type { Compute } from './internal/types.js'\nimport type { IsNarrowable } from './internal/types.js'\n\n/** Root type for an {@link ox#AbiItem.AbiItem} with an `event` type. */\nexport type AbiEvent = abitype.AbiEvent & {\n  hash?: Hex.Hex | undefined\n  overloads?: readonly AbiEvent[] | undefined\n}\n\n/**\n * Extracts an {@link ox#AbiEvent.AbiEvent} item from an {@link ox#Abi.Abi}, given a name.\n *\n * @example\n * ```ts twoslash\n * import { Abi, AbiEvent } from 'ox'\n *\n * const abi = Abi.from([\n *   'event Foo(string)',\n *   'event Bar(uint256)',\n * ])\n *\n * type Foo = AbiEvent.FromAbi<typeof abi, 'Foo'>\n * //   ^?\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n */\nexport type FromAbi<\n  abi extends Abi.Abi,\n  name extends ExtractNames<abi>,\n> = abitype.ExtractAbiEvent<abi, name>\n\n/**\n * Extracts the names of all {@link ox#AbiError.AbiError} items in an {@link ox#Abi.Abi}.\n *\n * @example\n * ```ts twoslash\n * import { Abi, AbiEvent } from 'ox'\n *\n * const abi = Abi.from([\n *   'event Foo(string)',\n *   'event Bar(uint256)',\n * ])\n *\n * type names = AbiEvent.Name<typeof abi>\n * //   ^?\n * ```\n */\nexport type Name<abi extends Abi.Abi | readonly unknown[] = Abi.Abi> =\n  abi extends Abi.Abi ? ExtractNames<abi> : string\n\nexport type ExtractNames<abi extends Abi.Abi> =\n  abitype.ExtractAbiEventNames<abi>\n\n/**\n * Asserts that the provided arguments match the decoded log arguments.\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const abiEvent = AbiEvent.from('event Transfer(address indexed from, address indexed to, uint256 value)')\n *\n * const args = AbiEvent.decode(abiEvent, {\n *   data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *   ],\n * })\n *\n * AbiEvent.assertArgs(abiEvent, args, {\n *   from: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ad',\n *   to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *   value: 1n,\n * })\n *\n * // @error: AbiEvent.ArgsMismatchError: Given arguments to not match the arguments decoded from the log.\n * // @error: Event: event Transfer(address indexed from, address indexed to, uint256 value)\n * // @error: Expected Arguments:\n * // @error:   from:   0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac\n * // @error:   to:     0xa5cc3c03994db5b0d9a5eedd10cabab0813678ad\n * // @error:   value:  1\n * // @error: Given Arguments:\n * // @error:   from:   0xa5cc3c03994db5b0d9a5eedd10cabab0813678ad\n * // @error:   to:     0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac\n * // @error:   value:  1\n * ```\n *\n * @param abiEvent - ABI Event to check.\n * @param args - Decoded arguments.\n * @param matchArgs - The arguments to check.\n */\nexport function assertArgs<const abiEvent extends AbiEvent>(\n  abiEvent: abiEvent | AbiEvent,\n  args: unknown,\n  matchArgs: IsNarrowable<abiEvent, AbiEvent> extends true\n    ? abiEvent['inputs'] extends readonly []\n      ? never\n      : internal.ParametersToPrimitiveTypes<\n          abiEvent['inputs'],\n          { EnableUnion: true; IndexedOnly: false; Required: false }\n        >\n    : unknown,\n) {\n  if (!args || !matchArgs)\n    throw new ArgsMismatchError({\n      abiEvent,\n      expected: args,\n      given: matchArgs,\n    })\n\n  function isEqual(\n    input: abitype.AbiEventParameter,\n    value: unknown,\n    arg: unknown,\n  ) {\n    if (input.type === 'address')\n      return Address.isEqual(value as Address.Address, arg as Address.Address)\n    if (input.type === 'string')\n      return Hash.keccak256(Bytes.fromString(value as string)) === arg\n    if (input.type === 'bytes') return Hash.keccak256(value as Hex.Hex) === arg\n    return value === arg\n  }\n\n  if (Array.isArray(args) && Array.isArray(matchArgs)) {\n    for (const [index, value] of matchArgs.entries()) {\n      if (value === null || value === undefined) continue\n      const input = abiEvent.inputs[index]\n      if (!input)\n        throw new InputNotFoundError({\n          abiEvent,\n          name: `${index}`,\n        })\n      const value_ = Array.isArray(value) ? value : [value]\n      let equal = false\n      for (const value of value_) {\n        if (isEqual(input, value, args[index])) equal = true\n      }\n      if (!equal)\n        throw new ArgsMismatchError({\n          abiEvent,\n          expected: args,\n          given: matchArgs,\n        })\n    }\n  }\n\n  if (\n    typeof args === 'object' &&\n    !Array.isArray(args) &&\n    typeof matchArgs === 'object' &&\n    !Array.isArray(matchArgs)\n  )\n    for (const [key, value] of Object.entries(matchArgs)) {\n      if (value === null || value === undefined) continue\n      const input = abiEvent.inputs.find((input) => input.name === key)\n      if (!input) throw new InputNotFoundError({ abiEvent, name: key })\n      const value_ = Array.isArray(value) ? value : [value]\n      let equal = false\n      for (const value of value_) {\n        if (isEqual(input, value, (args as Record<string, unknown>)[key]))\n          equal = true\n      }\n      if (!equal)\n        throw new ArgsMismatchError({\n          abiEvent,\n          expected: args,\n          given: matchArgs,\n        })\n    }\n}\n\nexport declare namespace assertArgs {\n  type ErrorType =\n    | Address.isEqual.ErrorType\n    | Bytes.fromString.ErrorType\n    | Hash.keccak256.ErrorType\n    | ArgsMismatchError\n    | Errors.GlobalErrorType\n}\n\n/**\n * ABI-Decodes the provided [Log Topics and Data](https://info.etherscan.com/what-is-event-logs/) according to the ABI Event's parameter types (`input`).\n *\n * :::tip\n *\n * This function is typically used to decode an [Event Log](https://info.etherscan.com/what-is-event-logs/) that may be returned from a Log Query (e.g. `eth_getLogs`) or Transaction Receipt.\n *\n * See the [End-to-end Example](#end-to-end).\n *\n * :::\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const transfer = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)'\n * )\n *\n * const log = {\n *   // ...\n *   data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *   ],\n * } as const\n *\n * const decoded = AbiEvent.decode(transfer, log)\n * // @log: {\n * // @log:   from: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n * // @log:   to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n * // @log:   value: 1n\n * // @log: }\n * ```\n *\n * @example\n * ### End-to-end\n *\n * Below is an end-to-end example of using `AbiEvent.decode` to decode the topics of a `Transfer` event on the [Wagmi Mint Example contract](https://etherscan.io/address/0xfba3912ca04dd458c843e2ee08967fc04f3579c2).\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { AbiEvent, Hex } from 'ox'\n *\n * // 1. Instantiate the `Transfer` ABI Event.\n * const transfer = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)',\n * )\n *\n * // 2. Encode the ABI Event into Event Topics.\n * const { topics } = AbiEvent.encode(transfer)\n *\n * // 3. Query for events matching the encoded Topics.\n * const logs = await window.ethereum!.request({\n *   method: 'eth_getLogs',\n *   params: [\n *     {\n *       address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n *       fromBlock: Hex.fromNumber(19760235n),\n *       toBlock: Hex.fromNumber(19760240n),\n *       topics,\n *     },\n *   ],\n * })\n *\n * // 4. Decode the Log. // [!code focus]\n * const decoded = AbiEvent.decode(transfer, logs[0]!) // [!code focus]\n * // @log: {\n * // @log:   from: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n * // @log:   to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n * // @log:   value: 603n\n * // @log: }\n * ```\n *\n * :::note\n *\n * For simplicity, the above example uses `window.ethereum.request`, but you can use any\n * type of JSON-RPC interface.\n *\n * :::\n *\n * @param abiEvent - The ABI Event to decode.\n * @param log - `topics` & `data` to decode.\n * @returns The decoded event.\n */\nexport function decode<const abiEvent extends AbiEvent>(\n  abiEvent: abiEvent | AbiEvent,\n  log: decode.Log,\n): decode.ReturnType<abiEvent> {\n  const { data, topics } = log\n\n  const [selector_, ...argTopics] = topics\n\n  const selector = getSelector(abiEvent)\n  if (selector_ !== selector)\n    throw new SelectorTopicMismatchError({\n      abiEvent,\n      actual: selector_,\n      expected: selector,\n    })\n\n  const { inputs } = abiEvent\n  const isUnnamed = inputs?.every((x) => !('name' in x && x.name))\n\n  let args: any = isUnnamed ? [] : {}\n\n  // Decode topics (indexed args).\n  const indexedInputs = inputs.filter((x) => 'indexed' in x && x.indexed)\n  for (let i = 0; i < indexedInputs.length; i++) {\n    const param = indexedInputs[i]!\n    const topic = argTopics[i]\n    if (!topic)\n      throw new TopicsMismatchError({\n        abiEvent,\n        param: param as abitype.AbiParameter & { indexed: boolean },\n      })\n    args[isUnnamed ? i : param.name || i] = (() => {\n      if (\n        param.type === 'string' ||\n        param.type === 'bytes' ||\n        param.type === 'tuple' ||\n        param.type.match(/^(.*)\\[(\\d+)?\\]$/)\n      )\n        return topic\n      const decoded = AbiParameters.decode([param], topic) || []\n      return decoded[0]\n    })()\n  }\n\n  // Decode data (non-indexed args).\n  const nonIndexedInputs = inputs.filter((x) => !('indexed' in x && x.indexed))\n  if (nonIndexedInputs.length > 0) {\n    if (data && data !== '0x') {\n      try {\n        const decodedData = AbiParameters.decode(nonIndexedInputs, data)\n        if (decodedData) {\n          if (isUnnamed) args = [...args, ...decodedData]\n          else {\n            for (let i = 0; i < nonIndexedInputs.length; i++) {\n              const index = inputs.indexOf(nonIndexedInputs[i]!)\n              args[nonIndexedInputs[i]!.name! || index] = decodedData[i]\n            }\n          }\n        }\n      } catch (err) {\n        if (\n          err instanceof AbiParameters.DataSizeTooSmallError ||\n          err instanceof Cursor.PositionOutOfBoundsError\n        )\n          throw new DataMismatchError({\n            abiEvent,\n            data: data,\n            parameters: nonIndexedInputs,\n            size: Hex.size(data),\n          })\n        throw err\n      }\n    } else {\n      throw new DataMismatchError({\n        abiEvent,\n        data: '0x',\n        parameters: nonIndexedInputs,\n        size: 0,\n      })\n    }\n  }\n\n  return Object.values(args).length > 0 ? args : undefined\n}\n\nexport declare namespace decode {\n  type Log = {\n    data?: Hex.Hex | undefined\n    topics: readonly Hex.Hex[]\n  }\n\n  type ReturnType<abiEvent extends AbiEvent = AbiEvent> = IsNarrowable<\n    abiEvent,\n    AbiEvent\n  > extends true\n    ? abiEvent['inputs'] extends readonly []\n      ? undefined\n      : internal.ParametersToPrimitiveTypes<\n          abiEvent['inputs'],\n          { EnableUnion: false; IndexedOnly: false; Required: true }\n        >\n    : unknown\n\n  type ErrorType =\n    | AbiParameters.decode.ErrorType\n    | getSelector.ErrorType\n    | DataMismatchError\n    | SelectorTopicMismatchError\n    | TopicsMismatchError\n    | Errors.GlobalErrorType\n}\n\n/**\n * ABI-encodes the provided event input (`inputs`) into an array of [Event Topics](https://info.etherscan.com/what-is-event-logs/).\n *\n * :::tip\n *\n * This function is typically used to encode event arguments into [Event Topics](https://info.etherscan.com/what-is-event-logs/).\n *\n * See the [End-to-end Example](#end-to-end).\n *\n * :::\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const transfer = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)'\n * )\n *\n * const { topics } = AbiEvent.encode(transfer)\n * // @log: ['0x406dade31f7ae4b5dbc276258c28dde5ae6d5c2773c5745802c493a2360e55e0']\n * ```\n *\n * @example\n * ### Passing Arguments\n *\n * You can pass `indexed` parameter values to `AbiEvent.encode`.\n *\n * TypeScript types will be inferred from the ABI Event, to guard you from inserting the wrong values.\n *\n * For example, the `Transfer` event below accepts an `address` type for the `from` and `to` attributes.\n *\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const transfer = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)'\n * )\n *\n * const { topics } = AbiEvent.encode(transfer, {\n *   from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', // [!code hl]\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8' // [!code hl]\n * })\n * // @log: [\n * // @log:   '0x406dade31f7ae4b5dbc276258c28dde5ae6d5c2773c5745802c493a2360e55e0',\n * // @log:   '0x00000000000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n * // @log:   '0x0000000000000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8'\n * // @log: ]\n * ```\n *\n * @example\n * ### End-to-end\n *\n * Below is an end-to-end example of using `AbiEvent.encode` to encode the topics of a `Transfer` event and query for events matching the encoded topics on the [Wagmi Mint Example contract](https://etherscan.io/address/0xfba3912ca04dd458c843e2ee08967fc04f3579c2).\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { AbiEvent, Hex } from 'ox'\n *\n * // 1. Instantiate the `Transfer` ABI Event.\n * const transfer = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)',\n * )\n *\n * // 2. Encode the ABI Event into Event Topics.\n * const { topics } = AbiEvent.encode(transfer)\n *\n * // 3. Query for events matching the encoded Topics.\n * const logs = await window.ethereum!.request({\n *   method: 'eth_getLogs',\n *   params: [\n *     {\n *       address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n *       fromBlock: Hex.fromNumber(19760235n),\n *       toBlock: Hex.fromNumber(19760240n),\n *       topics,\n *     },\n *   ],\n * })\n * // @log: [\n * // @log:   \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n * // @log:   \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n * // @log:   \"0x0000000000000000000000000c04d9e9278ec5e4d424476d3ebec70cb5d648d1\",\n * // @log:   \"0x000000000000000000000000000000000000000000000000000000000000025b\",\n * // @log: ]\n * ```\n *\n * :::note\n *\n * For simplicity, the above example uses `window.ethereum.request`, but you can use any\n * type of JSON-RPC interface.\n *\n * :::\n *\n * @param abiEvent - The event to encode.\n * @param args - The arguments to encode.\n * @returns The encoded event topics.\n */\nexport function encode<const abiEvent extends AbiEvent>(\n  abiEvent: abiEvent | AbiEvent,\n  ...[args]: encode.Args<abiEvent>\n): encode.ReturnType {\n  let topics: (Hex.Hex | Hex.Hex[] | null)[] = []\n  if (args && abiEvent.inputs) {\n    const indexedInputs = abiEvent.inputs.filter(\n      (param) => 'indexed' in param && param.indexed,\n    )\n    const args_ = Array.isArray(args)\n      ? args\n      : Object.values(args).length > 0\n        ? indexedInputs?.map(\n            (x: any, i: number) => (args as any)[x.name ?? i],\n          ) ?? []\n        : []\n\n    if (args_.length > 0) {\n      const encode = (param: abitype.AbiParameter, value: unknown) => {\n        if (param.type === 'string')\n          return Hash.keccak256(Hex.fromString(value as string))\n        if (param.type === 'bytes') return Hash.keccak256(value as Hex.Hex)\n        if (param.type === 'tuple' || param.type.match(/^(.*)\\[(\\d+)?\\]$/))\n          throw new FilterTypeNotSupportedError(param.type)\n        return AbiParameters.encode([param], [value])\n      }\n\n      topics =\n        indexedInputs?.map((param, i) => {\n          if (Array.isArray(args_[i]))\n            return args_[i].map((_: any, j: number) =>\n              encode(param, args_[i][j]),\n            )\n          return typeof args_[i] !== 'undefined' && args_[i] !== null\n            ? encode(param, args_[i])\n            : null\n        }) ?? []\n    }\n  }\n\n  const selector = (() => {\n    if (abiEvent.hash) return abiEvent.hash\n    return getSelector(abiEvent)\n  })()\n\n  return { topics: [selector, ...topics] }\n}\n\nexport declare namespace encode {\n  type Args<abiEvent extends AbiEvent> = IsNarrowable<\n    abiEvent,\n    AbiEvent\n  > extends true\n    ? abiEvent['inputs'] extends readonly []\n      ? []\n      : internal.ParametersToPrimitiveTypes<\n            abiEvent['inputs']\n          > extends infer result\n        ? result extends readonly []\n          ? []\n          : [result] | []\n        : []\n    : [readonly unknown[] | Record<string, unknown>] | []\n\n  type ReturnType = {\n    topics: Compute<\n      [selector: Hex.Hex, ...(Hex.Hex | readonly Hex.Hex[] | null)[]]\n    >\n  }\n\n  type ErrorType =\n    | AbiParameters.encode.ErrorType\n    | getSelector.ErrorType\n    | Hex.fromString.ErrorType\n    | Hash.keccak256.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Formats an {@link ox#AbiEvent.AbiEvent} into a **Human Readable ABI Error**.\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const formatted = AbiEvent.format({\n *   type: 'event',\n *   name: 'Transfer',\n *   inputs: [\n *     { name: 'from', type: 'address', indexed: true },\n *     { name: 'to', type: 'address', indexed: true },\n *     { name: 'value', type: 'uint256' },\n *   ],\n * })\n *\n * formatted\n * //    ^?\n *\n *\n * ```\n *\n * @param abiEvent - The ABI Event to format.\n * @returns The formatted ABI Event.\n */\nexport function format<const abiEvent extends AbiEvent>(\n  abiEvent: abiEvent | AbiEvent,\n): abitype.FormatAbiItem<abiEvent> {\n  return abitype.formatAbiItem(abiEvent) as never\n}\n\nexport declare namespace format {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Parses an arbitrary **JSON ABI Event** or **Human Readable ABI Event** into a typed {@link ox#AbiEvent.AbiEvent}.\n *\n * @example\n * ### JSON ABIs\n *\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const transfer = AbiEvent.from({\n *   name: 'Transfer',\n *   type: 'event',\n *   inputs: [\n *     { name: 'from', type: 'address', indexed: true },\n *     { name: 'to', type: 'address', indexed: true },\n *     { name: 'value', type: 'uint256' },\n *   ],\n * })\n *\n * transfer\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Human Readable ABIs\n *\n * A Human Readable ABI can be parsed into a typed ABI object:\n *\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const transfer = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)' // [!code hl]\n * )\n *\n * transfer\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @param abiEvent - The ABI Event to parse.\n * @returns Typed ABI Event.\n */\nexport function from<\n  const abiEvent extends AbiEvent | string | readonly string[],\n>(\n  abiEvent: (abiEvent | AbiEvent | string | readonly string[]) &\n    (\n      | (abiEvent extends string ? internal.Signature<abiEvent> : never)\n      | (abiEvent extends readonly string[]\n          ? internal.Signatures<abiEvent>\n          : never)\n      | AbiEvent\n    ),\n  options: from.Options = {},\n): from.ReturnType<abiEvent> {\n  return AbiItem.from(abiEvent as AbiEvent, options) as never\n}\n\nexport declare namespace from {\n  type Options = {\n    /**\n     * Whether or not to prepare the extracted event (optimization for encoding performance).\n     * When `true`, the `hash` property is computed and included in the returned value.\n     *\n     * @default true\n     */\n    prepare?: boolean | undefined\n  }\n\n  type ReturnType<abiEvent extends AbiEvent | string | readonly string[]> =\n    AbiItem.from.ReturnType<abiEvent>\n\n  type ErrorType = AbiItem.from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Extracts an {@link ox#AbiEvent.AbiEvent} from an {@link ox#Abi.Abi} given a name and optional arguments.\n *\n * @example\n * ### Extracting by Name\n *\n * ABI Events can be extracted by their name using the `name` option:\n *\n * ```ts twoslash\n * import { Abi, AbiEvent } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo()',\n *   'event Transfer(address owner, address to, uint256 tokenId)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n *\n * const item = AbiEvent.fromAbi(abi, 'Transfer') // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Extracting by Selector\n *\n * ABI Events can be extract by their selector when {@link ox#Hex.Hex} is provided to `name`.\n *\n * ```ts twoslash\n * import { Abi, AbiEvent } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo()',\n *   'event Transfer(address owner, address to, uint256 tokenId)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n * const item = AbiEvent.fromAbi(abi, '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef') // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * :::note\n *\n * Extracting via a hex selector is useful when extracting an ABI Event from the first topic of a Log.\n *\n * :::\n *\n * @param abi - The ABI to extract from.\n * @param name - The name (or selector) of the ABI item to extract.\n * @param options - Extraction options.\n * @returns The ABI item.\n */\nexport function fromAbi<\n  const abi extends Abi.Abi | readonly unknown[],\n  name extends Name<abi>,\n  const args extends\n    | AbiItem_internal.ExtractArgs<abi, name>\n    | undefined = undefined,\n  //\n  allNames = Name<abi>,\n>(\n  abi: abi | Abi.Abi | readonly unknown[],\n  name: Hex.Hex | (name extends allNames ? name : never),\n  options?: AbiItem.fromAbi.Options<\n    abi,\n    name,\n    args,\n    AbiItem_internal.ExtractArgs<abi, name>\n  >,\n): AbiItem.fromAbi.ReturnType<abi, name, args, AbiEvent> {\n  const item = AbiItem.fromAbi(abi, name, options as any)\n  if (item.type !== 'event')\n    throw new AbiItem.NotFoundError({ name, type: 'event' })\n  return item as never\n}\n\nexport declare namespace fromAbi {\n  type ErrorType = AbiItem.fromAbi.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Computes the event selector (hash of event signature) for an {@link ox#AbiEvent.AbiEvent}.\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const selector = AbiEvent.getSelector('event Transfer(address indexed from, address indexed to, uint256 value)')\n * // @log: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f556a2'\n * ```\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const selector = AbiEvent.getSelector({\n *   name: 'Transfer',\n *   type: 'event',\n *   inputs: [\n *     { name: 'from', type: 'address', indexed: true },\n *     { name: 'to', type: 'address', indexed: true },\n *     { name: 'value', type: 'uint256' }\n *   ]\n * })\n * // @log: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f556a2'\n * ```\n *\n * @param abiItem - The ABI event to compute the selector for.\n * @returns The {@link ox#Hash.(keccak256:function)} hash of the event signature.\n */\nexport function getSelector(abiItem: string | AbiEvent): Hex.Hex {\n  return AbiItem.getSignatureHash(abiItem)\n}\n\nexport declare namespace getSelector {\n  type ErrorType = AbiItem.getSignatureHash.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Thrown when the provided arguments do not match the expected arguments.\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const abiEvent = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)',\n * )\n *\n * const args = AbiEvent.decode(abiEvent, {\n *   data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ad',\n *   ],\n * })\n *\n * AbiEvent.assertArgs(abiEvent, args, {\n *   from: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ad',\n *   to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *   value: 1n,\n * })\n * // @error: AbiEvent.ArgsMismatchError: Given arguments do not match the expected arguments.\n * // @error: Event: event Transfer(address indexed from, address indexed to, uint256 value)\n * // @error: Expected Arguments:\n * // @error:   from:   0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac\n * // @error:   to:     0xa5cc3c03994db5b0d9a5eedd10cabab0813678ad\n * // @error:   value:  1\n * // @error: Given Arguments:\n * // @error:   from:   0xa5cc3c03994db5b0d9a5eedd10cabab0813678ad\n * // @error:   to:     0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac\n * // @error:   value:  1\n * ```\n *\n * ### Solution\n *\n * The provided arguments need to match the expected arguments.\n *\n * ```ts twoslash\n * // @noErrors\n * import { AbiEvent } from 'ox'\n *\n * const abiEvent = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)',\n * )\n *\n * const args = AbiEvent.decode(abiEvent, {\n *   data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ad',\n *   ],\n * })\n *\n * AbiEvent.assertArgs(abiEvent, args, {\n *   from: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ad', // [!code --]\n *   from: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac', // [!code ++]\n *   to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac', // [!code --]\n *   to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ad', // [!code ++]\n *   value: 1n,\n * })\n * ```\n */\nexport class ArgsMismatchError extends Errors.BaseError {\n  override readonly name = 'AbiEvent.ArgsMismatchError'\n\n  constructor({\n    abiEvent,\n    expected,\n    given,\n  }: {\n    abiEvent: AbiEvent\n    expected: unknown\n    given: unknown\n  }) {\n    super('Given arguments do not match the expected arguments.', {\n      metaMessages: [\n        `Event: ${format(abiEvent)}`,\n        `Expected Arguments: ${!expected ? 'None' : ''}`,\n        expected ? prettyPrint(expected) : undefined,\n        `Given Arguments: ${!given ? 'None' : ''}`,\n        given ? prettyPrint(given) : undefined,\n      ],\n    })\n  }\n}\n\n/**\n * Thrown when no argument was found on the event signature.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { AbiEvent } from 'ox'\n *\n * const abiEvent = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)',\n * )\n *\n * const args = AbiEvent.decode(abiEvent, {\n *   data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ad',\n *   ],\n * })\n *\n * AbiEvent.assertArgs(abiEvent, args, {\n *   a: 'b',\n *   from: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *   to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ad',\n *   value: 1n,\n * })\n * // @error: AbiEvent.InputNotFoundError: Parameter \"a\" not found on `event Transfer(address indexed from, address indexed to, uint256 value)`.\n * ```\n *\n * ### Solution\n *\n * Ensure the arguments match the event signature.\n *\n * ```ts twoslash\n * // @noErrors\n * import { AbiEvent } from 'ox'\n *\n * const abiEvent = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)',\n * )\n *\n * const args = AbiEvent.decode(abiEvent, {\n *   data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ad',\n *   ],\n * })\n *\n * AbiEvent.assertArgs(abiEvent, args, {\n *   a: 'b', // [!code --]\n *   from: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *   to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ad',\n *   value: 1n,\n * })\n * ```\n */\nexport class InputNotFoundError extends Errors.BaseError {\n  override readonly name = 'AbiEvent.InputNotFoundError'\n\n  constructor({\n    abiEvent,\n    name,\n  }: {\n    abiEvent: AbiEvent\n    name: string\n  }) {\n    super(`Parameter \"${name}\" not found on \\`${format(abiEvent)}\\`.`)\n  }\n}\n\n/**\n * Thrown when the provided data size does not match the expected size from the non-indexed parameters.\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const abiEvent = AbiEvent.from(\n *   'event Transfer(address indexed from, address to, uint256 value)',\n *   //                                    ↑ 32 bytes + ↑ 32 bytes = 64 bytes\n * )\n *\n * const args = AbiEvent.decode(abiEvent, {\n *   data: '0x0000000000000000000000000000000000000000000000000000000023c34600',\n *   //       ↑ 32 bytes ❌\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   ],\n * })\n * // @error: AbiEvent.DataMismatchError: Data size of 32 bytes is too small for non-indexed event parameters.\n * // @error: Non-indexed Parameters: (address to, uint256 value)\n * // @error: Data:   0x0000000000000000000000000000000000000000000000000000000023c34600 (32 bytes)\n * ```\n *\n * ### Solution\n *\n * Ensure that the data size matches the expected size.\n *\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const abiEvent = AbiEvent.from(\n *   'event Transfer(address indexed from, address to, uint256 value)',\n *   //                                    ↑ 32 bytes + ↑ 32 bytes = 64 bytes\n * )\n *\n * const args = AbiEvent.decode(abiEvent, {\n *   data: '0x0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000023c34600',\n *   //       ↑ 64 bytes ✅\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   ],\n * })\n * ```\n */\nexport class DataMismatchError extends Errors.BaseError {\n  override readonly name = 'AbiEvent.DataMismatchError'\n\n  abiEvent: AbiEvent\n  data: Hex.Hex\n  parameters: readonly abitype.AbiParameter[]\n  size: number\n\n  constructor({\n    abiEvent,\n    data,\n    parameters,\n    size,\n  }: {\n    abiEvent: AbiEvent\n    data: Hex.Hex\n    parameters: readonly abitype.AbiParameter[]\n    size: number\n  }) {\n    super(\n      [\n        `Data size of ${size} bytes is too small for non-indexed event parameters.`,\n      ].join('\\n'),\n      {\n        metaMessages: [\n          `Non-indexed Parameters: (${AbiParameters.format(parameters as any)})`,\n          `Data:   ${data} (${size} bytes)`,\n        ],\n      },\n    )\n\n    this.abiEvent = abiEvent\n    this.data = data\n    this.parameters = parameters\n    this.size = size\n  }\n}\n\n/**\n * Thrown when the provided topics do not match the expected number of topics.\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const abiEvent = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)',\n * )\n *\n * const args = AbiEvent.decode(abiEvent, {\n *   data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *   ],\n * })\n * // @error: AbiEvent.TopicsMismatchError: Expected a topic for indexed event parameter \"to\" for \"event Transfer(address indexed from, address indexed to, uint256 value)\".\n * ```\n *\n * ### Solution\n *\n * Ensure that the topics match the expected number of topics.\n *\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const abiEvent = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)',\n * )\n *\n * const args = AbiEvent.decode(abiEvent, {\n *   data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *     '0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266', // [!code ++]\n *   ],\n * })\n * ```\n *\n */\nexport class TopicsMismatchError extends Errors.BaseError {\n  override readonly name = 'AbiEvent.TopicsMismatchError'\n\n  abiEvent: AbiEvent\n\n  constructor({\n    abiEvent,\n    param,\n  }: {\n    abiEvent: AbiEvent\n    param: abitype.AbiParameter & { indexed: boolean }\n  }) {\n    super(\n      [\n        `Expected a topic for indexed event parameter${\n          param.name ? ` \"${param.name}\"` : ''\n        } for \"${format(abiEvent)}\".`,\n      ].join('\\n'),\n    )\n\n    this.abiEvent = abiEvent\n  }\n}\n\n/**\n * Thrown when the provided selector does not match the expected selector.\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const transfer = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, bool sender)',\n * )\n *\n * AbiEvent.decode(transfer, {\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa96045',\n *     '0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   ],\n * })\n * // @error: AbiEvent.SelectorTopicMismatchError: topics[0]=\"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\" does not match the expected topics[0]=\"0x3da3cd3cf420c78f8981e7afeefa0eab1f0de0eb56e78ad9ba918ed01c0b402f\".\n * // @error: Event: event Transfer(address indexed from, address indexed to, bool sender)\n * // @error: Selector: 0x3da3cd3cf420c78f8981e7afeefa0eab1f0de0eb56e78ad9ba918ed01c0b402f\n * ```\n *\n * ### Solution\n *\n * Ensure that the provided selector matches the selector of the event signature.\n *\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const transfer = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, bool sender)',\n * )\n *\n * AbiEvent.decode(transfer, {\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', // [!code --]\n *     '0x3da3cd3cf420c78f8981e7afeefa0eab1f0de0eb56e78ad9ba918ed01c0b402f', // [!code ++]\n *     '0x000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa96045',\n *     '0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   ],\n * })\n * ```\n */\nexport class SelectorTopicMismatchError extends Errors.BaseError {\n  override readonly name = 'AbiEvent.SelectorTopicMismatchError'\n\n  constructor({\n    abiEvent,\n    actual,\n    expected,\n  }: {\n    abiEvent: AbiEvent\n    actual: Hex.Hex | undefined\n    expected: Hex.Hex\n  }) {\n    super(\n      `topics[0]=\"${actual}\" does not match the expected topics[0]=\"${expected}\".`,\n      {\n        metaMessages: [`Event: ${format(abiEvent)}`, `Selector: ${expected}`],\n      },\n    )\n  }\n}\n\n/**\n * Thrown when the provided filter type is not supported.\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const transfer = AbiEvent.from('event Transfer((string) indexed a, string b)')\n *\n * AbiEvent.encode(transfer, {\n *   a: ['hello'],\n * })\n * // @error: AbiEvent.FilterTypeNotSupportedError: Filter type \"tuple\" is not supported.\n * ```\n *\n * ### Solution\n *\n * Provide a valid event input type.\n *\n * ```ts twoslash\n * // @noErrors\n * import { AbiEvent } from 'ox'\n *\n * const transfer = AbiEvent.from('event Transfer((string) indexed a, string b)') // [!code --]\n * const transfer = AbiEvent.from('event Transfer(string indexed a, string b)') // [!code ++]\n * ```\n *\n *\n */\nexport class FilterTypeNotSupportedError extends Errors.BaseError {\n  override readonly name = 'AbiEvent.FilterTypeNotSupportedError'\n  constructor(type: string) {\n    super(`Filter type \"${type}\" is not supported.`)\n  }\n}\n", "import * as Address from './Address.js'\nimport * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as Hex from './Hex.js'\nimport type { Compute, Mutable } from './internal/types.js'\n\nexport type AccessList = Compute<readonly Item[]>\n\nexport type Item = Compute<{\n  address: Address.Address\n  storageKeys: readonly Hex.Hex[]\n}>\n\nexport type ItemTuple = Compute<\n  [address: Address.Address, storageKeys: readonly Hex.Hex[]]\n>\n\nexport type Tuple = readonly ItemTuple[]\n\n/**\n * Converts a list of Access List tuples into a object-formatted list.\n *\n * @example\n * ```ts twoslash\n * import { AccessList } from 'ox'\n *\n * const accessList = AccessList.fromTupleList([\n *   [\n *     '0x0000000000000000000000000000000000000000',\n *     [\n *       '0x0000000000000000000000000000000000000000000000000000000000000001',\n *       '0x60fdd29ff912ce880cd3edaf9f932dc61d3dae823ea77e0323f94adb9f6a72fe',\n *     ],\n *   ],\n * ])\n * // @log: [\n * // @log:   {\n * // @log:     address: '0x0000000000000000000000000000000000000000',\n * // @log:     storageKeys: [\n * // @log:       '0x0000000000000000000000000000000000000000000000000000000000000001',\n * // @log:       '0x60fdd29ff912ce880cd3edaf9f932dc61d3dae823ea77e0323f94adb9f6a72fe',\n * // @log:     ],\n * // @log:   },\n * // @log: ]\n * ```\n *\n * @param accessList - List of tuples.\n * @returns Access list.\n */\nexport function fromTupleList(accessList: Tuple): AccessList {\n  const list: Mutable<AccessList> = []\n  for (let i = 0; i < accessList.length; i++) {\n    const [address, storageKeys] = accessList[i] as [Hex.Hex, Hex.Hex[]]\n\n    if (address) Address.assert(address, { strict: false })\n\n    list.push({\n      address: address,\n      storageKeys: storageKeys.map((key) =>\n        Hash.validate(key) ? key : Hex.trimLeft(key),\n      ),\n    })\n  }\n  return list\n}\n\n/**\n * Converts a structured Access List into a list of tuples.\n *\n * @example\n * ```ts twoslash\n * import { AccessList } from 'ox'\n *\n * const accessList = AccessList.toTupleList([\n *   {\n *     address: '0x0000000000000000000000000000000000000000',\n *     storageKeys: [\n *       '0x0000000000000000000000000000000000000000000000000000000000000001',\n *       '0x60fdd29ff912ce880cd3edaf9f932dc61d3dae823ea77e0323f94adb9f6a72fe'],\n *   },\n * ])\n * // @log: [\n * // @log:   [\n * // @log:     '0x0000000000000000000000000000000000000000',\n * // @log:     [\n * // @log:       '0x0000000000000000000000000000000000000000000000000000000000000001',\n * // @log:       '0x60fdd29ff912ce880cd3edaf9f932dc61d3dae823ea77e0323f94adb9f6a72fe',\n * // @log:     ],\n * // @log:   ],\n * // @log: ]\n * ```\n *\n * @param accessList - Access list.\n * @returns List of tuples.\n */\nexport function toTupleList(\n  accessList?: AccessList | undefined,\n): Compute<Tuple> {\n  if (!accessList || accessList.length === 0) return []\n\n  const tuple: Mutable<Tuple> = []\n  for (const { address, storageKeys } of accessList) {\n    for (let j = 0; j < storageKeys.length; j++)\n      if (Hex.size(storageKeys[j]!) !== 32)\n        throw new InvalidStorageKeySizeError({\n          storageKey: storageKeys[j]!,\n        })\n\n    if (address) Address.assert(address, { strict: false })\n\n    tuple.push([address, storageKeys])\n  }\n  return tuple\n}\n\n/** Thrown when the size of a storage key is invalid. */\nexport class InvalidStorageKeySizeError extends Errors.BaseError {\n  override readonly name = 'AccessList.InvalidStorageKeySizeError'\n  constructor({ storageKey }: { storageKey: Hex.Hex }) {\n    super(\n      `Size for storage key \"${storageKey}\" is invalid. Expected 32 bytes. Got ${Hex.size(storageKey)} bytes.`,\n    )\n  }\n}\n", "export {};\n//# sourceMappingURL=AccountProof.js.map", "import * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\n\nexport const ivLength = 16\n\n/**\n * Decrypts encrypted data using AES-GCM.\n *\n * @example\n * ```ts twoslash\n * import { AesGcm, Hex } from 'ox'\n *\n * const key = await AesGcm.getKey({ password: 'qwerty' })\n * const secret = Hex.fromString('i am a secret message')\n *\n * const encrypted = await AesGcm.encrypt(secret, key)\n *\n * const decrypted = await AesGcm.decrypt(encrypted, key) // [!code focus]\n * // @log: Hex.fromString('i am a secret message')\n * ```\n *\n * @param value - The data to encrypt.\n * @param key - The `CryptoKey` to use for encryption.\n * @param options - Decryption options.\n * @returns The decrypted data.\n */\nexport async function decrypt<\n  value extends Hex.Hex | Bytes.Bytes,\n  as extends 'Hex' | 'Bytes' =\n    | (value extends Hex.Hex ? 'Hex' : never)\n    | (value extends Bytes.Bytes ? 'Bytes' : never),\n>(\n  value: value | Bytes.Bytes | Hex.Hex,\n  key: CryptoKey,\n  options: decrypt.Options<as> = {},\n): Promise<decrypt.ReturnType<as>> {\n  const { as = typeof value === 'string' ? 'Hex' : 'Bytes' } = options\n  const encrypted = Bytes.from(value)\n  const iv = encrypted.slice(0, ivLength)\n  const data = encrypted.slice(ivLength)\n  const decrypted = await globalThis.crypto.subtle.decrypt(\n    {\n      name: 'AES-GCM',\n      iv,\n    },\n    key,\n    Bytes.from(data),\n  )\n  const result = new Uint8Array(decrypted)\n  if (as === 'Bytes') return result as never\n  return Hex.from(result) as never\n}\n\nexport declare namespace decrypt {\n  type Options<as extends 'Bytes' | 'Hex' = 'Bytes' | 'Hex'> = {\n    /** The output format. @default 'Bytes' */\n    as?: as | 'Bytes' | 'Hex' | undefined\n  }\n\n  type ReturnType<as extends 'Bytes' | 'Hex' = 'Bytes' | 'Hex'> =\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\n    | (as extends 'Hex' ? Hex.Hex : never)\n\n  type ErrorType =\n    | Bytes.from.ErrorType\n    | Hex.from.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Encrypts data using AES-GCM.\n *\n * @example\n * ```ts twoslash\n * import { AesGcm, Hex } from 'ox'\n *\n * const key = await AesGcm.getKey({ password: 'qwerty' })\n * const secret = Hex.fromString('i am a secret message')\n *\n * const encrypted = await AesGcm.encrypt(secret, key) // [!code focus]\n * // @log: '0x5e257b25bcf53d5431e54e5a68ca0138306d31bb6154f35a97bb8ea18111e7d82bcf619d3c76c4650688bc5310eed80b8fc86d1e3e'\n * ```\n *\n * @param value - The data to encrypt.\n * @param key - The `CryptoKey` to use for encryption.\n * @param options - Encryption options.\n * @returns The encrypted data.\n */\nexport async function encrypt<\n  value extends Hex.Hex | Bytes.Bytes,\n  as extends 'Bytes' | 'Hex' =\n    | (value extends Hex.Hex ? 'Hex' : never)\n    | (value extends Bytes.Bytes ? 'Bytes' : never),\n>(\n  value: value | Bytes.Bytes | Hex.Hex,\n  key: CryptoKey,\n  options: encrypt.Options<as> = {},\n): Promise<encrypt.ReturnType<as>> {\n  const { as = typeof value === 'string' ? 'Hex' : 'Bytes' } = options\n  const iv = Bytes.random(ivLength)\n  const encrypted = await globalThis.crypto.subtle.encrypt(\n    {\n      name: 'AES-GCM',\n      iv,\n    },\n    key,\n    Bytes.from(value),\n  )\n  const result = Bytes.concat(iv, new Uint8Array(encrypted))\n  if (as === 'Bytes') return result as never\n  return Hex.from(result) as never\n}\n\nexport declare namespace encrypt {\n  type Options<as extends 'Bytes' | 'Hex' = 'Bytes' | 'Hex'> = {\n    /** The output format. @default 'Hex' */\n    as?: as | 'Bytes' | 'Hex' | undefined\n  }\n\n  type ReturnType<as extends 'Bytes' | 'Hex' = 'Bytes' | 'Hex'> =\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\n    | (as extends 'Hex' ? Hex.Hex : never)\n\n  type ErrorType =\n    | Bytes.concat.ErrorType\n    | Bytes.from.ErrorType\n    | Bytes.random.ErrorType\n    | Hex.from.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Derives an AES-GCM key from a password using PBKDF2.\n *\n * @example\n * ```ts twoslash\n * import { AesGcm } from 'ox'\n *\n * const key = await AesGcm.getKey({ password: 'qwerty' })\n * // @log: CryptoKey {}\n * ```\n *\n * @param options - Options for key derivation.\n * @returns The derived key.\n */\nexport async function getKey(options: getKey.Options): Promise<CryptoKey> {\n  const { iterations = 900_000, password, salt = randomSalt(32) } = options\n  const baseKey = await globalThis.crypto.subtle.importKey(\n    'raw',\n    Bytes.fromString(password),\n    { name: 'PBKDF2' },\n    false,\n    ['deriveBits', 'deriveKey'],\n  )\n  const key = await globalThis.crypto.subtle.deriveKey(\n    {\n      name: 'PBKDF2',\n      salt,\n      iterations,\n      hash: 'SHA-256',\n    },\n    baseKey,\n    { name: 'AES-GCM', length: 256 },\n    false,\n    ['encrypt', 'decrypt'],\n  )\n  return key\n}\n\nexport declare namespace getKey {\n  type Options = {\n    /** The number of iterations to use. @default 900_000 */\n    iterations?: number | undefined\n    /** Password to derive key from. */\n    password: string\n    /** Salt to use for key derivation. @default `AesGcm.randomSalt(32)` */\n    salt?: Bytes.Bytes | undefined\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Generates a random salt of the specified size.\n *\n * @example\n * ```ts twoslash\n * import { AesGcm } from 'ox'\n *\n * const salt = AesGcm.randomSalt()\n * // @log: Uint8Array [123, 79, 183, 167, 163, 136, 136, 16, 168, 126, 13, 165, 170, 166, 136, 136, 16, 168, 126, 13, 165, 170, 166, 136, 136, 16, 168, 126, 13, 165, 170, 166]\n * ```\n *\n * @param size - The size of the salt to generate. Defaults to `32`.\n * @returns A random salt of the specified size.\n */\nexport function randomSalt(size = 32): Bytes.Bytes {\n  return Bytes.random(size)\n}\n\nexport declare namespace randomSalt {\n  type ErrorType = Bytes.random.ErrorType | Errors.GlobalErrorType\n}\n", "import type * as Address from './Address.js'\nimport type * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as Hex from './Hex.js'\nimport * as Rlp from './Rlp.js'\nimport * as Signature from './Signature.js'\nimport type { Compute, Mutable, Undefined } from './internal/types.js'\n\n/** Root type for an EIP-7702 Authorization. */\nexport type Authorization<\n  signed extends boolean = boolean,\n  bigintType = bigint,\n  numberType = number,\n> = Compute<\n  {\n    /** Address of the contract to set as code for the Authority. */\n    address: Address.Address\n    /** Chain ID to authorize. */\n    chainId: numberType\n    /** Nonce of the Authority to authorize. */\n    nonce: bigintType\n  } & (signed extends true\n    ? Signature.Signature<true, bigintType, numberType>\n    : Undefined<Signature.Signature>)\n>\n\n/** RPC representation of an {@link ox#Authorization.Authorization}. */\nexport type Rpc = Authorization<true, Hex.Hex, Hex.Hex>\n\n/** List of {@link ox#Authorization.Authorization}. */\nexport type List<\n  signed extends boolean = boolean,\n  bigintType = bigint,\n  numberType = number,\n> = Compute<readonly Authorization<signed, bigintType, numberType>[]>\n\n/** RPC representation of an {@link ox#Authorization.List}. */\nexport type ListRpc = List<true, Hex.Hex, Hex.Hex>\n\n/** Signed representation of a list of {@link ox#Authorization.Authorization}. */\nexport type ListSigned<bigintType = bigint, numberType = number> = List<\n  true,\n  bigintType,\n  numberType\n>\n\n/** Signed representation of an {@link ox#Authorization.Authorization}. */\nexport type Signed<bigintType = bigint, numberType = number> = Authorization<\n  true,\n  bigintType,\n  numberType\n>\n\n/** Tuple representation of an {@link ox#Authorization.Authorization}. */\nexport type Tuple<signed extends boolean = boolean> = signed extends true\n  ? readonly [\n      chainId: Hex.Hex,\n      address: Hex.Hex,\n      nonce: Hex.Hex,\n      yParity: Hex.Hex,\n      r: Hex.Hex,\n      s: Hex.Hex,\n    ]\n  : readonly [chainId: Hex.Hex, address: Hex.Hex, nonce: Hex.Hex]\n\n/** Tuple representation of a signed {@link ox#Authorization.Authorization}. */\nexport type TupleSigned = Tuple<true>\n\n/** Tuple representation of a list of {@link ox#Authorization.Authorization}. */\nexport type TupleList<signed extends boolean = boolean> =\n  readonly Tuple<signed>[]\n\n/** Tuple representation of a list of signed {@link ox#Authorization.Authorization}. */\nexport type TupleListSigned = TupleList<true>\n\n/**\n * Converts an [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization object into a typed {@link ox#Authorization.Authorization}.\n *\n * @example\n * An Authorization can be instantiated from an [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple in object format.\n *\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * A {@link ox#Signature.Signature} can be attached with the `signature` option. The example below demonstrates signing\n * an Authorization with {@link ox#Secp256k1.(sign:function)}.\n *\n * ```ts twoslash\n * import { Authorization, Secp256k1 } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n *   chainId: 1,\n *   nonce: 40n,\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: Authorization.getSignPayload(authorization),\n *   privateKey: '0x...',\n * })\n *\n * const authorization_signed = Authorization.from(authorization, { signature }) // [!code focus]\n * ```\n *\n * @param authorization - An [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple in object format.\n * @param options - Authorization options.\n * @returns The {@link ox#Authorization.Authorization}.\n */\nexport function from<\n  const authorization extends Authorization | Rpc,\n  const signature extends Signature.Signature | undefined = undefined,\n>(\n  authorization: authorization | Authorization,\n  options: from.Options<signature> = {},\n): from.ReturnType<authorization, signature> {\n  if (typeof authorization.chainId === 'string')\n    return fromRpc(authorization) as never\n  return { ...authorization, ...options.signature } as never\n}\n\nexport declare namespace from {\n  type Options<\n    signature extends Signature.Signature | undefined =\n      | Signature.Signature\n      | undefined,\n  > = {\n    /** The {@link ox#Signature.Signature} to attach to the Authorization. */\n    signature?: signature | Signature.Signature | undefined\n  }\n\n  type ReturnType<\n    authorization extends Authorization | Rpc = Authorization,\n    signature extends Signature.Signature | undefined =\n      | Signature.Signature\n      | undefined,\n  > = Compute<\n    authorization extends Rpc\n      ? Signed\n      : authorization &\n          (signature extends Signature.Signature ? Readonly<signature> : {})\n  >\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#Authorization.Rpc} to an {@link ox#Authorization.Authorization}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.fromRpc({\n *   address: '0x0000000000000000000000000000000000000000',\n *   chainId: '0x1',\n *   nonce: '0x1',\n *   r: '0x635dc2033e60185bb36709c29c75d64ea51dfbd91c32ef4be198e4ceb169fb4d',\n *   s: '0x50c2667ac4c771072746acfdcf1f1483336dcca8bd2df47cd83175dbe60f0540',\n *   yParity: '0x0',\n * })\n * ```\n *\n * @param authorization - The RPC-formatted Authorization.\n * @returns A signed {@link ox#Authorization.Authorization}.\n */\nexport function fromRpc(authorization: Rpc): Signed {\n  const { address, chainId, nonce } = authorization\n  const signature = Signature.extract(authorization)!\n\n  return {\n    address,\n    chainId: Number(chainId),\n    nonce: BigInt(nonce),\n    ...signature,\n  }\n}\n\nexport declare namespace fromRpc {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#Authorization.ListRpc} to an {@link ox#Authorization.List}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorizationList = Authorization.fromRpcList([{\n *   address: '0x0000000000000000000000000000000000000000',\n *   chainId: '0x1',\n *   nonce: '0x1',\n *   r: '0x635dc2033e60185bb36709c29c75d64ea51dfbd91c32ef4be198e4ceb169fb4d',\n *   s: '0x50c2667ac4c771072746acfdcf1f1483336dcca8bd2df47cd83175dbe60f0540',\n *   yParity: '0x0',\n * }])\n * ```\n *\n * @param authorizationList - The RPC-formatted Authorization list.\n * @returns A signed {@link ox#Authorization.List}.\n */\nexport function fromRpcList(authorizationList: ListRpc): ListSigned {\n  return authorizationList.map(fromRpc)\n}\n\nexport declare namespace fromRpcList {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#Authorization.Tuple} to an {@link ox#Authorization.Authorization}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.fromTuple([\n *   '0x1',\n *   '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n *   '0x3'\n * ])\n * // @log: {\n * // @log:   address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:   chainId: 1,\n * // @log:   nonce: 3n\n * // @log: }\n * ```\n *\n * @example\n * It is also possible to append a Signature tuple to the end of an Authorization tuple.\n *\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.fromTuple([\n *   '0x1',\n *   '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n *   '0x3',\n *   '0x1',\n *   '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n *   '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n * ])\n * // @log: {\n * // @log:   address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:   chainId: 1,\n * // @log:   nonce: 3n\n * // @log:   r: BigInt('0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90'),\n * // @log:   s: BigInt('0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'),\n * // @log:   yParity: 0,\n * // @log: }\n * ```\n *\n * @param tuple - The [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple.\n * @returns The {@link ox#Authorization.Authorization}.\n */\nexport function fromTuple<const tuple extends Tuple>(\n  tuple: tuple,\n): fromTuple.ReturnType<tuple> {\n  const [chainId, address, nonce, yParity, r, s] = tuple\n  const signature =\n    yParity && r && s ? Signature.fromTuple([yParity, r, s]) : undefined\n  return from({\n    address,\n    chainId: Number(chainId),\n    nonce: BigInt(nonce),\n    ...signature,\n  }) as never\n}\n\nexport declare namespace fromTuple {\n  type ReturnType<authorization extends Tuple = Tuple> = Compute<\n    Authorization<authorization extends Tuple<true> ? true : false>\n  >\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#Authorization.TupleList} to an {@link ox#Authorization.List}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorizationList = Authorization.fromTupleList([\n *   ['0x1', '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c', '0x3'],\n *   ['0x3', '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c', '0x14'],\n * ])\n * // @log: [\n * // @log:   {\n * // @log:     address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:     chainId: 1,\n * // @log:     nonce: 3n,\n * // @log:   },\n * // @log:   {\n * // @log:     address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:     chainId: 3,\n * // @log:     nonce: 20n,\n * // @log:   },\n * // @log: ]\n * ```\n *\n * @example\n * It is also possible to append a Signature tuple to the end of an Authorization tuple.\n *\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorizationList = Authorization.fromTupleList([\n *   ['0x1', '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c', '0x3', '0x1', '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90', '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'],\n *   ['0x3', '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c', '0x14', '0x1', '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90', '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'],\n * ])\n * // @log: [\n * // @log:   {\n * // @log:     address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:     chainId: 1,\n * // @log:     nonce: 3n,\n * // @log:     r: BigInt('0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90'),\n * // @log:     s: BigInt('0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'),\n * // @log:     yParity: 0,\n * // @log:   },\n * // @log:   {\n * // @log:     address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:     chainId: 3,\n * // @log:     nonce: 20n,\n * // @log:     r: BigInt('0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90'),\n * // @log:     s: BigInt('0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'),\n * // @log:     yParity: 0,\n * // @log:   },\n * // @log: ]\n * ```\n *\n * @param tupleList - The [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple list.\n * @returns An {@link ox#Authorization.List}.\n */\nexport function fromTupleList<const tupleList extends TupleList>(\n  tupleList: tupleList,\n): fromTupleList.ReturnType<tupleList> {\n  const list: Mutable<List> = []\n  for (const tuple of tupleList) list.push(fromTuple(tuple))\n  return list as never\n}\n\nexport declare namespace fromTupleList {\n  type ReturnType<tupleList extends TupleList> = Compute<\n    TupleList<tupleList extends TupleList<true> ? true : false>\n  >\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Computes the sign payload for an {@link ox#Authorization.Authorization} in [EIP-7702 format](https://eips.ethereum.org/EIPS/eip-7702): `keccak256('0x05' || rlp([chain_id, address, nonce]))`.\n *\n * @example\n * The example below demonstrates computing the sign payload for an {@link ox#Authorization.Authorization}. This payload\n * can then be passed to signing functions like {@link ox#Secp256k1.(sign:function)}.\n *\n * ```ts twoslash\n * import { Authorization, Secp256k1 } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n *\n * const payload = Authorization.getSignPayload(authorization) // [!code focus]\n *\n * const signature = Secp256k1.sign({\n *   payload,\n *   privateKey: '0x...',\n * })\n * ```\n *\n * @param authorization - The {@link ox#Authorization.Authorization}.\n * @returns The sign payload.\n */\nexport function getSignPayload(authorization: Authorization): Hex.Hex {\n  return hash(authorization)\n}\n\nexport declare namespace getSignPayload {\n  type ErrorType = hash.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Computes the hash for an {@link ox#Authorization.Authorization} in [EIP-7702 format](https://eips.ethereum.org/EIPS/eip-7702): `keccak256('0x05' || rlp([chain_id, address, nonce]))`.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n *\n * const hash = Authorization.hash(authorization) // [!code focus]\n * ```\n *\n * @param authorization - The {@link ox#Authorization.Authorization}.\n * @returns The hash.\n */\nexport function hash(authorization: Authorization): Hex.Hex {\n  return Hash.keccak256(Hex.concat('0x05', Rlp.fromHex(toTuple(authorization))))\n}\n\nexport declare namespace hash {\n  type ErrorType =\n    | toTuple.ErrorType\n    | Hash.keccak256.ErrorType\n    | Hex.concat.ErrorType\n    | Rlp.fromHex.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#Authorization.Authorization} to an {@link ox#Authorization.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.toRpc({\n *   address: '0x0000000000000000000000000000000000000000',\n *   chainId: 1,\n *   nonce: 1n,\n *   r: 44944627813007772897391531230081695102703289123332187696115181104739239197517n,\n *   s: 36528503505192438307355164441104001310566505351980369085208178712678799181120n,\n *   yParity: 0,\n * })\n * ```\n *\n * @param authorization - An Authorization.\n * @returns An RPC-formatted Authorization.\n */\nexport function toRpc(authorization: Signed): Rpc {\n  const { address, chainId, nonce, ...signature } = authorization\n\n  return {\n    address,\n    chainId: Hex.fromNumber(chainId),\n    nonce: Hex.fromNumber(nonce),\n    ...Signature.toRpc(signature),\n  }\n}\n\nexport declare namespace toRpc {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#Authorization.List} to an {@link ox#Authorization.ListRpc}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.toRpcList([{\n *   address: '0x0000000000000000000000000000000000000000',\n *   chainId: 1,\n *   nonce: 1n,\n *   r: 44944627813007772897391531230081695102703289123332187696115181104739239197517n,\n *   s: 36528503505192438307355164441104001310566505351980369085208178712678799181120n,\n *   yParity: 0,\n * }])\n * ```\n *\n * @param authorizationList - An Authorization List.\n * @returns An RPC-formatted Authorization List.\n */\nexport function toRpcList(authorizationList: ListSigned): ListRpc {\n  return authorizationList.map(toRpc)\n}\n\nexport declare namespace toRpcList {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#Authorization.Authorization} to an {@link ox#Authorization.Tuple}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n *\n * const tuple = Authorization.toTuple(authorization) // [!code focus]\n * // @log: [\n * // @log:   address: '0x1234567890abcdef1234567890abcdef12345678',\n * // @log:   chainId: 1,\n * // @log:   nonce: 69n,\n * // @log: ]\n * ```\n *\n * @param authorization - The {@link ox#Authorization.Authorization}.\n * @returns An [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple.\n */\nexport function toTuple<const authorization extends Authorization>(\n  authorization: authorization,\n): toTuple.ReturnType<authorization> {\n  const { address, chainId, nonce } = authorization\n  const signature = Signature.extract(authorization)\n  return [\n    chainId ? Hex.fromNumber(chainId) : '0x',\n    address,\n    nonce ? Hex.fromNumber(nonce) : '0x',\n    ...(signature ? Signature.toTuple(signature) : []),\n  ] as never\n}\n\nexport declare namespace toTuple {\n  type ReturnType<authorization extends Authorization = Authorization> =\n    Compute<Tuple<authorization extends Signature.Signature ? true : false>>\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#Authorization.List} to an {@link ox#Authorization.TupleList}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization_1 = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n * const authorization_2 = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 3,\n *   nonce: 20n,\n * })\n *\n * const tuple = Authorization.toTupleList([authorization_1, authorization_2]) // [!code focus]\n * // @log: [\n * // @log:   [\n * // @log:     address: '0x1234567890abcdef1234567890abcdef12345678',\n * // @log:     chainId: 1,\n * // @log:     nonce: 69n,\n * // @log:   ],\n * // @log:   [\n * // @log:     address: '0x1234567890abcdef1234567890abcdef12345678',\n * // @log:     chainId: 3,\n * // @log:     nonce: 20n,\n * // @log:   ],\n * // @log: ]\n * ```\n *\n * @param list - An {@link ox#Authorization.List}.\n * @returns An [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple list.\n */\nexport function toTupleList<\n  const list extends\n    | readonly Authorization<true>[]\n    | readonly Authorization<false>[],\n>(list?: list | undefined): toTupleList.ReturnType<list> {\n  if (!list || list.length === 0) return []\n\n  const tupleList: Mutable<TupleList> = []\n  for (const authorization of list) tupleList.push(toTuple(authorization))\n\n  return tupleList as never\n}\n\nexport declare namespace toTupleList {\n  type ReturnType<\n    list extends\n      | readonly Authorization<true>[]\n      | readonly Authorization<false>[],\n  > = Compute<\n    TupleList<list extends readonly Authorization<true>[] ? true : false>\n  >\n\n  type ErrorType = Errors.GlobalErrorType\n}\n", "import * as Bytes from './Bytes.js'\nimport * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport * as Cursor from './internal/cursor.js'\nimport type { ExactPartial, RecursiveArray } from './internal/types.js'\n\n/**\n * Decodes a Recursive-Length Prefix (RLP) value into a {@link ox#Bytes.Bytes} value.\n *\n * @example\n * ```ts twoslash\n * import { Rlp } from 'ox'\n * Rlp.toBytes('0x8b68656c6c6f20776f726c64')\n * // Uint8Array([139, 104, 101, 108, 108, 111,  32, 119, 111, 114, 108, 100])\n * ```\n *\n * @param value - The value to decode.\n * @returns The decoded {@link ox#Bytes.Bytes} value.\n */\nexport function toBytes(\n  value: Bytes.Bytes | Hex.Hex,\n): RecursiveArray<Bytes.Bytes> {\n  return to(value, 'Bytes')\n}\n\nexport declare namespace toBytes {\n  type ErrorType = to.ErrorType\n}\n\n/**\n * Decodes a Recursive-Length Prefix (RLP) value into a {@link ox#Hex.Hex} value.\n *\n * @example\n * ```ts twoslash\n * import { Rlp } from 'ox'\n * Rlp.toHex('0x8b68656c6c6f20776f726c64')\n * // 0x68656c6c6f20776f726c64\n * ```\n *\n * @param value - The value to decode.\n * @returns The decoded {@link ox#Hex.Hex} value.\n */\nexport function toHex(value: Bytes.Bytes | Hex.Hex): RecursiveArray<Hex.Hex> {\n  return to(value, 'Hex')\n}\n\nexport declare namespace toHex {\n  type ErrorType = to.ErrorType\n}\n\n/////////////////////////////////////////////////////////////////////////////////\n// Internal\n/////////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport function to<\n  value extends Bytes.Bytes | Hex.Hex,\n  to extends 'Hex' | 'Bytes',\n>(value: value, to: to | 'Hex' | 'Bytes'): to.ReturnType<to> {\n  const to_ = to ?? (typeof value === 'string' ? 'Hex' : 'Bytes')\n\n  const bytes = (() => {\n    if (typeof value === 'string') {\n      if (value.length > 3 && value.length % 2 !== 0)\n        throw new Hex.InvalidLengthError(value)\n      return Bytes.fromHex(value)\n    }\n    return value as Bytes.Bytes\n  })()\n\n  const cursor = Cursor.create(bytes, {\n    recursiveReadLimit: Number.POSITIVE_INFINITY,\n  })\n  const result = decodeRlpCursor(cursor, to_)\n\n  return result as to.ReturnType<to>\n}\n\n/** @internal */\nexport declare namespace to {\n  type ReturnType<to extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> =\n    | (to extends 'Bytes' ? RecursiveArray<Bytes.Bytes> : never)\n    | (to extends 'Hex' ? RecursiveArray<Hex.Hex> : never)\n\n  type ErrorType =\n    | Bytes.fromHex.ErrorType\n    | decodeRlpCursor.ErrorType\n    | Cursor.create.ErrorType\n    | Hex.InvalidLengthError\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\n\n/** @internal */\nexport function decodeRlpCursor<to extends 'Hex' | 'Bytes' = 'Hex'>(\n  cursor: Cursor.Cursor,\n  to: to | 'Hex' | 'Bytes' | undefined = 'Hex',\n): decodeRlpCursor.ReturnType<to> {\n  if (cursor.bytes.length === 0)\n    return (\n      to === 'Hex' ? Hex.fromBytes(cursor.bytes) : cursor.bytes\n    ) as decodeRlpCursor.ReturnType<to>\n\n  const prefix = cursor.readByte()\n  if (prefix < 0x80) cursor.decrementPosition(1)\n\n  // bytes\n  if (prefix < 0xc0) {\n    const length = readLength(cursor, prefix, 0x80)\n    const bytes = cursor.readBytes(length)\n    return (\n      to === 'Hex' ? Hex.fromBytes(bytes) : bytes\n    ) as decodeRlpCursor.ReturnType<to>\n  }\n\n  // list\n  const length = readLength(cursor, prefix, 0xc0)\n  return readList(cursor, length, to) as {} as decodeRlpCursor.ReturnType<to>\n}\n\n/** @internal */\nexport declare namespace decodeRlpCursor {\n  type ReturnType<to extends 'Hex' | 'Bytes' = 'Hex'> = to.ReturnType<to>\n  type ErrorType =\n    | Hex.fromBytes.ErrorType\n    | readLength.ErrorType\n    | readList.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function readLength(\n  cursor: Cursor.Cursor,\n  prefix: number,\n  offset: number,\n) {\n  if (offset === 0x80 && prefix < 0x80) return 1\n  if (prefix <= offset + 55) return prefix - offset\n  if (prefix === offset + 55 + 1) return cursor.readUint8()\n  if (prefix === offset + 55 + 2) return cursor.readUint16()\n  if (prefix === offset + 55 + 3) return cursor.readUint24()\n  if (prefix === offset + 55 + 4) return cursor.readUint32()\n  throw new Errors.BaseError('Invalid RLP prefix')\n}\n\n/** @internal */\nexport declare namespace readLength {\n  type ErrorType = Errors.BaseError | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function readList<to extends 'Hex' | 'Bytes'>(\n  cursor: Cursor.Cursor,\n  length: number,\n  to: to | 'Hex' | 'Bytes',\n) {\n  const position = cursor.position\n  const value: decodeRlpCursor.ReturnType<to>[] = []\n  while (cursor.position - position < length)\n    value.push(decodeRlpCursor(cursor, to))\n  return value\n}\n\n/** @internal */\nexport declare namespace readList {\n  type ErrorType = Errors.GlobalErrorType\n}\n\ntype Encodable = {\n  length: number\n  encode(cursor: Cursor.Cursor): void\n}\n\n/**\n * Encodes a {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value into a Recursive-Length Prefix (RLP) value.\n *\n * @example\n * ```ts twoslash\n * import { Bytes, Rlp } from 'ox'\n *\n * Rlp.from('0x68656c6c6f20776f726c64', { as: 'Hex' })\n * // @log: 0x8b68656c6c6f20776f726c64\n *\n * Rlp.from(Bytes.from([139, 104, 101, 108, 108, 111,  32, 119, 111, 114, 108, 100]), { as: 'Bytes' })\n * // @log: Uint8Array([104, 101, 108, 108, 111,  32, 119, 111, 114, 108, 100])\n * ```\n *\n * @param value - The {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value to encode.\n * @param options - Options.\n * @returns The RLP value.\n */\nexport function from<as extends 'Hex' | 'Bytes'>(\n  value: RecursiveArray<Bytes.Bytes> | RecursiveArray<Hex.Hex>,\n  options: from.Options<as>,\n): from.ReturnType<as> {\n  const { as } = options\n\n  const encodable = getEncodable(value)\n  const cursor = Cursor.create(new Uint8Array(encodable.length))\n  encodable.encode(cursor)\n\n  if (as === 'Hex') return Hex.fromBytes(cursor.bytes) as from.ReturnType<as>\n  return cursor.bytes as from.ReturnType<as>\n}\n\nexport declare namespace from {\n  type Options<as extends 'Hex' | 'Bytes'> = {\n    /** The type to convert the RLP value to. */\n    as: as | 'Hex' | 'Bytes'\n  }\n\n  type ReturnType<as extends 'Hex' | 'Bytes'> =\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\n    | (as extends 'Hex' ? Hex.Hex : never)\n\n  type ErrorType =\n    | Cursor.create.ErrorType\n    | Hex.fromBytes.ErrorType\n    | Bytes.fromHex.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Encodes a {@link ox#Bytes.Bytes} value into a Recursive-Length Prefix (RLP) value.\n *\n * @example\n * ```ts twoslash\n * import { Bytes, Rlp } from 'ox'\n *\n * Rlp.fromBytes(Bytes.from([139, 104, 101, 108, 108, 111,  32, 119, 111, 114, 108, 100]))\n * // @log: Uint8Array([104, 101, 108, 108, 111,  32, 119, 111, 114, 108, 100])\n * ```\n *\n * @param bytes - The {@link ox#Bytes.Bytes} value to encode.\n * @param options - Options.\n * @returns The RLP value.\n */\nexport function fromBytes<as extends 'Hex' | 'Bytes' = 'Bytes'>(\n  bytes: RecursiveArray<Bytes.Bytes>,\n  options: fromBytes.Options<as> = {},\n): fromBytes.ReturnType<as> {\n  const { as = 'Bytes' } = options\n  return from(bytes, { as }) as never\n}\n\nexport declare namespace fromBytes {\n  type Options<as extends 'Hex' | 'Bytes' = 'Bytes'> = ExactPartial<\n    from.Options<as>\n  >\n\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Bytes'> = from.ReturnType<as>\n\n  type ErrorType = from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Encodes a {@link ox#Hex.Hex} value into a Recursive-Length Prefix (RLP) value.\n *\n * @example\n * ```ts twoslash\n * import { Rlp } from 'ox'\n *\n * Rlp.fromHex('0x68656c6c6f20776f726c64')\n * // @log: 0x8b68656c6c6f20776f726c64\n * ```\n *\n * @param hex - The {@link ox#Hex.Hex} value to encode.\n * @param options - Options.\n * @returns The RLP value.\n */\nexport function fromHex<as extends 'Hex' | 'Bytes' = 'Hex'>(\n  hex: RecursiveArray<Hex.Hex>,\n  options: fromHex.Options<as> = {},\n): fromHex.ReturnType<as> {\n  const { as = 'Hex' } = options\n  return from(hex, { as }) as never\n}\n\nexport declare namespace fromHex {\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex'> = ExactPartial<\n    from.Options<as>\n  >\n\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex'> = from.ReturnType<as>\n\n  type ErrorType = from.ErrorType | Errors.GlobalErrorType\n}\n\n/////////////////////////////////////////////////////////////////////////////////\n// Internal\n/////////////////////////////////////////////////////////////////////////////////\n\nfunction getEncodable(\n  bytes: RecursiveArray<Bytes.Bytes> | RecursiveArray<Hex.Hex>,\n): Encodable {\n  if (Array.isArray(bytes))\n    return getEncodableList(bytes.map((x) => getEncodable(x)))\n  return getEncodableBytes(bytes as any)\n}\n\nfunction getEncodableList(list: Encodable[]): Encodable {\n  const bodyLength = list.reduce((acc, x) => acc + x.length, 0)\n\n  const sizeOfBodyLength = getSizeOfLength(bodyLength)\n  const length = (() => {\n    if (bodyLength <= 55) return 1 + bodyLength\n    return 1 + sizeOfBodyLength + bodyLength\n  })()\n\n  return {\n    length,\n    encode(cursor: Cursor.Cursor) {\n      if (bodyLength <= 55) {\n        cursor.pushByte(0xc0 + bodyLength)\n      } else {\n        cursor.pushByte(0xc0 + 55 + sizeOfBodyLength)\n        if (sizeOfBodyLength === 1) cursor.pushUint8(bodyLength)\n        else if (sizeOfBodyLength === 2) cursor.pushUint16(bodyLength)\n        else if (sizeOfBodyLength === 3) cursor.pushUint24(bodyLength)\n        else cursor.pushUint32(bodyLength)\n      }\n      for (const { encode } of list) {\n        encode(cursor)\n      }\n    },\n  }\n}\n\nfunction getEncodableBytes(bytesOrHex: Bytes.Bytes | Hex.Hex): Encodable {\n  const bytes =\n    typeof bytesOrHex === 'string' ? Bytes.fromHex(bytesOrHex) : bytesOrHex\n\n  const sizeOfBytesLength = getSizeOfLength(bytes.length)\n  const length = (() => {\n    if (bytes.length === 1 && bytes[0]! < 0x80) return 1\n    if (bytes.length <= 55) return 1 + bytes.length\n    return 1 + sizeOfBytesLength + bytes.length\n  })()\n\n  return {\n    length,\n    encode(cursor: Cursor.Cursor) {\n      if (bytes.length === 1 && bytes[0]! < 0x80) {\n        cursor.pushBytes(bytes)\n      } else if (bytes.length <= 55) {\n        cursor.pushByte(0x80 + bytes.length)\n        cursor.pushBytes(bytes)\n      } else {\n        cursor.pushByte(0x80 + 55 + sizeOfBytesLength)\n        if (sizeOfBytesLength === 1) cursor.pushUint8(bytes.length)\n        else if (sizeOfBytesLength === 2) cursor.pushUint16(bytes.length)\n        else if (sizeOfBytesLength === 3) cursor.pushUint24(bytes.length)\n        else cursor.pushUint32(bytes.length)\n        cursor.pushBytes(bytes)\n      }\n    },\n  }\n}\n\nfunction getSizeOfLength(length: number) {\n  if (length < 2 ** 8) return 1\n  if (length < 2 ** 16) return 2\n  if (length < 2 ** 24) return 3\n  if (length < 2 ** 32) return 4\n  throw new Errors.BaseError('Length is too large.')\n}\n", "import { secp256k1 } from '@noble/curves/secp256k1'\nimport * as Bytes from './Bytes.js'\nimport * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport * as Json from './Json.js'\nimport * as Solidity from './Solidity.js'\nimport type { Compute, ExactPartial, OneOf } from './internal/types.js'\n\n/** Root type for an ECDSA signature. */\nexport type Signature<\n  recovered extends boolean = true,\n  bigintType = bigint,\n  numberType = number,\n> = Compute<\n  recovered extends true\n    ? {\n        r: bigintType\n        s: bigintType\n        yParity: numberType\n      }\n    : {\n        r: bigintType\n        s: bigintType\n        yParity?: numberType | undefined\n      }\n>\n\n/** RPC-formatted ECDSA signature. */\nexport type Rpc<recovered extends boolean = true> = Signature<\n  recovered,\n  Hex.Hex,\n  Hex.Hex\n>\n\n/** (Legacy) ECDSA signature. */\nexport type Legacy<bigintType = bigint, numberType = number> = {\n  r: bigintType\n  s: bigintType\n  v: numberType\n}\n\n/** RPC-formatted (Legacy) ECDSA signature. */\nexport type LegacyRpc = Legacy<Hex.Hex, Hex.Hex>\n\nexport type Tuple = readonly [yParity: Hex.Hex, r: Hex.Hex, s: Hex.Hex]\n\n/**\n * Asserts that a Signature is valid.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * Signature.assert({\n *   r: -49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1,\n * })\n * // @error: InvalidSignatureRError:\n * // @error: Value `-549...n` is an invalid r value.\n * // @error: r must be a positive integer less than 2^256.\n * ```\n *\n * @param signature - The signature object to assert.\n */\nexport function assert(\n  signature: ExactPartial<Signature>,\n  options: assert.Options = {},\n): asserts signature is Signature {\n  const { recovered } = options\n  if (typeof signature.r === 'undefined')\n    throw new MissingPropertiesError({ signature })\n  if (typeof signature.s === 'undefined')\n    throw new MissingPropertiesError({ signature })\n  if (recovered && typeof signature.yParity === 'undefined')\n    throw new MissingPropertiesError({ signature })\n  if (signature.r < 0n || signature.r > Solidity.maxUint256)\n    throw new InvalidRError({ value: signature.r })\n  if (signature.s < 0n || signature.s > Solidity.maxUint256)\n    throw new InvalidSError({ value: signature.s })\n  if (\n    typeof signature.yParity === 'number' &&\n    signature.yParity !== 0 &&\n    signature.yParity !== 1\n  )\n    throw new InvalidYParityError({ value: signature.yParity })\n}\n\nexport declare namespace assert {\n  type Options = {\n    /** Whether or not the signature should be recovered (contain `yParity`). */\n    recovered?: boolean\n  }\n\n  type ErrorType =\n    | MissingPropertiesError\n    | InvalidRError\n    | InvalidSError\n    | InvalidYParityError\n    | Errors.GlobalErrorType\n}\n\n/**\n * Deserializes a {@link ox#Bytes.Bytes} signature into a structured {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Signature } from 'ox'\n *\n * Signature.fromBytes(new Uint8Array([128, 3, 131, ...]))\n * // @log: { r: 5231...n, s: 3522...n, yParity: 0 }\n * ```\n *\n * @param signature - The serialized signature.\n * @returns The deserialized {@link ox#Signature.Signature}.\n */\nexport function fromBytes(signature: Bytes.Bytes): Signature {\n  return fromHex(Hex.fromBytes(signature))\n}\n\nexport declare namespace fromBytes {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Deserializes a {@link ox#Hex.Hex} signature into a structured {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * Signature.fromHex('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c')\n * // @log: { r: 5231...n, s: 3522...n, yParity: 0 }\n * ```\n *\n * @param serialized - The serialized signature.\n * @returns The deserialized {@link ox#Signature.Signature}.\n */\nexport function fromHex(signature: Hex.Hex): Signature {\n  if (signature.length !== 130 && signature.length !== 132)\n    throw new InvalidSerializedSizeError({ signature })\n\n  const r = BigInt(Hex.slice(signature, 0, 32))\n  const s = BigInt(Hex.slice(signature, 32, 64))\n\n  const yParity = (() => {\n    const yParity = Number(`0x${signature.slice(130)}`)\n    if (Number.isNaN(yParity)) return undefined\n    try {\n      return vToYParity(yParity)\n    } catch {\n      throw new InvalidYParityError({ value: yParity })\n    }\n  })()\n\n  if (typeof yParity === 'undefined')\n    return {\n      r,\n      s,\n    } as never\n  return {\n    r,\n    s,\n    yParity,\n  } as never\n}\n\nexport declare namespace fromHex {\n  type ErrorType =\n    | Hex.from.ErrorType\n    | InvalidSerializedSizeError\n    | Errors.GlobalErrorType\n}\n\n/**\n * Extracts a {@link ox#Signature.Signature} from an arbitrary object that may include signature properties.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Signature } from 'ox'\n *\n * Signature.extract({\n *   baz: 'barry',\n *   foo: 'bar',\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1,\n *   zebra: 'stripes',\n * })\n * // @log: {\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * // @log:   yParity: 1\n * // @log: }\n * ```\n *\n * @param value - The arbitrary object to extract the signature from.\n * @returns The extracted {@link ox#Signature.Signature}.\n */\nexport function extract(value: extract.Value): Signature | undefined {\n  if (typeof value.r === 'undefined') return undefined\n  if (typeof value.s === 'undefined') return undefined\n  return from(value as any)\n}\n\nexport declare namespace extract {\n  type Value = {\n    r?: bigint | Hex.Hex | undefined\n    s?: bigint | Hex.Hex | undefined\n    yParity?: number | Hex.Hex | undefined\n    v?: number | Hex.Hex | undefined\n  }\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Instantiates a typed {@link ox#Signature.Signature} object from a {@link ox#Signature.Signature}, {@link ox#Signature.Legacy}, {@link ox#Bytes.Bytes}, or {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * Signature.from({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1,\n * })\n * // @log: {\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * // @log:   yParity: 1\n * // @log: }\n * ```\n *\n * @example\n * ### From Serialized\n *\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * Signature.from('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db801')\n * // @log: {\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * // @log:   yParity: 1,\n * // @log: }\n * ```\n *\n * @example\n * ### From Legacy\n *\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * Signature.from({\n *   r: 47323457007453657207889730243826965761922296599680473886588287015755652701072n,\n *   s: 57228803202727131502949358313456071280488184270258293674242124340113824882788n,\n *   v: 27,\n * })\n * // @log: {\n * // @log:   r: 47323457007453657207889730243826965761922296599680473886588287015755652701072n,\n * // @log:   s: 57228803202727131502949358313456071280488184270258293674242124340113824882788n,\n * // @log:   yParity: 0\n * // @log: }\n * ```\n *\n * @param signature - The signature value to instantiate.\n * @returns The instantiated {@link ox#Signature.Signature}.\n */\nexport function from<\n  const signature extends\n    | OneOf<Signature<boolean> | Rpc<boolean> | Legacy | LegacyRpc>\n    | Hex.Hex\n    | Bytes.Bytes,\n>(\n  signature:\n    | signature\n    | OneOf<Signature<boolean> | Rpc<boolean> | Legacy | LegacyRpc>\n    | Hex.Hex\n    | Bytes.Bytes,\n): from.ReturnType<signature> {\n  const signature_ = (() => {\n    if (typeof signature === 'string') return fromHex(signature)\n    if (signature instanceof Uint8Array) return fromBytes(signature)\n    if (typeof signature.r === 'string') return fromRpc(signature)\n    if (signature.v) return fromLegacy(signature)\n    return {\n      r: signature.r,\n      s: signature.s,\n      ...(typeof signature.yParity !== 'undefined'\n        ? { yParity: signature.yParity }\n        : {}),\n    }\n  })()\n  assert(signature_)\n  return signature_ as never\n}\n\nexport declare namespace from {\n  type ReturnType<\n    signature extends\n      | OneOf<Signature<boolean> | Rpc<boolean> | Legacy | LegacyRpc>\n      | Hex.Hex\n      | Bytes.Bytes,\n  > = signature extends Signature<boolean> & { v?: undefined }\n    ? signature\n    : Signature\n\n  type ErrorType =\n    | assert.ErrorType\n    | fromBytes.ErrorType\n    | fromHex.ErrorType\n    | vToYParity.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Converts a DER-encoded signature to a {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Signature } from 'ox'\n *\n * const signature = Signature.fromDerBytes(new Uint8Array([132, 51, 23, ...]))\n * // @log: {\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * // @log: }\n * ```\n *\n * @param signature - The DER-encoded signature to convert.\n * @returns The {@link ox#Signature.Signature}.\n */\nexport function fromDerBytes(signature: Bytes.Bytes): Signature<false> {\n  return fromDerHex(Hex.fromBytes(signature))\n}\n\nexport declare namespace fromDerBytes {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a DER-encoded signature to a {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.fromDerHex('0x304402206e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf02204a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8')\n * // @log: {\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * // @log: }\n * ```\n *\n * @param signature - The DER-encoded signature to convert.\n * @returns The {@link ox#Signature.Signature}.\n */\nexport function fromDerHex(signature: Hex.Hex): Signature<false> {\n  const { r, s } = secp256k1.Signature.fromDER(Hex.from(signature).slice(2))\n  return { r, s }\n}\n\nexport declare namespace fromDerHex {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#Signature.Legacy} into a {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const legacy = Signature.fromLegacy({ r: 1n, s: 2n, v: 28 })\n * // @log: { r: 1n, s: 2n, yParity: 1 }\n * ```\n *\n * @param signature - The {@link ox#Signature.Legacy} to convert.\n * @returns The converted {@link ox#Signature.Signature}.\n */\nexport function fromLegacy(signature: Legacy): Signature {\n  return {\n    r: signature.r,\n    s: signature.s,\n    yParity: vToYParity(signature.v),\n  }\n}\n\nexport declare namespace fromLegacy {\n  type ErrorType = vToYParity.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#Signature.Rpc} into a {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.fromRpc({\n *   r: '0x635dc2033e60185bb36709c29c75d64ea51dfbd91c32ef4be198e4ceb169fb4d',\n *   s: '0x50c2667ac4c771072746acfdcf1f1483336dcca8bd2df47cd83175dbe60f0540',\n *   yParity: '0x0',\n * })\n * ```\n *\n * @param signature - The {@link ox#Signature.Rpc} to convert.\n * @returns The converted {@link ox#Signature.Signature}.\n */\nexport function fromRpc(signature: {\n  r: Hex.Hex\n  s: Hex.Hex\n  yParity?: Hex.Hex | undefined\n  v?: Hex.Hex | undefined\n}): Signature {\n  const yParity = (() => {\n    const v = signature.v ? Number(signature.v) : undefined\n    let yParity = signature.yParity ? Number(signature.yParity) : undefined\n    if (typeof v === 'number' && typeof yParity !== 'number')\n      yParity = vToYParity(v)\n    if (typeof yParity !== 'number')\n      throw new InvalidYParityError({ value: signature.yParity })\n    return yParity\n  })()\n\n  return {\n    r: BigInt(signature.r),\n    s: BigInt(signature.s),\n    yParity,\n  }\n}\n\nexport declare namespace fromRpc {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#Signature.Tuple} to a {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.fromTuple(['0x01', '0x7b', '0x1c8'])\n * // @log: {\n * // @log:   r: 123n,\n * // @log:   s: 456n,\n * // @log:   yParity: 1,\n * // @log: }\n * ```\n *\n * @param tuple - The {@link ox#Signature.Tuple} to convert.\n * @returns The {@link ox#Signature.Signature}.\n */\nexport function fromTuple(tuple: Tuple): Signature {\n  const [yParity, r, s] = tuple\n  return from({\n    r: r === '0x' ? 0n : BigInt(r),\n    s: s === '0x' ? 0n : BigInt(s),\n    yParity: yParity === '0x' ? 0 : Number(yParity),\n  })\n}\n\nexport declare namespace fromTuple {\n  type ErrorType = from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Serializes a {@link ox#Signature.Signature} to {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.toBytes({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1\n * })\n * // @log: Uint8Array [102, 16, 10, ...]\n * ```\n *\n * @param signature - The signature to serialize.\n * @returns The serialized signature.\n */\nexport function toBytes(signature: Signature<boolean>): Bytes.Bytes {\n  return Bytes.fromHex(toHex(signature))\n}\n\nexport declare namespace toBytes {\n  type ErrorType =\n    | toHex.ErrorType\n    | Bytes.fromHex.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Serializes a {@link ox#Signature.Signature} to {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.toHex({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1\n * })\n * // @log: '0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c'\n * ```\n *\n * @param signature - The signature to serialize.\n * @returns The serialized signature.\n */\nexport function toHex(signature: Signature<boolean>): Hex.Hex {\n  assert(signature)\n\n  const r = signature.r\n  const s = signature.s\n\n  const signature_ = Hex.concat(\n    Hex.fromNumber(r, { size: 32 }),\n    Hex.fromNumber(s, { size: 32 }),\n    // If the signature is recovered, add the recovery byte to the signature.\n    typeof signature.yParity === 'number'\n      ? Hex.fromNumber(yParityToV(signature.yParity), { size: 1 })\n      : '0x',\n  )\n\n  return signature_\n}\n\nexport declare namespace toHex {\n  type ErrorType =\n    | Hex.concat.ErrorType\n    | Hex.fromNumber.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#Signature.Signature} to DER-encoded format.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.from({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * })\n *\n * const signature_der = Signature.toDerBytes(signature)\n * // @log: Uint8Array [132, 51, 23, ...]\n * ```\n *\n * @param signature - The signature to convert.\n * @returns The DER-encoded signature.\n */\nexport function toDerBytes(signature: Signature<boolean>): Bytes.Bytes {\n  const sig = new secp256k1.Signature(signature.r, signature.s)\n  return sig.toDERRawBytes()\n}\n\nexport declare namespace toDerBytes {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#Signature.Signature} to DER-encoded format.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.from({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * })\n *\n * const signature_der = Signature.toDerHex(signature)\n * // @log: '0x304402206e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf02204a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8'\n * ```\n *\n * @param signature - The signature to convert.\n * @returns The DER-encoded signature.\n */\nexport function toDerHex(signature: Signature<boolean>): Hex.Hex {\n  const sig = new secp256k1.Signature(signature.r, signature.s)\n  return `0x${sig.toDERHex()}`\n}\n\nexport declare namespace toDerHex {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#Signature.Signature} into a {@link ox#Signature.Legacy}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const legacy = Signature.toLegacy({ r: 1n, s: 2n, yParity: 1 })\n * // @log: { r: 1n, s: 2n, v: 28 }\n * ```\n *\n * @param signature - The {@link ox#Signature.Signature} to convert.\n * @returns The converted {@link ox#Signature.Legacy}.\n */\nexport function toLegacy(signature: Signature): Legacy {\n  return {\n    r: signature.r,\n    s: signature.s,\n    v: yParityToV(signature.yParity),\n  }\n}\n\nexport declare namespace toLegacy {\n  type ErrorType = yParityToV.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#Signature.Signature} into a {@link ox#Signature.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.toRpc({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1\n * })\n * ```\n *\n * @param signature - The {@link ox#Signature.Signature} to convert.\n * @returns The converted {@link ox#Signature.Rpc}.\n */\nexport function toRpc(signature: Signature): Rpc {\n  const { r, s, yParity } = signature\n  return {\n    r: Hex.fromNumber(r, { size: 32 }),\n    s: Hex.fromNumber(s, { size: 32 }),\n    yParity: yParity === 0 ? '0x0' : '0x1',\n  }\n}\n\nexport declare namespace toRpc {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#Signature.Signature} to a serialized {@link ox#Signature.Tuple} to be used for signatures in Transaction Envelopes, EIP-7702 Authorization Lists, etc.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signatureTuple = Signature.toTuple({\n *   r: 123n,\n *   s: 456n,\n *   yParity: 1,\n * })\n * // @log: [yParity: '0x01', r: '0x7b', s: '0x1c8']\n * ```\n *\n * @param signature - The {@link ox#Signature.Signature} to convert.\n * @returns The {@link ox#Signature.Tuple}.\n */\nexport function toTuple(signature: Signature): Tuple {\n  const { r, s, yParity } = signature\n\n  return [\n    yParity ? '0x01' : '0x',\n    r === 0n ? '0x' : Hex.trimLeft(Hex.fromNumber(r!)),\n    s === 0n ? '0x' : Hex.trimLeft(Hex.fromNumber(s!)),\n  ] as const\n}\n\nexport declare namespace toTuple {\n  type ErrorType =\n    | Hex.trimLeft.ErrorType\n    | Hex.fromNumber.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Validates a Signature. Returns `true` if the signature is valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const valid = Signature.validate({\n *   r: -49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1,\n * })\n * // @log: false\n * ```\n *\n * @param signature - The signature object to assert.\n */\nexport function validate(\n  signature: ExactPartial<Signature>,\n  options: validate.Options = {},\n): boolean {\n  try {\n    assert(signature, options)\n    return true\n  } catch {\n    return false\n  }\n}\n\nexport declare namespace validate {\n  type Options = {\n    /** Whether or not the signature should be recovered (contain `yParity`). */\n    recovered?: boolean\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a ECDSA `v` value to a `yParity` value.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const yParity = Signature.vToYParity(28)\n * // @log: 1\n * ```\n *\n * @param v - The ECDSA `v` value to convert.\n * @returns The `yParity` value.\n */\nexport function vToYParity(v: number): Signature['yParity'] {\n  if (v === 0 || v === 27) return 0\n  if (v === 1 || v === 28) return 1\n  if (v >= 35) return v % 2 === 0 ? 1 : 0\n  throw new InvalidVError({ value: v })\n}\n\nexport declare namespace vToYParity {\n  type ErrorType = InvalidVError | Errors.GlobalErrorType\n}\n\n/**\n * Converts a ECDSA `v` value to a `yParity` value.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const v = Signature.yParityToV(1)\n * // @log: 28\n * ```\n *\n * @param yParity - The ECDSA `yParity` value to convert.\n * @returns The `v` value.\n */\nexport function yParityToV(yParity: number): number {\n  if (yParity === 0) return 27\n  if (yParity === 1) return 28\n  throw new InvalidYParityError({ value: yParity })\n}\n\nexport declare namespace yParityToV {\n  type ErrorType = InvalidVError | Errors.GlobalErrorType\n}\n\n/** Thrown when the serialized signature is of an invalid size. */\nexport class InvalidSerializedSizeError extends Errors.BaseError {\n  override readonly name = 'Signature.InvalidSerializedSizeError'\n\n  constructor({ signature }: { signature: Hex.Hex | Bytes.Bytes }) {\n    super(`Value \\`${signature}\\` is an invalid signature size.`, {\n      metaMessages: [\n        'Expected: 64 bytes or 65 bytes.',\n        `Received ${Hex.size(Hex.from(signature))} bytes.`,\n      ],\n    })\n  }\n}\n\n/** Thrown when the signature is missing either an `r`, `s`, or `yParity` property. */\nexport class MissingPropertiesError extends Errors.BaseError {\n  override readonly name = 'Signature.MissingPropertiesError'\n\n  constructor({ signature }: { signature: unknown }) {\n    super(\n      `Signature \\`${Json.stringify(signature)}\\` is missing either an \\`r\\`, \\`s\\`, or \\`yParity\\` property.`,\n    )\n  }\n}\n\n/** Thrown when the signature has an invalid `r` value. */\nexport class InvalidRError extends Errors.BaseError {\n  override readonly name = 'Signature.InvalidRError'\n\n  constructor({ value }: { value: unknown }) {\n    super(\n      `Value \\`${value}\\` is an invalid r value. r must be a positive integer less than 2^256.`,\n    )\n  }\n}\n\n/** Thrown when the signature has an invalid `s` value. */\nexport class InvalidSError extends Errors.BaseError {\n  override readonly name = 'Signature.InvalidSError'\n\n  constructor({ value }: { value: unknown }) {\n    super(\n      `Value \\`${value}\\` is an invalid s value. s must be a positive integer less than 2^256.`,\n    )\n  }\n}\n\n/** Thrown when the signature has an invalid `yParity` value. */\nexport class InvalidYParityError extends Errors.BaseError {\n  override readonly name = 'Signature.InvalidYParityError'\n\n  constructor({ value }: { value: unknown }) {\n    super(\n      `Value \\`${value}\\` is an invalid y-parity value. Y-parity must be 0 or 1.`,\n    )\n  }\n}\n\n/** Thrown when the signature has an invalid `v` value. */\nexport class InvalidVError extends Errors.BaseError {\n  override readonly name = 'Signature.InvalidVError'\n\n  constructor({ value }: { value: number }) {\n    super(`Value \\`${value}\\` is an invalid v value. v must be 27, 28 or >=35.`)\n  }\n}\n", "/**\n * Utils for modular division and finite fields.\n * A finite field over 11 is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { anumber } from '@noble/hashes/utils';\nimport {\n  bitMask,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesBE,\n  numberToBytesLE,\n  validateObject,\n} from './utils.ts';\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _8n = /* @__PURE__ */ BigInt(8);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * TODO: remove.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  return FpPow(Field(modulo), num, power);\n}\n\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n) throw new Error('invert: expected non-zero number');\n  if (modulo <= _0n) throw new Error('invert: expected positive modulus, got ' + modulo);\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n// Not all roots are possible! Example which will throw:\n// const NUM =\n// n = 72057594037927816n;\n// Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\nfunction sqrt3mod4<T>(Fp: IField<T>, n: T) {\n  const p1div4 = (Fp.ORDER + _1n) / _4n;\n  const root = Fp.pow(n, p1div4);\n  // Throw if root^2 != n\n  if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n  return root;\n}\n\nfunction sqrt5mod8<T>(Fp: IField<T>, n: T) {\n  const p5div8 = (Fp.ORDER - _5n) / _8n;\n  const n2 = Fp.mul(n, _2n);\n  const v = Fp.pow(n2, p5div8);\n  const nv = Fp.mul(n, v);\n  const i = Fp.mul(Fp.mul(nv, _2n), v);\n  const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n  if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n  return root;\n}\n\n// TODO: Commented-out for now. Provide test vectors.\n// Tonelli is too slow for extension fields Fp2.\n// That means we can't use sqrt (c1, c2...) even for initialization constants.\n// if (P % _16n === _9n) return sqrt9mod16;\n// // prettier-ignore\n// function sqrt9mod16<T>(Fp: IField<T>, n: T, p7div16?: bigint) {\n//   if (p7div16 === undefined) p7div16 = (Fp.ORDER + BigInt(7)) / _16n;\n//   const c1 = Fp.sqrt(Fp.neg(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n//   const c2 = Fp.sqrt(c1);             //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n//   const c3 = Fp.sqrt(Fp.neg(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n//   const c4 = p7div16;                 //  4. c4 = (q + 7) / 16        # Integer arithmetic\n//   let tv1 = Fp.pow(n, c4);            //  1. tv1 = x^c4\n//   let tv2 = Fp.mul(c1, tv1);          //  2. tv2 = c1 * tv1\n//   const tv3 = Fp.mul(c2, tv1);        //  3. tv3 = c2 * tv1\n//   let tv4 = Fp.mul(c3, tv1);          //  4. tv4 = c3 * tv1\n//   const e1 = Fp.eql(Fp.sqr(tv2), n);  //  5.  e1 = (tv2^2) == x\n//   const e2 = Fp.eql(Fp.sqr(tv3), n);  //  6.  e2 = (tv3^2) == x\n//   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n//   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n//   const e3 = Fp.eql(Fp.sqr(tv2), n);  //  9.  e3 = (tv2^2) == x\n//   return Fp.cmov(tv1, tv2, e3); // 10.  z = CMOV(tv1, tv2, e3) # Select the sqrt from tv1 and tv2\n// }\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // Initialization (precomputation).\n  if (P < BigInt(3)) throw new Error('sqrt is not defined for small field');\n  // Factor P - 1 = Q * 2^S, where Q is odd\n  let Q = P - _1n;\n  let S = 0;\n  while (Q % _2n === _0n) {\n    Q /= _2n;\n    S++;\n  }\n\n  // Find the first quadratic non-residue Z >= 2\n  let Z = _2n;\n  const _Fp = Field(P);\n  while (FpLegendre(_Fp, Z) === 1) {\n    // Basic primality test for P. After x iterations, chance of\n    // not finding quadratic non-residue is 2^x, so 2^1000.\n    if (Z++ > 1000) throw new Error('Cannot find square root: probably non-prime P');\n  }\n  // Fast-path; usually done before Z, but we do \"primality test\".\n  if (S === 1) return sqrt3mod4;\n\n  // Slow-path\n  // TODO: test on Fp2 and others\n  let cc = _Fp.pow(Z, Q); // c = z^Q\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    if (Fp.is0(n)) return n;\n    // Check if n is a quadratic residue using Legendre symbol\n    if (FpLegendre(Fp, n) !== 1) throw new Error('Cannot find square root');\n\n    // Initialize variables for the main loop\n    let M = S;\n    let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\n    let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\n    let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\n\n    // Main loop\n    // while t != 1\n    while (!Fp.eql(t, Fp.ONE)) {\n      if (Fp.is0(t)) return Fp.ZERO; // if t=0 return R=0\n      let i = 1;\n\n      // Find the smallest i >= 1 such that t^(2^i) ≡ 1 (mod P)\n      let t_tmp = Fp.sqr(t); // t^(2^1)\n      while (!Fp.eql(t_tmp, Fp.ONE)) {\n        i++;\n        t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\n        if (i === M) throw new Error('Cannot find square root');\n      }\n\n      // Calculate the exponent for b: 2^(M - i - 1)\n      const exponent = _1n << BigInt(M - i - 1); // bigint is important\n      const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\n\n      // Update variables\n      M = i;\n      c = Fp.sqr(b); // c = b^2\n      t = Fp.mul(t, c); // t = (t * b^2)\n      R = Fp.mul(R, b); // R = R*b\n    }\n    return R;\n  };\n}\n\n/**\n * Square root for a finite field. Will try optimized versions first:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // P ≡ 3 (mod 4) => √n = n^((P+1)/4)\n  if (P % _4n === _3n) return sqrt3mod4;\n  // P ≡ 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\n  if (P % _8n === _5n) return sqrt5mod8;\n  // P ≡ 9 (mod 16) not implemented, see above\n  // Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint): boolean =>\n  (mod(num, modulo) & _1n) === _1n;\n\n/** Field is not always over prime: for example, Fp2 has ORDER(q)=p^m. */\nexport interface IField<T> {\n  ORDER: bigint;\n  isLE: boolean;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>): IField<T> {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(Fp: IField<T>, num: T, power: bigint): T {\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (power === _0n) return Fp.ONE;\n  if (power === _1n) return num;\n  let p = Fp.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = Fp.mul(p, d);\n    d = Fp.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * Exception-free. Will return `undefined` for 0 elements.\n * @param passZero map 0 to 0 (instead of undefined)\n */\nexport function FpInvertBatch<T>(Fp: IField<T>, nums: T[], passZero = false): T[] {\n  const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\n  // Walk from first to last, multiply them by each other MOD p\n  const multipliedAcc = nums.reduce((acc, num, i) => {\n    if (Fp.is0(num)) return acc;\n    inverted[i] = acc;\n    return Fp.mul(acc, num);\n  }, Fp.ONE);\n  // Invert last element\n  const invertedAcc = Fp.inv(multipliedAcc);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (Fp.is0(num)) return acc;\n    inverted[i] = Fp.mul(acc, inverted[i]);\n    return Fp.mul(acc, num);\n  }, invertedAcc);\n  return inverted;\n}\n\n// TODO: remove\nexport function FpDiv<T>(Fp: IField<T>, lhs: T, rhs: T | bigint): T {\n  return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\n}\n\n/**\n * Legendre symbol.\n * Legendre constant is used to calculate Legendre symbol (a | p)\n * which denotes the value of a^((p-1)/2) (mod p).\n *\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre<T>(Fp: IField<T>, n: T): -1 | 0 | 1 {\n  // We can use 3rd argument as optional cache of this value\n  // but seems unneeded for now. The operation is very fast.\n  const p1mod2 = (Fp.ORDER - _1n) / _2n;\n  const powered = Fp.pow(n, p1mod2);\n  const yes = Fp.eql(powered, Fp.ONE);\n  const zero = Fp.eql(powered, Fp.ZERO);\n  const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n  if (!yes && !zero && !no) throw new Error('invalid Legendre symbol result');\n  return yes ? 1 : zero ? 0 : -1;\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(Fp: IField<T>, n: T): boolean {\n  const l = FpLegendre(Fp, n);\n  return l === 1;\n}\n\n// CURVE.n lengths\nexport function nLength(\n  n: bigint,\n  nBitLength?: number\n): {\n  nBitLength: number;\n  nByteLength: number;\n} {\n  // Bit size, byte size of CURVE.n\n  if (nBitLength !== undefined) anumber(nBitLength);\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n  let sqrtP: ReturnType<typeof FpSqrt>; // cached sqrtP\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    isLE,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error('invalid field element: expected bigint, got ' + typeof num);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt:\n      redef.sqrt ||\n      ((n) => {\n        if (!sqrtP) sqrtP = FpSqrt(ORDER);\n        return sqrtP(f, n);\n      }),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n    // TODO: we don't need it here, move out to separate fn\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // We can't move this out because Fp6, Fp12 implement it\n    // and it's unclear what to return in there.\n    cmov: (a, b, c) => (c ? b : a),\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(\n      'hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen\n    );\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n  const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n", "/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { type IField, nLength, validateField } from './modular.ts';\nimport { bitLen, bitMask, validateObject } from './utils.ts';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\nfunction constTimeNegate<T extends Group<T>>(condition: boolean, item: T): T {\n  const neg = item.negate();\n  return condition ? neg : item;\n}\n\nfunction validateW(W: number, bits: number) {\n  if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n    throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\n\n/** Internal wNAF opts for specific W and scalarBits */\nexport type WOpts = {\n  windows: number;\n  windowSize: number;\n  mask: bigint;\n  maxNumber: number;\n  shiftBy: bigint;\n};\n\nfunction calcWOpts(W: number, scalarBits: number): WOpts {\n  validateW(W, scalarBits);\n  const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero\n  const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero\n  const maxNumber = 2 ** W; // W=8 256\n  const mask = bitMask(W); // W=8 255 == mask 0b11111111\n  const shiftBy = BigInt(W); // W=8 8\n  return { windows, windowSize, mask, maxNumber, shiftBy };\n}\n\nfunction calcOffsets(n: bigint, window: number, wOpts: WOpts) {\n  const { windowSize, mask, maxNumber, shiftBy } = wOpts;\n  let wbits = Number(n & mask); // extract W bits.\n  let nextN = n >> shiftBy; // shift number by W bits.\n\n  // What actually happens here:\n  // const highestBit = Number(mask ^ (mask >> 1n));\n  // let wbits2 = wbits - 1; // skip zero\n  // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);\n\n  // split if bits > max: +224 => 256-32\n  if (wbits > windowSize) {\n    // we skip zero, which means instead of `>= size-1`, we do `> size`\n    wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.\n    nextN += _1n; // +256 (carry)\n  }\n  const offsetStart = window * windowSize;\n  const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero\n  const isZero = wbits === 0; // is current window slice a 0?\n  const isNeg = wbits < 0; // is current window slice negative?\n  const isNegF = window % 2 !== 0; // fake random statement for noise\n  const offsetF = offsetStart; // fake offset for noise\n  return { nextN, offset, isZero, isNeg, isNegF, offsetF };\n}\n\nfunction validateMSMPoints(points: any[], c: any) {\n  if (!Array.isArray(points)) throw new Error('array expected');\n  points.forEach((p, i) => {\n    if (!(p instanceof c)) throw new Error('invalid point at index ' + i);\n  });\n}\nfunction validateMSMScalars(scalars: any[], field: any) {\n  if (!Array.isArray(scalars)) throw new Error('array of scalars expected');\n  scalars.forEach((s, i) => {\n    if (!field.isValid(s)) throw new Error('invalid scalar at index ' + i);\n  });\n}\n\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes.\n// Allows to make points frozen / immutable.\nconst pointPrecomputes = new WeakMap<any, any[]>();\nconst pointWindowSizes = new WeakMap<any, number>();\n\nfunction getW(P: any): number {\n  return pointWindowSizes.get(P) || 1;\n}\n\nexport type IWNAF<T extends Group<T>> = {\n  constTimeNegate: <T extends Group<T>>(condition: boolean, item: T) => T;\n  hasPrecomputes(elm: T): boolean;\n  unsafeLadder(elm: T, n: bigint, p?: T): T;\n  precomputeWindow(elm: T, W: number): Group<T>[];\n  getPrecomputes(W: number, P: T, transform: Mapper<T>): T[];\n  wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T };\n  wNAFUnsafe(W: number, precomputes: T[], n: bigint, acc?: T): T;\n  wNAFCached(P: T, n: bigint, transform: Mapper<T>): { p: T; f: T };\n  wNAFCachedUnsafe(P: T, n: bigint, transform: Mapper<T>, prev?: T): T;\n  setWindowSize(P: T, W: number): void;\n};\n\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number): IWNAF<T> {\n  return {\n    constTimeNegate,\n\n    hasPrecomputes(elm: T) {\n      return getW(elm) !== 1;\n    },\n\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint, p = c.ZERO) {\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @param elm Point instance\n     * @param W window size\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = calcWOpts(W, bits);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // i=1, bc we skip 0\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // Smaller version:\n      // https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\n      // TODO: check the scalar is less than group order?\n      // wNAF behavior is undefined otherwise. But have to carefully remove\n      // other checks before wNAF. ORDER == bits here.\n      // Accumulators\n      let p = c.ZERO;\n      let f = c.BASE;\n      // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n      // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n      // there is negate now: it is possible that negated element from low value\n      // would be the same as high element, which will create carry into next window.\n      // It's not obvious how this can fail, but still worth investigating later.\n      const wo = calcWOpts(W, bits);\n      for (let window = 0; window < wo.windows; window++) {\n        // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise\n        const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window, wo);\n        n = nextN;\n        if (isZero) {\n          // bits are 0: add garbage to fake point\n          // Important part for const-time getPublicKey: add random \"noise\" point to f.\n          f = f.add(constTimeNegate(isNegF, precomputes[offsetF]));\n        } else {\n          // bits are 1: add to result point\n          p = p.add(constTimeNegate(isNeg, precomputes[offset]));\n        }\n      }\n      // Return both real and fake points: JIT won't eliminate f.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    /**\n     * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @param acc accumulator point to add result of multiplication\n     * @returns point\n     */\n    wNAFUnsafe(W: number, precomputes: T[], n: bigint, acc: T = c.ZERO): T {\n      const wo = calcWOpts(W, bits);\n      for (let window = 0; window < wo.windows; window++) {\n        if (n === _0n) break; // Early-exit, skip 0 value\n        const { nextN, offset, isZero, isNeg } = calcOffsets(n, window, wo);\n        n = nextN;\n        if (isZero) {\n          // Window bits are 0: skip processing.\n          // Move to next window.\n          continue;\n        } else {\n          const item = precomputes[offset];\n          acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM\n        }\n      }\n      return acc;\n    },\n\n    getPrecomputes(W: number, P: T, transform: Mapper<T>): T[] {\n      // Calculate precomputes on a first run, reuse them after\n      let comp = pointPrecomputes.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) pointPrecomputes.set(P, transform(comp));\n      }\n      return comp;\n    },\n\n    wNAFCached(P: T, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      const W = getW(P);\n      return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n    },\n\n    wNAFCachedUnsafe(P: T, n: bigint, transform: Mapper<T>, prev?: T): T {\n      const W = getW(P);\n      if (W === 1) return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n      return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n    },\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n\n    setWindowSize(P: T, W: number) {\n      validateW(W, bits);\n      pointWindowSizes.set(P, W);\n      pointPrecomputes.delete(P);\n    },\n  };\n}\n\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster than precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  fieldN: IField<bigint>,\n  points: T[],\n  scalars: bigint[]\n): T {\n  // If we split scalars by some window (let's say 8 bits), every chunk will only\n  // take 256 buckets even if there are 4096 scalars, also re-uses double.\n  // TODO:\n  // - https://eprint.iacr.org/2024/750.pdf\n  // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n  // 0 is accepted in scalars\n  validateMSMPoints(points, c);\n  validateMSMScalars(scalars, fieldN);\n  const plength = points.length;\n  const slength = scalars.length;\n  if (plength !== slength) throw new Error('arrays of points and scalars must have equal length');\n  // if (plength === 0) throw new Error('array must be of length >= 2');\n  const zero = c.ZERO;\n  const wbits = bitLen(BigInt(plength));\n  let windowSize = 1; // bits\n  if (wbits > 12) windowSize = wbits - 3;\n  else if (wbits > 4) windowSize = wbits - 2;\n  else if (wbits > 0) windowSize = 2;\n  const MASK = bitMask(windowSize);\n  const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array\n  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n  let sum = zero;\n  for (let i = lastBits; i >= 0; i -= windowSize) {\n    buckets.fill(zero);\n    for (let j = 0; j < slength; j++) {\n      const scalar = scalars[j];\n      const wbits = Number((scalar >> BigInt(i)) & MASK);\n      buckets[wbits] = buckets[wbits].add(points[j]);\n    }\n    let resI = zero; // not using this will do small speed-up, but will lose ct\n    // Skip first bucket, because it is zero\n    for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n      sumI = sumI.add(buckets[j]);\n      resI = resI.add(sumI);\n    }\n    sum = sum.add(resI);\n    if (i !== 0) for (let j = 0; j < windowSize; j++) sum = sum.double();\n  }\n  return sum as T;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  fieldN: IField<bigint>,\n  points: T[],\n  windowSize: number\n): (scalars: bigint[]) => T {\n  /**\n   * Performance Analysis of Window-based Precomputation\n   *\n   * Base Case (256-bit scalar, 8-bit window):\n   * - Standard precomputation requires:\n   *   - 31 additions per scalar × 256 scalars = 7,936 ops\n   *   - Plus 255 summary additions = 8,191 total ops\n   *   Note: Summary additions can be optimized via accumulator\n   *\n   * Chunked Precomputation Analysis:\n   * - Using 32 chunks requires:\n   *   - 255 additions per chunk\n   *   - 256 doublings\n   *   - Total: (255 × 32) + 256 = 8,416 ops\n   *\n   * Memory Usage Comparison:\n   * Window Size | Standard Points | Chunked Points\n   * ------------|-----------------|---------------\n   *     4-bit   |     520         |      15\n   *     8-bit   |    4,224        |     255\n   *    10-bit   |   13,824        |   1,023\n   *    16-bit   |  557,056        |  65,535\n   *\n   * Key Advantages:\n   * 1. Enables larger window sizes due to reduced memory overhead\n   * 2. More efficient for smaller scalar counts:\n   *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n   *    - ~2x faster than standard 8,191 ops\n   *\n   * Limitations:\n   * - Not suitable for plain precomputes (requires 256 constant doublings)\n   * - Performance degrades with larger scalar counts:\n   *   - Optimal for ~256 scalars\n   *   - Less efficient for 4096+ scalars (Pippenger preferred)\n   */\n  validateW(windowSize, fieldN.BITS);\n  validateMSMPoints(points, c);\n  const zero = c.ZERO;\n  const tableSize = 2 ** windowSize - 1; // table size (without zero)\n  const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n  const MASK = bitMask(windowSize);\n  const tables = points.map((p: T) => {\n    const res = [];\n    for (let i = 0, acc = p; i < tableSize; i++) {\n      res.push(acc);\n      acc = acc.add(p);\n    }\n    return res;\n  });\n  return (scalars: bigint[]): T => {\n    validateMSMScalars(scalars, fieldN);\n    if (scalars.length > points.length)\n      throw new Error('array of scalars must be smaller than array of points');\n    let res = zero;\n    for (let i = 0; i < chunks; i++) {\n      // No need to double if accumulator is still zero.\n      if (res !== zero) for (let j = 0; j < windowSize; j++) res = res.double();\n      const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n      for (let j = 0; j < scalars.length; j++) {\n        const n = scalars[j];\n        const curr = Number((n >> shiftBy) & MASK);\n        if (!curr) continue; // skip zero scalars chunks\n        res = res.add(tables[j][curr - 1]);\n      }\n    }\n    return res;\n  };\n}\n\n/**\n * Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n * Though generator can be different (Fp2 / Fp6 for BLS).\n */\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(\n  curve: BasicCurve<FP> & T\n): Readonly<\n  {\n    readonly nBitLength: number;\n    readonly nByteLength: number;\n  } & BasicCurve<FP> &\n    T & {\n      p: bigint;\n    }\n> {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n", "/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Parameters\n *\n * To initialize a weierstrass curve, one needs to pass following params:\n *\n * * a: formula param\n * * b: formula param\n * * Fp: finite field of prime characteristic P; may be complex (Fp2). Arithmetics is done in field\n * * n: order of prime subgroup a.k.a total amount of valid curve points\n * * Gx: Base point (x, y) aka generator point. Gx = x coordinate\n * * Gy: ...y coordinate\n * * h: cofactor, usually 1. h*n = curve group order (n is only subgroup order)\n * * lowS: whether to enable (default) or disable \"low-s\" non-malleable signatures\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// prettier-ignore\nimport {\n  pippenger, validateBasic, wNAF,\n  type AffinePoint, type BasicCurve, type Group, type GroupConstructor\n} from './curve.ts';\n// prettier-ignore\nimport {\n  Field,\n  FpInvertBatch,\n  getMinHashLength, invert, mapHashToField, mod, validateField,\n  type IField\n} from './modular.ts';\n// prettier-ignore\nimport {\n  aInRange, abool,\n  bitMask,\n  bytesToHex, bytesToNumberBE, concatBytes, createHmacDrbg, ensureBytes, hexToBytes,\n  inRange, isBytes, memoized, numberToBytesBE, numberToHexUnpadded, validateObject,\n  type CHash, type Hex, type PrivKey\n} from './utils.ts';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\n/**\n * When Weierstrass curve has `a=0`, it becomes Koblitz curve.\n * Koblitz curves allow using **efficiently-computable GLV endomorphism ψ**.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n *\n * Endomorphism consists of beta, lambda and splitScalar:\n *\n * 1. GLV endomorphism ψ transforms a point: `P = (x, y) ↦ ψ(P) = (β·x mod p, y)`\n * 2. GLV scalar decomposition transforms a scalar: `k ≡ k₁ + k₂·λ (mod n)`\n * 3. Then these are combined: `k·P = k₁·P + k₂·ψ(P)`\n * 4. Two 128-bit point-by-scalar multiplications + one point addition is faster than\n *    one 256-bit multiplication.\n *\n * where\n * * beta: β ∈ Fₚ with β³ = 1, β ≠ 1\n * * lambda: λ ∈ Fₙ with λ³ = 1, λ ≠ 1\n * * splitScalar decomposes k ↦ k₁, k₂, by using reduced basis vectors.\n *   Gauss lattice reduction calculates them from initial basis vectors `(n, 0), (-λ, 0)`\n *\n * Check out `test/misc/endomorphism.js` and\n * [gist](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n */\nexport type EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts;\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\nexport type Entropy = Hex | boolean;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean; format?: 'compact' | 'der' | undefined };\n\nfunction validateSigVerOpts(opts: SignOpts | VerOpts) {\n  if (opts.lowS !== undefined) abool('lowS', opts.lowS);\n  if (opts.prehash !== undefined) abool('prehash', opts.prehash);\n}\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  toAffine(iz?: T): AffinePoint<T>;\n  toHex(isCompressed?: boolean): string;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n  msm(points: ProjPointType<T>[], scalars: bigint[]): ProjPointType<T>;\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nexport type CurvePointsTypeWithLength<T> = Readonly<\n  CurvePointsType<T> & { nByteLength: number; nBitLength: number }\n>;\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>): CurvePointsTypeWithLength<T> {\n  const opts = validateBasic(curve);\n  validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowInfinityPoint: 'boolean',\n      allowedPrivateKeyLengths: 'array',\n      clearCofactor: 'function',\n      fromBytes: 'function',\n      isTorsionFree: 'function',\n      toBytes: 'function',\n      wrapPrivateKey: 'boolean',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('invalid endo: CURVE.a must be 0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('invalid endo: expected \"beta\": bigint and \"splitScalar\": function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  CURVE: ReturnType<typeof validatePointOpts<T>>;\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\nexport class DERErr extends Error {\n  constructor(m = '') {\n    super(m);\n  }\n}\nexport type IDER = {\n  // asn.1 DER encoding utils\n  Err: typeof DERErr;\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string) => string;\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array };\n  };\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string;\n    decode(data: Uint8Array): bigint;\n  };\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint };\n  hexFromSig(sig: { r: bigint; s: bigint }): string;\n};\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER: IDER = {\n  // asn.1 DER encoding utils\n  Err: DERErr,\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string): string => {\n      const { Err: E } = DER;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\n      const dataLen = data.length / 2;\n      const len = numberToHexUnpadded(dataLen);\n      if ((len.length / 2) & 0b1000_0000) throw new E('tlv.encode: long form length too big');\n      // length of length with long form flag\n      const lenLen = dataLen > 127 ? numberToHexUnpadded((len.length / 2) | 0b1000_0000) : '';\n      const t = numberToHexUnpadded(tag);\n      return t + lenLen + len + data;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array } {\n      const { Err: E } = DER;\n      let pos = 0;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n      const first = data[pos++];\n      const isLong = !!(first & 0b1000_0000); // First bit of first length byte is flag for short/long form\n      let length = 0;\n      if (!isLong) length = first;\n      else {\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n        const lenLen = first & 0b0111_1111;\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n        const lengthBytes = data.subarray(pos, pos + lenLen);\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n        for (const b of lengthBytes) length = (length << 8) | b;\n        pos += lenLen;\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n      }\n      const v = data.subarray(pos, pos + length);\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\n      return { v, l: data.subarray(pos + length) };\n    },\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string {\n      const { Err: E } = DER;\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\n      let hex = numberToHexUnpadded(num);\n      // Pad with zero byte if negative flag is present\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n      if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\n      return hex;\n    },\n    decode(data: Uint8Array): bigint {\n      const { Err: E } = DER;\n      if (data[0] & 0b1000_0000) throw new E('invalid signature integer: negative');\n      if (data[0] === 0x00 && !(data[1] & 0b1000_0000))\n        throw new E('invalid signature integer: unnecessary leading zero');\n      return bytesToNumberBE(data);\n    },\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E, _int: int, _tlv: tlv } = DER;\n    const data = ensureBytes('signature', hex);\n    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n    if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n    const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n    if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    return { r: int.decode(rBytes), s: int.decode(sBytes) };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    const { _tlv: tlv, _int: int } = DER;\n    const rs = tlv.encode(0x02, int.encode(sig.r));\n    const ss = tlv.encode(0x02, int.encode(sig.s));\n    const seq = rs + ss;\n    return tlv.encode(0x30, seq);\n  },\n};\n\nfunction numToSizedHex(num: bigint, size: number): string {\n  return bytesToHex(numberToBytesBE(num, size));\n}\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>): CurvePointsRes<T> {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n  const Fn = Field(CURVE.n, CURVE.nBitLength);\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x² * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x³ + a * x + b\n  }\n\n  function isValidXY(x: T, y: T): boolean {\n    const left = Fp.sqr(y); // y²\n    const right = weierstrassEquation(x); // x³ + ax + b\n    return Fp.eql(left, right);\n  }\n\n  // Validate whether the passed curve params are valid.\n  // Test 1: equation y² = x³ + ax + b should work for generator point.\n  if (!isValidXY(CURVE.Gx, CURVE.Gy)) throw new Error('bad curve params: generator point');\n\n  // Test 2: discriminant Δ part should be non-zero: 4a³ + 27b² != 0.\n  // Guarantees curve is genus-1, smooth (non-singular).\n  const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n  const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n  if (Fp.is0(Fp.add(_4a3, _27b2))) throw new Error('bad curve params: a or b');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return inRange(num, _1n, CURVE.n);\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (isBytes(key)) key = bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length))\n        throw new Error('invalid private key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(\n        'invalid private key, expected hex or ' + nByteLength + ' bytes, got ' + typeof key\n      );\n    }\n    if (wrapPrivateKey) num = mod(num, N); // disabled by default, enabled for BLS\n    aInRange('private key', num, _1n, N); // num in range [1..N-1]\n    return num;\n  }\n\n  function aprjpoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\n\n  // Converts Projective point to affine (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  // (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n  const toAffineMemo = memoized((p: Point, iz?: T): AffinePoint<T> => {\n    const { px: x, py: y, pz: z } = p;\n    // Fast-path for normalized points\n    if (Fp.eql(z, Fp.ONE)) return { x, y };\n    const is0 = p.is0();\n    // If invZ was 0, we return zero point. However we still want to execute\n    // all operations, so we replace invZ with a random number, 1.\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n    const ax = Fp.mul(x, iz);\n    const ay = Fp.mul(y, iz);\n    const zz = Fp.mul(z, iz);\n    if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n    return { x: ax, y: ay };\n  });\n  // NOTE: on exception this will crash 'cached' and no value will be set.\n  // Otherwise true will be return\n  const assertValidMemo = memoized((p: Point) => {\n    if (p.is0()) {\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\n      // In BLS, ZERO can be serialized, so we allow it.\n      // (0, 0, 0) is invalid representation of ZERO.\n      if (CURVE.allowInfinityPoint && !Fp.is0(p.py)) return;\n      throw new Error('bad point: ZERO');\n    }\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n    const { x, y } = p.toAffine();\n    // Check if x, y are valid field elements\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n    if (!isValidXY(x, y)) throw new Error('bad point: equation left != right');\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    return true;\n  });\n\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    // base / generator point\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    // zero / infinity / identity point\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\n    readonly px: T;\n    readonly py: T;\n    readonly pz: T;\n\n    constructor(px: T, py: T, pz: T) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py) || Fp.is0(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n      this.px = px;\n      this.py = py;\n      this.pz = pz;\n      Object.freeze(this);\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = FpInvertBatch(\n        Fp,\n        points.map((p) => p.pz)\n      );\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // Multiscalar Multiplication\n    static msm(points: Point[], scalars: bigint[]): Point {\n      return pippenger(Point, Fn, points, scalars);\n    }\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      wnaf.setWindowSize(this, windowSize);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      aprjpoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      aprjpoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, n, Point.normalizeZ);\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(sc: bigint): Point {\n      const { endo, n: N } = CURVE;\n      aInRange('scalar', sc, _0n, N);\n      const I = Point.ZERO;\n      if (sc === _0n) return I;\n      if (this.is0() || sc === _1n) return this;\n\n      // Case a: no endomorphism. Case b: has precomputes.\n      if (!endo || wnaf.hasPrecomputes(this))\n        return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);\n\n      // Case c: endomorphism\n      /** See docs for {@link EndomorphismOpts} */\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      const { endo, n: N } = CURVE;\n      aInRange('scalar', scalar, _1n, N);\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      /** See docs for {@link EndomorphismOpts} */\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(scalar);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      return toAffineMemo(this, iz);\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      abool('isCompressed', isCompressed);\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      abool('isCompressed', isCompressed);\n      return bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const { endo, nBitLength } = CURVE;\n  const wnaf = wNAF(Point, endo ? Math.ceil(nBitLength / 2) : nBitLength);\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(\n  curve: CurveType\n): Readonly<CurveType & { nByteLength: number; nBitLength: number }> {\n  const opts = validateBasic(curve);\n  validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER, nByteLength, nBitLength } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function modN(a: bigint) {\n    return mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = concatBytes;\n      abool('isCompressed', isCompressed);\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = bytesToNumberBE(tail);\n        if (!inRange(x, _1n, Fp.ORDER)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y: bigint;\n        try {\n          y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        } catch (sqrtError) {\n          const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n          throw new Error('Point is not on curve' + suffix);\n        }\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        const cl = compressedLen;\n        const ul = uncompressedLen;\n        throw new Error(\n          'invalid Point, expected length of ' + cl + ', or uncompressed ' + ul + ', got ' + len\n        );\n      }\n    },\n  });\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    readonly r: bigint;\n    readonly s: bigint;\n    readonly recovery?: number;\n    constructor(r: bigint, s: bigint, recovery?: number) {\n      aInRange('r', r, _1n, CURVE_ORDER); // r in [1..N]\n      aInRange('s', s, _1n, CURVE_ORDER); // s in [1..N]\n      this.r = r;\n      this.s = s;\n      if (recovery != null) this.recovery = recovery;\n      Object.freeze(this);\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    /**\n     * @todo remove\n     * @deprecated\n     */\n    assertValidity(): void {}\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToSizedHex(radj, Fp.BYTES));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig(this);\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      const l = nByteLength;\n      return numToSizedHex(this.r, l) + numToSizedHex(this.s, l);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = getMinHashLength(CURVE.n);\n      return mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean | undefined {\n    if (typeof item === 'bigint') return false;\n    if (item instanceof Point) return true;\n    const arr = ensureBytes('key', item);\n    const len = arr.length;\n    const fpl = Fp.BYTES;\n    const compLen = fpl + 1; // e.g. 33 for 32\n    const uncompLen = 2 * fpl + 1; // e.g. 65 for 32\n    if (CURVE.allowedPrivateKeyLengths || nByteLength === compLen) {\n      return undefined;\n    } else {\n      return len === compLen || len === uncompLen;\n    }\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA) === true) throw new Error('first arg must be private key');\n    if (isProbPub(publicB) === false) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // Our custom check \"just in case\", for protection against DoS\n      if (bytes.length > 8192) throw new Error('input is too large');\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = bitMask(nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    aInRange('num < 2^' + nBitLength, num, _0n, ORDER_MASK);\n    // works with order, can have different size than numToField!\n    return numberToBytesBE(num, nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n  // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    validateSigVerOpts(opts);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    const { lowS, prehash, format } = opts;\n\n    // Verify opts, deduce signature format\n    validateSigVerOpts(opts);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    if (format !== undefined && format !== 'compact' && format !== 'der')\n      throw new Error('format must be compact or der');\n    const isHex = typeof sg === 'string' || isBytes(sg);\n    const isObj =\n      !isHex &&\n      !format &&\n      typeof sg === 'object' &&\n      sg !== null &&\n      typeof sg.r === 'bigint' &&\n      typeof sg.s === 'bigint';\n    if (!isHex && !isObj)\n      throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (isObj) _sig = new Signature(sg.r, sg.s);\n      if (isHex) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          if (format !== 'compact') _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n        }\n        if (!_sig && format !== 'der') _sig = Signature.fromCompact(sg);\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      return false;\n    }\n    if (!_sig) return false;\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(\n  Fp: IField<T>,\n  Z: T\n): (u: T, v: T) => { isValid: boolean; value: T } {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n): (u: T) => { x: T; y: T } {\n  validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    const tv4_inv = FpInvertBatch(Fp, [tv4], true)[0];\n    x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n", "/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport type { CHash } from './abstract/utils.ts';\nimport { type CurveFn, type CurveType, weierstrass } from './abstract/weierstrass.ts';\n\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash: CHash): {\n  hash: CHash;\n  hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => Uint8Array;\n  randomBytes: typeof randomBytes;\n} {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n/** Same API as @noble/hashes, with ability to create curve with custom hash */\nexport type CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport type CurveFnWithCreate = CurveFn & { create: (hash: CHash) => CurveFn };\n\nexport function createCurve(curveDef: CurveDef, defHash: CHash): CurveFnWithCreate {\n  const create = (hash: CHash): CurveFn => weierstrass({ ...curveDef, ...getHash(hash) });\n  return { ...create(defHash), create };\n}\n", "/**\n * hash-to-curve from RFC 9380.\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * https://www.rfc-editor.org/rfc/rfc9380\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { AffinePoint, Group, GroupConstructor } from './curve.ts';\nimport { FpInvertBatch, type IField, mod } from './modular.ts';\nimport type { CHash } from './utils.ts';\nimport { abytes, bytesToNumberBE, concatBytes, utf8ToBytes, validateObject } from './utils.ts';\n\nexport type UnicodeOrBytes = string | Uint8Array;\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\nexport type Opts = {\n  DST: UnicodeOrBytes;\n  p: bigint;\n  m: number;\n  k: number;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  anum(value);\n  anum(length);\n  if (value < 0 || value >= 1 << (8 * length)) throw new Error('invalid I2OSP input: ' + value);\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction anum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\n/**\n * Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits.\n * [RFC 9380 5.3.1](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1).\n */\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (lenInBytes > 65535 || ell > 255) throw new Error('expand_message_xmd: invalid lenInBytes');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\n/**\n * Produces a uniformly random byte string using an extendable-output function (XOF) H.\n * 1. The collision resistance of H MUST be at least k bits.\n * 2. H MUST be an XOF that has been proved indifferentiable from\n *    a random oracle under a reasonable cryptographic assumption.\n * [RFC 9380 5.3.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2).\n */\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * [RFC 9380 5.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.2).\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\n  validateObject(options, {\n    DST: 'stringOrUint8Array',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash',\n  });\n  const { p, k, m, hash, expand, DST: _DST } = options;\n  abytes(msg);\n  anum(count);\n  const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport type XY<T> = (x: T, y: T) => { x: T; y: T };\nexport type XYRatio<T> = [T[], T[], T[], T[]]; // xn/xd, yn/yd\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: XYRatio<T>): XY<T> {\n  // Make same order as in spec\n  const coeff = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xn, xd, yn, yd] = coeff.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    // 6.6.3\n    // Exceptional cases of iso_map are inputs that cause the denominator of\n    // either rational function to evaluate to zero; such cases MUST return\n    // the identity point on E.\n    const [xd_inv, yd_inv] = FpInvertBatch(field, [xd, yd], true);\n    x = field.mul(xn, xd_inv); // xNum / xDen\n    y = field.mul(y, field.mul(yn, yd_inv)); // y * (yNum / yDev)\n    return { x, y };\n  };\n}\n\n/** Point interface, which curves must implement to work correctly with the module. */\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\nexport type HTFMethod<T> = (msg: Uint8Array, options?: htfBasicOpts) => H2CPoint<T>;\nexport type MapMethod<T> = (scalars: bigint[]) => H2CPoint<T>;\nexport type Hasher<T> = {\n  hashToCurve: HTFMethod<T>;\n  encodeToCurve: HTFMethod<T>;\n  mapToCurve: MapMethod<T>;\n  defaults: Opts & { encodeDST?: UnicodeOrBytes };\n};\n\n/** Creates hash-to-curve methods from EC Point and mapToCurve function. */\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  defaults: Opts & { encodeDST?: UnicodeOrBytes }\n): Hasher<T> {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  function map(num: bigint[]) {\n    return Point.fromAffine(mapToCurve(num));\n  }\n  function clear(initial: H2CPoint<T>) {\n    const P = initial.clearCofactor();\n    if (P.equals(Point.ZERO)) return Point.ZERO; // zero will throw in assert\n    P.assertValidity();\n    return P;\n  }\n\n  return {\n    defaults,\n\n    // Encodes byte string to elliptic curve.\n    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts): H2CPoint<T> {\n      const u = hash_to_field(msg, 2, { ...defaults, DST: defaults.DST, ...options } as Opts);\n      const u0 = map(u[0]);\n      const u1 = map(u[1]);\n      return clear(u0.add(u1));\n    },\n\n    // Encodes byte string to elliptic curve.\n    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts): H2CPoint<T> {\n      const u = hash_to_field(msg, 1, { ...defaults, DST: defaults.encodeDST, ...options } as Opts);\n      return clear(map(u[0]));\n    },\n\n    // Same as encodeToCurve, but without hash\n    mapToCurve(scalars: bigint[]): H2CPoint<T> {\n      if (!Array.isArray(scalars)) throw new Error('expected array of bigints');\n      for (const i of scalars)\n        if (typeof i !== 'bigint') throw new Error('expected array of bigints');\n      return clear(map(scalars));\n    },\n  };\n}\n", "/**\n * NIST secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Seems to be rigid (not backdoored)\n * [as per discussion](https://bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975).\n *\n * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n * [See explanation](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { createCurve, type CurveFnWithCreate } from './_shortw_utils.ts';\nimport { createHasher, type Hasher, type HTFMethod, isogenyMap } from './abstract/hash-to-curve.ts';\nimport { Field, mod, pow2 } from './abstract/modular.ts';\nimport type { Hex, PrivKey } from './abstract/utils.ts';\nimport {\n  aInRange,\n  bytesToNumberBE,\n  concatBytes,\n  ensureBytes,\n  inRange,\n  numberToBytesBE,\n} from './abstract/utils.ts';\nimport { mapToCurveSimpleSWU, type ProjPointType as PointType } from './abstract/weierstrass.ts';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fpk1 = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\n/**\n * secp256k1 curve, ECDSA and ECDH methods.\n *\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n *\n * @example\n * ```js\n * import { secp256k1 } from '@noble/curves/secp256k1';\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n * ```\n */\nexport const secp256k1: CurveFnWithCreate = createCurve(\n  {\n    a: _0n,\n    b: BigInt(7),\n    Fp: Fpk1,\n    n: secp256k1N,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1),\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    endo: {\n      // Endomorphism, see above\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = /* @__PURE__ */ (() => secp256k1.ProjectivePoint)();\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  aInRange('x', x, _1n, secp256k1P); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!inRange(r, _1n, secp256k1P)) return false;\n    const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!inRange(s, _1n, secp256k1N)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport type SecpSchnorr = {\n  getPublicKey: typeof schnorrGetPublicKey;\n  sign: typeof schnorrSign;\n  verify: typeof schnorrVerify;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    lift_x: typeof lift_x;\n    pointToBytes: (point: PointType<bigint>) => Uint8Array;\n    numberToBytesBE: typeof numberToBytesBE;\n    bytesToNumberBE: typeof bytesToNumberBE;\n    taggedHash: typeof taggedHash;\n    mod: typeof mod;\n  };\n};\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * ```js\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n * ```\n */\nexport const schnorr: SecpSchnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fpk1,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n  }))();\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\nexport const secp256k1_hasher: Hasher<bigint> = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fpk1.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    } as const\n  ))();\n\nexport const hashToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() =>\n  secp256k1_hasher.hashToCurve)();\n\nexport const encodeToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() =>\n  secp256k1_hasher.encodeToCurve)();\n", "import * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport * as internal from './internal/base58.js'\n\n/**\n * Encodes a {@link ox#Bytes.Bytes} to a Base58-encoded string.\n *\n * @example\n * ```ts twoslash\n * import { Base58, Bytes } from 'ox'\n *\n * const value = Base58.fromBytes(Bytes.fromString('Hello World!'))\n * // @log: '2NEpo7TZRRrLZSi2U'\n * ```\n *\n * @param value - The byte array to encode.\n * @returns The Base58 encoded string.\n */\nexport function fromBytes(value: Bytes.Bytes) {\n  return internal.from(value)\n}\n\nexport declare namespace fromBytes {\n  type ErrorType = internal.from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Encodes a {@link ox#Hex.Hex} to a Base58-encoded string.\n *\n * @example\n * ```ts twoslash\n * import { Base58, Hex } from 'ox'\n *\n * const value = Base58.fromHex(Hex.fromString('Hello World!'))\n * // @log: '2NEpo7TZRRrLZSi2U'\n * ```\n *\n * @param value - The byte array to encode.\n * @returns The Base58 encoded string.\n */\nexport function fromHex(value: Hex.Hex) {\n  return internal.from(value)\n}\n\nexport declare namespace fromHex {\n  type ErrorType = internal.from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Encodes a string to a Base58-encoded string.\n *\n * @example\n * ```ts twoslash\n * import { Base58 } from 'ox'\n *\n * const value = Base58.fromString('Hello World!')\n * // @log: '2NEpo7TZRRrLZSi2U'\n * ```\n *\n * @param value - The string to encode.\n * @returns The Base58 encoded string.\n */\nexport function fromString(value: string) {\n  return internal.from(Bytes.fromString(value))\n}\n\nexport declare namespace fromString {\n  type ErrorType = internal.from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Decodes a Base58-encoded string to a {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { Base58 } from 'ox'\n *\n * const value = Base58.toBytes('2NEpo7TZRRrLZSi2U')\n * // @log: Uint8Array [ 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33 ]\n * ```\n *\n * @param value - The Base58 encoded string.\n * @returns The decoded byte array.\n */\nexport function toBytes(value: string): Bytes.Bytes {\n  return Bytes.fromHex(toHex(value))\n}\n\nexport declare namespace toBytes {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Decodes a Base58-encoded string to {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { Base58 } from 'ox'\n *\n * const value = Base58.toHex('2NEpo7TZRRrLZSi2U')\n * // @log: '0x48656c6c6f20576f726c6421'\n * ```\n *\n * @param value - The Base58 encoded string.\n * @returns The decoded hex string.\n */\nexport function toHex(value: string): Hex.Hex {\n  let integer = BigInt(0)\n  let pad = 0\n  let checkPad = true\n\n  for (let i = 0; i < value.length; i++) {\n    const char = value[i]!\n\n    // check for leading 1s\n    if (checkPad && char === '1') pad++\n    else checkPad = false\n\n    // check for invalid characters\n    if (typeof internal.alphabetToInteger[char] !== 'bigint')\n      throw new Error('invalid base58 character: ' + char)\n\n    integer = integer * 58n\n    integer = integer + internal.alphabetToInteger[char]!\n  }\n\n  if (!pad) return `0x${integer.toString(16)}` as Hex.Hex\n  return `0x${'0'.repeat(pad * 2)}${integer.toString(16)}` as Hex.Hex\n}\n\nexport declare namespace toHex {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Decodes a Base58-encoded string to a string.\n *\n * @example\n * ```ts twoslash\n * import { Base58 } from 'ox'\n *\n * const value = Base58.toString('2NEpo7TZRRrLZSi2U')\n * // @log: 'Hello World!'\n * ```\n *\n * @param value - The Base58 encoded string.\n * @returns The decoded string.\n */\nexport function toString(value: string): string {\n  return Hex.toString(toHex(value))\n}\n\nexport declare namespace toString {\n  type ErrorType = Errors.GlobalErrorType\n}\n", "import * as Bytes from '../Bytes.js'\nimport type * as Errors from '../Errors.js'\nimport * as Hex from '../Hex.js'\n\n/** @internal */\nexport const integerToAlphabet =\n  '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\n/** @internal */\nexport const alphabetToInteger = /* __PURE__ */ Object.freeze<\n  Record<string, bigint>\n>({\n  1: 0n,\n  2: 1n,\n  3: 2n,\n  4: 3n,\n  5: 4n,\n  6: 5n,\n  7: 6n,\n  8: 7n,\n  9: 8n,\n  A: 9n,\n  B: 10n,\n  C: 11n,\n  D: 12n,\n  E: 13n,\n  F: 14n,\n  G: 15n,\n  H: 16n,\n  J: 17n,\n  K: 18n,\n  L: 19n,\n  M: 20n,\n  N: 21n,\n  P: 22n,\n  Q: 23n,\n  R: 24n,\n  S: 25n,\n  T: 26n,\n  U: 27n,\n  V: 28n,\n  W: 29n,\n  X: 30n,\n  Y: 31n,\n  Z: 32n,\n  a: 33n,\n  b: 34n,\n  c: 35n,\n  d: 36n,\n  e: 37n,\n  f: 38n,\n  g: 39n,\n  h: 40n,\n  i: 41n,\n  j: 42n,\n  k: 43n,\n  m: 44n,\n  n: 45n,\n  o: 46n,\n  p: 47n,\n  q: 48n,\n  r: 49n,\n  s: 50n,\n  t: 51n,\n  u: 52n,\n  v: 53n,\n  w: 54n,\n  x: 55n,\n  y: 56n,\n  z: 57n,\n})\n\n/** @internal */\nexport function from(value: Hex.Hex | Bytes.Bytes) {\n  let bytes = Bytes.from(value)\n\n  let integer = (() => {\n    let hex = value\n    if (value instanceof Uint8Array) hex = Hex.fromBytes(bytes)\n    return BigInt(hex as string)\n  })()\n\n  let result = ''\n  while (integer > 0n) {\n    const remainder = Number(integer % 58n)\n    integer = integer / 58n\n    result = integerToAlphabet[remainder] + result\n  }\n\n  while (bytes.length > 1 && bytes[0] === 0) {\n    result = '1' + result\n    bytes = bytes.slice(1)\n  }\n\n  return result\n}\n\n/** @internal */\nexport declare namespace from {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/** @internal */\n", "import * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\n\nconst encoder = /*#__PURE__*/ new TextEncoder()\nconst decoder = /*#__PURE__*/ new TextDecoder()\n\nconst integerToCharacter = /*#__PURE__*/ Object.fromEntries(\n  Array.from(\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  ).map((a, i) => [i, a.charCodeAt(0)]),\n)\n\nconst characterToInteger = /*#__PURE__*/ {\n  ...Object.fromEntries(\n    Array.from(\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n    ).map((a, i) => [a.charCodeAt(0), i]),\n  ),\n  ['='.charCodeAt(0)]: 0,\n  ['-'.charCodeAt(0)]: 62,\n  ['_'.charCodeAt(0)]: 63,\n} as Record<number, number>\n\n/**\n * Encodes a {@link ox#Bytes.Bytes} to a Base64-encoded string (with optional padding and/or URL-safe characters).\n *\n * @example\n * ```ts twoslash\n * import { Base64, Bytes } from 'ox'\n *\n * const value = Base64.fromBytes(Bytes.fromString('hello world'))\n * // @log: 'aGVsbG8gd29ybGQ='\n * ```\n *\n * @example\n * ### No Padding\n *\n * Turn off [padding of encoded data](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) with the `pad` option:\n *\n * ```ts twoslash\n * import { Base64, Bytes } from 'ox'\n *\n * const value = Base64.fromBytes(Bytes.fromString('hello world'), { pad: false })\n * // @log: 'aGVsbG8gd29ybGQ'\n * ```\n *\n * ### URL-safe Encoding\n *\n * Turn on [URL-safe encoding](https://datatracker.ietf.org/doc/html/rfc4648#section-5) (Base64 URL) with the `url` option:\n *\n * ```ts twoslash\n * import { Base64, Bytes } from 'ox'\n *\n * const value = Base64.fromBytes(Bytes.fromString('hello wod'), { url: true })\n * // @log: 'aGVsbG8gd29_77-9ZA=='\n * ```\n *\n * @param value - The byte array to encode.\n * @param options - Encoding options.\n * @returns The Base64 encoded string.\n */\nexport function fromBytes(value: Bytes.Bytes, options: fromBytes.Options = {}) {\n  const { pad = true, url = false } = options\n\n  const encoded = new Uint8Array(Math.ceil(value.length / 3) * 4)\n\n  for (let i = 0, j = 0; j < value.length; i += 4, j += 3) {\n    const y = (value[j]! << 16) + (value[j + 1]! << 8) + (value[j + 2]! | 0)\n    encoded[i] = integerToCharacter[y >> 18]!\n    encoded[i + 1] = integerToCharacter[(y >> 12) & 0x3f]!\n    encoded[i + 2] = integerToCharacter[(y >> 6) & 0x3f]!\n    encoded[i + 3] = integerToCharacter[y & 0x3f]!\n  }\n\n  const k = value.length % 3\n  const end = Math.floor(value.length / 3) * 4 + (k && k + 1)\n  let base64 = decoder.decode(new Uint8Array(encoded.buffer, 0, end))\n  if (pad && k === 1) base64 += '=='\n  if (pad && k === 2) base64 += '='\n  if (url) base64 = base64.replaceAll('+', '-').replaceAll('/', '_')\n  return base64\n}\n\nexport declare namespace fromBytes {\n  type Options = {\n    /**\n     * Whether to [pad](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) the Base64 encoded string.\n     *\n     * @default true\n     */\n    pad?: boolean | undefined\n    /**\n     * Whether to Base64 encode with [URL safe characters](https://datatracker.ietf.org/doc/html/rfc4648#section-5).\n     *\n     * @default false\n     */\n    url?: boolean | undefined\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Encodes a {@link ox#Hex.Hex} to a Base64-encoded string (with optional padding and/or URL-safe characters).\n *\n * @example\n * ```ts twoslash\n * import { Base64, Hex } from 'ox'\n *\n * const value = Base64.fromHex(Hex.fromString('hello world'))\n * // @log: 'aGVsbG8gd29ybGQ='\n * ```\n *\n * @example\n * ### No Padding\n *\n * Turn off [padding of encoded data](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) with the `pad` option:\n *\n * ```ts twoslash\n * import { Base64, Hex } from 'ox'\n *\n * const value = Base64.fromHex(Hex.fromString('hello world'), { pad: false })\n * // @log: 'aGVsbG8gd29ybGQ'\n * ```\n *\n * ### URL-safe Encoding\n *\n * Turn on [URL-safe encoding](https://datatracker.ietf.org/doc/html/rfc4648#section-5) (Base64 URL) with the `url` option:\n *\n * ```ts twoslash\n * import { Base64, Hex } from 'ox'\n *\n * const value = Base64.fromHex(Hex.fromString('hello wod'), { url: true })\n * // @log: 'aGVsbG8gd29_77-9ZA=='\n * ```\n *\n * @param value - The hex value to encode.\n * @param options - Encoding options.\n * @returns The Base64 encoded string.\n */\nexport function fromHex(value: Hex.Hex, options: fromHex.Options = {}) {\n  return fromBytes(Bytes.fromHex(value), options)\n}\n\nexport declare namespace fromHex {\n  type Options = {\n    /**\n     * Whether to [pad](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) the Base64 encoded string.\n     *\n     * @default true\n     */\n    pad?: boolean | undefined\n    /**\n     * Whether to Base64 encode with [URL safe characters](https://datatracker.ietf.org/doc/html/rfc4648#section-5).\n     *\n     * @default false\n     */\n    url?: boolean | undefined\n  }\n\n  type ErrorType = fromBytes.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Encodes a string to a Base64-encoded string (with optional padding and/or URL-safe characters).\n *\n * @example\n * ```ts twoslash\n * import { Base64 } from 'ox'\n *\n * const value = Base64.fromString('hello world')\n * // @log: 'aGVsbG8gd29ybGQ='\n * ```\n *\n * @example\n * ### No Padding\n *\n * Turn off [padding of encoded data](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) with the `pad` option:\n *\n * ```ts twoslash\n * import { Base64 } from 'ox'\n *\n * const value = Base64.fromString('hello world', { pad: false })\n * // @log: 'aGVsbG8gd29ybGQ'\n * ```\n *\n * ### URL-safe Encoding\n *\n * Turn on [URL-safe encoding](https://datatracker.ietf.org/doc/html/rfc4648#section-5) (Base64 URL) with the `url` option:\n *\n * ```ts twoslash\n * import { Base64 } from 'ox'\n *\n * const value = Base64.fromString('hello wod', { url: true })\n * // @log: 'aGVsbG8gd29_77-9ZA=='\n * ```\n *\n * @param value - The string to encode.\n * @param options - Encoding options.\n * @returns The Base64 encoded string.\n */\nexport function fromString(value: string, options: fromString.Options = {}) {\n  return fromBytes(Bytes.fromString(value), options)\n}\n\nexport declare namespace fromString {\n  type Options = {\n    /**\n     * Whether to [pad](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) the Base64 encoded string.\n     *\n     * @default true\n     */\n    pad?: boolean | undefined\n    /**\n     * Whether to Base64 encode with [URL safe characters](https://datatracker.ietf.org/doc/html/rfc4648#section-5).\n     *\n     * @default false\n     */\n    url?: boolean | undefined\n  }\n\n  type ErrorType = fromBytes.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Decodes a Base64-encoded string (with optional padding and/or URL-safe characters) to {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { Base64, Bytes } from 'ox'\n *\n * const value = Base64.toBytes('aGVsbG8gd29ybGQ=')\n * // @log: Uint8Array([104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100])\n * ```\n *\n * @param value - The string, hex value, or byte array to encode.\n * @returns The Base64 decoded {@link ox#Bytes.Bytes}.\n */\nexport function toBytes(value: string): Bytes.Bytes {\n  const base64 = value.replace(/=+$/, '')\n\n  const size = base64.length\n\n  const decoded = new Uint8Array(size + 3)\n  encoder.encodeInto(base64 + '===', decoded)\n\n  for (let i = 0, j = 0; i < base64.length; i += 4, j += 3) {\n    const x =\n      (characterToInteger[decoded[i]!]! << 18) +\n      (characterToInteger[decoded[i + 1]!]! << 12) +\n      (characterToInteger[decoded[i + 2]!]! << 6) +\n      characterToInteger[decoded[i + 3]!]!\n    decoded[j] = x >> 16\n    decoded[j + 1] = (x >> 8) & 0xff\n    decoded[j + 2] = x & 0xff\n  }\n\n  const decodedSize = (size >> 2) * 3 + (size % 4 && (size % 4) - 1)\n  return new Uint8Array(decoded.buffer, 0, decodedSize)\n}\n\nexport declare namespace toBytes {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Decodes a Base64-encoded string (with optional padding and/or URL-safe characters) to {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { Base64, Hex } from 'ox'\n *\n * const value = Base64.toHex('aGVsbG8gd29ybGQ=')\n * // @log: 0x68656c6c6f20776f726c64\n * ```\n *\n * @param value - The string, hex value, or byte array to encode.\n * @returns The Base64 decoded {@link ox#Hex.Hex}.\n */\nexport function toHex(value: string): Hex.Hex {\n  return Hex.fromBytes(toBytes(value))\n}\n\nexport declare namespace toHex {\n  type ErrorType = toBytes.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Decodes a Base64-encoded string (with optional padding and/or URL-safe characters) to a string.\n *\n * @example\n * ```ts twoslash\n * import { Base64 } from 'ox'\n *\n * const value = Base64.toString('aGVsbG8gd29ybGQ=')\n * // @log: 'hello world'\n * ```\n *\n * @param value - The string, hex value, or byte array to encode.\n * @returns The Base64 decoded string.\n */\nexport function toString(value: string): string {\n  return Bytes.toString(toBytes(value))\n}\n\nexport declare namespace toString {\n  type ErrorType = toBytes.ErrorType | Errors.GlobalErrorType\n}\n", "import { blake3 } from '@noble/hashes/blake3'\n\nimport * as Bytes from './Bytes.js'\nimport type { OneOf } from './internal/types.js'\n\n/** Type that defines a Binary State Tree instance. */\nexport type BinaryStateTree = {\n  root: Node\n}\n\n/** Type defining a node of the BST. */\nexport type Node = OneOf<EmptyNode | StemNode | InternalNode>\n\n/**\n * Creates a new Binary State Tree instance.\n *\n * @example\n * ```ts twoslash\n * import { BinaryStateTree } from 'ox'\n *\n * const tree = BinaryStateTree.create()\n * ```\n *\n * @returns A Binary State Tree.\n */\nexport function create(): BinaryStateTree {\n  return {\n    root: emptyNode(),\n  }\n}\n\n/**\n * Inserts a key-value pair into the Binary State Tree.\n *\n * @example\n * ```ts twoslash\n * import { BinaryStateTree, Bytes } from 'ox'\n *\n * const tree = BinaryStateTree.create()\n *\n * BinaryStateTree.insert( // [!code focus]\n *   tree, // [!code focus]\n *   Bytes.fromHex('0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54'), // [!code focus]\n *   Bytes.fromHex('0xd4fd4e189132273036449fc9e11198c739161b4c0116a9a2dccdfa1c492006f1') // [!code focus]\n * ) // [!code focus]\n * ```\n *\n * @param tree - Binary State Tree instance.\n * @param key - Key to insert.\n * @param value - Value to insert.\n */\nexport function insert(\n  tree: BinaryStateTree,\n  key: Bytes.Bytes,\n  value: Bytes.Bytes,\n): void {\n  const stem = Bytes.slice(key, 0, 31)\n  const subIndex = Bytes.slice(key, 31)[0]!\n\n  if (tree.root.type === 'empty') {\n    tree.root = stemNode(stem)\n    tree.root.values[subIndex] = value\n    return\n  }\n\n  function inner(\n    node_: Node,\n    stem: Bytes.Bytes,\n    subIndex: number,\n    value: Bytes.Bytes,\n    depth: number,\n  ): Node {\n    let node = node_\n\n    if (node.type === 'empty') {\n      node = stemNode(stem)\n      node.values[subIndex!] = value\n      return node\n    }\n\n    const stemBits = bytesToBits(stem)\n    if (node.type === 'stem') {\n      if (Bytes.isEqual(node.stem, stem)) {\n        node.values[subIndex!] = value\n        return node\n      }\n      const existingStemBits = bytesToBits(node.stem)\n      return splitLeaf(node, stemBits, existingStemBits, subIndex, value, depth)\n    }\n\n    if (node.type === 'internal') {\n      const bit = stemBits[depth]\n      if (bit === 0) {\n        node.left = inner(node.left, stem, subIndex, value, depth + 1)\n      } else {\n        node.right = inner(node.right, stem, subIndex, value, depth + 1)\n      }\n      return node\n    }\n\n    return emptyNode()\n  }\n  tree.root = inner(tree.root, stem, subIndex, value, 0)\n}\n\n/**\n * Merkelizes a Binary State Tree.\n *\n * @example\n * ```ts twoslash\n * import { BinaryStateTree, Bytes } from 'ox'\n *\n * const tree = BinaryStateTree.create()\n *\n * BinaryStateTree.insert(\n *   tree,\n *   Bytes.fromHex('0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54'),\n *   Bytes.fromHex('0xd4fd4e189132273036449fc9e11198c739161b4c0116a9a2dccdfa1c492006f1')\n * )\n *\n * const hash = BinaryStateTree.merkelize(tree) // [!code focus]\n * ```\n *\n * @param tree - Binary State Tree instance.\n * @returns Merkle hash.\n */\nexport function merkelize(tree: BinaryStateTree): Bytes.Bytes {\n  function inner(node: Node): Bytes.Bytes {\n    if (node.type === 'empty') return new Uint8Array(32).fill(0)\n    if (node.type === 'internal') {\n      const hash_left = inner(node.left)\n      const hash_right = inner(node.right)\n      return hash(Bytes.concat(hash_left, hash_right))\n    }\n\n    let level = node.values.map(hash)\n    while (level.length > 1) {\n      const level_ = []\n      for (let i = 0; i < level.length; i += 2)\n        level_.push(hash(Bytes.concat(level[i]!, level[i + 1]!)))\n      level = level_\n    }\n\n    return hash(Bytes.concat(node.stem, new Uint8Array(1).fill(0), level[0]!))\n  }\n\n  return inner(tree.root)\n}\n\n//////////////////////////////////////////////////////////////////////////////\n// Internal\n//////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\ntype EmptyNode = {\n  type: 'empty'\n}\n\n/** @internal */\ntype InternalNode = {\n  left: Node\n  right: Node\n  type: 'internal'\n}\n\n/** @internal */\ntype StemNode = {\n  stem: Bytes.Bytes\n  values: (Bytes.Bytes | undefined)[]\n  type: 'stem'\n}\n\n/** @internal */\nfunction splitLeaf(\n  leaf: Node,\n  stemBits: number[],\n  existingStemBits: number[],\n  subIndex: number,\n  value: Bytes.Bytes,\n  depth: number,\n): Node {\n  if (stemBits[depth] === existingStemBits[depth]) {\n    const internal = internalNode()\n    const bit = stemBits[depth]\n    if (bit === 0) {\n      internal.left = splitLeaf(\n        leaf,\n        stemBits,\n        existingStemBits,\n        subIndex,\n        value,\n        depth + 1,\n      )\n    } else {\n      internal.right = splitLeaf(\n        leaf,\n        stemBits,\n        existingStemBits,\n        subIndex,\n        value,\n        depth + 1,\n      )\n    }\n    return internal\n  }\n\n  const internal = internalNode()\n  const bit = stemBits[depth]\n  const stem = bitsToBytes(stemBits)\n  if (bit === 0) {\n    internal.left = stemNode(stem)\n    internal.left.values[subIndex] = value\n    internal.right = leaf\n  } else {\n    internal.right = stemNode(stem)\n    internal.right.values[subIndex] = value\n    internal.left = leaf\n  }\n  return internal\n}\n\n/** @internal */\nfunction emptyNode(): EmptyNode {\n  return {\n    type: 'empty',\n  }\n}\n\n/** @internal */\nfunction internalNode(): InternalNode {\n  return {\n    left: emptyNode(),\n    right: emptyNode(),\n    type: 'internal',\n  }\n}\n\n/** @internal */\nfunction stemNode(stem: Bytes.Bytes): StemNode {\n  return {\n    stem,\n    values: Array.from({ length: 256 }, () => undefined),\n    type: 'stem',\n  }\n}\n\n/** @internal */\nfunction bytesToBits(bytes: Bytes.Bytes): number[] {\n  const bits = []\n  for (const byte of bytes)\n    for (let i = 0; i < 8; i++) bits.push((byte >> (7 - i)) & 1)\n  return bits\n}\n\n/** @internal */\nfunction bitsToBytes(bits: number[]): Bytes.Bytes {\n  const byte_data = new Uint8Array(bits.length / 8)\n  for (let i = 0; i < bits.length; i += 8) {\n    let byte = 0\n    for (let j = 0; j < 8; j++) byte |= bits[i + j]! << (7 - j)\n    byte_data[i / 8] = byte\n  }\n  return byte_data\n}\n\n/** @internal */\nfunction hash(bytes: Bytes.Bytes | undefined): Bytes.Bytes {\n  if (!bytes) return new Uint8Array(32).fill(0)\n  if (!bytes.some((byte) => byte !== 0)) return new Uint8Array(32).fill(0)\n  return blake3(bytes)\n}\n", "/**\n * Internal helpers for blake hash.\n * @module\n */\nimport { rotr } from './utils.ts';\n\n/**\n * Internal blake variable.\n * For BLAKE2b, the two extra permutations for rounds 10 and 11 are SIGMA[10..11] = SIGMA[0..1].\n */\n// prettier-ignore\nexport const BSIGMA: Uint8Array = /* @__PURE__ */ Uint8Array.from([\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\n  11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,\n  7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,\n  9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,\n  2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,\n  12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,\n  13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,\n  6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,\n  10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\n  // Blake1, unused in others\n  11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,\n  7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,\n  9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,\n  2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,\n]);\n\n// prettier-ignore\nexport type Num4 = { a: number; b: number; c: number; d: number; };\n\n// Mixing function G splitted in two halfs\nexport function G1s(a: number, b: number, c: number, d: number, x: number): Num4 {\n  a = (a + b + x) | 0;\n  d = rotr(d ^ a, 16);\n  c = (c + d) | 0;\n  b = rotr(b ^ c, 12);\n  return { a, b, c, d };\n}\n\nexport function G2s(a: number, b: number, c: number, d: number, x: number): Num4 {\n  a = (a + b + x) | 0;\n  d = rotr(d ^ a, 8);\n  c = (c + d) | 0;\n  b = rotr(b ^ c, 7);\n  return { a, b, c, d };\n}\n", "/**\n * blake2b (64-bit) & blake2s (8 to 32-bit) hash functions.\n * b could have been faster, but there is no fast u64 in js, so s is 1.5x faster.\n * @module\n */\nimport { BSIGMA, G1s, G2s } from './_blake.ts';\nimport { SHA256_IV } from './_md.ts';\nimport * as u64 from './_u64.ts';\n// prettier-ignore\nimport {\n  abytes, aexists, anumber, aoutput,\n  clean, createOptHasher, Hash, swap32IfBE, swap8IfBE, toBytes, u32,\n  type CHashO, type Input\n} from './utils.ts';\n\n/** Blake hash options. dkLen is output length. key is used in MAC mode. salt is used in KDF mode. */\nexport type Blake2Opts = {\n  dkLen?: number;\n  key?: Input;\n  salt?: Input;\n  personalization?: Input;\n};\n\n// Same as SHA512_IV, but swapped endianness: LE instead of BE. iv[1] is iv[0], etc.\nconst B2B_IV = /* @__PURE__ */ Uint32Array.from([\n  0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372, 0x5f1d36f1, 0xa54ff53a,\n  0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c, 0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19,\n]);\n// Temporary buffer\nconst BBUF = /* @__PURE__ */ new Uint32Array(32);\n\n// Mixing function G splitted in two halfs\nfunction G1b(a: number, b: number, c: number, d: number, msg: Uint32Array, x: number) {\n  // NOTE: V is LE here\n  const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore\n  let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1]; // prettier-ignore\n  let Bl = BBUF[2 * b], Bh = BBUF[2 * b + 1]; // prettier-ignore\n  let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1]; // prettier-ignore\n  let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1]; // prettier-ignore\n  // v[a] = (v[a] + v[b] + x) | 0;\n  let ll = u64.add3L(Al, Bl, Xl);\n  Ah = u64.add3H(ll, Ah, Bh, Xh);\n  Al = ll | 0;\n  // v[d] = rotr(v[d] ^ v[a], 32)\n  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });\n  ({ Dh, Dl } = { Dh: u64.rotr32H(Dh, Dl), Dl: u64.rotr32L(Dh, Dl) });\n  // v[c] = (v[c] + v[d]) | 0;\n  ({ h: Ch, l: Cl } = u64.add(Ch, Cl, Dh, Dl));\n  // v[b] = rotr(v[b] ^ v[c], 24)\n  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });\n  ({ Bh, Bl } = { Bh: u64.rotrSH(Bh, Bl, 24), Bl: u64.rotrSL(Bh, Bl, 24) });\n  (BBUF[2 * a] = Al), (BBUF[2 * a + 1] = Ah);\n  (BBUF[2 * b] = Bl), (BBUF[2 * b + 1] = Bh);\n  (BBUF[2 * c] = Cl), (BBUF[2 * c + 1] = Ch);\n  (BBUF[2 * d] = Dl), (BBUF[2 * d + 1] = Dh);\n}\n\nfunction G2b(a: number, b: number, c: number, d: number, msg: Uint32Array, x: number) {\n  // NOTE: V is LE here\n  const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore\n  let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1]; // prettier-ignore\n  let Bl = BBUF[2 * b], Bh = BBUF[2 * b + 1]; // prettier-ignore\n  let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1]; // prettier-ignore\n  let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1]; // prettier-ignore\n  // v[a] = (v[a] + v[b] + x) | 0;\n  let ll = u64.add3L(Al, Bl, Xl);\n  Ah = u64.add3H(ll, Ah, Bh, Xh);\n  Al = ll | 0;\n  // v[d] = rotr(v[d] ^ v[a], 16)\n  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });\n  ({ Dh, Dl } = { Dh: u64.rotrSH(Dh, Dl, 16), Dl: u64.rotrSL(Dh, Dl, 16) });\n  // v[c] = (v[c] + v[d]) | 0;\n  ({ h: Ch, l: Cl } = u64.add(Ch, Cl, Dh, Dl));\n  // v[b] = rotr(v[b] ^ v[c], 63)\n  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });\n  ({ Bh, Bl } = { Bh: u64.rotrBH(Bh, Bl, 63), Bl: u64.rotrBL(Bh, Bl, 63) });\n  (BBUF[2 * a] = Al), (BBUF[2 * a + 1] = Ah);\n  (BBUF[2 * b] = Bl), (BBUF[2 * b + 1] = Bh);\n  (BBUF[2 * c] = Cl), (BBUF[2 * c + 1] = Ch);\n  (BBUF[2 * d] = Dl), (BBUF[2 * d + 1] = Dh);\n}\n\nfunction checkBlake2Opts(\n  outputLen: number,\n  opts: Blake2Opts | undefined = {},\n  keyLen: number,\n  saltLen: number,\n  persLen: number\n) {\n  anumber(keyLen);\n  if (outputLen < 0 || outputLen > keyLen) throw new Error('outputLen bigger than keyLen');\n  const { key, salt, personalization } = opts;\n  if (key !== undefined && (key.length < 1 || key.length > keyLen))\n    throw new Error('key length must be undefined or 1..' + keyLen);\n  if (salt !== undefined && salt.length !== saltLen)\n    throw new Error('salt must be undefined or ' + saltLen);\n  if (personalization !== undefined && personalization.length !== persLen)\n    throw new Error('personalization must be undefined or ' + persLen);\n}\n\n/** Class, from which others are subclassed. */\nexport abstract class BLAKE2<T extends BLAKE2<T>> extends Hash<T> {\n  protected abstract compress(msg: Uint32Array, offset: number, isLast: boolean): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected buffer: Uint8Array;\n  protected buffer32: Uint32Array;\n  protected finished = false;\n  protected destroyed = false;\n  protected length: number = 0;\n  protected pos: number = 0;\n  readonly blockLen: number;\n  readonly outputLen: number;\n\n  constructor(blockLen: number, outputLen: number) {\n    super();\n    anumber(blockLen);\n    anumber(outputLen);\n    this.blockLen = blockLen;\n    this.outputLen = outputLen;\n    this.buffer = new Uint8Array(blockLen);\n    this.buffer32 = u32(this.buffer);\n  }\n  update(data: Input): this {\n    aexists(this);\n    data = toBytes(data);\n    abytes(data);\n    // Main difference with other hashes: there is flag for last block,\n    // so we cannot process current block before we know that there\n    // is the next one. This significantly complicates logic and reduces ability\n    // to do zero-copy processing\n    const { blockLen, buffer, buffer32 } = this;\n    const len = data.length;\n    const offset = data.byteOffset;\n    const buf = data.buffer;\n    for (let pos = 0; pos < len; ) {\n      // If buffer is full and we still have input (don't process last block, same as blake2s)\n      if (this.pos === blockLen) {\n        swap32IfBE(buffer32);\n        this.compress(buffer32, 0, false);\n        swap32IfBE(buffer32);\n        this.pos = 0;\n      }\n      const take = Math.min(blockLen - this.pos, len - pos);\n      const dataOffset = offset + pos;\n      // full block && aligned to 4 bytes && not last in input\n      if (take === blockLen && !(dataOffset % 4) && pos + take < len) {\n        const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));\n        swap32IfBE(data32);\n        for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {\n          this.length += blockLen;\n          this.compress(data32, pos32, false);\n        }\n        swap32IfBE(data32);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      this.length += take;\n      pos += take;\n    }\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    aoutput(out, this);\n    const { pos, buffer32 } = this;\n    this.finished = true;\n    // Padding\n    clean(this.buffer.subarray(pos));\n    swap32IfBE(buffer32);\n    this.compress(buffer32, 0, true);\n    swap32IfBE(buffer32);\n    const out32 = u32(out);\n    this.get().forEach((v, i) => (out32[i] = swap8IfBE(v)));\n  }\n  digest(): Uint8Array {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    const { buffer, length, finished, destroyed, outputLen, pos } = this;\n    to ||= new (this.constructor as any)({ dkLen: outputLen }) as T;\n    to.set(...this.get());\n    to.buffer.set(buffer);\n    to.destroyed = destroyed;\n    to.finished = finished;\n    to.length = length;\n    to.pos = pos;\n    // @ts-ignore\n    to.outputLen = outputLen;\n    return to;\n  }\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\nexport class BLAKE2b extends BLAKE2<BLAKE2b> {\n  // Same as SHA-512, but LE\n  private v0l = B2B_IV[0] | 0;\n  private v0h = B2B_IV[1] | 0;\n  private v1l = B2B_IV[2] | 0;\n  private v1h = B2B_IV[3] | 0;\n  private v2l = B2B_IV[4] | 0;\n  private v2h = B2B_IV[5] | 0;\n  private v3l = B2B_IV[6] | 0;\n  private v3h = B2B_IV[7] | 0;\n  private v4l = B2B_IV[8] | 0;\n  private v4h = B2B_IV[9] | 0;\n  private v5l = B2B_IV[10] | 0;\n  private v5h = B2B_IV[11] | 0;\n  private v6l = B2B_IV[12] | 0;\n  private v6h = B2B_IV[13] | 0;\n  private v7l = B2B_IV[14] | 0;\n  private v7h = B2B_IV[15] | 0;\n\n  constructor(opts: Blake2Opts = {}) {\n    const olen = opts.dkLen === undefined ? 64 : opts.dkLen;\n    super(128, olen);\n    checkBlake2Opts(olen, opts, 64, 16, 16);\n    let { key, personalization, salt } = opts;\n    let keyLength = 0;\n    if (key !== undefined) {\n      key = toBytes(key);\n      keyLength = key.length;\n    }\n    this.v0l ^= this.outputLen | (keyLength << 8) | (0x01 << 16) | (0x01 << 24);\n    if (salt !== undefined) {\n      salt = toBytes(salt);\n      const slt = u32(salt);\n      this.v4l ^= swap8IfBE(slt[0]);\n      this.v4h ^= swap8IfBE(slt[1]);\n      this.v5l ^= swap8IfBE(slt[2]);\n      this.v5h ^= swap8IfBE(slt[3]);\n    }\n    if (personalization !== undefined) {\n      personalization = toBytes(personalization);\n      const pers = u32(personalization);\n      this.v6l ^= swap8IfBE(pers[0]);\n      this.v6h ^= swap8IfBE(pers[1]);\n      this.v7l ^= swap8IfBE(pers[2]);\n      this.v7h ^= swap8IfBE(pers[3]);\n    }\n    if (key !== undefined) {\n      // Pad to blockLen and update\n      const tmp = new Uint8Array(this.blockLen);\n      tmp.set(key);\n      this.update(tmp);\n    }\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;\n    return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];\n  }\n  // prettier-ignore\n  protected set(\n    v0l: number, v0h: number, v1l: number, v1h: number,\n    v2l: number, v2h: number, v3l: number, v3h: number,\n    v4l: number, v4h: number, v5l: number, v5h: number,\n    v6l: number, v6h: number, v7l: number, v7h: number\n  ): void {\n    this.v0l = v0l | 0;\n    this.v0h = v0h | 0;\n    this.v1l = v1l | 0;\n    this.v1h = v1h | 0;\n    this.v2l = v2l | 0;\n    this.v2h = v2h | 0;\n    this.v3l = v3l | 0;\n    this.v3h = v3h | 0;\n    this.v4l = v4l | 0;\n    this.v4h = v4h | 0;\n    this.v5l = v5l | 0;\n    this.v5h = v5h | 0;\n    this.v6l = v6l | 0;\n    this.v6h = v6h | 0;\n    this.v7l = v7l | 0;\n    this.v7h = v7h | 0;\n  }\n  protected compress(msg: Uint32Array, offset: number, isLast: boolean): void {\n    this.get().forEach((v, i) => (BBUF[i] = v)); // First half from state.\n    BBUF.set(B2B_IV, 16); // Second half from IV.\n    let { h, l } = u64.fromBig(BigInt(this.length));\n    BBUF[24] = B2B_IV[8] ^ l; // Low word of the offset.\n    BBUF[25] = B2B_IV[9] ^ h; // High word.\n    // Invert all bits for last block\n    if (isLast) {\n      BBUF[28] = ~BBUF[28];\n      BBUF[29] = ~BBUF[29];\n    }\n    let j = 0;\n    const s = BSIGMA;\n    for (let i = 0; i < 12; i++) {\n      G1b(0, 4, 8, 12, msg, offset + 2 * s[j++]);\n      G2b(0, 4, 8, 12, msg, offset + 2 * s[j++]);\n      G1b(1, 5, 9, 13, msg, offset + 2 * s[j++]);\n      G2b(1, 5, 9, 13, msg, offset + 2 * s[j++]);\n      G1b(2, 6, 10, 14, msg, offset + 2 * s[j++]);\n      G2b(2, 6, 10, 14, msg, offset + 2 * s[j++]);\n      G1b(3, 7, 11, 15, msg, offset + 2 * s[j++]);\n      G2b(3, 7, 11, 15, msg, offset + 2 * s[j++]);\n\n      G1b(0, 5, 10, 15, msg, offset + 2 * s[j++]);\n      G2b(0, 5, 10, 15, msg, offset + 2 * s[j++]);\n      G1b(1, 6, 11, 12, msg, offset + 2 * s[j++]);\n      G2b(1, 6, 11, 12, msg, offset + 2 * s[j++]);\n      G1b(2, 7, 8, 13, msg, offset + 2 * s[j++]);\n      G2b(2, 7, 8, 13, msg, offset + 2 * s[j++]);\n      G1b(3, 4, 9, 14, msg, offset + 2 * s[j++]);\n      G2b(3, 4, 9, 14, msg, offset + 2 * s[j++]);\n    }\n    this.v0l ^= BBUF[0] ^ BBUF[16];\n    this.v0h ^= BBUF[1] ^ BBUF[17];\n    this.v1l ^= BBUF[2] ^ BBUF[18];\n    this.v1h ^= BBUF[3] ^ BBUF[19];\n    this.v2l ^= BBUF[4] ^ BBUF[20];\n    this.v2h ^= BBUF[5] ^ BBUF[21];\n    this.v3l ^= BBUF[6] ^ BBUF[22];\n    this.v3h ^= BBUF[7] ^ BBUF[23];\n    this.v4l ^= BBUF[8] ^ BBUF[24];\n    this.v4h ^= BBUF[9] ^ BBUF[25];\n    this.v5l ^= BBUF[10] ^ BBUF[26];\n    this.v5h ^= BBUF[11] ^ BBUF[27];\n    this.v6l ^= BBUF[12] ^ BBUF[28];\n    this.v6h ^= BBUF[13] ^ BBUF[29];\n    this.v7l ^= BBUF[14] ^ BBUF[30];\n    this.v7h ^= BBUF[15] ^ BBUF[31];\n    clean(BBUF);\n  }\n  destroy(): void {\n    this.destroyed = true;\n    clean(this.buffer32);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\n/**\n * Blake2b hash function. 64-bit. 1.5x slower than blake2s in JS.\n * @param msg - message that would be hashed\n * @param opts - dkLen output length, key for MAC mode, salt, personalization\n */\nexport const blake2b: CHashO = /* @__PURE__ */ createOptHasher<BLAKE2b, Blake2Opts>(\n  (opts) => new BLAKE2b(opts)\n);\n\n// =================\n// Blake2S\n// =================\n\n// prettier-ignore\nexport type Num16 = {\n  v0: number; v1: number; v2: number; v3: number;\n  v4: number; v5: number; v6: number; v7: number;\n  v8: number; v9: number; v10: number; v11: number;\n  v12: number; v13: number; v14: number; v15: number;\n};\n\n// prettier-ignore\nexport function compress(s: Uint8Array, offset: number, msg: Uint32Array, rounds: number,\n  v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number,\n  v8: number, v9: number, v10: number, v11: number, v12: number, v13: number, v14: number, v15: number,\n): Num16 {\n  let j = 0;\n  for (let i = 0; i < rounds; i++) {\n    ({ a: v0, b: v4, c: v8, d: v12 } = G1s(v0, v4, v8, v12, msg[offset + s[j++]]));\n    ({ a: v0, b: v4, c: v8, d: v12 } = G2s(v0, v4, v8, v12, msg[offset + s[j++]]));\n    ({ a: v1, b: v5, c: v9, d: v13 } = G1s(v1, v5, v9, v13, msg[offset + s[j++]]));\n    ({ a: v1, b: v5, c: v9, d: v13 } = G2s(v1, v5, v9, v13, msg[offset + s[j++]]));\n    ({ a: v2, b: v6, c: v10, d: v14 } = G1s(v2, v6, v10, v14, msg[offset + s[j++]]));\n    ({ a: v2, b: v6, c: v10, d: v14 } = G2s(v2, v6, v10, v14, msg[offset + s[j++]]));\n    ({ a: v3, b: v7, c: v11, d: v15 } = G1s(v3, v7, v11, v15, msg[offset + s[j++]]));\n    ({ a: v3, b: v7, c: v11, d: v15 } = G2s(v3, v7, v11, v15, msg[offset + s[j++]]));\n\n    ({ a: v0, b: v5, c: v10, d: v15 } = G1s(v0, v5, v10, v15, msg[offset + s[j++]]));\n    ({ a: v0, b: v5, c: v10, d: v15 } = G2s(v0, v5, v10, v15, msg[offset + s[j++]]));\n    ({ a: v1, b: v6, c: v11, d: v12 } = G1s(v1, v6, v11, v12, msg[offset + s[j++]]));\n    ({ a: v1, b: v6, c: v11, d: v12 } = G2s(v1, v6, v11, v12, msg[offset + s[j++]]));\n    ({ a: v2, b: v7, c: v8, d: v13 } = G1s(v2, v7, v8, v13, msg[offset + s[j++]]));\n    ({ a: v2, b: v7, c: v8, d: v13 } = G2s(v2, v7, v8, v13, msg[offset + s[j++]]));\n    ({ a: v3, b: v4, c: v9, d: v14 } = G1s(v3, v4, v9, v14, msg[offset + s[j++]]));\n    ({ a: v3, b: v4, c: v9, d: v14 } = G2s(v3, v4, v9, v14, msg[offset + s[j++]]));\n  }\n  return { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 };\n}\n\nconst B2S_IV = SHA256_IV;\nexport class BLAKE2s extends BLAKE2<BLAKE2s> {\n  // Internal state, same as SHA-256\n  private v0 = B2S_IV[0] | 0;\n  private v1 = B2S_IV[1] | 0;\n  private v2 = B2S_IV[2] | 0;\n  private v3 = B2S_IV[3] | 0;\n  private v4 = B2S_IV[4] | 0;\n  private v5 = B2S_IV[5] | 0;\n  private v6 = B2S_IV[6] | 0;\n  private v7 = B2S_IV[7] | 0;\n\n  constructor(opts: Blake2Opts = {}) {\n    const olen = opts.dkLen === undefined ? 32 : opts.dkLen;\n    super(64, olen);\n    checkBlake2Opts(olen, opts, 32, 8, 8);\n    let { key, personalization, salt } = opts;\n    let keyLength = 0;\n    if (key !== undefined) {\n      key = toBytes(key);\n      keyLength = key.length;\n    }\n    this.v0 ^= this.outputLen | (keyLength << 8) | (0x01 << 16) | (0x01 << 24);\n    if (salt !== undefined) {\n      salt = toBytes(salt);\n      const slt = u32(salt as Uint8Array);\n      this.v4 ^= swap8IfBE(slt[0]);\n      this.v5 ^= swap8IfBE(slt[1]);\n    }\n    if (personalization !== undefined) {\n      personalization = toBytes(personalization);\n      const pers = u32(personalization as Uint8Array);\n      this.v6 ^= swap8IfBE(pers[0]);\n      this.v7 ^= swap8IfBE(pers[1]);\n    }\n    if (key !== undefined) {\n      // Pad to blockLen and update\n      abytes(key);\n      const tmp = new Uint8Array(this.blockLen);\n      tmp.set(key);\n      this.update(tmp);\n    }\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { v0, v1, v2, v3, v4, v5, v6, v7 } = this;\n    return [v0, v1, v2, v3, v4, v5, v6, v7];\n  }\n  // prettier-ignore\n  protected set(\n    v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number\n  ): void {\n    this.v0 = v0 | 0;\n    this.v1 = v1 | 0;\n    this.v2 = v2 | 0;\n    this.v3 = v3 | 0;\n    this.v4 = v4 | 0;\n    this.v5 = v5 | 0;\n    this.v6 = v6 | 0;\n    this.v7 = v7 | 0;\n  }\n  protected compress(msg: Uint32Array, offset: number, isLast: boolean): void {\n    const { h, l } = u64.fromBig(BigInt(this.length));\n    // prettier-ignore\n    const { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } =\n      compress(\n        BSIGMA, offset, msg, 10,\n        this.v0, this.v1, this.v2, this.v3, this.v4, this.v5, this.v6, this.v7,\n        B2S_IV[0], B2S_IV[1], B2S_IV[2], B2S_IV[3], l ^ B2S_IV[4], h ^ B2S_IV[5], isLast ? ~B2S_IV[6] : B2S_IV[6], B2S_IV[7]\n      );\n    this.v0 ^= v0 ^ v8;\n    this.v1 ^= v1 ^ v9;\n    this.v2 ^= v2 ^ v10;\n    this.v3 ^= v3 ^ v11;\n    this.v4 ^= v4 ^ v12;\n    this.v5 ^= v5 ^ v13;\n    this.v6 ^= v6 ^ v14;\n    this.v7 ^= v7 ^ v15;\n  }\n  destroy(): void {\n    this.destroyed = true;\n    clean(this.buffer32);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\n/**\n * Blake2s hash function. Focuses on 8-bit to 32-bit platforms. 1.5x faster than blake2b in JS.\n * @param msg - message that would be hashed\n * @param opts - dkLen output length, key for MAC mode, salt, personalization\n */\nexport const blake2s: CHashO = /* @__PURE__ */ createOptHasher<BLAKE2s, Blake2Opts>(\n  (opts) => new BLAKE2s(opts)\n);\n", "/**\n * Blake3 fast hash is Blake2 with reduced security (round count). Can also be used as MAC & KDF.\n *\n * It is advertised as \"the fastest cryptographic hash\". However, it isn't true in JS.\n * Why is this so slow? While it should be 6x faster than blake2b, perf diff is only 20%:\n *\n * * There is only 30% reduction in number of rounds from blake2s\n * * Speed-up comes from tree structure, which is parallelized using SIMD & threading.\n *   These features are not present in JS, so we only get overhead from trees.\n * * Parallelization only happens on 1024-byte chunks: there is no benefit for small inputs.\n * * It is still possible to make it faster using: a) loop unrolling b) web workers c) wasm\n * @module\n */\nimport { SHA256_IV } from './_md.ts';\nimport { fromBig } from './_u64.ts';\nimport { BLAKE2, compress } from './blake2.ts';\n// prettier-ignore\nimport {\n  abytes, aexists, anumber, aoutput,\n  clean, createXOFer, swap32IfBE, toBytes, u32, u8,\n  type CHashXO, type HashXOF, type Input\n} from './utils.ts';\n\n// Flag bitset\nconst B3_Flags = {\n  CHUNK_START: 0b1,\n  CHUNK_END: 0b10,\n  PARENT: 0b100,\n  ROOT: 0b1000,\n  KEYED_HASH: 0b10000,\n  DERIVE_KEY_CONTEXT: 0b100000,\n  DERIVE_KEY_MATERIAL: 0b1000000,\n} as const;\n\nconst B3_IV = SHA256_IV.slice();\n\nconst B3_SIGMA: Uint8Array = /* @__PURE__ */ (() => {\n  const Id = Array.from({ length: 16 }, (_, i) => i);\n  const permute = (arr: number[]) =>\n    [2, 6, 3, 10, 7, 0, 4, 13, 1, 11, 12, 5, 9, 14, 15, 8].map((i) => arr[i]);\n  const res: number[] = [];\n  for (let i = 0, v = Id; i < 7; i++, v = permute(v)) res.push(...v);\n  return Uint8Array.from(res);\n})();\n\n/**\n * Ensure to use EITHER `key` OR `context`, not both.\n *\n * * `key`: 32-byte MAC key.\n * * `context`: string for KDF. Should be hardcoded, globally unique, and application - specific.\n *   A good default format for the context string is \"[application] [commit timestamp] [purpose]\".\n */\nexport type Blake3Opts = { dkLen?: number; key?: Input; context?: Input };\n\n/** Blake3 hash. Can be used as MAC and KDF. */\nexport class BLAKE3 extends BLAKE2<BLAKE3> implements HashXOF<BLAKE3> {\n  private chunkPos = 0; // Position of current block in chunk\n  private chunksDone = 0; // How many chunks we already have\n  private flags = 0 | 0;\n  private IV: Uint32Array;\n  private state: Uint32Array;\n  private stack: Uint32Array[] = [];\n  // Output\n  private posOut = 0;\n  private bufferOut32 = new Uint32Array(16);\n  private bufferOut: Uint8Array;\n  private chunkOut = 0; // index of output chunk\n  private enableXOF = true;\n\n  constructor(opts: Blake3Opts = {}, flags = 0) {\n    super(64, opts.dkLen === undefined ? 32 : opts.dkLen);\n    const { key, context } = opts;\n    const hasContext = context !== undefined;\n    if (key !== undefined) {\n      if (hasContext) throw new Error('Only \"key\" or \"context\" can be specified at same time');\n      const k = toBytes(key).slice();\n      abytes(k, 32);\n      this.IV = u32(k);\n      swap32IfBE(this.IV);\n      this.flags = flags | B3_Flags.KEYED_HASH;\n    } else if (hasContext) {\n      const ctx = toBytes(context);\n      const contextKey = new BLAKE3({ dkLen: 32 }, B3_Flags.DERIVE_KEY_CONTEXT)\n        .update(ctx)\n        .digest();\n      this.IV = u32(contextKey);\n      swap32IfBE(this.IV);\n      this.flags = flags | B3_Flags.DERIVE_KEY_MATERIAL;\n    } else {\n      this.IV = B3_IV.slice();\n      this.flags = flags;\n    }\n    this.state = this.IV.slice();\n    this.bufferOut = u8(this.bufferOut32);\n  }\n  // Unused\n  protected get(): [] {\n    return [];\n  }\n  protected set(): void {}\n  private b2Compress(counter: number, flags: number, buf: Uint32Array, bufPos: number = 0) {\n    const { state: s, pos } = this;\n    const { h, l } = fromBig(BigInt(counter), true);\n    // prettier-ignore\n    const { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } =\n      compress(\n        B3_SIGMA, bufPos, buf, 7,\n        s[0], s[1], s[2], s[3], s[4], s[5], s[6], s[7],\n        B3_IV[0], B3_IV[1], B3_IV[2], B3_IV[3], h, l, pos, flags\n      );\n    s[0] = v0 ^ v8;\n    s[1] = v1 ^ v9;\n    s[2] = v2 ^ v10;\n    s[3] = v3 ^ v11;\n    s[4] = v4 ^ v12;\n    s[5] = v5 ^ v13;\n    s[6] = v6 ^ v14;\n    s[7] = v7 ^ v15;\n  }\n  protected compress(buf: Uint32Array, bufPos: number = 0, isLast: boolean = false): void {\n    // Compress last block\n    let flags = this.flags;\n    if (!this.chunkPos) flags |= B3_Flags.CHUNK_START;\n    if (this.chunkPos === 15 || isLast) flags |= B3_Flags.CHUNK_END;\n    if (!isLast) this.pos = this.blockLen;\n    this.b2Compress(this.chunksDone, flags, buf, bufPos);\n    this.chunkPos += 1;\n    // If current block is last in chunk (16 blocks), then compress chunks\n    if (this.chunkPos === 16 || isLast) {\n      let chunk = this.state;\n      this.state = this.IV.slice();\n      // If not the last one, compress only when there are trailing zeros in chunk counter\n      // chunks used as binary tree where current stack is path. Zero means current leaf is finished and can be compressed.\n      // 1 (001) - leaf not finished (just push current chunk to stack)\n      // 2 (010) - leaf finished at depth=1 (merge with last elm on stack and push back)\n      // 3 (011) - last leaf not finished\n      // 4 (100) - leafs finished at depth=1 and depth=2\n      for (let last, chunks = this.chunksDone + 1; isLast || !(chunks & 1); chunks >>= 1) {\n        if (!(last = this.stack.pop())) break;\n        this.buffer32.set(last, 0);\n        this.buffer32.set(chunk, 8);\n        this.pos = this.blockLen;\n        this.b2Compress(0, this.flags | B3_Flags.PARENT, this.buffer32, 0);\n        chunk = this.state;\n        this.state = this.IV.slice();\n      }\n      this.chunksDone++;\n      this.chunkPos = 0;\n      this.stack.push(chunk);\n    }\n    this.pos = 0;\n  }\n  _cloneInto(to?: BLAKE3): BLAKE3 {\n    to = super._cloneInto(to) as BLAKE3;\n    const { IV, flags, state, chunkPos, posOut, chunkOut, stack, chunksDone } = this;\n    to.state.set(state.slice());\n    to.stack = stack.map((i) => Uint32Array.from(i));\n    to.IV.set(IV);\n    to.flags = flags;\n    to.chunkPos = chunkPos;\n    to.chunksDone = chunksDone;\n    to.posOut = posOut;\n    to.chunkOut = chunkOut;\n    to.enableXOF = this.enableXOF;\n    to.bufferOut32.set(this.bufferOut32);\n    return to;\n  }\n  destroy(): void {\n    this.destroyed = true;\n    clean(this.state, this.buffer32, this.IV, this.bufferOut32);\n    clean(...this.stack);\n  }\n  // Same as b2Compress, but doesn't modify state and returns 16 u32 array (instead of 8)\n  private b2CompressOut() {\n    const { state: s, pos, flags, buffer32, bufferOut32: out32 } = this;\n    const { h, l } = fromBig(BigInt(this.chunkOut++));\n    swap32IfBE(buffer32);\n    // prettier-ignore\n    const { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } =\n      compress(\n        B3_SIGMA, 0, buffer32, 7,\n        s[0], s[1], s[2], s[3], s[4], s[5], s[6], s[7],\n        B3_IV[0], B3_IV[1], B3_IV[2], B3_IV[3], l, h, pos, flags\n      );\n    out32[0] = v0 ^ v8;\n    out32[1] = v1 ^ v9;\n    out32[2] = v2 ^ v10;\n    out32[3] = v3 ^ v11;\n    out32[4] = v4 ^ v12;\n    out32[5] = v5 ^ v13;\n    out32[6] = v6 ^ v14;\n    out32[7] = v7 ^ v15;\n    out32[8] = s[0] ^ v8;\n    out32[9] = s[1] ^ v9;\n    out32[10] = s[2] ^ v10;\n    out32[11] = s[3] ^ v11;\n    out32[12] = s[4] ^ v12;\n    out32[13] = s[5] ^ v13;\n    out32[14] = s[6] ^ v14;\n    out32[15] = s[7] ^ v15;\n    swap32IfBE(buffer32);\n    swap32IfBE(out32);\n    this.posOut = 0;\n  }\n  protected finish(): void {\n    if (this.finished) return;\n    this.finished = true;\n    // Padding\n    clean(this.buffer.subarray(this.pos));\n    // Process last chunk\n    let flags = this.flags | B3_Flags.ROOT;\n    if (this.stack.length) {\n      flags |= B3_Flags.PARENT;\n      swap32IfBE(this.buffer32);\n      this.compress(this.buffer32, 0, true);\n      swap32IfBE(this.buffer32);\n      this.chunksDone = 0;\n      this.pos = this.blockLen;\n    } else {\n      flags |= (!this.chunkPos ? B3_Flags.CHUNK_START : 0) | B3_Flags.CHUNK_END;\n    }\n    this.flags = flags;\n    this.b2CompressOut();\n  }\n  private writeInto(out: Uint8Array) {\n    aexists(this, false);\n    abytes(out);\n    this.finish();\n    const { blockLen, bufferOut } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.b2CompressOut();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    if (!this.enableXOF) throw new Error('XOF is not possible after digest call');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    anumber(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array): Uint8Array {\n    aoutput(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.enableXOF = false;\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest(): Uint8Array {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n}\n\n/**\n * BLAKE3 hash function. Can be used as MAC and KDF.\n * @param msg - message that would be hashed\n * @param opts - `dkLen` for output length, `key` for MAC mode, `context` for KDF mode\n * @example\n * const data = new Uint8Array(32);\n * const hash = blake3(data);\n * const mac = blake3(data, { key: new Uint8Array(32) });\n * const kdf = blake3(data, { context: 'application name' });\n */\nexport const blake3: CHashXO = /* @__PURE__ */ createXOFer<BLAKE3, Blake3Opts>(\n  (opts) => new BLAKE3(opts)\n);\n", "import * as Bytes from './Bytes.js'\nimport * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as Hex from './Hex.js'\nimport * as Kzg from './Kzg.js'\nimport * as Cursor from './internal/cursor.js'\nimport type { Compute, Mutable, OneOf, UnionCompute } from './internal/types.js'\n\n/** Blob limit per transaction. */\nconst blobsPerTransaction = 6\n\n/** The number of bytes in a BLS scalar field element. */\nexport const bytesPerFieldElement = 32\n\n/** The number of field elements in a blob. */\nexport const fieldElementsPerBlob = 4096\n\n/** The number of bytes in a blob. */\nexport const bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob\n\n/** Blob bytes limit per transaction. */\nexport const maxBytesPerTransaction =\n  bytesPerBlob * blobsPerTransaction -\n  // terminator byte (0x80).\n  1 -\n  // zero byte (0x00) appended to each field element.\n  1 * fieldElementsPerBlob * blobsPerTransaction\n\n/** Root type for a Blob. */\nexport type Blob<type extends Hex.Hex | Bytes.Bytes = Hex.Hex | Bytes.Bytes> =\n  type\n\n/** A list of {@link ox#Blobs.Blob}. */\nexport type Blobs<type extends Hex.Hex | Bytes.Bytes = Hex.Hex | Bytes.Bytes> =\n  readonly Blob<type>[]\n\n/** Type for a Blob Sidecar that contains a blob, as well as its KZG commitment and proof. */\nexport type BlobSidecar<\n  type extends Hex.Hex | Bytes.Bytes = Hex.Hex | Bytes.Bytes,\n> = Compute<{\n  /** The blob associated with the transaction. */\n  blob: type\n  /** The KZG commitment corresponding to this blob. */\n  commitment: type\n  /** The KZG proof corresponding to this blob and commitment. */\n  proof: type\n}>\n\n/**\n * Transform a list of Commitments to Blob Versioned Hashes.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const commitments = Blobs.toCommitments(blobs, { kzg })\n * const versionedHashes = Blobs.commitmentsToVersionedHashes(commitments) // [!code focus]\n * // @log: ['0x...', '0x...']\n * ```\n *\n * @example\n * ### Configuring Return Type\n *\n * It is possible to configure the return type for the Versioned Hashes with the `as` option.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const commitments = Blobs.toCommitments(blobs, { kzg })\n * const versionedHashes = Blobs.commitmentsToVersionedHashes(commitments, {\n *   as: 'Bytes', // [!code focus]\n * })\n * // @log: [Uint8Array [ ... ], Uint8Array [ ... ]]\n * ```\n *\n * @example\n * ### Versioning Hashes\n *\n * It is possible to configure the version for the Versioned Hashes with the `version` option.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const commitments = Blobs.toCommitments(blobs, { kzg })\n * const versionedHashes = Blobs.commitmentsToVersionedHashes(commitments, {\n *   version: 2, // [!code focus]\n * })\n * ```\n *\n * @param commitments - A list of commitments.\n * @param options - Options.\n * @returns A list of Blob Versioned Hashes.\n */\nexport function commitmentsToVersionedHashes<\n  const commitments extends readonly Bytes.Bytes[] | readonly Hex.Hex[],\n  as extends 'Hex' | 'Bytes' =\n    | (commitments extends readonly Hex.Hex[] ? 'Hex' : never)\n    | (commitments extends readonly Bytes.Bytes[] ? 'Bytes' : never),\n>(\n  commitments: commitments | readonly Bytes.Bytes[] | readonly Hex.Hex[],\n  options: commitmentsToVersionedHashes.Options<as> = {},\n): commitmentsToVersionedHashes.ReturnType<as> {\n  const { version } = options\n\n  const as =\n    options.as ?? (typeof commitments[0] === 'string' ? 'Hex' : 'Bytes')\n\n  const hashes: Uint8Array[] | Hex.Hex[] = []\n  for (const commitment of commitments) {\n    hashes.push(\n      commitmentToVersionedHash(commitment, {\n        as,\n        version,\n      }) as never,\n    )\n  }\n  return hashes as never\n}\n\nexport declare namespace commitmentsToVersionedHashes {\n  type Options<as extends 'Hex' | 'Bytes' | undefined = undefined> = {\n    /** Return type. */\n    as?: as | 'Hex' | 'Bytes' | undefined\n    /** Version to tag onto the hashes. */\n    version?: number | undefined\n  }\n\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> =\n    | (as extends 'Bytes' ? readonly Bytes.Bytes[] : never)\n    | (as extends 'Hex' ? readonly Hex.Hex[] : never)\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Transform a Commitment to its Blob Versioned Hash.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const [commitment] = Blobs.toCommitments(blobs, { kzg })\n * const versionedHash = Blobs.commitmentToVersionedHash(commitment) // [!code focus]\n * ```\n *\n * @example\n * ### Configuring Return Type\n *\n * It is possible to configure the return type for the Versioned Hash with the `as` option.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const [commitment] = Blobs.toCommitments(blobs, { kzg })\n * const versionedHashes = Blobs.commitmentToVersionedHash(commitment, {\n *   as: 'Bytes', // [!code focus]\n * })\n * // @log: [Uint8Array [ ... ], Uint8Array [ ... ]]\n * ```\n *\n * @example\n * ### Versioning Hashes\n *\n * It is possible to configure the version for the Versioned Hash with the `version` option.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const [commitment] = Blobs.toCommitments(blobs, { kzg })\n * const versionedHashes = Blobs.commitmentToVersionedHash(commitment, {\n *   version: 2, // [!code focus]\n * })\n * ```\n *\n * @param commitment - The commitment.\n * @param options - Options.\n * @returns The Blob Versioned Hash.\n */\nexport function commitmentToVersionedHash<\n  const commitment extends Hex.Hex | Bytes.Bytes,\n  as extends 'Hex' | 'Bytes' =\n    | (commitment extends Hex.Hex ? 'Hex' : never)\n    | (commitment extends Bytes.Bytes ? 'Bytes' : never),\n>(\n  commitment: commitment | Hex.Hex | Bytes.Bytes,\n  options: commitmentToVersionedHash.Options<as> = {},\n): commitmentToVersionedHash.ReturnType<as> {\n  const { version = 1 } = options\n  const as = options.as ?? (typeof commitment === 'string' ? 'Hex' : 'Bytes')\n\n  const versionedHash = Hash.sha256(commitment, { as: 'Bytes' })\n  versionedHash.set([version], 0)\n  return (\n    as === 'Bytes' ? versionedHash : Hex.fromBytes(versionedHash)\n  ) as commitmentToVersionedHash.ReturnType<as>\n}\n\nexport declare namespace commitmentToVersionedHash {\n  type Options<as extends 'Hex' | 'Bytes' | undefined = undefined> = {\n    /** Return type. */\n    as?: as | 'Hex' | 'Bytes' | undefined\n    /** Version to tag onto the hash. */\n    version?: number | undefined\n  }\n\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> =\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\n    | (as extends 'Hex' ? Hex.Hex : never)\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Transforms arbitrary data to {@link ox#Blobs.Blobs}.\n *\n * @example\n * ```ts twoslash\n * import { Blobs } from 'ox'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * ```\n *\n * @example\n * ### Creating Blobs from a String\n *\n * An example of creating Blobs from a string using  {@link ox#Hex.(from:function)}:\n *\n * ```ts twoslash\n * import { Blobs, Hex } from 'ox'\n *\n * const blobs = Blobs.from(Hex.fromString('Hello world!'))\n * ```\n *\n * @example\n * ### Configuring Return Type\n *\n * It is possible to configure the return type for the Blobs with the `as` option.\n *\n * ```ts twoslash\n * import { Blobs } from 'ox'\n *\n * const blobs = Blobs.from('0xdeadbeef', { as: 'Bytes' })\n * //    ^?\n *\n *\n * ```\n *\n * @param data - The data to convert to {@link ox#Blobs.Blobs}.\n * @param options - Options.\n * @returns The {@link ox#Blobs.Blobs}.\n */\nexport function from<\n  const data extends Hex.Hex | Bytes.Bytes,\n  as extends 'Hex' | 'Bytes' =\n    | (data extends Hex.Hex ? 'Hex' : never)\n    | (data extends Bytes.Bytes ? 'Bytes' : never),\n>(\n  data: data | Hex.Hex | Bytes.Bytes,\n  options: from.Options<as> = {},\n): from.ReturnType<as> {\n  const as = options.as ?? (typeof data === 'string' ? 'Hex' : 'Bytes')\n  const data_ = (\n    typeof data === 'string' ? Bytes.fromHex(data) : data\n  ) as Bytes.Bytes\n\n  const size_ = Bytes.size(data_)\n  if (!size_) throw new EmptyBlobError()\n  if (size_ > maxBytesPerTransaction)\n    throw new BlobSizeTooLargeError({\n      maxSize: maxBytesPerTransaction,\n      size: size_,\n    })\n\n  const blobs = []\n\n  let active = true\n  let position = 0\n  while (active) {\n    const blob = Cursor.create(new Uint8Array(bytesPerBlob))\n\n    let size = 0\n    while (size < fieldElementsPerBlob) {\n      const bytes = data_.slice(position, position + (bytesPerFieldElement - 1))\n\n      // Push a zero byte so the field element doesn't overflow the BLS modulus.\n      blob.pushByte(0x00)\n\n      // Push the current segment of data bytes.\n      blob.pushBytes(bytes)\n\n      // If we detect that the current segment of data bytes is less than 31 bytes,\n      // we can stop processing and push a terminator byte to indicate the end of the blob.\n      if (bytes.length < 31) {\n        blob.pushByte(0x80)\n        active = false\n        break\n      }\n\n      size++\n      position += 31\n    }\n\n    blobs.push(blob)\n  }\n\n  return (\n    as === 'Bytes'\n      ? blobs.map((x) => x.bytes)\n      : blobs.map((x) => Hex.fromBytes(x.bytes))\n  ) as never\n}\n\nexport declare namespace from {\n  type Options<as extends 'Hex' | 'Bytes' | undefined = undefined> = {\n    /** Return type. */\n    as?: as | 'Hex' | 'Bytes' | undefined\n  }\n\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> =\n    | (as extends 'Bytes' ? readonly Bytes.Bytes[] : never)\n    | (as extends 'Hex' ? readonly Hex.Hex[] : never)\n\n  type ErrorType =\n    | BlobSizeTooLargeError\n    | EmptyBlobError\n    | Bytes.fromHex.ErrorType\n    | Hex.fromBytes.ErrorType\n    | Cursor.create.ErrorType\n    | Bytes.size.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Transforms a list of {@link ox#Blobs.BlobSidecars} to their Blob Versioned Hashes.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'ox'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const sidecars = Blobs.toSidecars(blobs, { kzg })\n * const versionedHashes = Blobs.sidecarsToVersionedHashes(sidecars) // [!code focus]\n * ```\n *\n * @example\n * ### Configuring Return Type\n *\n * It is possible to configure the return type for the Versioned Hashes with the `as` option.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const sidecars = Blobs.toSidecars(blobs, { kzg })\n * const versionedHashes = Blobs.sidecarsToVersionedHashes(sidecars, {\n *   as: 'Bytes', // [!code focus]\n * })\n * // @log: [Uint8Array [ ... ], Uint8Array [ ... ]]\n * ```\n *\n * @example\n * ### Versioning Hashes\n *\n * It is possible to configure the version for the Versioned Hashes with the `version` option.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const sidecars = Blobs.toSidecars(blobs, { kzg })\n * const versionedHashes = Blobs.sidecarsToVersionedHashes(sidecars, {\n *   version: 2, // [!code focus]\n * })\n * ```\n *\n * @param sidecars - The {@link ox#Blobs.BlobSidecars} to transform to Blob Versioned Hashes.\n * @param options - Options.\n * @returns The versioned hashes.\n */\nexport function sidecarsToVersionedHashes<\n  const sidecars extends BlobSidecars,\n  as extends 'Hex' | 'Bytes' =\n    | (sidecars extends BlobSidecars<Hex.Hex> ? 'Hex' : never)\n    | (sidecars extends BlobSidecars<Bytes.Bytes> ? 'Bytes' : never),\n>(\n  sidecars: sidecars | BlobSidecars,\n  options: sidecarsToVersionedHashes.Options<as> = {},\n): sidecarsToVersionedHashes.ReturnType<as> {\n  const { version } = options\n\n  const as =\n    options.as ?? (typeof sidecars[0]!.blob === 'string' ? 'Hex' : 'Bytes')\n\n  const hashes: Uint8Array[] | Hex.Hex[] = []\n  for (const { commitment } of sidecars) {\n    hashes.push(\n      commitmentToVersionedHash(commitment, {\n        as,\n        version,\n      }) as any,\n    )\n  }\n  return hashes as any\n}\n\nexport declare namespace sidecarsToVersionedHashes {\n  type Options<as extends 'Hex' | 'Bytes' | undefined = undefined> = {\n    /** Return type. */\n    as?: as | 'Hex' | 'Bytes' | undefined\n    /** Version to tag onto the hashes. */\n    version?: number | undefined\n  }\n\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> =\n    | (as extends 'Bytes' ? readonly Bytes.Bytes[] : never)\n    | (as extends 'Hex' ? readonly Hex.Hex[] : never)\n\n  type ErrorType = commitmentToVersionedHash.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Transforms Ox-shaped {@link ox#Blobs.Blobs} into the originating data.\n *\n * @example\n * ```ts twoslash\n * import { Blobs, Hex } from 'ox'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const data = Blobs.to(blobs) // [!code focus]\n * // @log: '0xdeadbeef'\n * ```\n *\n * @example\n * ### Configuring Return Type\n *\n * It is possible to configure the return type with second argument.\n *\n * ```ts twoslash\n * import { Blobs } from 'ox'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const data = Blobs.to(blobs, 'Bytes')\n * // @log: Uint8Array [ 13, 174, 190, 239 ]\n * ```\n *\n * @param blobs - The {@link ox#Blobs.Blobs} to transform.\n * @param to - The type to transform to.\n * @returns The originating data.\n */\nexport function to<\n  const blobs extends Blobs<Hex.Hex> | Blobs<Bytes.Bytes>,\n  to extends 'Hex' | 'Bytes' =\n    | (blobs extends Blobs<Hex.Hex> ? 'Hex' : never)\n    | (blobs extends Blobs<Bytes.Bytes> ? 'Bytes' : never),\n>(\n  blobs: blobs | Blobs<Hex.Hex> | Blobs<Bytes.Bytes>,\n  to?: to | 'Hex' | 'Bytes' | undefined,\n): to.ReturnType<to> {\n  const to_ = to ?? (typeof blobs[0] === 'string' ? 'Hex' : 'Bytes')\n  const blobs_ = (\n    typeof blobs[0] === 'string'\n      ? blobs.map((x) => Bytes.fromHex(x as Hex.Hex))\n      : blobs\n  ) as Bytes.Bytes[]\n\n  const length = blobs_.reduce((length, blob) => length + blob.length, 0)\n  const data = Cursor.create(new Uint8Array(length))\n  let active = true\n\n  for (const blob of blobs_) {\n    const cursor = Cursor.create(blob)\n    while (active && cursor.position < blob.length) {\n      // First byte will be a zero 0x00 byte – we can skip.\n      cursor.incrementPosition(1)\n\n      let consume = 31\n      if (blob.length - cursor.position < 31)\n        consume = blob.length - cursor.position\n\n      for (const _ in Array.from({ length: consume })) {\n        const byte = cursor.readByte()\n        const isTerminator =\n          byte === 0x80 && !cursor.inspectBytes(cursor.remaining).includes(0x80)\n        if (isTerminator) {\n          active = false\n          break\n        }\n        data.pushByte(byte)\n      }\n    }\n  }\n\n  const trimmedData = data.bytes.slice(0, data.position)\n  return (to_ === 'Hex' ? Hex.fromBytes(trimmedData) : trimmedData) as never\n}\n\nexport declare namespace to {\n  type ReturnType<to extends 'Hex' | 'Bytes' = 'Hex'> =\n    | (to extends 'Bytes' ? Bytes.Bytes : never)\n    | (to extends 'Hex' ? Hex.Hex : never)\n\n  type ErrorType =\n    | Hex.fromBytes.ErrorType\n    | Bytes.fromHex.ErrorType\n    | Cursor.create.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Transforms Ox-shaped {@link ox#Blobs.Blobs} into the originating data.\n *\n * @example\n * ```ts twoslash\n * import { Blobs, Hex } from 'ox'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const data = Blobs.toHex(blobs) // [!code focus]\n * // @log: '0xdeadbeef'\n * ```\n */\nexport function toHex(\n  blobs: Blobs<Hex.Hex> | Blobs<Bytes.Bytes>,\n): toHex.ReturnType {\n  return to(blobs, 'Hex')\n}\n\nexport declare namespace toHex {\n  type ReturnType = to.ReturnType<'Hex'>\n  type ErrorType = to.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Transforms Ox-shaped {@link ox#Blobs.Blobs} into the originating data.\n *\n * @example\n * ```ts\n * import { Blobs, Hex } from 'ox'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const data = Blobs.toBytes(blobs) // [!code focus]\n * // @log: Uint8Array [ 13, 174, 190, 239 ]\n * ```\n */\nexport function toBytes(\n  blobs: Blobs<Hex.Hex> | Blobs<Bytes.Bytes>,\n): toBytes.ReturnType {\n  return to(blobs, 'Bytes')\n}\n\n/**\n * Compute commitments from a list of {@link ox#Blobs.Blobs}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const commitments = Blobs.toCommitments(blobs, { kzg }) // [!code focus]\n * ```\n *\n * @example\n * ### Configuring Return Type\n *\n * It is possible to configure the return type with the `as` option.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const commitments = Blobs.toCommitments(blobs, {\n *   as: 'Bytes', // [!code focus]\n *   kzg,\n * })\n * // @log: [Uint8Array [ ... ], Uint8Array [ ... ]]\n * ```\n *\n * @param blobs - The {@link ox#Blobs.Blobs} to transform to commitments.\n * @param options - Options.\n * @returns The commitments.\n */\nexport function toCommitments<\n  const blobs extends Blobs<Bytes.Bytes> | Blobs<Hex.Hex>,\n  as extends 'Hex' | 'Bytes' =\n    | (blobs extends Blobs<Hex.Hex> ? 'Hex' : never)\n    | (blobs extends Blobs<Bytes.Bytes> ? 'Bytes' : never),\n>(\n  blobs: blobs | Blobs<Bytes.Bytes> | Blobs<Hex.Hex>,\n  options: toCommitments.Options<as>,\n): toCommitments.ReturnType<as> {\n  const { kzg } = options\n\n  const as = options.as ?? (typeof blobs[0] === 'string' ? 'Hex' : 'Bytes')\n  const blobs_ = (\n    typeof blobs[0] === 'string'\n      ? blobs.map((x) => Bytes.fromHex(x as any))\n      : blobs\n  ) as Bytes.Bytes[]\n\n  const commitments: Bytes.Bytes[] = []\n  for (const blob of blobs_)\n    commitments.push(Uint8Array.from(kzg.blobToKzgCommitment(blob)))\n\n  return (\n    as === 'Bytes' ? commitments : commitments.map((x) => Hex.fromBytes(x))\n  ) as never\n}\n\nexport declare namespace toCommitments {\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex'> = {\n    /** KZG implementation. */\n    kzg: Pick<Kzg.Kzg, 'blobToKzgCommitment'>\n    /** Return type. */\n    as?: as | 'Hex' | 'Bytes' | undefined\n  }\n\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex'> = Compute<\n    | (as extends 'Bytes' ? readonly Bytes.Bytes[] : never)\n    | (as extends 'Hex' ? readonly Hex.Hex[] : never)\n  >\n\n  type ErrorType =\n    | Bytes.fromHex.ErrorType\n    | Hex.fromBytes.ErrorType\n    | Errors.GlobalErrorType\n}\n\nexport declare namespace toBytes {\n  type ReturnType = to.ReturnType<'Bytes'>\n  type ErrorType = to.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Compute the proofs for a list of {@link ox#Blobs.Blobs} and their commitments.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const commitments = Blobs.toCommitments(blobs, { kzg })\n * const proofs = Blobs.toProofs(blobs, { commitments, kzg }) // [!code focus]\n * ```\n *\n * @param blobs - The {@link ox#Blobs.Blobs} to compute proofs for.\n * @param options - Options.\n * @returns The Blob proofs.\n */\nexport function toProofs<\n  const blobs extends readonly Bytes.Bytes[] | readonly Hex.Hex[],\n  const commitments extends readonly Bytes.Bytes[] | readonly Hex.Hex[],\n  as extends 'Hex' | 'Bytes' =\n    | (blobs extends readonly Hex.Hex[] ? 'Hex' : never)\n    | (blobs extends readonly Bytes.Bytes[] ? 'Bytes' : never),\n>(\n  blobs: blobs | Blobs<Bytes.Bytes> | Blobs<Hex.Hex>,\n  options: toProofs.Options<blobs, commitments, as>,\n): toProofs.ReturnType<as> {\n  const { kzg } = options\n\n  const as = options.as ?? (typeof blobs[0] === 'string' ? 'Hex' : 'Bytes')\n\n  const blobs_ = (\n    typeof blobs[0] === 'string'\n      ? blobs.map((x) => Bytes.fromHex(x as any))\n      : blobs\n  ) as Bytes.Bytes[]\n  const commitments = (\n    typeof options.commitments[0] === 'string'\n      ? options.commitments.map((x) => Bytes.fromHex(x as any))\n      : options.commitments\n  ) as Bytes.Bytes[]\n\n  const proofs: Bytes.Bytes[] = []\n  for (let i = 0; i < blobs_.length; i++) {\n    const blob = blobs_[i]!\n    const commitment = commitments[i]!\n    proofs.push(Uint8Array.from(kzg.computeBlobKzgProof(blob, commitment)))\n  }\n\n  return (\n    as === 'Bytes' ? proofs : proofs.map((x) => Hex.fromBytes(x))\n  ) as never\n}\n\nexport declare namespace toProofs {\n  type Options<\n    blobs extends Blobs<Bytes.Bytes> | Blobs<Hex.Hex> =\n      | Blobs<Bytes.Bytes>\n      | Blobs<Hex.Hex>,\n    commitments extends readonly Bytes.Bytes[] | readonly Hex.Hex[] =\n      | readonly Bytes.Bytes[]\n      | readonly Hex.Hex[],\n    as extends 'Hex' | 'Bytes' =\n      | (blobs extends Blobs<Hex.Hex> ? 'Hex' : never)\n      | (blobs extends Blobs<Bytes.Bytes> ? 'Bytes' : never),\n  > = {\n    /** Commitments for the blobs. */\n    commitments: (commitments | readonly Bytes.Bytes[] | readonly Hex.Hex[]) &\n      (commitments extends blobs\n        ? {}\n        : `commitments must be the same type as blobs`)\n    /** KZG implementation. */\n    kzg: Pick<Kzg.Kzg, 'computeBlobKzgProof'>\n    /** Return type. */\n    as?: as | 'Hex' | 'Bytes' | undefined\n  }\n\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> =\n    | (as extends 'Bytes' ? readonly Bytes.Bytes[] : never)\n    | (as extends 'Hex' ? readonly Hex.Hex[] : never)\n\n  type ErrorType =\n    | Hex.fromBytes.ErrorType\n    | Bytes.fromHex.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Transforms {@link ox#Blobs.Blobs} into a {@link ox#Blobs.BlobSidecars} array.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const sidecars = Blobs.toSidecars(blobs, { kzg }) // [!code focus]\n * ```\n *\n * @example\n * You can also provide your own commitments and proofs if you do not want `toSidecars`\n * to compute them.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const commitments = Blobs.toCommitments(blobs, { kzg })\n * const proofs = Blobs.toProofs(blobs, { commitments, kzg })\n *\n * const sidecars = Blobs.toSidecars(blobs, { commitments, kzg, proofs }) // [!code focus]\n * ```\n *\n * @param blobs - The {@link ox#Blobs.Blobs} to transform into {@link ox#Blobs.BlobSidecars}.\n * @param options - Options.\n * @returns The {@link ox#Blobs.BlobSidecars}.\n */\nexport function toSidecars<\n  const blobs extends Blobs<Hex.Hex> | Blobs<Bytes.Bytes>,\n>(\n  blobs: blobs,\n  options: toSidecars.Options<blobs>,\n): toSidecars.ReturnType<blobs> {\n  const { kzg } = options\n\n  const commitments = options.commitments ?? toCommitments(blobs, { kzg: kzg! })\n  const proofs =\n    options.proofs ??\n    toProofs(blobs, { commitments: commitments as any, kzg: kzg! })\n\n  const sidecars: Mutable<BlobSidecars> = []\n  for (let i = 0; i < blobs.length; i++)\n    sidecars.push({\n      blob: blobs[i]!,\n      commitment: commitments[i]!,\n      proof: proofs[i]!,\n    })\n\n  return sidecars as never\n}\n\nexport declare namespace toSidecars {\n  type Options<\n    blobs extends Blobs<Hex.Hex> | Blobs<Bytes.Bytes> =\n      | Blobs<Hex.Hex>\n      | Blobs<Bytes.Bytes>,\n  > = {\n    kzg?: Kzg.Kzg | undefined\n  } & OneOf<\n    | {}\n    | {\n        /** Commitment for each blob. */\n        commitments: blobs | readonly Hex.Hex[] | readonly Bytes.Bytes[]\n        /** Proof for each blob. */\n        proofs: blobs | readonly Hex.Hex[] | readonly Bytes.Bytes[]\n      }\n  >\n\n  type ReturnType<blobs extends Blobs<Hex.Hex> | Blobs<Bytes.Bytes>> =\n    UnionCompute<\n      | (blobs extends Blobs<Hex.Hex> ? BlobSidecars<Hex.Hex> : never)\n      | (blobs extends Blobs<Bytes.Bytes> ? BlobSidecars<Bytes.Bytes> : never)\n    >\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Compute Blob Versioned Hashes from a list of {@link ox#Blobs.Blobs}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const versionedHashes = Blobs.toVersionedHashes(blobs, { kzg }) // [!code focus]\n * ```\n *\n * @param blobs - The {@link ox#Blobs.Blobs} to transform into Blob Versioned Hashes.\n * @param options - Options.\n * @returns The Blob Versioned Hashes.\n */\nexport function toVersionedHashes<\n  const blobs extends Blobs<Bytes.Bytes> | Blobs<Hex.Hex>,\n  as extends 'Hex' | 'Bytes' =\n    | (blobs extends Blobs<Hex.Hex> ? 'Hex' : never)\n    | (blobs extends Blobs<Bytes.Bytes> ? 'Bytes' : never),\n>(\n  blobs: blobs | Blobs<Bytes.Bytes> | Blobs<Hex.Hex>,\n  options: toVersionedHashes.Options<as>,\n): toVersionedHashes.ReturnType<as> {\n  const commitments = toCommitments(blobs, options)\n  return commitmentsToVersionedHashes(commitments, options)\n}\n\nexport declare namespace toVersionedHashes {\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex'> = {\n    /** KZG implementation. */\n    kzg: Pick<Kzg.Kzg, 'blobToKzgCommitment'>\n    /** Return type. */\n    as?: as | 'Hex' | 'Bytes' | undefined\n  }\n\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex'> = Compute<\n    | (as extends 'Bytes' ? readonly Bytes.Bytes[] : never)\n    | (as extends 'Hex' ? readonly Hex.Hex[] : never)\n  >\n\n  type ErrorType =\n    | toCommitments.ErrorType\n    | commitmentsToVersionedHashes.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** A list of {@link ox#Blobs.BlobSidecar}. */\nexport type BlobSidecars<\n  type extends Hex.Hex | Bytes.Bytes = Hex.Hex | Bytes.Bytes,\n> = readonly Compute<BlobSidecar<type>>[]\n\n/** Thrown when the blob size is too large. */\nexport class BlobSizeTooLargeError extends Errors.BaseError {\n  override readonly name = 'Blobs.BlobSizeTooLargeError'\n  constructor({ maxSize, size }: { maxSize: number; size: number }) {\n    super('Blob size is too large.', {\n      metaMessages: [`Max: ${maxSize} bytes`, `Given: ${size} bytes`],\n    })\n  }\n}\n\n/** Thrown when the blob is empty. */\nexport class EmptyBlobError extends Errors.BaseError {\n  override readonly name = 'Blobs.EmptyBlobError'\n  constructor() {\n    super('Blob data must not be empty.')\n  }\n}\n\n/** Thrown when the blob versioned hashes are empty. */\nexport class EmptyBlobVersionedHashesError extends Errors.BaseError {\n  override readonly name = 'Blobs.EmptyBlobVersionedHashesError'\n  constructor() {\n    super('Blob versioned hashes must not be empty.')\n  }\n}\n\n/** Thrown when the blob versioned hash size is invalid. */\nexport class InvalidVersionedHashSizeError extends Errors.BaseError {\n  override readonly name = 'Blobs.InvalidVersionedHashSizeError'\n  constructor({\n    hash,\n    size,\n  }: {\n    hash: Hex.Hex\n    size: number\n  }) {\n    super(`Versioned hash \"${hash}\" size is invalid.`, {\n      metaMessages: ['Expected: 32', `Received: ${size}`],\n    })\n  }\n}\n\n/** Thrown when the blob versioned hash version is invalid. */\nexport class InvalidVersionedHashVersionError extends Errors.BaseError {\n  override readonly name = 'Blobs.InvalidVersionedHashVersionError'\n  constructor({\n    hash,\n    version,\n  }: {\n    hash: Hex.Hex\n    version: number\n  }) {\n    super(`Versioned hash \"${hash}\" version is invalid.`, {\n      metaMessages: [\n        `Expected: ${Kzg.versionedHashVersion}`,\n        `Received: ${version}`,\n      ],\n    })\n  }\n}\n", "import type * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\n\n/** @see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-4844.md#parameters */\nexport const versionedHashVersion = 1\n\n/** Root type for a KZG interface. */\nexport type Kzg = {\n  /**\n   * Convert a blob to a KZG commitment.\n   */\n  blobToKzgCommitment(blob: Bytes.Bytes): Bytes.Bytes\n  /**\n   * Given a blob, return the KZG proof that is used to verify it against the\n   * commitment.\n   */\n  computeBlobKzgProof(blob: Bytes.Bytes, commitment: Bytes.Bytes): Bytes.Bytes\n}\n\n/**\n * Defines a KZG interface.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import * as cKzg from 'c-kzg'\n * import { Kzg } from 'ox'\n * import { Paths } from 'ox/trusted-setups'\n *\n * cKzg.loadTrustedSetup(Paths.mainnet)\n *\n * const kzg = Kzg.from(cKzg)\n * ```\n *\n * @param value - The KZG object to convert.\n * @returns The KZG interface object.\n */\nexport function from(value: Kzg): Kzg {\n  const { blobToKzgCommitment, computeBlobKzgProof } = value\n  return {\n    blobToKzgCommitment,\n    computeBlobKzgProof,\n  }\n}\n\nexport declare namespace from {\n  type ErrorType = Errors.GlobalErrorType\n}\n", "import type * as Address from './Address.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport * as Transaction from './Transaction.js'\nimport * as Withdrawal from './Withdrawal.js'\nimport type { Compute, OneOf } from './internal/types.js'\n\n/** A Block as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/block.yaml). */\nexport type Block<\n  includeTransactions extends boolean = false,\n  blockTag extends Tag = 'latest',\n  bigintType = bigint,\n  numberType = number,\n  transaction = Transaction.Transaction<\n    blockTag extends 'pending' ? true : false,\n    bigintType,\n    numberType\n  >,\n> = Compute<{\n  /** Base fee per gas */\n  baseFeePerGas?: bigintType | undefined\n  /** Total used blob gas by all transactions in this block */\n  blobGasUsed?: bigintType | undefined\n  /** Difficulty for this block */\n  difficulty?: bigintType | undefined\n  /** Excess blob gas */\n  excessBlobGas?: bigintType | undefined\n  /** \"Extra data\" field of this block */\n  extraData?: Hex.Hex | undefined\n  /** Maximum gas allowed in this block */\n  gasLimit: bigintType\n  /** Total used gas by all transactions in this block */\n  gasUsed: bigintType\n  /** Block hash or `null` if pending */\n  hash: blockTag extends 'pending' ? null : Hex.Hex\n  /** Logs bloom filter or `null` if pending */\n  logsBloom: blockTag extends 'pending' ? null : Hex.Hex\n  /** Address that received this block’s mining rewards */\n  miner: Address.Address\n  /** Unique identifier for the block. */\n  mixHash: Hex.Hex\n  /** Proof-of-work hash or `null` if pending */\n  nonce: blockTag extends 'pending' ? null : Hex.Hex\n  /** Block number or `null` if pending */\n  number: blockTag extends 'pending' ? null : bigintType\n  parentBeaconBlockRoot?: Hex.Hex | undefined\n  /** Parent block hash */\n  parentHash: Hex.Hex\n  /** Root of the this block’s receipts trie */\n  receiptsRoot: Hex.Hex\n  sealFields?: readonly Hex.Hex[] | undefined\n  /** SHA3 of the uncles data in this block */\n  sha3Uncles: Hex.Hex\n  /** Size of this block in bytes */\n  size: bigintType\n  /** Root of this block’s final state trie */\n  stateRoot: Hex.Hex\n  /** Unix timestamp of when this block was collated */\n  timestamp: bigintType\n  /** Total difficulty of the chain until this block */\n  totalDifficulty?: bigintType | undefined\n  /** List of transaction objects or hashes */\n  transactions: includeTransactions extends true\n    ? readonly transaction[]\n    : readonly Hex.Hex[]\n  /** Root of this block’s transaction trie */\n  transactionsRoot: Hex.Hex\n  /** List of uncle hashes */\n  uncles: readonly Hex.Hex[]\n  /** List of withdrawal objects */\n  withdrawals?:\n    | readonly Withdrawal.Withdrawal<bigintType, numberType>[]\n    | undefined\n  /** Root of the this block’s withdrawals trie */\n  withdrawalsRoot?: Hex.Hex | undefined\n}>\n\n/** A Block hash. */\nexport type Hash = Hex.Hex\n\n/** A Block identifier. */\nexport type Identifier<bigintType = bigint> = {\n  /** Whether or not to throw an error if the block is not in the canonical chain as described below. Only allowed in conjunction with the blockHash tag. Defaults to false. */\n  requireCanonical?: boolean | undefined\n} & OneOf<\n  | {\n      /** The block in the canonical chain with this number */\n      blockNumber: Number<bigintType>\n    }\n  | {\n      /** The block uniquely identified by this hash. The `blockNumber` and `blockHash` properties are mutually exclusive; exactly one of them must be set. */\n      blockHash: Hash\n    }\n>\n\n/** A Block number. */\nexport type Number<bigintType = bigint> = bigintType\n\n/** An RPC Block as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/block.yaml). */\nexport type Rpc<\n  includeTransactions extends boolean = boolean,\n  blockTag extends Tag = 'latest',\n  transaction = Transaction.Rpc<blockTag extends 'pending' ? true : false>,\n> = Block<includeTransactions, blockTag, Hex.Hex, Hex.Hex, transaction>\n\n/**\n * A Block Tag as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/block.yaml).\n *\n * - `earliest`: The lowest numbered block the client has available;\n * - `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination;\n * - `safe`: The most recent block that is safe from re-orgs under honest majority and certain synchronicity assumptions;\n * - `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions;\n * - `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool.\n */\nexport type Tag = 'latest' | 'earliest' | 'pending' | 'safe' | 'finalized'\n\n/**\n * Converts a {@link ox#Block.Block} to an {@link ox#Block.Rpc}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Block } from 'ox'\n *\n * const block = Block.toRpc({\n *   // ...\n *   hash: '0xebc3644804e4040c0a74c5a5bbbc6b46a71a5d4010fe0c92ebb2fdf4a43ea5dd',\n *   number: 19868020n,\n *   size: 520n\n *   timestamp: 1662222222n,\n *   // ...\n * })\n * // @log: {\n * // @log:   // ...\n * // @log:   hash: '0xebc3644804e4040c0a74c5a5bbbc6b46a71a5d4010fe0c92ebb2fdf4a43ea5dd',\n * // @log:   number: '0xec6fc6',\n * // @log:   size: '0x208',\n * // @log:   timestamp: '0x63198f6f',\n * // @log:   // ...\n * // @log: }\n * ```\n *\n * @param block - The Block to convert.\n * @returns An RPC Block.\n */\nexport function toRpc<\n  includeTransactions extends boolean = false,\n  blockTag extends Tag = 'latest',\n>(\n  block: Block<includeTransactions, blockTag>,\n  _options: toRpc.Options<includeTransactions, blockTag> = {},\n): Rpc<boolean, blockTag> {\n  const transactions = block.transactions.map((transaction) => {\n    if (typeof transaction === 'string') return transaction\n    return Transaction.toRpc(transaction as any) as any\n  })\n  return {\n    baseFeePerGas:\n      typeof block.baseFeePerGas === 'bigint'\n        ? Hex.fromNumber(block.baseFeePerGas)\n        : undefined,\n    blobGasUsed:\n      typeof block.blobGasUsed === 'bigint'\n        ? Hex.fromNumber(block.blobGasUsed)\n        : undefined,\n    excessBlobGas:\n      typeof block.excessBlobGas === 'bigint'\n        ? Hex.fromNumber(block.excessBlobGas)\n        : undefined,\n    extraData: block.extraData,\n    difficulty:\n      typeof block.difficulty === 'bigint'\n        ? Hex.fromNumber(block.difficulty)\n        : undefined,\n    gasLimit: Hex.fromNumber(block.gasLimit),\n    gasUsed: Hex.fromNumber(block.gasUsed),\n    hash: block.hash,\n    logsBloom: block.logsBloom,\n    miner: block.miner,\n    mixHash: block.mixHash,\n    nonce: block.nonce,\n    number: (typeof block.number === 'bigint'\n      ? Hex.fromNumber(block.number)\n      : null) as never,\n    parentBeaconBlockRoot: block.parentBeaconBlockRoot,\n    parentHash: block.parentHash,\n    receiptsRoot: block.receiptsRoot,\n    sealFields: block.sealFields,\n    sha3Uncles: block.sha3Uncles,\n    size: Hex.fromNumber(block.size),\n    stateRoot: block.stateRoot,\n    timestamp: Hex.fromNumber(block.timestamp),\n    totalDifficulty:\n      typeof block.totalDifficulty === 'bigint'\n        ? Hex.fromNumber(block.totalDifficulty)\n        : undefined,\n    transactions,\n    transactionsRoot: block.transactionsRoot,\n    uncles: block.uncles,\n    withdrawals: block.withdrawals?.map(Withdrawal.toRpc),\n    withdrawalsRoot: block.withdrawalsRoot,\n  }\n}\n\nexport declare namespace toRpc {\n  type Options<\n    includeTransactions extends boolean = false,\n    blockTag extends Tag = 'latest',\n  > = {\n    blockTag?: blockTag | Tag | undefined\n    includeTransactions?: includeTransactions | boolean | undefined\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#Block.Rpc} to an {@link ox#Block.Block}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Block } from 'ox'\n *\n * const block = Block.fromRpc({\n *   // ...\n *   hash: '0xebc3644804e4040c0a74c5a5bbbc6b46a71a5d4010fe0c92ebb2fdf4a43ea5dd',\n *   number: '0xec6fc6',\n *   size: '0x208',\n *   timestamp: '0x63198f6f',\n *   // ...\n * })\n * // @log: {\n * // @log:   // ...\n * // @log:   hash: '0xebc3644804e4040c0a74c5a5bbbc6b46a71a5d4010fe0c92ebb2fdf4a43ea5dd',\n * // @log:   number: 19868020n,\n * // @log:   size: 520n,\n * // @log:   timestamp: 1662222222n,\n * // @log:   // ...\n * // @log: }\n * ```\n *\n * @example\n * ### End-to-end\n *\n * Below is an end-to-end example of using `Block.fromRpc` to fetch a block from the network and convert it to an {@link ox#Block.Block}.\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { Block } from 'ox'\n *\n * const block = await window.ethereum!\n *   .request({\n *     method: 'eth_getBlockByNumber',\n *     params: ['latest', false],\n *   })\n *   .then(Block.fromRpc) // [!code hl]\n * // @log: {\n * // @log:   // ...\n * // @log:   hash: '0xebc3644804e4040c0a74c5a5bbbc6b46a71a5d4010fe0c92ebb2fdf4a43ea5dd',\n * // @log:   number: 19868020n,\n * // @log:   size: 520n,\n * // @log:   timestamp: 1662222222n,\n * // @log:   // ...\n * // @log: }\n * ```\n *\n * :::note\n *\n * For simplicity, the above example uses `window.ethereum.request`, but you can use any\n * type of JSON-RPC interface.\n *\n * :::\n *\n * @param block - The RPC block to convert.\n * @returns An instantiated {@link ox#Block.Block}.\n */\nexport function fromRpc<\n  const block extends Rpc | null,\n  includeTransactions extends boolean = false,\n  blockTag extends Tag = 'latest',\n>(\n  block: block | Rpc | null,\n  _options: fromRpc.Options<includeTransactions, blockTag> = {},\n): block extends Rpc ? Block<includeTransactions, blockTag> : null {\n  if (!block) return null as never\n\n  const transactions = block.transactions.map((transaction) => {\n    if (typeof transaction === 'string') return transaction\n    return Transaction.fromRpc(transaction) as any\n  })\n  return {\n    ...block,\n    baseFeePerGas: block.baseFeePerGas\n      ? BigInt(block.baseFeePerGas)\n      : undefined,\n    blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : undefined,\n    difficulty: block.difficulty ? BigInt(block.difficulty) : undefined,\n    excessBlobGas: block.excessBlobGas\n      ? BigInt(block.excessBlobGas)\n      : undefined,\n    gasLimit: BigInt(block.gasLimit ?? 0n),\n    gasUsed: BigInt(block.gasUsed ?? 0n),\n    number: block.number ? BigInt(block.number) : null,\n    size: BigInt(block.size ?? 0n),\n    stateRoot: block.stateRoot,\n    timestamp: BigInt(block.timestamp ?? 0n),\n    totalDifficulty: BigInt(block.totalDifficulty ?? 0n),\n    transactions,\n    withdrawals: block.withdrawals?.map(Withdrawal.fromRpc),\n  } as Block as never\n}\n\nexport declare namespace fromRpc {\n  type Options<\n    includeTransactions extends boolean = false,\n    blockTag extends Tag = 'latest',\n  > = {\n    blockTag?: blockTag | Tag | undefined\n    includeTransactions?: includeTransactions | boolean | undefined\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n", "import type * as AccessList from './AccessList.js'\nimport type * as Address from './Address.js'\nimport * as Authorization from './Authorization.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport * as Signature from './Signature.js'\nimport type { Compute, UnionCompute } from './internal/types.js'\nimport type { OneOf } from './internal/types.js'\n\n/**\n * A Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml).\n */\nexport type Transaction<\n  pending extends boolean = false,\n  bigintType = bigint,\n  numberType = number,\n> = UnionCompute<\n  OneOf<\n    | Legacy<pending, bigintType, numberType>\n    | Eip1559<pending, bigintType, numberType>\n    | Eip2930<pending, bigintType, numberType>\n    | Eip4844<pending, bigintType, numberType>\n    | Eip7702<pending, bigintType, numberType>\n    | (Base & { type: Hex.Hex })\n  >\n>\n\n/**\n * An RPC Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml).\n */\nexport type Rpc<pending extends boolean = false> = UnionCompute<\n  OneOf<\n    | LegacyRpc<pending>\n    | Eip1559Rpc<pending>\n    | Eip2930Rpc<pending>\n    | Eip4844Rpc<pending>\n    | Eip7702Rpc<pending>\n    | (BaseRpc & { type: Hex.Hex })\n  >\n>\n\n/** Base properties of a Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type Base<\n  type extends string = string,\n  pending extends boolean = false,\n  bigintType = bigint,\n  numberType = number,\n> = Compute<{\n  /** Hash of the block that contains this transaction, or `null` if pending. */\n  blockHash: pending extends true ? null : Hex.Hex\n  /** Number of block containing this transaction or `null` if pending */\n  blockNumber: pending extends true ? null : bigintType\n  /** Chain ID that this transaction is valid on. */\n  chainId: numberType\n  /** @alias `input` Added for TransactionEnvelope - Transaction compatibility. */\n  data?: Hex.Hex | undefined\n  /** Sender of this transaction */\n  from: Address.Address\n  /** Hash of this transaction */\n  hash: Hex.Hex\n  /** Contract code or a hashed method call with encoded args */\n  input: Hex.Hex\n  /** Gas provided for transaction execution */\n  gas: bigintType\n  /** Unique number identifying this transaction */\n  nonce: bigintType\n  /** Transaction recipient. `null` if the transaction is a contract creation. */\n  to: Address.Address | null\n  /** Index of this transaction in the block or `null` if pending */\n  transactionIndex: pending extends true ? null : numberType\n  /** Transaction type */\n  type: type\n  /** Value in wei sent with this transaction */\n  value: bigintType\n  /** ECDSA signature r. */\n  r: bigintType\n  /** ECDSA signature s. */\n  s: bigintType\n  /** ECDSA signature yParity. */\n  yParity: numberType\n  /** @deprecated ECDSA signature v (for backwards compatibility). */\n  v?: numberType | undefined\n}>\n\n/** Base properties of an RPC Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type BaseRpc<\n  type extends string = string,\n  pending extends boolean = false,\n> = Base<type, pending, Hex.Hex, Hex.Hex>\n\n/** An [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type Eip1559<\n  pending extends boolean = false,\n  bigintType = bigint,\n  numberType = number,\n  type extends string = 'eip1559',\n> = Compute<\n  Base<type, pending, bigintType, numberType> & {\n    /** EIP-2930 Access List. */\n    accessList: AccessList.AccessList\n    /** Effective gas price paid by the sender in wei. */\n    gasPrice?: bigintType | undefined\n    /** Total fee per gas in wei (gasPrice/baseFeePerGas + maxPriorityFeePerGas). */\n    maxFeePerGas: bigintType\n    /** Max priority fee per gas (in wei). */\n    maxPriorityFeePerGas: bigintType\n  }\n>\n\n/** An [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) RPC Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type Eip1559Rpc<pending extends boolean = false> = Compute<\n  Eip1559<pending, Hex.Hex, Hex.Hex, ToRpcType['eip1559']>\n>\n\n/** An [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930) Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type Eip2930<\n  pending extends boolean = false,\n  bigintType = bigint,\n  numberType = number,\n  type extends string = 'eip2930',\n> = Compute<\n  Base<type, pending, bigintType, numberType> & {\n    /** EIP-2930 Access List. */\n    accessList: AccessList.AccessList\n    /** The gas price willing to be paid by the sender (in wei). */\n    gasPrice: bigintType\n  }\n>\n\n/** An RPC [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930) Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type Eip2930Rpc<pending extends boolean = false> = Compute<\n  Eip2930<pending, Hex.Hex, Hex.Hex, ToRpcType['eip2930']>\n>\n\n/** An [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844) Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type Eip4844<\n  pending extends boolean = false,\n  bigintType = bigint,\n  numberType = number,\n  type extends string = 'eip4844',\n> = Compute<\n  Base<type, pending, bigintType, numberType> & {\n    /** EIP-2930 Access List. */\n    accessList: AccessList.AccessList\n    /** List of versioned blob hashes associated with the transaction's blobs. */\n    blobVersionedHashes: readonly Hex.Hex[]\n    /** Total fee per blob gas in wei. */\n    maxFeePerBlobGas: bigintType\n    /** Total fee per gas in wei (gasPrice/baseFeePerGas + maxPriorityFeePerGas). */\n    maxFeePerGas: bigintType\n    /** Max priority fee per gas (in wei). */\n    maxPriorityFeePerGas: bigintType\n  }\n>\n\n/** An RPC [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844) Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type Eip4844Rpc<pending extends boolean = false> = Compute<\n  Eip4844<pending, Hex.Hex, Hex.Hex, ToRpcType['eip4844']>\n>\n\n/** An [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type Eip7702<\n  pending extends boolean = false,\n  bigintType = bigint,\n  numberType = number,\n  type extends string = 'eip7702',\n> = Compute<\n  Base<type, pending, bigintType, numberType> & {\n    /** EIP-2930 Access List. */\n    accessList: AccessList.AccessList\n    /** EIP-7702 Authorization list for the transaction. */\n    authorizationList: Authorization.ListSigned<bigintType, numberType>\n    /** Total fee per gas in wei (gasPrice/baseFeePerGas + maxPriorityFeePerGas). */\n    maxFeePerGas: bigintType\n    /** Max priority fee per gas (in wei). */\n    maxPriorityFeePerGas: bigintType\n  }\n>\n\n/** An RPC [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type Eip7702Rpc<pending extends boolean = false> = Compute<\n  Eip7702<pending, Hex.Hex, Hex.Hex, ToRpcType['eip7702']>\n>\n\n/** An legacy Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type Legacy<\n  pending extends boolean = false,\n  bigintType = bigint,\n  numberType = number,\n  type extends string = 'legacy',\n> = Compute<\n  Omit<\n    Base<type, pending, bigintType, numberType>,\n    'chainId' | 'v' | 'yParity'\n  > & {\n    chainId?: numberType | undefined\n    /** The gas price willing to be paid by the sender (in wei). */\n    gasPrice: bigintType\n    /** ECDSA signature v. */\n    v: numberType\n    /** ECDSA signature yParity. */\n    yParity?: numberType | undefined\n  }\n>\n\n/** A legacy RPC Transaction as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml). */\nexport type LegacyRpc<pending extends boolean = false> = Compute<\n  Legacy<pending, Hex.Hex, Hex.Hex, ToRpcType['legacy']>\n>\n\n/** Type to RPC Type mapping. */\nexport const toRpcType = {\n  legacy: '0x0',\n  eip2930: '0x1',\n  eip1559: '0x2',\n  eip4844: '0x3',\n  eip7702: '0x4',\n} as const\n\n/** Type to RPC Type mapping. */\nexport type ToRpcType = typeof toRpcType & {\n  [type: string]: `0x${string}`\n}\n\n/** RPC Type to Type mapping. */\nexport const fromRpcType = {\n  '0x0': 'legacy',\n  '0x1': 'eip2930',\n  '0x2': 'eip1559',\n  '0x3': 'eip4844',\n  '0x4': 'eip7702',\n} as const\n\n/** RPC Type to Type mapping. */\n\nexport type FromRpcType = typeof fromRpcType & {\n  [type: `0x${string}`]: string\n}\n\n/**\n * Converts an {@link ox#Transaction.Rpc} to an {@link ox#Transaction.Transaction}.\n *\n * @example\n * ```ts twoslash\n * import { Transaction } from 'ox'\n *\n * const transaction = Transaction.fromRpc({\n *   hash: '0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0',\n *   nonce: '0x357',\n *   blockHash:\n *     '0xc350d807505fb835650f0013632c5515592987ba169bbc6626d9fc54d91f0f0b',\n *   blockNumber: '0x12f296f',\n *   transactionIndex: '0x2',\n *   from: '0x814e5e0e31016b9a7f138c76b7e7b2bb5c1ab6a6',\n *   to: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad',\n *   value: '0x9b6e64a8ec60000',\n *   gas: '0x43f5d',\n *   maxFeePerGas: '0x2ca6ae494',\n *   maxPriorityFeePerGas: '0x41cc3c0',\n *   input:\n *     '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006643504700000000000000000000000000000000000000000000000000000000000000040b080604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009b6e64a8ec600000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009b6e64a8ec60000000000000000000000000000000000000000000000000000019124bb5ae978c000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b80000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b8000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c00000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000190240001b9872b',\n *   r: '0x635dc2033e60185bb36709c29c75d64ea51dfbd91c32ef4be198e4ceb169fb4d',\n *   s: '0x50c2667ac4c771072746acfdcf1f1483336dcca8bd2df47cd83175dbe60f0540',\n *   yParity: '0x0',\n *   chainId: '0x1',\n *   accessList: [],\n *   type: '0x2',\n * })\n * ```\n *\n * @param transaction - The RPC transaction to convert.\n * @returns An instantiated {@link ox#Transaction.Transaction}.\n */\nexport function fromRpc<\n  const transaction extends Rpc | null,\n  pending extends boolean = false,\n>(\n  transaction: transaction | Rpc<pending> | null,\n  _options: fromRpc.Options<pending> = {},\n): transaction extends Rpc<pending> ? Transaction<pending> : null {\n  if (!transaction) return null as never\n\n  const signature = Signature.extract(transaction)\n\n  const transaction_ = {\n    ...transaction,\n    ...signature,\n  } as unknown as Transaction<boolean>\n\n  transaction_.blockNumber = transaction.blockNumber\n    ? BigInt(transaction.blockNumber)\n    : null\n  transaction_.data = transaction.input\n  transaction_.gas = BigInt(transaction.gas ?? 0n)\n  transaction_.nonce = BigInt(transaction.nonce ?? 0n)\n  transaction_.transactionIndex = transaction.transactionIndex\n    ? Number(transaction.transactionIndex)\n    : null\n  transaction_.value = BigInt(transaction.value ?? 0n)\n\n  if (transaction.authorizationList)\n    transaction_.authorizationList = Authorization.fromRpcList(\n      transaction.authorizationList,\n    )\n  if (transaction.chainId) transaction_.chainId = Number(transaction.chainId)\n  if (transaction.gasPrice) transaction_.gasPrice = BigInt(transaction.gasPrice)\n  if (transaction.maxFeePerBlobGas)\n    transaction_.maxFeePerBlobGas = BigInt(transaction.maxFeePerBlobGas)\n  if (transaction.maxFeePerGas)\n    transaction_.maxFeePerGas = BigInt(transaction.maxFeePerGas)\n  if (transaction.maxPriorityFeePerGas)\n    transaction_.maxPriorityFeePerGas = BigInt(transaction.maxPriorityFeePerGas)\n  if (transaction.type)\n    transaction_.type =\n      (fromRpcType as any)[transaction.type] ?? transaction.type\n  if (signature) transaction_.v = Signature.yParityToV(signature.yParity)\n\n  return transaction_ as never\n}\n\nexport declare namespace fromRpc {\n  type Options<pending extends boolean = false> = {\n    pending?: pending | boolean | undefined\n  }\n\n  type ErrorType = Signature.extract.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#Transaction.Transaction} to an {@link ox#Transaction.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { Transaction } from 'ox'\n *\n * const transaction = Transaction.toRpc({\n *   accessList: [],\n *   blockHash:\n *     '0xc350d807505fb835650f0013632c5515592987ba169bbc6626d9fc54d91f0f0b',\n *   blockNumber: 19868015n,\n *   chainId: 1,\n *   from: '0x814e5e0e31016b9a7f138c76b7e7b2bb5c1ab6a6',\n *   gas: 278365n,\n *   hash: '0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0',\n *   input:\n *     '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006643504700000000000000000000000000000000000000000000000000000000000000040b080604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009b6e64a8ec600000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009b6e64a8ec60000000000000000000000000000000000000000000000000000019124bb5ae978c000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b80000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b8000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c00000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000190240001b9872b',\n *   maxFeePerGas: 11985937556n,\n *   maxPriorityFeePerGas: 68993984n,\n *   nonce: 855n,\n *   r: 44944627813007772897391531230081695102703289123332187696115181104739239197517n,\n *   s: 36528503505192438307355164441104001310566505351980369085208178712678799181120n,\n *   to: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad',\n *   transactionIndex: 2,\n *   type: 'eip1559',\n *   v: 27,\n *   value: 700000000000000000n,\n *   yParity: 0,\n * })\n * ```\n *\n * @param transaction - The transaction to convert.\n * @returns An RPC-formatted transaction.\n */\nexport function toRpc<pending extends boolean = false>(\n  transaction: Transaction<pending>,\n  _options?: toRpc.Options<pending>,\n): Rpc<pending> {\n  const rpc = {} as Rpc<boolean>\n\n  rpc.blockHash = transaction.blockHash\n  rpc.blockNumber =\n    typeof transaction.blockNumber === 'bigint'\n      ? Hex.fromNumber(transaction.blockNumber)\n      : null\n  rpc.from = transaction.from\n  rpc.gas = Hex.fromNumber(transaction.gas ?? 0n)\n  rpc.hash = transaction.hash\n  rpc.input = transaction.input\n  rpc.nonce = Hex.fromNumber(transaction.nonce ?? 0n)\n  rpc.to = transaction.to\n  rpc.transactionIndex = transaction.transactionIndex\n    ? Hex.fromNumber(transaction.transactionIndex)\n    : null\n  rpc.type = (toRpcType as any)[transaction.type] ?? transaction.type\n  rpc.value = Hex.fromNumber(transaction.value ?? 0n)\n\n  if (transaction.accessList) rpc.accessList = transaction.accessList\n  if (transaction.authorizationList)\n    rpc.authorizationList = Authorization.toRpcList(\n      transaction.authorizationList,\n    )\n  if (transaction.blobVersionedHashes)\n    rpc.blobVersionedHashes = transaction.blobVersionedHashes\n  if (transaction.chainId) rpc.chainId = Hex.fromNumber(transaction.chainId)\n  if (typeof transaction.gasPrice === 'bigint')\n    rpc.gasPrice = Hex.fromNumber(transaction.gasPrice)\n  if (typeof transaction.maxFeePerBlobGas === 'bigint')\n    rpc.maxFeePerBlobGas = Hex.fromNumber(transaction.maxFeePerBlobGas)\n  if (typeof transaction.maxFeePerGas === 'bigint')\n    rpc.maxFeePerGas = Hex.fromNumber(transaction.maxFeePerGas)\n  if (typeof transaction.maxPriorityFeePerGas === 'bigint')\n    rpc.maxPriorityFeePerGas = Hex.fromNumber(transaction.maxPriorityFeePerGas)\n  if (typeof transaction.r === 'bigint')\n    rpc.r = Hex.fromNumber(transaction.r, { size: 32 })\n  if (typeof transaction.s === 'bigint')\n    rpc.s = Hex.fromNumber(transaction.s, { size: 32 })\n  if (typeof transaction.v === 'number')\n    rpc.v = Hex.fromNumber(transaction.v, { size: 1 })\n  if (typeof transaction.yParity === 'number')\n    rpc.yParity = transaction.yParity === 0 ? '0x0' : '0x1'\n\n  return rpc as Rpc<pending>\n}\n\nexport declare namespace toRpc {\n  type Options<pending extends boolean = false> = {\n    pending?: pending | boolean | undefined\n  }\n\n  type ErrorType = Signature.extract.ErrorType | Errors.GlobalErrorType\n}\n", "import * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as Hex from './Hex.js'\n\n/**\n * Checks if an input is matched in the bloom filter.\n *\n * @example\n * ```ts twoslash\n * import { Bloom } from 'ox'\n *\n * Bloom.contains(\n *   '0xn *   '0xef2d6d194084c2de36e0dabfce45d046b37d1106',\n * )\n * // @log: true\n * ```\n *\n * @param bloom - Bloom filter value.\n * @param input - Input to check.\n * @returns Whether the input is matched in the bloom filter.\n */\nexport function contains(\n  bloom: Hex.Hex,\n  input: Hex.Hex | Bytes.Bytes,\n): boolean {\n  const filter = Bytes.fromHex(bloom)\n  const hash = Hash.keccak256(input, { as: 'Bytes' })\n\n  for (const i of [0, 2, 4]) {\n    const bit = (hash[i + 1]! + (hash[i]! << 8)) & 0x7ff\n    if ((filter[256 - 1 - Math.floor(bit / 8)]! & (1 << (bit % 8))) === 0)\n      return false\n  }\n\n  return true\n}\n\nexport declare namespace contains {\n  type ErrorType =\n    | Bytes.fromHex.ErrorType\n    | Hash.keccak256.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Checks if a string is a valid bloom filter value.\n *\n * @example\n * ```ts twoslash\n * import { Bloom } from 'ox'\n *\n * Bloom.validate('0x')\n * // @log: false\n *\n * Bloom.validate('0xn * // @log: true\n * ```\n *\n * @param value - Value to check.\n * @returns Whether the value is a valid bloom filter.\n */\nexport function validate(value: string): value is Hex.Hex {\n  return Hex.validate(value) && Hex.size(value) === 256\n}\n\nexport declare namespace validate {\n  type ErrorType =\n    | Hex.validate.ErrorType\n    | Hex.size.ErrorType\n    | Errors.GlobalErrorType\n}\n", "import type { ProjPointType } from '@noble/curves/abstract/weierstrass'\nimport { bls12_381 as bls } from '@noble/curves/bls12-381'\n\nimport type * as BlsPoint from './BlsPoint.js'\nimport * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport type { OneOf } from './internal/types.js'\n\nexport type Size = 'short-key:long-sig' | 'long-key:short-sig'\n\n/** Re-export of noble/curves BLS12-381 utilities. */\nexport const noble = bls\n\n/**\n * Aggregates a set of BLS points that are either on the G1 or G2 curves (ie. public keys or signatures).\n *\n * @example\n * ### Aggregating Signatures\n *\n * ```ts twoslash\n * import { Bls, Hex } from 'ox'\n *\n * const payload = Hex.random(32)\n *\n * const signatures = [\n *   Bls.sign({ payload, privateKey: '0x...' }),\n *   Bls.sign({ payload, privateKey: '0x...' }),\n * ]\n * const signature = Bls.aggregate(signatures)\n * ```\n *\n * @example\n * ### Aggregating Public Keys\n *\n * ```ts twoslash\n * import { Bls } from 'ox'\n *\n * const publicKeys = [\n *   Bls.getPublicKey({ privateKey: '0x...' }),\n *   Bls.getPublicKey({ privateKey: '0x...' }),\n * ]\n * const publicKey = Bls.aggregate(publicKeys)\n * ```\n *\n * @param points - The points to aggregate.\n * @returns The aggregated point.\n */\nexport function aggregate<const points extends readonly BlsPoint.BlsPoint[]>(\n  points: points,\n): points extends readonly BlsPoint.G1[] ? BlsPoint.G1 : BlsPoint.G2\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function aggregate(\n  points: readonly BlsPoint.BlsPoint[],\n): BlsPoint.BlsPoint {\n  const group = typeof points[0]?.x === 'bigint' ? bls.G1 : bls.G2\n  const point = points.reduce(\n    (acc, point) =>\n      acc.add(new (group as any).ProjectivePoint(point.x, point.y, point.z)),\n    group.ProjectivePoint.ZERO,\n  )\n  return {\n    x: point.px,\n    y: point.py,\n    z: point.pz,\n  }\n}\n\nexport declare namespace aggregate {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Computes the BLS12-381 public key from a provided private key.\n *\n * Public Keys can be derived as a point on one of the BLS12-381 groups:\n *\n * - G1 Point (Default):\n *   - short (48 bytes)\n *   - computes longer G2 Signatures (96 bytes)\n * - G2 Point:\n *   - long (96 bytes)\n *   - computes short G1 Signatures (48 bytes)\n *\n * @example\n * ### Short G1 Public Keys (Default)\n *\n * ```ts twoslash\n * import { Bls } from 'ox'\n *\n * const publicKey = Bls.getPublicKey({ privateKey: '0x...' })\n * //    ^?\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Long G2 Public Keys\n *\n * A G2 Public Key can be derived as a G2 point (96 bytes) using `size: 'long-key:short-sig'`.\n *\n * This will allow you to compute G1 Signatures (48 bytes) with {@link ox#Bls.(sign:function)}.\n *\n * ```ts twoslash\n * import { Bls } from 'ox'\n *\n * const publicKey = Bls.getPublicKey({\n *   privateKey: '0x...',\n *   size: 'long-key:short-sig',\n * })\n *\n * publicKey\n * // ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * ### Serializing\n *\n * Public Keys can be serialized to hex or bytes using {@link ox#BlsPoint.(toHex:function)} or {@link ox#BlsPoint.(toBytes:function)}:\n *\n * ```ts twoslash\n * import { Bls, BlsPoint } from 'ox'\n *\n * const publicKey = Bls.getPublicKey({ privateKey: '0x...' })\n *\n * const publicKeyHex = BlsPoint.toHex(publicKey)\n * //    ^?\n *\n *\n * const publicKeyBytes = BlsPoint.toBytes(publicKey)\n * //    ^?\n *\n * ```\n *\n * They can also be deserialized from hex or bytes using {@link ox#BlsPoint.(fromHex:function)} or {@link ox#BlsPoint.(fromBytes:function)}:\n *\n * ```ts twoslash\n * import { Bls, BlsPoint } from 'ox'\n *\n * const publicKeyHex = '0x...'\n *\n * const publicKey = BlsPoint.fromHex(publicKeyHex, 'G1')\n * //    ^?\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @param options - The options to compute the public key.\n * @returns The computed public key.\n */\nexport function getPublicKey<size extends Size = 'short-key:long-sig'>(\n  options: getPublicKey.Options<size>,\n): size extends 'short-key:long-sig' ? BlsPoint.G1 : BlsPoint.G2\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function getPublicKey(options: getPublicKey.Options): BlsPoint.BlsPoint {\n  const { privateKey, size = 'short-key:long-sig' } = options\n  const group = size === 'short-key:long-sig' ? bls.G1 : bls.G2\n  const { px, py, pz } = group.ProjectivePoint.fromPrivateKey(\n    Hex.from(privateKey).slice(2),\n  )\n  return { x: px, y: py, z: pz }\n}\n\nexport declare namespace getPublicKey {\n  type Options<size extends Size = 'short-key:long-sig'> = {\n    /**\n     * Private key to compute the public key from.\n     */\n    privateKey: Hex.Hex | Bytes.Bytes\n    /**\n     * Size of the public key to compute.\n     *\n     * - `'short-key:long-sig'`: 48 bytes; computes long signatures (96 bytes)\n     * - `'long-key:short-sig'`: 96 bytes; computes short signatures (48 bytes)\n     *\n     * @default 'short-key:long-sig'\n     */\n    size?: size | Size | undefined\n  }\n\n  type ErrorType = Hex.from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Generates a random BLS12-381 private key.\n *\n * @example\n * ```ts twoslash\n * import { Bls } from 'ox'\n *\n * const privateKey = Bls.randomPrivateKey()\n * ```\n *\n * @param options - The options to generate the private key.\n * @returns The generated private key.\n */\nexport function randomPrivateKey<as extends 'Hex' | 'Bytes' = 'Hex'>(\n  options: randomPrivateKey.Options<as> = {},\n): randomPrivateKey.ReturnType<as> {\n  const { as = 'Hex' } = options\n  const bytes = bls.utils.randomPrivateKey()\n  if (as === 'Hex') return Hex.fromBytes(bytes) as never\n  return bytes as never\n}\n\nexport declare namespace randomPrivateKey {\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex'> = {\n    /**\n     * Format of the returned private key.\n     * @default 'Hex'\n     */\n    as?: as | 'Hex' | 'Bytes' | undefined\n  }\n\n  type ReturnType<as extends 'Hex' | 'Bytes'> =\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\n    | (as extends 'Hex' ? Hex.Hex : never)\n\n  type ErrorType = Hex.fromBytes.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Signs the payload with the provided private key.\n *\n * @example\n * ```ts twoslash\n * import { Bls, Hex } from 'ox'\n *\n * const signature = Bls.sign({ // [!code focus]\n *   payload: Hex.random(32), // [!code focus]\n *   privateKey: '0x...' // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @example\n * ### Serializing\n *\n * Signatures can be serialized to hex or bytes using {@link ox#BlsPoint.(toHex:function)} or {@link ox#BlsPoint.(toBytes:function)}:\n *\n * ```ts twoslash\n * import { Bls, BlsPoint, Hex } from 'ox'\n *\n * const signature = Bls.sign({ payload: Hex.random(32), privateKey: '0x...' })\n *\n * const signatureHex = BlsPoint.toHex(signature)\n * //    ^?\n *\n *\n *\n * const signatureBytes = BlsPoint.toBytes(signature)\n * //    ^?\n *\n *\n * ```\n *\n * They can also be deserialized from hex or bytes using {@link ox#BlsPoint.(fromHex:function)} or {@link ox#BlsPoint.(fromBytes:function)}:\n *\n * ```ts twoslash\n * import { Bls, BlsPoint } from 'ox'\n *\n * const signatureHex = '0x...'\n *\n * const signature = BlsPoint.fromHex(signatureHex, 'G2')\n * //    ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @param options - The signing options.\n * @returns BLS Point.\n */\nexport function sign<size extends Size = 'short-key:long-sig'>(\n  options: sign.Options<size>,\n): size extends 'short-key:long-sig' ? BlsPoint.G2 : BlsPoint.G1\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function sign(options: sign.Options): BlsPoint.BlsPoint {\n  const { payload, privateKey, suite, size = 'short-key:long-sig' } = options\n\n  const payloadGroup = size === 'short-key:long-sig' ? bls.G2 : bls.G1\n  const payloadPoint = payloadGroup.hashToCurve(\n    Bytes.from(payload),\n    suite ? { DST: Bytes.fromString(suite) } : undefined,\n  )\n\n  const privateKeyGroup = size === 'short-key:long-sig' ? bls.G1 : bls.G2\n  const signature = payloadPoint.multiply(\n    privateKeyGroup.normPrivateKeyToScalar(privateKey.slice(2)),\n  ) as ProjPointType<any>\n\n  return {\n    x: signature.px,\n    y: signature.py,\n    z: signature.pz,\n  }\n}\n\nexport declare namespace sign {\n  type Options<size extends Size = 'short-key:long-sig'> = {\n    /**\n     * Payload to sign.\n     */\n    payload: Hex.Hex | Bytes.Bytes\n    /**\n     * BLS private key.\n     */\n    privateKey: Hex.Hex | Bytes.Bytes\n    /**\n     * Ciphersuite to use for signing. Defaults to \"Basic\".\n     *\n     * @see https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-bls-signature-05#section-4\n     * @default 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_'\n     */\n    suite?: string | undefined\n    /**\n     * Size of the signature to compute.\n     *\n     * - `'long-key:short-sig'`: 48 bytes\n     * - `'short-key:long-sig'`: 96 bytes\n     *\n     * @default 'short-key:long-sig'\n     */\n    size?: size | Size | undefined\n  }\n\n  type ErrorType = Bytes.from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Verifies a payload was signed by the provided public key(s).\n *\n * @example\n *\n * ```ts twoslash\n * import { Bls, Hex } from 'ox'\n *\n * const payload = Hex.random(32)\n * const privateKey = Bls.randomPrivateKey()\n *\n * const publicKey = Bls.getPublicKey({ privateKey })\n * const signature = Bls.sign({ payload, privateKey })\n *\n * const verified = Bls.verify({ // [!code focus]\n *   payload, // [!code focus]\n *   publicKey, // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @example\n * ### Verify Aggregated Signatures\n *\n * We can also pass a public key and signature that was aggregated with {@link ox#Bls.(aggregate:function)} to `Bls.verify`.\n *\n * ```ts twoslash\n * import { Bls, Hex } from 'ox'\n *\n * const payload = Hex.random(32)\n * const privateKeys = Array.from({ length: 100 }, () => Bls.randomPrivateKey())\n *\n * const publicKeys = privateKeys.map((privateKey) =>\n *   Bls.getPublicKey({ privateKey }),\n * )\n * const signatures = privateKeys.map((privateKey) =>\n *   Bls.sign({ payload, privateKey }),\n * )\n *\n * const publicKey = Bls.aggregate(publicKeys) // [!code focus]\n * const signature = Bls.aggregate(signatures) // [!code focus]\n *\n * const valid = Bls.verify({ payload, publicKey, signature }) // [!code focus]\n * ```\n *\n * @param options - Verification options.\n * @returns Whether the payload was signed by the provided public key.\n */\nexport function verify(options: verify.Options): boolean {\n  const { payload, suite } = options\n\n  const publicKey = options.publicKey as unknown as BlsPoint.BlsPoint<any>\n  const signature = options.signature as unknown as BlsPoint.BlsPoint<any>\n\n  const isShortSig = typeof signature.x === 'bigint'\n\n  const group = isShortSig ? bls.G1 : bls.G2\n  const payloadPoint = group.hashToCurve(\n    Bytes.from(payload),\n    suite ? { DST: Bytes.fromString(suite) } : undefined,\n  ) as ProjPointType<any>\n\n  const shortSigPairing = () =>\n    bls.pairingBatch([\n      {\n        g1: payloadPoint,\n        g2: new bls.G2.ProjectivePoint(publicKey.x, publicKey.y, publicKey.z),\n      },\n      {\n        g1: new bls.G1.ProjectivePoint(signature.x, signature.y, signature.z),\n        g2: bls.G2.ProjectivePoint.BASE.negate(),\n      },\n    ])\n\n  const longSigPairing = () =>\n    bls.pairingBatch([\n      {\n        g1: new bls.G1.ProjectivePoint(\n          publicKey.x,\n          publicKey.y,\n          publicKey.z,\n        ).negate(),\n        g2: payloadPoint,\n      },\n      {\n        g1: bls.G1.ProjectivePoint.BASE,\n        g2: new bls.G2.ProjectivePoint(signature.x, signature.y, signature.z),\n      },\n    ])\n\n  return bls.fields.Fp12.eql(\n    isShortSig ? shortSigPairing() : longSigPairing(),\n    bls.fields.Fp12.ONE,\n  )\n}\n\nexport declare namespace verify {\n  type Options = {\n    /**\n     * Payload that was signed.\n     */\n    payload: Hex.Hex | Bytes.Bytes\n    /**\n     * Ciphersuite to use for verification. Defaults to \"Basic\".\n     *\n     * @see https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-bls-signature-05#section-4\n     * @default 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_'\n     */\n    suite?: string | undefined\n  } & OneOf<\n    | {\n        publicKey: BlsPoint.G1\n        signature: BlsPoint.G2\n      }\n    | {\n        publicKey: BlsPoint.G2\n        signature: BlsPoint.G1\n      }\n  >\n\n  type ErrorType = Errors.GlobalErrorType\n}\n", "/**\n * BLS (Barreto-Lynn-Scott) family of pairing-friendly curves.\n * BLS != BLS.\n * The file implements BLS (Boneh-Lynn-Shacham) signatures.\n * Used in both BLS (Barreto-Lynn-Scott) and BN (Barreto-Naehrig)\n * families of pairing-friendly curves.\n * Consists of two curves: G1 and G2:\n * - G1 is a subgroup of (x, y) E(Fq) over y² = x³ + 4.\n * - G2 is a subgroup of ((x₁, x₂+i), (y₁, y₂+i)) E(Fq²) over y² = x³ + 4(1 + i) where i is √-1\n * - Gt, created by bilinear (ate) pairing e(G1, G2), consists of p-th roots of unity in\n *   Fq^k where k is embedding degree. Only degree 12 is currently supported, 24 is not.\n * Pairing is used to aggregate and verify signatures.\n * There are two main ways to use it:\n * 1. Fp for short private keys, Fp₂ for signatures\n * 2. Fp for short signatures, Fp₂ for private keys\n * @module\n **/\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// TODO: import { AffinePoint } from './curve.ts';\nimport {\n  type H2CPointConstructor,\n  type htfBasicOpts,\n  type Opts as HTFOpts,\n  type MapToCurve,\n  createHasher,\n} from './hash-to-curve.ts';\nimport { type IField, getMinHashLength, mapHashToField } from './modular.ts';\nimport type { Fp12, Fp12Bls, Fp2, Fp2Bls, Fp6 } from './tower.ts';\nimport { type CHash, type Hex, type PrivKey, ensureBytes, memoized } from './utils.ts';\nimport {\n  type CurvePointsRes,\n  type CurvePointsType,\n  type ProjPointType,\n  weierstrassPoints,\n} from './weierstrass.ts';\n\ntype Fp = bigint; // Can be different field?\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n\nexport type TwistType = 'multiplicative' | 'divisive';\n\nexport type ShortSignatureCoder<Fp> = {\n  fromHex(hex: Hex): ProjPointType<Fp>;\n  toRawBytes(point: ProjPointType<Fp>): Uint8Array;\n  toHex(point: ProjPointType<Fp>): string;\n};\n\nexport type SignatureCoder<Fp> = {\n  fromHex(hex: Hex): ProjPointType<Fp>;\n  toRawBytes(point: ProjPointType<Fp>): Uint8Array;\n  toHex(point: ProjPointType<Fp>): string;\n};\n\nexport type PostPrecomputePointAddFn = (\n  Rx: Fp2,\n  Ry: Fp2,\n  Rz: Fp2,\n  Qx: Fp2,\n  Qy: Fp2\n) => { Rx: Fp2; Ry: Fp2; Rz: Fp2 };\nexport type PostPrecomputeFn = (\n  Rx: Fp2,\n  Ry: Fp2,\n  Rz: Fp2,\n  Qx: Fp2,\n  Qy: Fp2,\n  pointAdd: PostPrecomputePointAddFn\n) => void;\nexport type CurveType = {\n  G1: Omit<CurvePointsType<Fp>, 'n'> & {\n    ShortSignature: SignatureCoder<Fp>;\n    mapToCurve: MapToCurve<Fp>;\n    htfDefaults: HTFOpts;\n  };\n  G2: Omit<CurvePointsType<Fp2>, 'n'> & {\n    Signature: SignatureCoder<Fp2>;\n    mapToCurve: MapToCurve<Fp2>;\n    htfDefaults: HTFOpts;\n  };\n  fields: {\n    Fp: IField<Fp>;\n    Fr: IField<bigint>;\n    Fp2: Fp2Bls;\n    Fp6: IField<Fp6>;\n    Fp12: Fp12Bls;\n  };\n  params: {\n    // NOTE: MSB is always ignored and used as marker for length,\n    // otherwise leading zeros will be lost.\n    // Can be different from 'X' (seed) param!\n    ateLoopSize: bigint;\n    xNegative: boolean;\n    r: bigint;\n    twistType: TwistType; // BLS12-381: Multiplicative, BN254: Divisive\n  };\n  htfDefaults: HTFOpts;\n  hash: CHash; // Because we need outputLen for DRBG\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  // This is super ugly hack for untwist point in BN254 after miller loop\n  postPrecompute?: PostPrecomputeFn;\n};\n\ntype PrecomputeSingle = [Fp2, Fp2, Fp2][];\ntype Precompute = PrecomputeSingle[];\n\nexport type CurveFn = {\n  getPublicKey: (privateKey: PrivKey) => Uint8Array;\n  getPublicKeyForShortSignatures: (privateKey: PrivKey) => Uint8Array;\n  sign: {\n    (message: Hex, privateKey: PrivKey, htfOpts?: htfBasicOpts): Uint8Array;\n    (message: ProjPointType<Fp2>, privateKey: PrivKey, htfOpts?: htfBasicOpts): ProjPointType<Fp2>;\n  };\n  signShortSignature: {\n    (message: Hex, privateKey: PrivKey, htfOpts?: htfBasicOpts): Uint8Array;\n    (message: ProjPointType<Fp>, privateKey: PrivKey, htfOpts?: htfBasicOpts): ProjPointType<Fp>;\n  };\n  verify: (\n    signature: Hex | ProjPointType<Fp2>,\n    message: Hex | ProjPointType<Fp2>,\n    publicKey: Hex | ProjPointType<Fp>,\n    htfOpts?: htfBasicOpts\n  ) => boolean;\n  verifyShortSignature: (\n    signature: Hex | ProjPointType<Fp>,\n    message: Hex | ProjPointType<Fp>,\n    publicKey: Hex | ProjPointType<Fp2>,\n    htfOpts?: htfBasicOpts\n  ) => boolean;\n  verifyBatch: (\n    signature: Hex | ProjPointType<Fp2>,\n    messages: (Hex | ProjPointType<Fp2>)[],\n    publicKeys: (Hex | ProjPointType<Fp>)[],\n    htfOpts?: htfBasicOpts\n  ) => boolean;\n  aggregatePublicKeys: {\n    (publicKeys: Hex[]): Uint8Array;\n    (publicKeys: ProjPointType<Fp>[]): ProjPointType<Fp>;\n  };\n  aggregateSignatures: {\n    (signatures: Hex[]): Uint8Array;\n    (signatures: ProjPointType<Fp2>[]): ProjPointType<Fp2>;\n  };\n  aggregateShortSignatures: {\n    (signatures: Hex[]): Uint8Array;\n    (signatures: ProjPointType<Fp>[]): ProjPointType<Fp>;\n  };\n  millerLoopBatch: (pairs: [Precompute, Fp, Fp][]) => Fp12;\n  pairing: (P: ProjPointType<Fp>, Q: ProjPointType<Fp2>, withFinalExponent?: boolean) => Fp12;\n  pairingBatch: (\n    pairs: { g1: ProjPointType<Fp>; g2: ProjPointType<Fp2> }[],\n    withFinalExponent?: boolean\n  ) => Fp12;\n  G1: CurvePointsRes<Fp> & ReturnType<typeof createHasher<Fp>>;\n  G2: CurvePointsRes<Fp2> & ReturnType<typeof createHasher<Fp2>>;\n  Signature: SignatureCoder<Fp2>;\n  ShortSignature: ShortSignatureCoder<Fp>;\n  params: {\n    ateLoopSize: bigint;\n    r: bigint;\n    G1b: bigint;\n    G2b: Fp2;\n  };\n  fields: {\n    Fp: IField<Fp>;\n    Fp2: Fp2Bls;\n    Fp6: IField<Fp6>;\n    Fp12: Fp12Bls;\n    Fr: IField<bigint>;\n  };\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    calcPairingPrecomputes: (p: ProjPointType<Fp2>) => Precompute;\n  };\n};\n\n// Not used with BLS12-381 (no sequential `11` in X). Useful for other curves.\nfunction NAfDecomposition(a: bigint) {\n  const res = [];\n  // a>1 because of marker bit\n  for (; a > _1n; a >>= _1n) {\n    if ((a & _1n) === _0n) res.unshift(0);\n    else if ((a & _3n) === _3n) {\n      res.unshift(-1);\n      a += _1n;\n    } else res.unshift(1);\n  }\n  return res;\n}\n\nexport function bls(CURVE: CurveType): CurveFn {\n  // Fields are specific for curve, so for now we'll need to pass them with opts\n  const { Fp, Fr, Fp2, Fp6, Fp12 } = CURVE.fields;\n  const BLS_X_IS_NEGATIVE = CURVE.params.xNegative;\n  const TWIST: TwistType = CURVE.params.twistType;\n  // Point on G1 curve: (x, y)\n  const G1_ = weierstrassPoints({ n: Fr.ORDER, ...CURVE.G1 });\n  const G1 = Object.assign(\n    G1_,\n    createHasher(G1_.ProjectivePoint, CURVE.G1.mapToCurve, {\n      ...CURVE.htfDefaults,\n      ...CURVE.G1.htfDefaults,\n    })\n  );\n  // Point on G2 curve (complex numbers): (x₁, x₂+i), (y₁, y₂+i)\n  const G2_ = weierstrassPoints({ n: Fr.ORDER, ...CURVE.G2 });\n  const G2 = Object.assign(\n    G2_,\n    createHasher(G2_.ProjectivePoint as H2CPointConstructor<Fp2>, CURVE.G2.mapToCurve, {\n      ...CURVE.htfDefaults,\n      ...CURVE.G2.htfDefaults,\n    })\n  );\n  type G1 = typeof G1.ProjectivePoint.BASE;\n  type G2 = typeof G2.ProjectivePoint.BASE;\n\n  // Applies sparse multiplication as line function\n  let lineFunction: (c0: Fp2, c1: Fp2, c2: Fp2, f: Fp12, Px: Fp, Py: Fp) => Fp12;\n  if (TWIST === 'multiplicative') {\n    lineFunction = (c0: Fp2, c1: Fp2, c2: Fp2, f: Fp12, Px: Fp, Py: Fp) =>\n      Fp12.mul014(f, c0, Fp2.mul(c1, Px), Fp2.mul(c2, Py));\n  } else if (TWIST === 'divisive') {\n    // NOTE: it should be [c0, c1, c2], but we use different order here to reduce complexity of\n    // precompute calculations.\n    lineFunction = (c0: Fp2, c1: Fp2, c2: Fp2, f: Fp12, Px: Fp, Py: Fp) =>\n      Fp12.mul034(f, Fp2.mul(c2, Py), Fp2.mul(c1, Px), c0);\n  } else throw new Error('bls: unknown twist type');\n\n  const Fp2div2 = Fp2.div(Fp2.ONE, Fp2.mul(Fp2.ONE, _2n));\n  function pointDouble(ell: PrecomputeSingle, Rx: Fp2, Ry: Fp2, Rz: Fp2) {\n    const t0 = Fp2.sqr(Ry); // Ry²\n    const t1 = Fp2.sqr(Rz); // Rz²\n    const t2 = Fp2.mulByB(Fp2.mul(t1, _3n)); // 3 * T1 * B\n    const t3 = Fp2.mul(t2, _3n); // 3 * T2\n    const t4 = Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(Ry, Rz)), t1), t0); // (Ry + Rz)² - T1 - T0\n    const c0 = Fp2.sub(t2, t0); // T2 - T0 (i)\n    const c1 = Fp2.mul(Fp2.sqr(Rx), _3n); // 3 * Rx²\n    const c2 = Fp2.neg(t4); // -T4 (-h)\n\n    ell.push([c0, c1, c2]);\n\n    Rx = Fp2.mul(Fp2.mul(Fp2.mul(Fp2.sub(t0, t3), Rx), Ry), Fp2div2); // ((T0 - T3) * Rx * Ry) / 2\n    Ry = Fp2.sub(Fp2.sqr(Fp2.mul(Fp2.add(t0, t3), Fp2div2)), Fp2.mul(Fp2.sqr(t2), _3n)); // ((T0 + T3) / 2)² - 3 * T2²\n    Rz = Fp2.mul(t0, t4); // T0 * T4\n    return { Rx, Ry, Rz };\n  }\n  function pointAdd(ell: PrecomputeSingle, Rx: Fp2, Ry: Fp2, Rz: Fp2, Qx: Fp2, Qy: Fp2) {\n    // Addition\n    const t0 = Fp2.sub(Ry, Fp2.mul(Qy, Rz)); // Ry - Qy * Rz\n    const t1 = Fp2.sub(Rx, Fp2.mul(Qx, Rz)); // Rx - Qx * Rz\n    const c0 = Fp2.sub(Fp2.mul(t0, Qx), Fp2.mul(t1, Qy)); // T0 * Qx - T1 * Qy == Ry * Qx  - Rx * Qy\n    const c1 = Fp2.neg(t0); // -T0 == Qy * Rz - Ry\n    const c2 = t1; // == Rx - Qx * Rz\n\n    ell.push([c0, c1, c2]);\n\n    const t2 = Fp2.sqr(t1); // T1²\n    const t3 = Fp2.mul(t2, t1); // T2 * T1\n    const t4 = Fp2.mul(t2, Rx); // T2 * Rx\n    const t5 = Fp2.add(Fp2.sub(t3, Fp2.mul(t4, _2n)), Fp2.mul(Fp2.sqr(t0), Rz)); // T3 - 2 * T4 + T0² * Rz\n    Rx = Fp2.mul(t1, t5); // T1 * T5\n    Ry = Fp2.sub(Fp2.mul(Fp2.sub(t4, t5), t0), Fp2.mul(t3, Ry)); // (T4 - T5) * T0 - T3 * Ry\n    Rz = Fp2.mul(Rz, t3); // Rz * T3\n    return { Rx, Ry, Rz };\n  }\n\n  // Pre-compute coefficients for sparse multiplication\n  // Point addition and point double calculations is reused for coefficients\n  // pointAdd happens only if bit set, so wNAF is reasonable. Unfortunately we cannot combine\n  // add + double in windowed precomputes here, otherwise it would be single op (since X is static)\n  const ATE_NAF = NAfDecomposition(CURVE.params.ateLoopSize);\n\n  const calcPairingPrecomputes = memoized((point: G2) => {\n    const p = point;\n    const { x, y } = p.toAffine();\n    // prettier-ignore\n    const Qx = x, Qy = y, negQy = Fp2.neg(y);\n    // prettier-ignore\n    let Rx = Qx, Ry = Qy, Rz = Fp2.ONE;\n    const ell: Precompute = [];\n    for (const bit of ATE_NAF) {\n      const cur: PrecomputeSingle = [];\n      ({ Rx, Ry, Rz } = pointDouble(cur, Rx, Ry, Rz));\n      if (bit) ({ Rx, Ry, Rz } = pointAdd(cur, Rx, Ry, Rz, Qx, bit === -1 ? negQy : Qy));\n      ell.push(cur);\n    }\n    if (CURVE.postPrecompute) {\n      const last = ell[ell.length - 1];\n      CURVE.postPrecompute(Rx, Ry, Rz, Qx, Qy, pointAdd.bind(null, last));\n    }\n    return ell;\n  });\n\n  // Main pairing logic is here. Computes product of miller loops + final exponentiate\n  // Applies calculated precomputes\n  type MillerInput = [Precompute, Fp, Fp][];\n  function millerLoopBatch(pairs: MillerInput, withFinalExponent: boolean = false) {\n    let f12 = Fp12.ONE;\n    if (pairs.length) {\n      const ellLen = pairs[0][0].length;\n      for (let i = 0; i < ellLen; i++) {\n        f12 = Fp12.sqr(f12); // This allows us to do sqr only one time for all pairings\n        // NOTE: we apply multiple pairings in parallel here\n        for (const [ell, Px, Py] of pairs) {\n          for (const [c0, c1, c2] of ell[i]) f12 = lineFunction(c0, c1, c2, f12, Px, Py);\n        }\n      }\n    }\n    if (BLS_X_IS_NEGATIVE) f12 = Fp12.conjugate(f12);\n    return withFinalExponent ? Fp12.finalExponentiate(f12) : f12;\n  }\n  type PairingInput = { g1: G1; g2: G2 };\n  // Calculates product of multiple pairings\n  // This up to x2 faster than just `map(({g1, g2})=>pairing({g1,g2}))`\n  function pairingBatch(pairs: PairingInput[], withFinalExponent: boolean = true) {\n    const res: MillerInput = [];\n    // Cache precomputed toAffine for all points\n    G1.ProjectivePoint.normalizeZ(pairs.map(({ g1 }) => g1));\n    G2.ProjectivePoint.normalizeZ(pairs.map(({ g2 }) => g2));\n    for (const { g1, g2 } of pairs) {\n      if (g1.equals(G1.ProjectivePoint.ZERO) || g2.equals(G2.ProjectivePoint.ZERO))\n        throw new Error('pairing is not available for ZERO point');\n      // This uses toAffine inside\n      g1.assertValidity();\n      g2.assertValidity();\n      const Qa = g1.toAffine();\n      res.push([calcPairingPrecomputes(g2), Qa.x, Qa.y]);\n    }\n    return millerLoopBatch(res, withFinalExponent);\n  }\n  // Calculates bilinear pairing\n  function pairing(Q: G1, P: G2, withFinalExponent: boolean = true): Fp12 {\n    return pairingBatch([{ g1: Q, g2: P }], withFinalExponent);\n  }\n\n  const utils = {\n    randomPrivateKey: (): Uint8Array => {\n      const length = getMinHashLength(Fr.ORDER);\n      return mapHashToField(CURVE.randomBytes(length), Fr.ORDER);\n    },\n    calcPairingPrecomputes,\n  };\n\n  const { ShortSignature } = CURVE.G1;\n  const { Signature } = CURVE.G2;\n\n  type G1Hex = Hex | G1;\n  type G2Hex = Hex | G2;\n  function normP1(point: G1Hex): G1 {\n    return point instanceof G1.ProjectivePoint ? (point as G1) : G1.ProjectivePoint.fromHex(point);\n  }\n  function normP1Hash(point: G1Hex, htfOpts?: htfBasicOpts): G1 {\n    return point instanceof G1.ProjectivePoint\n      ? point\n      : (G1.hashToCurve(ensureBytes('point', point), htfOpts) as G1);\n  }\n  function normP2(point: G2Hex): G2 {\n    return point instanceof G2.ProjectivePoint ? point : Signature.fromHex(point);\n  }\n  function normP2Hash(point: G2Hex, htfOpts?: htfBasicOpts): G2 {\n    return point instanceof G2.ProjectivePoint\n      ? point\n      : (G2.hashToCurve(ensureBytes('point', point), htfOpts) as G2);\n  }\n\n  // Multiplies generator (G1) by private key.\n  // P = pk x G\n  function getPublicKey(privateKey: PrivKey): Uint8Array {\n    return G1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(true);\n  }\n\n  // Multiplies generator (G2) by private key.\n  // P = pk x G\n  function getPublicKeyForShortSignatures(privateKey: PrivKey): Uint8Array {\n    return G2.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(true);\n  }\n\n  // Executes `hashToCurve` on the message and then multiplies the result by private key.\n  // S = pk x H(m)\n  function sign(message: Hex, privateKey: PrivKey, htfOpts?: htfBasicOpts): Uint8Array;\n  function sign(message: G2, privateKey: PrivKey, htfOpts?: htfBasicOpts): G2;\n  function sign(message: G2Hex, privateKey: PrivKey, htfOpts?: htfBasicOpts): Uint8Array | G2 {\n    const msgPoint = normP2Hash(message, htfOpts);\n    msgPoint.assertValidity();\n    const sigPoint = msgPoint.multiply(G1.normPrivateKeyToScalar(privateKey));\n    if (message instanceof G2.ProjectivePoint) return sigPoint;\n    return Signature.toRawBytes(sigPoint);\n  }\n\n  function signShortSignature(\n    message: Hex,\n    privateKey: PrivKey,\n    htfOpts?: htfBasicOpts\n  ): Uint8Array;\n  function signShortSignature(message: G1, privateKey: PrivKey, htfOpts?: htfBasicOpts): G1;\n  function signShortSignature(\n    message: G1Hex,\n    privateKey: PrivKey,\n    htfOpts?: htfBasicOpts\n  ): Uint8Array | G1 {\n    const msgPoint = normP1Hash(message, htfOpts);\n    msgPoint.assertValidity();\n    const sigPoint = msgPoint.multiply(G1.normPrivateKeyToScalar(privateKey));\n    if (message instanceof G1.ProjectivePoint) return sigPoint;\n    return ShortSignature.toRawBytes(sigPoint);\n  }\n\n  // Checks if pairing of public key & hash is equal to pairing of generator & signature.\n  // e(P, H(m)) == e(G, S)\n  function verify(\n    signature: G2Hex,\n    message: G2Hex,\n    publicKey: G1Hex,\n    htfOpts?: htfBasicOpts\n  ): boolean {\n    const P = normP1(publicKey);\n    const Hm = normP2Hash(message, htfOpts);\n    const G = G1.ProjectivePoint.BASE;\n    const S = normP2(signature);\n    const exp = pairingBatch([\n      { g1: P.negate(), g2: Hm }, // ePHM = pairing(P.negate(), Hm, false);\n      { g1: G, g2: S }, // eGS = pairing(G, S, false);\n    ]);\n    return Fp12.eql(exp, Fp12.ONE);\n  }\n\n  // Checks if pairing of public key & hash is equal to pairing of generator & signature.\n  // e(S, G) == e(H(m), P)\n  function verifyShortSignature(\n    signature: G1Hex,\n    message: G1Hex,\n    publicKey: G2Hex,\n    htfOpts?: htfBasicOpts\n  ): boolean {\n    const P = normP2(publicKey);\n    const Hm = normP1Hash(message, htfOpts);\n    const G = G2.ProjectivePoint.BASE;\n    const S = normP1(signature);\n    const exp = pairingBatch([\n      { g1: Hm, g2: P }, // eHmP = pairing(Hm, P, false);\n      { g1: S, g2: G.negate() }, // eSG = pairing(S, G.negate(), false);\n    ]);\n    return Fp12.eql(exp, Fp12.ONE);\n  }\n\n  function aNonEmpty(arr: any[]) {\n    if (!Array.isArray(arr) || arr.length === 0) throw new Error('expected non-empty array');\n  }\n\n  // Adds a bunch of public key points together.\n  // pk1 + pk2 + pk3 = pkA\n  function aggregatePublicKeys(publicKeys: Hex[]): Uint8Array;\n  function aggregatePublicKeys(publicKeys: G1[]): G1;\n  function aggregatePublicKeys(publicKeys: G1Hex[]): Uint8Array | G1 {\n    aNonEmpty(publicKeys);\n    const agg = publicKeys.map(normP1).reduce((sum, p) => sum.add(p), G1.ProjectivePoint.ZERO);\n    const aggAffine = agg; //.toAffine();\n    if (publicKeys[0] instanceof G1.ProjectivePoint) {\n      aggAffine.assertValidity();\n      return aggAffine;\n    }\n    // toRawBytes ensures point validity\n    return aggAffine.toRawBytes(true);\n  }\n\n  // Adds a bunch of signature points together.\n  function aggregateSignatures(signatures: Hex[]): Uint8Array;\n  function aggregateSignatures(signatures: G2[]): G2;\n  function aggregateSignatures(signatures: G2Hex[]): Uint8Array | G2 {\n    aNonEmpty(signatures);\n    const agg = signatures.map(normP2).reduce((sum, s) => sum.add(s), G2.ProjectivePoint.ZERO);\n    const aggAffine = agg; //.toAffine();\n    if (signatures[0] instanceof G2.ProjectivePoint) {\n      aggAffine.assertValidity();\n      return aggAffine;\n    }\n    return Signature.toRawBytes(aggAffine);\n  }\n\n  // Adds a bunch of signature points together.\n  function aggregateShortSignatures(signatures: Hex[]): Uint8Array;\n  function aggregateShortSignatures(signatures: G1[]): G1;\n  function aggregateShortSignatures(signatures: G1Hex[]): Uint8Array | G1 {\n    aNonEmpty(signatures);\n    const agg = signatures.map(normP1).reduce((sum, s) => sum.add(s), G1.ProjectivePoint.ZERO);\n    const aggAffine = agg; //.toAffine();\n    if (signatures[0] instanceof G1.ProjectivePoint) {\n      aggAffine.assertValidity();\n      return aggAffine;\n    }\n    return ShortSignature.toRawBytes(aggAffine);\n  }\n\n  // https://ethresear.ch/t/fast-verification-of-multiple-bls-signatures/5407\n  // e(G, S) = e(G, SUM(n)(Si)) = MUL(n)(e(G, Si))\n  function verifyBatch(\n    signature: G2Hex,\n    // TODO: maybe `{message: G2Hex, publicKey: G1Hex}[]` instead?\n    messages: G2Hex[],\n    publicKeys: G1Hex[],\n    htfOpts?: htfBasicOpts\n  ): boolean {\n    aNonEmpty(messages);\n    if (publicKeys.length !== messages.length)\n      throw new Error('amount of public keys and messages should be equal');\n    const sig = normP2(signature);\n    const nMessages = messages.map((i) => normP2Hash(i, htfOpts));\n    const nPublicKeys = publicKeys.map(normP1);\n    // NOTE: this works only for exact same object\n    const messagePubKeyMap = new Map<G2, G1[]>();\n    for (let i = 0; i < nPublicKeys.length; i++) {\n      const pub = nPublicKeys[i];\n      const msg = nMessages[i];\n      let keys = messagePubKeyMap.get(msg);\n      if (keys === undefined) {\n        keys = [];\n        messagePubKeyMap.set(msg, keys);\n      }\n      keys.push(pub);\n    }\n    const paired = [];\n    try {\n      for (const [msg, keys] of messagePubKeyMap) {\n        const groupPublicKey = keys.reduce((acc, msg) => acc.add(msg));\n        paired.push({ g1: groupPublicKey, g2: msg });\n      }\n      paired.push({ g1: G1.ProjectivePoint.BASE.negate(), g2: sig });\n      return Fp12.eql(pairingBatch(paired), Fp12.ONE);\n    } catch {\n      return false;\n    }\n  }\n\n  G1.ProjectivePoint.BASE._setWindowSize(4);\n\n  return {\n    getPublicKey,\n    getPublicKeyForShortSignatures,\n    sign,\n    signShortSignature,\n    verify,\n    verifyBatch,\n    verifyShortSignature,\n    aggregatePublicKeys,\n    aggregateSignatures,\n    aggregateShortSignatures,\n    millerLoopBatch,\n    pairing,\n    pairingBatch,\n    G1,\n    G2,\n    Signature,\n    ShortSignature,\n    fields: {\n      Fr,\n      Fp,\n      Fp2,\n      Fp6,\n      Fp12,\n    },\n    params: {\n      ateLoopSize: CURVE.params.ateLoopSize,\n      r: CURVE.params.r,\n      G1b: CURVE.G1.b,\n      G2b: CURVE.G2.b,\n    },\n    utils,\n  };\n}\n", "/**\n * Towered extension fields.\n * Rather than implementing a massive 12th-degree extension directly, it is more efficient\n * to build it up from smaller extensions: a tower of extensions.\n *\n * For BLS12-381, the Fp12 field is implemented as a quadratic (degree two) extension,\n * on top of a cubic (degree three) extension, on top of a quadratic extension of Fp.\n *\n * For more info: \"Pairings for beginners\" by Costello, section 7.3.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport * as mod from './modular.ts';\nimport { bitLen, bitMask, concatBytes, notImplemented } from './utils.ts';\nimport type { ProjConstructor, ProjPointType } from './weierstrass.ts';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n\n// Fp₂ over complex plane\nexport type BigintTuple = [bigint, bigint];\nexport type Fp = bigint;\n// Finite extension field over irreducible polynominal.\n// Fp(u) / (u² - β) where β = -1\nexport type Fp2 = { c0: bigint; c1: bigint };\nexport type BigintSix = [bigint, bigint, bigint, bigint, bigint, bigint];\nexport type Fp6 = { c0: Fp2; c1: Fp2; c2: Fp2 };\nexport type Fp12 = { c0: Fp6; c1: Fp6 }; // Fp₁₂ = Fp₆² => Fp₂³, Fp₆(w) / (w² - γ) where γ = v\n// prettier-ignore\nexport type BigintTwelve = [\n  bigint, bigint, bigint, bigint, bigint, bigint,\n  bigint, bigint, bigint, bigint, bigint, bigint\n];\n\nexport type Fp2Bls = mod.IField<Fp2> & {\n  reim: (num: Fp2) => { re: Fp; im: Fp };\n  mulByB: (num: Fp2) => Fp2;\n  frobeniusMap(num: Fp2, power: number): Fp2;\n  fromBigTuple(num: [bigint, bigint]): Fp2;\n};\n\nexport type Fp12Bls = mod.IField<Fp12> & {\n  frobeniusMap(num: Fp12, power: number): Fp12;\n  mul014(num: Fp12, o0: Fp2, o1: Fp2, o4: Fp2): Fp12;\n  mul034(num: Fp12, o0: Fp2, o3: Fp2, o4: Fp2): Fp12;\n  conjugate(num: Fp12): Fp12;\n  finalExponentiate(num: Fp12): Fp12;\n  fromBigTwelve(num: BigintTwelve): Fp12;\n};\n\nfunction calcFrobeniusCoefficients<T>(\n  Fp: mod.IField<T>,\n  nonResidue: T,\n  modulus: bigint,\n  degree: number,\n  num: number = 1,\n  divisor?: number\n) {\n  const _divisor = BigInt(divisor === undefined ? degree : divisor);\n  const towerModulus: any = modulus ** BigInt(degree);\n  const res: T[][] = [];\n  for (let i = 0; i < num; i++) {\n    const a = BigInt(i + 1);\n    const powers: T[] = [];\n    for (let j = 0, qPower = _1n; j < degree; j++) {\n      const power = ((a * qPower - a) / _divisor) % towerModulus;\n      powers.push(Fp.pow(nonResidue, power));\n      qPower *= modulus;\n    }\n    res.push(powers);\n  }\n  return res;\n}\n\n// This works same at least for bls12-381, bn254 and bls12-377\nexport function psiFrobenius(\n  Fp: mod.IField<Fp>,\n  Fp2: Fp2Bls,\n  base: Fp2\n): {\n  psi: (x: Fp2, y: Fp2) => [Fp2, Fp2];\n  psi2: (x: Fp2, y: Fp2) => [Fp2, Fp2];\n  G2psi: (c: ProjConstructor<Fp2>, P: ProjPointType<Fp2>) => ProjPointType<Fp2>;\n  G2psi2: (c: ProjConstructor<Fp2>, P: ProjPointType<Fp2>) => ProjPointType<Fp2>;\n  PSI_X: Fp2;\n  PSI_Y: Fp2;\n  PSI2_X: Fp2;\n  PSI2_Y: Fp2;\n} {\n  // GLV endomorphism Ψ(P)\n  const PSI_X = Fp2.pow(base, (Fp.ORDER - _1n) / _3n); // u^((p-1)/3)\n  const PSI_Y = Fp2.pow(base, (Fp.ORDER - _1n) / _2n); // u^((p-1)/2)\n  function psi(x: Fp2, y: Fp2): [Fp2, Fp2] {\n    // This x10 faster than previous version in bls12-381\n    const x2 = Fp2.mul(Fp2.frobeniusMap(x, 1), PSI_X);\n    const y2 = Fp2.mul(Fp2.frobeniusMap(y, 1), PSI_Y);\n    return [x2, y2];\n  }\n  // Ψ²(P) endomorphism (psi2(x) = psi(psi(x)))\n  const PSI2_X = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _3n); // u^((p^2 - 1)/3)\n  // This equals -1, which causes y to be Fp2.neg(y).\n  // But not sure if there are case when this is not true?\n  const PSI2_Y = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _2n); // u^((p^2 - 1)/3)\n  if (!Fp2.eql(PSI2_Y, Fp2.neg(Fp2.ONE))) throw new Error('psiFrobenius: PSI2_Y!==-1');\n  function psi2(x: Fp2, y: Fp2): [Fp2, Fp2] {\n    return [Fp2.mul(x, PSI2_X), Fp2.neg(y)];\n  }\n  // Map points\n  const mapAffine =\n    <T>(fn: (x: T, y: T) => [T, T]) =>\n    (c: ProjConstructor<T>, P: ProjPointType<T>) => {\n      const affine = P.toAffine();\n      const p = fn(affine.x, affine.y);\n      return c.fromAffine({ x: p[0], y: p[1] });\n    };\n  const G2psi = mapAffine(psi);\n  const G2psi2 = mapAffine(psi2);\n  return { psi, psi2, G2psi, G2psi2, PSI_X, PSI_Y, PSI2_X, PSI2_Y };\n}\n\nexport type Tower12Opts = {\n  ORDER: bigint;\n  NONRESIDUE?: Fp;\n  // Fp2\n  FP2_NONRESIDUE: BigintTuple;\n  Fp2sqrt?: (num: Fp2) => Fp2;\n  Fp2mulByB: (num: Fp2) => Fp2;\n  // Fp12\n  Fp12cyclotomicSquare: (num: Fp12) => Fp12;\n  Fp12cyclotomicExp: (num: Fp12, n: bigint) => Fp12;\n  Fp12finalExponentiate: (num: Fp12) => Fp12;\n};\n\nexport function tower12(opts: Tower12Opts): {\n  Fp: Readonly<mod.IField<bigint> & Required<Pick<mod.IField<bigint>, 'isOdd'>>>;\n  Fp2: mod.IField<Fp2> & {\n    NONRESIDUE: Fp2;\n    fromBigTuple: (tuple: BigintTuple | bigint[]) => Fp2;\n    reim: (num: Fp2) => { re: bigint; im: bigint };\n    mulByNonresidue: (num: Fp2) => Fp2;\n    mulByB: (num: Fp2) => Fp2;\n    frobeniusMap(num: Fp2, power: number): Fp2;\n  };\n  Fp6: mod.IField<Fp6> & {\n    fromBigSix: (tuple: BigintSix) => Fp6;\n    mulByNonresidue: (num: Fp6) => Fp6;\n    frobeniusMap(num: Fp6, power: number): Fp6;\n    mul1(num: Fp6, b1: Fp2): Fp6;\n    mul01(num: Fp6, b0: Fp2, b1: Fp2): Fp6;\n    mulByFp2(lhs: Fp6, rhs: Fp2): Fp6;\n  };\n  Fp4Square: (a: Fp2, b: Fp2) => { first: Fp2; second: Fp2 };\n  Fp12: mod.IField<Fp12> & {\n    fromBigTwelve: (t: BigintTwelve) => Fp12;\n    frobeniusMap(num: Fp12, power: number): Fp12;\n    mul014(num: Fp12, o0: Fp2, o1: Fp2, o4: Fp2): Fp12;\n    mul034(num: Fp12, o0: Fp2, o3: Fp2, o4: Fp2): Fp12;\n    mulByFp2(lhs: Fp12, rhs: Fp2): Fp12;\n    conjugate(num: Fp12): Fp12;\n    finalExponentiate(num: Fp12): Fp12;\n    _cyclotomicSquare(num: Fp12): Fp12;\n    _cyclotomicExp(num: Fp12, n: bigint): Fp12;\n  };\n} {\n  const { ORDER } = opts;\n  // Fp\n  const Fp = mod.Field(ORDER);\n  const FpNONRESIDUE = Fp.create(opts.NONRESIDUE || BigInt(-1));\n  const Fpdiv2 = Fp.div(Fp.ONE, _2n); // 1/2\n\n  // Fp2\n  const FP2_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp, FpNONRESIDUE, Fp.ORDER, 2)[0];\n  const Fp2Add = ({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2) => ({\n    c0: Fp.add(c0, r0),\n    c1: Fp.add(c1, r1),\n  });\n  const Fp2Subtract = ({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2) => ({\n    c0: Fp.sub(c0, r0),\n    c1: Fp.sub(c1, r1),\n  });\n  const Fp2Multiply = ({ c0, c1 }: Fp2, rhs: Fp2) => {\n    if (typeof rhs === 'bigint') return { c0: Fp.mul(c0, rhs), c1: Fp.mul(c1, rhs) };\n    // (a+bi)(c+di) = (ac−bd) + (ad+bc)i\n    const { c0: r0, c1: r1 } = rhs;\n    let t1 = Fp.mul(c0, r0); // c0 * o0\n    let t2 = Fp.mul(c1, r1); // c1 * o1\n    // (T1 - T2) + ((c0 + c1) * (r0 + r1) - (T1 + T2))*i\n    const o0 = Fp.sub(t1, t2);\n    const o1 = Fp.sub(Fp.mul(Fp.add(c0, c1), Fp.add(r0, r1)), Fp.add(t1, t2));\n    return { c0: o0, c1: o1 };\n  };\n  const Fp2Square = ({ c0, c1 }: Fp2) => {\n    const a = Fp.add(c0, c1);\n    const b = Fp.sub(c0, c1);\n    const c = Fp.add(c0, c0);\n    return { c0: Fp.mul(a, b), c1: Fp.mul(c, c1) };\n  };\n  type Fp2Utils = {\n    NONRESIDUE: Fp2;\n    fromBigTuple: (tuple: BigintTuple | bigint[]) => Fp2;\n    reim: (num: Fp2) => { re: bigint; im: bigint };\n    mulByNonresidue: (num: Fp2) => Fp2;\n    mulByB: (num: Fp2) => Fp2;\n    frobeniusMap(num: Fp2, power: number): Fp2;\n  };\n  const Fp2fromBigTuple = (tuple: BigintTuple | bigint[]) => {\n    if (tuple.length !== 2) throw new Error('invalid tuple');\n    const fps = tuple.map((n) => Fp.create(n)) as [Fp, Fp];\n    return { c0: fps[0], c1: fps[1] };\n  };\n\n  const FP2_ORDER = ORDER * ORDER;\n  const Fp2Nonresidue = Fp2fromBigTuple(opts.FP2_NONRESIDUE);\n  const Fp2: mod.IField<Fp2> & Fp2Utils = {\n    ORDER: FP2_ORDER,\n    isLE: Fp.isLE,\n    NONRESIDUE: Fp2Nonresidue,\n    BITS: bitLen(FP2_ORDER),\n    BYTES: Math.ceil(bitLen(FP2_ORDER) / 8),\n    MASK: bitMask(bitLen(FP2_ORDER)),\n    ZERO: { c0: Fp.ZERO, c1: Fp.ZERO },\n    ONE: { c0: Fp.ONE, c1: Fp.ZERO },\n    create: (num) => num,\n    isValid: ({ c0, c1 }) => typeof c0 === 'bigint' && typeof c1 === 'bigint',\n    is0: ({ c0, c1 }) => Fp.is0(c0) && Fp.is0(c1),\n    eql: ({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2) => Fp.eql(c0, r0) && Fp.eql(c1, r1),\n    neg: ({ c0, c1 }) => ({ c0: Fp.neg(c0), c1: Fp.neg(c1) }),\n    pow: (num, power) => mod.FpPow(Fp2, num, power),\n    invertBatch: (nums) => mod.FpInvertBatch(Fp2, nums),\n    // Normalized\n    add: Fp2Add,\n    sub: Fp2Subtract,\n    mul: Fp2Multiply,\n    sqr: Fp2Square,\n    // NonNormalized stuff\n    addN: Fp2Add,\n    subN: Fp2Subtract,\n    mulN: Fp2Multiply,\n    sqrN: Fp2Square,\n    // Why inversion for bigint inside Fp instead of Fp2? it is even used in that context?\n    div: (lhs, rhs) =>\n      Fp2.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp2.inv(rhs)),\n    inv: ({ c0: a, c1: b }) => {\n      // We wish to find the multiplicative inverse of a nonzero\n      // element a + bu in Fp2. We leverage an identity\n      //\n      // (a + bu)(a - bu) = a² + b²\n      //\n      // which holds because u² = -1. This can be rewritten as\n      //\n      // (a + bu)(a - bu)/(a² + b²) = 1\n      //\n      // because a² + b² = 0 has no nonzero solutions for (a, b).\n      // This gives that (a - bu)/(a² + b²) is the inverse\n      // of (a + bu). Importantly, this can be computing using\n      // only a single inversion in Fp.\n      const factor = Fp.inv(Fp.create(a * a + b * b));\n      return { c0: Fp.mul(factor, Fp.create(a)), c1: Fp.mul(factor, Fp.create(-b)) };\n    },\n    sqrt: (num) => {\n      if (opts.Fp2sqrt) return opts.Fp2sqrt(num);\n      // This is generic for all quadratic extensions (Fp2)\n      const { c0, c1 } = num;\n      if (Fp.is0(c1)) {\n        // if c0 is quadratic residue\n        if (mod.FpLegendre(Fp, c0) === 1) return Fp2.create({ c0: Fp.sqrt(c0), c1: Fp.ZERO });\n        else return Fp2.create({ c0: Fp.ZERO, c1: Fp.sqrt(Fp.div(c0, FpNONRESIDUE)) });\n      }\n      const a = Fp.sqrt(Fp.sub(Fp.sqr(c0), Fp.mul(Fp.sqr(c1), FpNONRESIDUE)));\n      let d = Fp.mul(Fp.add(a, c0), Fpdiv2);\n      const legendre = mod.FpLegendre(Fp, d);\n      // -1, Quadratic non residue\n      if (legendre === -1) d = Fp.sub(d, a);\n      const a0 = Fp.sqrt(d);\n      const candidateSqrt = Fp2.create({ c0: a0, c1: Fp.div(Fp.mul(c1, Fpdiv2), a0) });\n      if (!Fp2.eql(Fp2.sqr(candidateSqrt), num)) throw new Error('Cannot find square root');\n      // Normalize root: at this point candidateSqrt ** 2 = num, but also -candidateSqrt ** 2 = num\n      const x1 = candidateSqrt;\n      const x2 = Fp2.neg(x1);\n      const { re: re1, im: im1 } = Fp2.reim(x1);\n      const { re: re2, im: im2 } = Fp2.reim(x2);\n      if (im1 > im2 || (im1 === im2 && re1 > re2)) return x1;\n      return x2;\n    },\n    // Same as sgn0_m_eq_2 in RFC 9380\n    isOdd: (x: Fp2) => {\n      const { re: x0, im: x1 } = Fp2.reim(x);\n      const sign_0 = x0 % _2n;\n      const zero_0 = x0 === _0n;\n      const sign_1 = x1 % _2n;\n      return BigInt(sign_0 || (zero_0 && sign_1)) == _1n;\n    },\n    // Bytes util\n    fromBytes(b: Uint8Array): Fp2 {\n      if (b.length !== Fp2.BYTES) throw new Error('fromBytes invalid length=' + b.length);\n      return { c0: Fp.fromBytes(b.subarray(0, Fp.BYTES)), c1: Fp.fromBytes(b.subarray(Fp.BYTES)) };\n    },\n    toBytes: ({ c0, c1 }) => concatBytes(Fp.toBytes(c0), Fp.toBytes(c1)),\n    cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c) => ({\n      c0: Fp.cmov(c0, r0, c),\n      c1: Fp.cmov(c1, r1, c),\n    }),\n    reim: ({ c0, c1 }) => ({ re: c0, im: c1 }),\n    // multiply by u + 1\n    mulByNonresidue: ({ c0, c1 }) => Fp2.mul({ c0, c1 }, Fp2Nonresidue),\n    mulByB: opts.Fp2mulByB,\n    fromBigTuple: Fp2fromBigTuple,\n    frobeniusMap: ({ c0, c1 }, power: number): Fp2 => ({\n      c0,\n      c1: Fp.mul(c1, FP2_FROBENIUS_COEFFICIENTS[power % 2]),\n    }),\n  };\n  // Fp6\n  const Fp6Add = ({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6) => ({\n    c0: Fp2.add(c0, r0),\n    c1: Fp2.add(c1, r1),\n    c2: Fp2.add(c2, r2),\n  });\n  const Fp6Subtract = ({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6) => ({\n    c0: Fp2.sub(c0, r0),\n    c1: Fp2.sub(c1, r1),\n    c2: Fp2.sub(c2, r2),\n  });\n  const Fp6Multiply = ({ c0, c1, c2 }: Fp6, rhs: Fp6 | bigint) => {\n    if (typeof rhs === 'bigint') {\n      return {\n        c0: Fp2.mul(c0, rhs),\n        c1: Fp2.mul(c1, rhs),\n        c2: Fp2.mul(c2, rhs),\n      };\n    }\n    const { c0: r0, c1: r1, c2: r2 } = rhs;\n    const t0 = Fp2.mul(c0, r0); // c0 * o0\n    const t1 = Fp2.mul(c1, r1); // c1 * o1\n    const t2 = Fp2.mul(c2, r2); // c2 * o2\n    return {\n      // t0 + (c1 + c2) * (r1 * r2) - (T1 + T2) * (u + 1)\n      c0: Fp2.add(\n        t0,\n        Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), Fp2.add(r1, r2)), Fp2.add(t1, t2)))\n      ),\n      // (c0 + c1) * (r0 + r1) - (T0 + T1) + T2 * (u + 1)\n      c1: Fp2.add(\n        Fp2.sub(Fp2.mul(Fp2.add(c0, c1), Fp2.add(r0, r1)), Fp2.add(t0, t1)),\n        Fp2.mulByNonresidue(t2)\n      ),\n      // T1 + (c0 + c2) * (r0 + r2) - T0 + T2\n      c2: Fp2.sub(Fp2.add(t1, Fp2.mul(Fp2.add(c0, c2), Fp2.add(r0, r2))), Fp2.add(t0, t2)),\n    };\n  };\n  const Fp6Square = ({ c0, c1, c2 }: Fp6) => {\n    let t0 = Fp2.sqr(c0); // c0²\n    let t1 = Fp2.mul(Fp2.mul(c0, c1), _2n); // 2 * c0 * c1\n    let t3 = Fp2.mul(Fp2.mul(c1, c2), _2n); // 2 * c1 * c2\n    let t4 = Fp2.sqr(c2); // c2²\n    return {\n      c0: Fp2.add(Fp2.mulByNonresidue(t3), t0), // T3 * (u + 1) + T0\n      c1: Fp2.add(Fp2.mulByNonresidue(t4), t1), // T4 * (u + 1) + T1\n      // T1 + (c0 - c1 + c2)² + T3 - T0 - T4\n      c2: Fp2.sub(Fp2.sub(Fp2.add(Fp2.add(t1, Fp2.sqr(Fp2.add(Fp2.sub(c0, c1), c2))), t3), t0), t4),\n    };\n  };\n  type Fp6Utils = {\n    fromBigSix: (tuple: BigintSix) => Fp6;\n    mulByNonresidue: (num: Fp6) => Fp6;\n    frobeniusMap(num: Fp6, power: number): Fp6;\n    mul1(num: Fp6, b1: Fp2): Fp6;\n    mul01(num: Fp6, b0: Fp2, b1: Fp2): Fp6;\n    mulByFp2(lhs: Fp6, rhs: Fp2): Fp6;\n  };\n\n  const [FP6_FROBENIUS_COEFFICIENTS_1, FP6_FROBENIUS_COEFFICIENTS_2] = calcFrobeniusCoefficients(\n    Fp2,\n    Fp2Nonresidue,\n    Fp.ORDER,\n    6,\n    2,\n    3\n  );\n\n  const Fp6: mod.IField<Fp6> & Fp6Utils = {\n    ORDER: Fp2.ORDER, // TODO: unused, but need to verify\n    isLE: Fp2.isLE,\n    BITS: 3 * Fp2.BITS,\n    BYTES: 3 * Fp2.BYTES,\n    MASK: bitMask(3 * Fp2.BITS),\n    ZERO: { c0: Fp2.ZERO, c1: Fp2.ZERO, c2: Fp2.ZERO },\n    ONE: { c0: Fp2.ONE, c1: Fp2.ZERO, c2: Fp2.ZERO },\n    create: (num) => num,\n    isValid: ({ c0, c1, c2 }) => Fp2.isValid(c0) && Fp2.isValid(c1) && Fp2.isValid(c2),\n    is0: ({ c0, c1, c2 }) => Fp2.is0(c0) && Fp2.is0(c1) && Fp2.is0(c2),\n    neg: ({ c0, c1, c2 }) => ({ c0: Fp2.neg(c0), c1: Fp2.neg(c1), c2: Fp2.neg(c2) }),\n    eql: ({ c0, c1, c2 }, { c0: r0, c1: r1, c2: r2 }) =>\n      Fp2.eql(c0, r0) && Fp2.eql(c1, r1) && Fp2.eql(c2, r2),\n    sqrt: notImplemented,\n    // Do we need division by bigint at all? Should be done via order:\n    div: (lhs, rhs) =>\n      Fp6.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp6.inv(rhs)),\n    pow: (num, power) => mod.FpPow(Fp6, num, power),\n    invertBatch: (nums) => mod.FpInvertBatch(Fp6, nums),\n    // Normalized\n    add: Fp6Add,\n    sub: Fp6Subtract,\n    mul: Fp6Multiply,\n    sqr: Fp6Square,\n    // NonNormalized stuff\n    addN: Fp6Add,\n    subN: Fp6Subtract,\n    mulN: Fp6Multiply,\n    sqrN: Fp6Square,\n\n    inv: ({ c0, c1, c2 }) => {\n      let t0 = Fp2.sub(Fp2.sqr(c0), Fp2.mulByNonresidue(Fp2.mul(c2, c1))); // c0² - c2 * c1 * (u + 1)\n      let t1 = Fp2.sub(Fp2.mulByNonresidue(Fp2.sqr(c2)), Fp2.mul(c0, c1)); // c2² * (u + 1) - c0 * c1\n      let t2 = Fp2.sub(Fp2.sqr(c1), Fp2.mul(c0, c2)); // c1² - c0 * c2\n      // 1/(((c2 * T1 + c1 * T2) * v) + c0 * T0)\n      let t4 = Fp2.inv(\n        Fp2.add(Fp2.mulByNonresidue(Fp2.add(Fp2.mul(c2, t1), Fp2.mul(c1, t2))), Fp2.mul(c0, t0))\n      );\n      return { c0: Fp2.mul(t4, t0), c1: Fp2.mul(t4, t1), c2: Fp2.mul(t4, t2) };\n    },\n    // Bytes utils\n    fromBytes: (b: Uint8Array): Fp6 => {\n      if (b.length !== Fp6.BYTES) throw new Error('fromBytes invalid length=' + b.length);\n      return {\n        c0: Fp2.fromBytes(b.subarray(0, Fp2.BYTES)),\n        c1: Fp2.fromBytes(b.subarray(Fp2.BYTES, 2 * Fp2.BYTES)),\n        c2: Fp2.fromBytes(b.subarray(2 * Fp2.BYTES)),\n      };\n    },\n    toBytes: ({ c0, c1, c2 }): Uint8Array =>\n      concatBytes(Fp2.toBytes(c0), Fp2.toBytes(c1), Fp2.toBytes(c2)),\n    cmov: ({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6, c) => ({\n      c0: Fp2.cmov(c0, r0, c),\n      c1: Fp2.cmov(c1, r1, c),\n      c2: Fp2.cmov(c2, r2, c),\n    }),\n    fromBigSix: (t: BigintSix): Fp6 => {\n      if (!Array.isArray(t) || t.length !== 6) throw new Error('invalid Fp6 usage');\n      return {\n        c0: Fp2.fromBigTuple(t.slice(0, 2)),\n        c1: Fp2.fromBigTuple(t.slice(2, 4)),\n        c2: Fp2.fromBigTuple(t.slice(4, 6)),\n      };\n    },\n    frobeniusMap: ({ c0, c1, c2 }, power: number) => ({\n      c0: Fp2.frobeniusMap(c0, power),\n      c1: Fp2.mul(Fp2.frobeniusMap(c1, power), FP6_FROBENIUS_COEFFICIENTS_1[power % 6]),\n      c2: Fp2.mul(Fp2.frobeniusMap(c2, power), FP6_FROBENIUS_COEFFICIENTS_2[power % 6]),\n    }),\n    mulByFp2: ({ c0, c1, c2 }, rhs: Fp2): Fp6 => ({\n      c0: Fp2.mul(c0, rhs),\n      c1: Fp2.mul(c1, rhs),\n      c2: Fp2.mul(c2, rhs),\n    }),\n    mulByNonresidue: ({ c0, c1, c2 }) => ({ c0: Fp2.mulByNonresidue(c2), c1: c0, c2: c1 }),\n    // Sparse multiplication\n    mul1: ({ c0, c1, c2 }, b1: Fp2): Fp6 => ({\n      c0: Fp2.mulByNonresidue(Fp2.mul(c2, b1)),\n      c1: Fp2.mul(c0, b1),\n      c2: Fp2.mul(c1, b1),\n    }),\n    // Sparse multiplication\n    mul01({ c0, c1, c2 }, b0: Fp2, b1: Fp2): Fp6 {\n      let t0 = Fp2.mul(c0, b0); // c0 * b0\n      let t1 = Fp2.mul(c1, b1); // c1 * b1\n      return {\n        // ((c1 + c2) * b1 - T1) * (u + 1) + T0\n        c0: Fp2.add(Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), b1), t1)), t0),\n        // (b0 + b1) * (c0 + c1) - T0 - T1\n        c1: Fp2.sub(Fp2.sub(Fp2.mul(Fp2.add(b0, b1), Fp2.add(c0, c1)), t0), t1),\n        // (c0 + c2) * b0 - T0 + T1\n        c2: Fp2.add(Fp2.sub(Fp2.mul(Fp2.add(c0, c2), b0), t0), t1),\n      };\n    },\n  };\n\n  // Fp12\n  const FP12_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(\n    Fp2,\n    Fp2Nonresidue,\n    Fp.ORDER,\n    12,\n    1,\n    6\n  )[0];\n\n  const Fp12Add = ({ c0, c1 }: Fp12, { c0: r0, c1: r1 }: Fp12) => ({\n    c0: Fp6.add(c0, r0),\n    c1: Fp6.add(c1, r1),\n  });\n  const Fp12Subtract = ({ c0, c1 }: Fp12, { c0: r0, c1: r1 }: Fp12) => ({\n    c0: Fp6.sub(c0, r0),\n    c1: Fp6.sub(c1, r1),\n  });\n  const Fp12Multiply = ({ c0, c1 }: Fp12, rhs: Fp12 | bigint) => {\n    if (typeof rhs === 'bigint') return { c0: Fp6.mul(c0, rhs), c1: Fp6.mul(c1, rhs) };\n    let { c0: r0, c1: r1 } = rhs;\n    let t1 = Fp6.mul(c0, r0); // c0 * r0\n    let t2 = Fp6.mul(c1, r1); // c1 * r1\n    return {\n      c0: Fp6.add(t1, Fp6.mulByNonresidue(t2)), // T1 + T2 * v\n      // (c0 + c1) * (r0 + r1) - (T1 + T2)\n      c1: Fp6.sub(Fp6.mul(Fp6.add(c0, c1), Fp6.add(r0, r1)), Fp6.add(t1, t2)),\n    };\n  };\n  const Fp12Square = ({ c0, c1 }: Fp12) => {\n    let ab = Fp6.mul(c0, c1); // c0 * c1\n    return {\n      // (c1 * v + c0) * (c0 + c1) - AB - AB * v\n      c0: Fp6.sub(\n        Fp6.sub(Fp6.mul(Fp6.add(Fp6.mulByNonresidue(c1), c0), Fp6.add(c0, c1)), ab),\n        Fp6.mulByNonresidue(ab)\n      ),\n      c1: Fp6.add(ab, ab),\n    }; // AB + AB\n  };\n  function Fp4Square(a: Fp2, b: Fp2): { first: Fp2; second: Fp2 } {\n    const a2 = Fp2.sqr(a);\n    const b2 = Fp2.sqr(b);\n    return {\n      first: Fp2.add(Fp2.mulByNonresidue(b2), a2), // b² * Nonresidue + a²\n      second: Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(a, b)), a2), b2), // (a + b)² - a² - b²\n    };\n  }\n  type Fp12Utils = {\n    fromBigTwelve: (t: BigintTwelve) => Fp12;\n    frobeniusMap(num: Fp12, power: number): Fp12;\n    mul014(num: Fp12, o0: Fp2, o1: Fp2, o4: Fp2): Fp12;\n    mul034(num: Fp12, o0: Fp2, o3: Fp2, o4: Fp2): Fp12;\n    mulByFp2(lhs: Fp12, rhs: Fp2): Fp12;\n    conjugate(num: Fp12): Fp12;\n    finalExponentiate(num: Fp12): Fp12;\n    _cyclotomicSquare(num: Fp12): Fp12;\n    _cyclotomicExp(num: Fp12, n: bigint): Fp12;\n  };\n\n  const Fp12: mod.IField<Fp12> & Fp12Utils = {\n    ORDER: Fp2.ORDER, // TODO: unused, but need to verify\n    isLE: Fp6.isLE,\n    BITS: 2 * Fp6.BITS,\n    BYTES: 2 * Fp6.BYTES,\n    MASK: bitMask(2 * Fp6.BITS),\n    ZERO: { c0: Fp6.ZERO, c1: Fp6.ZERO },\n    ONE: { c0: Fp6.ONE, c1: Fp6.ZERO },\n    create: (num) => num,\n    isValid: ({ c0, c1 }) => Fp6.isValid(c0) && Fp6.isValid(c1),\n    is0: ({ c0, c1 }) => Fp6.is0(c0) && Fp6.is0(c1),\n    neg: ({ c0, c1 }) => ({ c0: Fp6.neg(c0), c1: Fp6.neg(c1) }),\n    eql: ({ c0, c1 }, { c0: r0, c1: r1 }) => Fp6.eql(c0, r0) && Fp6.eql(c1, r1),\n    sqrt: notImplemented,\n    inv: ({ c0, c1 }) => {\n      let t = Fp6.inv(Fp6.sub(Fp6.sqr(c0), Fp6.mulByNonresidue(Fp6.sqr(c1)))); // 1 / (c0² - c1² * v)\n      return { c0: Fp6.mul(c0, t), c1: Fp6.neg(Fp6.mul(c1, t)) }; // ((C0 * T) * T) + (-C1 * T) * w\n    },\n    div: (lhs, rhs) =>\n      Fp12.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp12.inv(rhs)),\n    pow: (num, power) => mod.FpPow(Fp12, num, power),\n    invertBatch: (nums) => mod.FpInvertBatch(Fp12, nums),\n    // Normalized\n    add: Fp12Add,\n    sub: Fp12Subtract,\n    mul: Fp12Multiply,\n    sqr: Fp12Square,\n    // NonNormalized stuff\n    addN: Fp12Add,\n    subN: Fp12Subtract,\n    mulN: Fp12Multiply,\n    sqrN: Fp12Square,\n\n    // Bytes utils\n    fromBytes: (b: Uint8Array): Fp12 => {\n      if (b.length !== Fp12.BYTES) throw new Error('fromBytes invalid length=' + b.length);\n      return {\n        c0: Fp6.fromBytes(b.subarray(0, Fp6.BYTES)),\n        c1: Fp6.fromBytes(b.subarray(Fp6.BYTES)),\n      };\n    },\n    toBytes: ({ c0, c1 }): Uint8Array => concatBytes(Fp6.toBytes(c0), Fp6.toBytes(c1)),\n    cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c) => ({\n      c0: Fp6.cmov(c0, r0, c),\n      c1: Fp6.cmov(c1, r1, c),\n    }),\n    // Utils\n    // toString() {\n    //   return '' + 'Fp12(' + this.c0 + this.c1 + '* w');\n    // },\n    // fromTuple(c: [Fp6, Fp6]) {\n    //   return new Fp12(...c);\n    // }\n    fromBigTwelve: (t: BigintTwelve): Fp12 => ({\n      c0: Fp6.fromBigSix(t.slice(0, 6) as BigintSix),\n      c1: Fp6.fromBigSix(t.slice(6, 12) as BigintSix),\n    }),\n    // Raises to q**i -th power\n    frobeniusMap(lhs, power: number) {\n      const { c0, c1, c2 } = Fp6.frobeniusMap(lhs.c1, power);\n      const coeff = FP12_FROBENIUS_COEFFICIENTS[power % 12];\n      return {\n        c0: Fp6.frobeniusMap(lhs.c0, power),\n        c1: Fp6.create({\n          c0: Fp2.mul(c0, coeff),\n          c1: Fp2.mul(c1, coeff),\n          c2: Fp2.mul(c2, coeff),\n        }),\n      };\n    },\n    mulByFp2: ({ c0, c1 }, rhs: Fp2): Fp12 => ({\n      c0: Fp6.mulByFp2(c0, rhs),\n      c1: Fp6.mulByFp2(c1, rhs),\n    }),\n    conjugate: ({ c0, c1 }): Fp12 => ({ c0, c1: Fp6.neg(c1) }),\n    // Sparse multiplication\n    mul014: ({ c0, c1 }, o0: Fp2, o1: Fp2, o4: Fp2) => {\n      let t0 = Fp6.mul01(c0, o0, o1);\n      let t1 = Fp6.mul1(c1, o4);\n      return {\n        c0: Fp6.add(Fp6.mulByNonresidue(t1), t0), // T1 * v + T0\n        // (c1 + c0) * [o0, o1+o4] - T0 - T1\n        c1: Fp6.sub(Fp6.sub(Fp6.mul01(Fp6.add(c1, c0), o0, Fp2.add(o1, o4)), t0), t1),\n      };\n    },\n    mul034: ({ c0, c1 }, o0: Fp2, o3: Fp2, o4: Fp2) => {\n      const a = Fp6.create({\n        c0: Fp2.mul(c0.c0, o0),\n        c1: Fp2.mul(c0.c1, o0),\n        c2: Fp2.mul(c0.c2, o0),\n      });\n      const b = Fp6.mul01(c1, o3, o4);\n      const e = Fp6.mul01(Fp6.add(c0, c1), Fp2.add(o0, o3), o4);\n      return {\n        c0: Fp6.add(Fp6.mulByNonresidue(b), a),\n        c1: Fp6.sub(e, Fp6.add(a, b)),\n      };\n    },\n\n    // A cyclotomic group is a subgroup of Fp^n defined by\n    //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}\n    // The result of any pairing is in a cyclotomic subgroup\n    // https://eprint.iacr.org/2009/565.pdf\n    _cyclotomicSquare: opts.Fp12cyclotomicSquare,\n    _cyclotomicExp: opts.Fp12cyclotomicExp,\n    // https://eprint.iacr.org/2010/354.pdf\n    // https://eprint.iacr.org/2009/565.pdf\n    finalExponentiate: opts.Fp12finalExponentiate,\n  };\n\n  return { Fp, Fp2, Fp6, Fp4Square, Fp12 };\n}\n", "/**\n * bls12-381 is pairing-friendly Barreto-Lynn-Scott elliptic curve construction allowing to:\n * * Construct zk-SNARKs at the ~120-bit security\n * * Efficiently verify N aggregate signatures with 1 pairing and N ec additions:\n *   the Boneh-Lynn-Shacham signature scheme is orders of magnitude more efficient than Schnorr\n *\n * ### Summary\n * 1. BLS Relies on Bilinear Pairing (expensive)\n * 2. Private Keys: 32 bytes\n * 3. Public Keys: 48 bytes: 381 bit affine x coordinate, encoded into 48 big-endian bytes.\n * 4. Signatures: 96 bytes: two 381 bit integers (affine x coordinate), encoded into two 48 big-endian byte arrays.\n *     - The signature is a point on the G2 subgroup, which is defined over a finite field\n *       with elements twice as big as the G1 curve (G2 is over Fp2 rather than Fp. Fp2 is analogous to the\n *       complex numbers).\n *     - We also support reversed 96-byte pubkeys & 48-byte short signatures.\n * 5. The 12 stands for the Embedding degree.\n *\n * ### Formulas\n * - `P = pk x G` - public keys\n * - `S = pk x H(m)` - signing\n * - `e(P, H(m)) == e(G, S)` - verification using pairings\n * - `e(G, S) = e(G, SUM(n)(Si)) = MUL(n)(e(G, Si))` - signature aggregation\n *\n * ### Compatibility and notes\n * 1. It is compatible with Algorand, Chia, Dfinity, Ethereum, Filecoin, ZEC.\n * Filecoin uses little endian byte arrays for private keys - make sure to reverse byte order.\n * 2. Some projects use G2 for public keys and G1 for signatures. It's called \"short signature\".\n * 3. Curve security level is about 120 bits as per [Barbulescu-Duquesne 2017](https://hal.science/hal-01534101/file/main.pdf)\n * 4. Compatible with specs:\n *    [cfrg-pairing-friendly-curves-11](https://tools.ietf.org/html/draft-irtf-cfrg-pairing-friendly-curves-11),\n *    [cfrg-bls-signature-05](https://www.rfc-editor.org/rfc/draft-irtf-cfrg-bls-signature-05),\n *    RFC 9380.\n *\n * ### Params\n * To verify curve parameters, see\n * [pairing-friendly-curves spec](https://www.rfc-editor.org/rfc/draft-irtf-cfrg-pairing-friendly-curves-11).\n * Basic math is done over finite fields over p.\n * More complicated math is done over polynominal extension fields.\n * To simplify calculations in Fp12, we construct extension tower:\n *\n * Embedding degree (k): 12\n * Seed (X): -15132376222941642752\n * Fr:  (x⁴-x²+1)\n * Fp: ((x-1)² ⋅ r(x)/3+x)\n * (E/Fp): Y²=X³+4\n * (Eₜ/Fp²): Y² = X³+4(u+1) (M-type twist)\n * Ate loop size: X\n *\n * ### Towers\n * - Fp₁₂ = Fp₆² => Fp₂³\n * - Fp(u) / (u² - β) where β = -1\n * - Fp₂(v) / (v³ - ξ) where ξ = u + 1\n * - Fp₆(w) / (w² - γ) where γ = v\n * - Fp²[u] = Fp/u²+1\n * - Fp⁶[v] = Fp²/v³-1-u\n * - Fp¹²[w] = Fp⁶/w²-v\n *\n * @todo construct bls & bn fp/fr from seed.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { bls, type CurveFn } from './abstract/bls.ts';\nimport { Field } from './abstract/modular.ts';\nimport {\n  bitGet,\n  bitLen,\n  bytesToHex,\n  bytesToNumberBE,\n  concatBytes as concatB,\n  ensureBytes,\n  numberToBytesBE,\n  type Hex,\n} from './abstract/utils.ts';\n// Types\nimport { isogenyMap } from './abstract/hash-to-curve.ts';\nimport type { Fp, Fp12, Fp2, Fp6 } from './abstract/tower.ts';\nimport { psiFrobenius, tower12 } from './abstract/tower.ts';\nimport {\n  mapToCurveSimpleSWU,\n  type AffinePoint,\n  type ProjPointType,\n} from './abstract/weierstrass.ts';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\n// The BLS parameter x (seed) for BLS12-381. NOTE: it is negative!\nconst BLS_X = BigInt('0xd201000000010000');\nconst BLS_X_LEN = bitLen(BLS_X);\n\n// CURVE FIELDS\nconst { Fp, Fp2, Fp6, Fp4Square, Fp12 } = tower12({\n  // Order of Fp\n  ORDER: BigInt(\n    '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'\n  ),\n  // Finite extension field over irreducible polynominal.\n  // Fp(u) / (u² - β) where β = -1\n  FP2_NONRESIDUE: [_1n, _1n],\n  Fp2mulByB: ({ c0, c1 }) => {\n    const t0 = Fp.mul(c0, _4n); // 4 * c0\n    const t1 = Fp.mul(c1, _4n); // 4 * c1\n    // (T0-T1) + (T0+T1)*i\n    return { c0: Fp.sub(t0, t1), c1: Fp.add(t0, t1) };\n  },\n  // Fp12\n  // A cyclotomic group is a subgroup of Fp^n defined by\n  //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}\n  // The result of any pairing is in a cyclotomic subgroup\n  // https://eprint.iacr.org/2009/565.pdf\n  Fp12cyclotomicSquare: ({ c0, c1 }): Fp12 => {\n    const { c0: c0c0, c1: c0c1, c2: c0c2 } = c0;\n    const { c0: c1c0, c1: c1c1, c2: c1c2 } = c1;\n    const { first: t3, second: t4 } = Fp4Square(c0c0, c1c1);\n    const { first: t5, second: t6 } = Fp4Square(c1c0, c0c2);\n    const { first: t7, second: t8 } = Fp4Square(c0c1, c1c2);\n    const t9 = Fp2.mulByNonresidue(t8); // T8 * (u + 1)\n    return {\n      c0: Fp6.create({\n        c0: Fp2.add(Fp2.mul(Fp2.sub(t3, c0c0), _2n), t3), // 2 * (T3 - c0c0)  + T3\n        c1: Fp2.add(Fp2.mul(Fp2.sub(t5, c0c1), _2n), t5), // 2 * (T5 - c0c1)  + T5\n        c2: Fp2.add(Fp2.mul(Fp2.sub(t7, c0c2), _2n), t7),\n      }), // 2 * (T7 - c0c2)  + T7\n      c1: Fp6.create({\n        c0: Fp2.add(Fp2.mul(Fp2.add(t9, c1c0), _2n), t9), // 2 * (T9 + c1c0) + T9\n        c1: Fp2.add(Fp2.mul(Fp2.add(t4, c1c1), _2n), t4), // 2 * (T4 + c1c1) + T4\n        c2: Fp2.add(Fp2.mul(Fp2.add(t6, c1c2), _2n), t6),\n      }),\n    }; // 2 * (T6 + c1c2) + T6\n  },\n  Fp12cyclotomicExp(num, n) {\n    let z = Fp12.ONE;\n    for (let i = BLS_X_LEN - 1; i >= 0; i--) {\n      z = Fp12._cyclotomicSquare(z);\n      if (bitGet(n, i)) z = Fp12.mul(z, num);\n    }\n    return z;\n  },\n  // https://eprint.iacr.org/2010/354.pdf\n  // https://eprint.iacr.org/2009/565.pdf\n  Fp12finalExponentiate: (num) => {\n    const x = BLS_X;\n    // this^(q⁶) / this\n    const t0 = Fp12.div(Fp12.frobeniusMap(num, 6), num);\n    // t0^(q²) * t0\n    const t1 = Fp12.mul(Fp12.frobeniusMap(t0, 2), t0);\n    const t2 = Fp12.conjugate(Fp12._cyclotomicExp(t1, x));\n    const t3 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicSquare(t1)), t2);\n    const t4 = Fp12.conjugate(Fp12._cyclotomicExp(t3, x));\n    const t5 = Fp12.conjugate(Fp12._cyclotomicExp(t4, x));\n    const t6 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicExp(t5, x)), Fp12._cyclotomicSquare(t2));\n    const t7 = Fp12.conjugate(Fp12._cyclotomicExp(t6, x));\n    const t2_t5_pow_q2 = Fp12.frobeniusMap(Fp12.mul(t2, t5), 2);\n    const t4_t1_pow_q3 = Fp12.frobeniusMap(Fp12.mul(t4, t1), 3);\n    const t6_t1c_pow_q1 = Fp12.frobeniusMap(Fp12.mul(t6, Fp12.conjugate(t1)), 1);\n    const t7_t3c_t1 = Fp12.mul(Fp12.mul(t7, Fp12.conjugate(t3)), t1);\n    // (t2 * t5)^(q²) * (t4 * t1)^(q³) * (t6 * t1.conj)^(q^1) * t7 * t3.conj * t1\n    return Fp12.mul(Fp12.mul(Fp12.mul(t2_t5_pow_q2, t4_t1_pow_q3), t6_t1c_pow_q1), t7_t3c_t1);\n  },\n});\n\n// Finite field over r.\n// This particular field is not used anywhere in bls12-381, but it is still useful.\nconst Fr = Field(BigInt('0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001'));\n\n// END OF CURVE FIELDS\n\n// HashToCurve\n\n// 3-isogeny map from E' to E https://www.rfc-editor.org/rfc/rfc9380#appendix-E.3\nconst isogenyMapG2 = isogenyMap(\n  Fp2,\n  [\n    // xNum\n    [\n      [\n        '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6',\n        '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6',\n      ],\n      [\n        '0x0',\n        '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71a',\n      ],\n      [\n        '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71e',\n        '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38d',\n      ],\n      [\n        '0x171d6541fa38ccfaed6dea691f5fb614cb14b4e7f4e810aa22d6108f142b85757098e38d0f671c7188e2aaaaaaaa5ed1',\n        '0x0',\n      ],\n    ],\n    // xDen\n    [\n      [\n        '0x0',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa63',\n      ],\n      [\n        '0xc',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9f',\n      ],\n      ['0x1', '0x0'], // LAST 1\n    ],\n    // yNum\n    [\n      [\n        '0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706',\n        '0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706',\n      ],\n      [\n        '0x0',\n        '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97be',\n      ],\n      [\n        '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71c',\n        '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38f',\n      ],\n      [\n        '0x124c9ad43b6cf79bfbf7043de3811ad0761b0f37a1e26286b0e977c69aa274524e79097a56dc4bd9e1b371c71c718b10',\n        '0x0',\n      ],\n    ],\n    // yDen\n    [\n      [\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb',\n      ],\n      [\n        '0x0',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa9d3',\n      ],\n      [\n        '0x12',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa99',\n      ],\n      ['0x1', '0x0'], // LAST 1\n    ],\n  ].map((i) => i.map((pair) => Fp2.fromBigTuple(pair.map(BigInt)))) as [Fp2[], Fp2[], Fp2[], Fp2[]]\n);\n// 11-isogeny map from E' to E\nconst isogenyMapG1 = isogenyMap(\n  Fp,\n  [\n    // xNum\n    [\n      '0x11a05f2b1e833340b809101dd99815856b303e88a2d7005ff2627b56cdb4e2c85610c2d5f2e62d6eaeac1662734649b7',\n      '0x17294ed3e943ab2f0588bab22147a81c7c17e75b2f6a8417f565e33c70d1e86b4838f2a6f318c356e834eef1b3cb83bb',\n      '0xd54005db97678ec1d1048c5d10a9a1bce032473295983e56878e501ec68e25c958c3e3d2a09729fe0179f9dac9edcb0',\n      '0x1778e7166fcc6db74e0609d307e55412d7f5e4656a8dbf25f1b33289f1b330835336e25ce3107193c5b388641d9b6861',\n      '0xe99726a3199f4436642b4b3e4118e5499db995a1257fb3f086eeb65982fac18985a286f301e77c451154ce9ac8895d9',\n      '0x1630c3250d7313ff01d1201bf7a74ab5db3cb17dd952799b9ed3ab9097e68f90a0870d2dcae73d19cd13c1c66f652983',\n      '0xd6ed6553fe44d296a3726c38ae652bfb11586264f0f8ce19008e218f9c86b2a8da25128c1052ecaddd7f225a139ed84',\n      '0x17b81e7701abdbe2e8743884d1117e53356de5ab275b4db1a682c62ef0f2753339b7c8f8c8f475af9ccb5618e3f0c88e',\n      '0x80d3cf1f9a78fc47b90b33563be990dc43b756ce79f5574a2c596c928c5d1de4fa295f296b74e956d71986a8497e317',\n      '0x169b1f8e1bcfa7c42e0c37515d138f22dd2ecb803a0c5c99676314baf4bb1b7fa3190b2edc0327797f241067be390c9e',\n      '0x10321da079ce07e272d8ec09d2565b0dfa7dccdde6787f96d50af36003b14866f69b771f8c285decca67df3f1605fb7b',\n      '0x6e08c248e260e70bd1e962381edee3d31d79d7e22c837bc23c0bf1bc24c6b68c24b1b80b64d391fa9c8ba2e8ba2d229',\n    ],\n    // xDen\n    [\n      '0x8ca8d548cff19ae18b2e62f4bd3fa6f01d5ef4ba35b48ba9c9588617fc8ac62b558d681be343df8993cf9fa40d21b1c',\n      '0x12561a5deb559c4348b4711298e536367041e8ca0cf0800c0126c2588c48bf5713daa8846cb026e9e5c8276ec82b3bff',\n      '0xb2962fe57a3225e8137e629bff2991f6f89416f5a718cd1fca64e00b11aceacd6a3d0967c94fedcfcc239ba5cb83e19',\n      '0x3425581a58ae2fec83aafef7c40eb545b08243f16b1655154cca8abc28d6fd04976d5243eecf5c4130de8938dc62cd8',\n      '0x13a8e162022914a80a6f1d5f43e7a07dffdfc759a12062bb8d6b44e833b306da9bd29ba81f35781d539d395b3532a21e',\n      '0xe7355f8e4e667b955390f7f0506c6e9395735e9ce9cad4d0a43bcef24b8982f7400d24bc4228f11c02df9a29f6304a5',\n      '0x772caacf16936190f3e0c63e0596721570f5799af53a1894e2e073062aede9cea73b3538f0de06cec2574496ee84a3a',\n      '0x14a7ac2a9d64a8b230b3f5b074cf01996e7f63c21bca68a81996e1cdf9822c580fa5b9489d11e2d311f7d99bbdcc5a5e',\n      '0xa10ecf6ada54f825e920b3dafc7a3cce07f8d1d7161366b74100da67f39883503826692abba43704776ec3a79a1d641',\n      '0x95fc13ab9e92ad4476d6e3eb3a56680f682b4ee96f7d03776df533978f31c1593174e4b4b7865002d6384d168ecdd0a',\n      '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n      '0x90d97c81ba24ee0259d1f094980dcfa11ad138e48a869522b52af6c956543d3cd0c7aee9b3ba3c2be9845719707bb33',\n      '0x134996a104ee5811d51036d776fb46831223e96c254f383d0f906343eb67ad34d6c56711962fa8bfe097e75a2e41c696',\n      '0xcc786baa966e66f4a384c86a3b49942552e2d658a31ce2c344be4b91400da7d26d521628b00523b8dfe240c72de1f6',\n      '0x1f86376e8981c217898751ad8746757d42aa7b90eeb791c09e4a3ec03251cf9de405aba9ec61deca6355c77b0e5f4cb',\n      '0x8cc03fdefe0ff135caf4fe2a21529c4195536fbe3ce50b879833fd221351adc2ee7f8dc099040a841b6daecf2e8fedb',\n      '0x16603fca40634b6a2211e11db8f0a6a074a7d0d4afadb7bd76505c3d3ad5544e203f6326c95a807299b23ab13633a5f0',\n      '0x4ab0b9bcfac1bbcb2c977d027796b3ce75bb8ca2be184cb5231413c4d634f3747a87ac2460f415ec961f8855fe9d6f2',\n      '0x987c8d5333ab86fde9926bd2ca6c674170a05bfe3bdd81ffd038da6c26c842642f64550fedfe935a15e4ca31870fb29',\n      '0x9fc4018bd96684be88c9e221e4da1bb8f3abd16679dc26c1e8b6e6a1f20cabe69d65201c78607a360370e577bdba587',\n      '0xe1bba7a1186bdb5223abde7ada14a23c42a0ca7915af6fe06985e7ed1e4d43b9b3f7055dd4eba6f2bafaaebca731c30',\n      '0x19713e47937cd1be0dfd0b8f1d43fb93cd2fcbcb6caf493fd1183e416389e61031bf3a5cce3fbafce813711ad011c132',\n      '0x18b46a908f36f6deb918c143fed2edcc523559b8aaf0c2462e6bfe7f911f643249d9cdf41b44d606ce07c8a4d0074d8e',\n      '0xb182cac101b9399d155096004f53f447aa7b12a3426b08ec02710e807b4633f06c851c1919211f20d4c04f00b971ef8',\n      '0x245a394ad1eca9b72fc00ae7be315dc757b3b080d4c158013e6632d3c40659cc6cf90ad1c232a6442d9d3f5db980133',\n      '0x5c129645e44cf1102a159f748c4a3fc5e673d81d7e86568d9ab0f5d396a7ce46ba1049b6579afb7866b1e715475224b',\n      '0x15e6be4e990f03ce4ea50b3b42df2eb5cb181d8f84965a3957add4fa95af01b2b665027efec01c7704b456be69c8b604',\n    ],\n    // yDen\n    [\n      '0x16112c4c3a9c98b252181140fad0eae9601a6de578980be6eec3232b5be72e7a07f3688ef60c206d01479253b03663c1',\n      '0x1962d75c2381201e1a0cbd6c43c348b885c84ff731c4d59ca4a10356f453e01f78a4260763529e3532f6102c2e49a03d',\n      '0x58df3306640da276faaae7d6e8eb15778c4855551ae7f310c35a5dd279cd2eca6757cd636f96f891e2538b53dbf67f2',\n      '0x16b7d288798e5395f20d23bf89edb4d1d115c5dbddbcd30e123da489e726af41727364f2c28297ada8d26d98445f5416',\n      '0xbe0e079545f43e4b00cc912f8228ddcc6d19c9f0f69bbb0542eda0fc9dec916a20b15dc0fd2ededda39142311a5001d',\n      '0x8d9e5297186db2d9fb266eaac783182b70152c65550d881c5ecd87b6f0f5a6449f38db9dfa9cce202c6477faaf9b7ac',\n      '0x166007c08a99db2fc3ba8734ace9824b5eecfdfa8d0cf8ef5dd365bc400a0051d5fa9c01a58b1fb93d1a1399126a775c',\n      '0x16a3ef08be3ea7ea03bcddfabba6ff6ee5a4375efa1f4fd7feb34fd206357132b920f5b00801dee460ee415a15812ed9',\n      '0x1866c8ed336c61231a1be54fd1d74cc4f9fb0ce4c6af5920abc5750c4bf39b4852cfe2f7bb9248836b233d9d55535d4a',\n      '0x167a55cda70a6e1cea820597d94a84903216f763e13d87bb5308592e7ea7d4fbc7385ea3d529b35e346ef48bb8913f55',\n      '0x4d2f259eea405bd48f010a01ad2911d9c6dd039bb61a6290e591b36e636a5c871a5c29f4f83060400f8b49cba8f6aa8',\n      '0xaccbb67481d033ff5852c1e48c50c477f94ff8aefce42d28c0f9a88cea7913516f968986f7ebbea9684b529e2561092',\n      '0xad6b9514c767fe3c3613144b45f1496543346d98adf02267d5ceef9a00d9b8693000763e3b90ac11e99b138573345cc',\n      '0x2660400eb2e4f3b628bdd0d53cd76f2bf565b94e72927c1cb748df27942480e420517bd8714cc80d1fadc1326ed06f7',\n      '0xe0fa1d816ddc03e6b24255e0d7819c171c40f65e273b853324efcd6356caa205ca2f570f13497804415473a1d634b8f',\n      '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n  ].map((i) => i.map((j) => BigInt(j))) as [Fp[], Fp[], Fp[], Fp[]]\n);\n\n// SWU Map - Fp2 to G2': y² = x³ + 240i * x + 1012 + 1012i\nconst G2_SWU = mapToCurveSimpleSWU(Fp2, {\n  A: Fp2.create({ c0: Fp.create(_0n), c1: Fp.create(BigInt(240)) }), // A' = 240 * I\n  B: Fp2.create({ c0: Fp.create(BigInt(1012)), c1: Fp.create(BigInt(1012)) }), // B' = 1012 * (1 + I)\n  Z: Fp2.create({ c0: Fp.create(BigInt(-2)), c1: Fp.create(BigInt(-1)) }), // Z: -(2 + I)\n});\n// Optimized SWU Map - Fp to G1\nconst G1_SWU = mapToCurveSimpleSWU(Fp, {\n  A: Fp.create(\n    BigInt(\n      '0x144698a3b8e9433d693a02c96d4982b0ea985383ee66a8d8e8981aefd881ac98936f8da0e0f97f5cf428082d584c1d'\n    )\n  ),\n  B: Fp.create(\n    BigInt(\n      '0x12e2908d11688030018b12e8753eee3b2016c1f0f24f4070a0b9c14fcef35ef55a23215a316ceaa5d1cc48e98e172be0'\n    )\n  ),\n  Z: Fp.create(BigInt(11)),\n});\n\n// GLV endomorphism Ψ(P), for fast cofactor clearing\nconst { G2psi, G2psi2 } = psiFrobenius(Fp, Fp2, Fp2.div(Fp2.ONE, Fp2.NONRESIDUE)); // 1/(u+1)\n\n// Default hash_to_field options are for hash to G2.\n//\n// Parameter definitions are in section 5.3 of the spec unless otherwise noted.\n// Parameter values come from section 8.8.2 of the spec.\n// https://www.rfc-editor.org/rfc/rfc9380#section-8.8.2\n//\n// Base field F is GF(p^m)\n// p = 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab\n// m = 2 (or 1 for G1 see section 8.8.1)\n// k = 128\nconst htfDefaults = Object.freeze({\n  // DST: a domain separation tag\n  // defined in section 2.2.5\n  // Use utils.getDSTLabel(), utils.setDSTLabel(value)\n  DST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n  encodeDST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n  // p: the characteristic of F\n  //    where F is a finite field of characteristic p and order q = p^m\n  p: Fp.ORDER,\n  // m: the extension degree of F, m >= 1\n  //     where F is a finite field of characteristic p and order q = p^m\n  m: 2,\n  // k: the target security level for the suite in bits\n  // defined in section 5.1\n  k: 128,\n  // option to use a message that has already been processed by\n  // expand_message_xmd\n  expand: 'xmd',\n  // Hash functions for: expand_message_xmd is appropriate for use with a\n  // wide range of hash functions, including SHA-2, SHA-3, BLAKE2, and others.\n  // BBS+ uses blake2: https://github.com/hyperledger/aries-framework-go/issues/2247\n  hash: sha256,\n} as const);\n\n// Encoding utils\n// Point on G1 curve: (x, y)\n\n// Compressed point of infinity\nconst COMPRESSED_ZERO = setMask(Fp.toBytes(_0n), { infinity: true, compressed: true }); // set compressed & point-at-infinity bits\n\nfunction parseMask(bytes: Uint8Array) {\n  // Copy, so we can remove mask data. It will be removed also later, when Fp.create will call modulo.\n  bytes = bytes.slice();\n  const mask = bytes[0] & 0b1110_0000;\n  const compressed = !!((mask >> 7) & 1); // compression bit (0b1000_0000)\n  const infinity = !!((mask >> 6) & 1); // point at infinity bit (0b0100_0000)\n  const sort = !!((mask >> 5) & 1); // sort bit (0b0010_0000)\n  bytes[0] &= 0b0001_1111; // clear mask (zero first 3 bits)\n  return { compressed, infinity, sort, value: bytes };\n}\n\nfunction setMask(\n  bytes: Uint8Array,\n  mask: { compressed?: boolean; infinity?: boolean; sort?: boolean }\n) {\n  if (bytes[0] & 0b1110_0000) throw new Error('setMask: non-empty mask');\n  if (mask.compressed) bytes[0] |= 0b1000_0000;\n  if (mask.infinity) bytes[0] |= 0b0100_0000;\n  if (mask.sort) bytes[0] |= 0b0010_0000;\n  return bytes;\n}\n\nfunction signatureG1ToRawBytes(point: ProjPointType<Fp>) {\n  point.assertValidity();\n  const isZero = point.equals(bls12_381.G1.ProjectivePoint.ZERO);\n  const { x, y } = point.toAffine();\n  if (isZero) return COMPRESSED_ZERO.slice();\n  const P = Fp.ORDER;\n  const sort = Boolean((y * _2n) / P);\n  return setMask(numberToBytesBE(x, Fp.BYTES), { compressed: true, sort });\n}\n\nfunction signatureG2ToRawBytes(point: ProjPointType<Fp2>) {\n  // NOTE: by some reasons it was missed in bls12-381, looks like bug\n  point.assertValidity();\n  const len = Fp.BYTES;\n  if (point.equals(bls12_381.G2.ProjectivePoint.ZERO))\n    return concatB(COMPRESSED_ZERO, numberToBytesBE(_0n, len));\n  const { x, y } = point.toAffine();\n  const { re: x0, im: x1 } = Fp2.reim(x);\n  const { re: y0, im: y1 } = Fp2.reim(y);\n  const tmp = y1 > _0n ? y1 * _2n : y0 * _2n;\n  const sort = Boolean((tmp / Fp.ORDER) & _1n);\n  const z2 = x0;\n  return concatB(\n    setMask(numberToBytesBE(x1, len), { sort, compressed: true }),\n    numberToBytesBE(z2, len)\n  );\n}\n\n/**\n * bls12-381 pairing-friendly curve.\n * @example\n * import { bls12_381 as bls } from '@noble/curves/bls12-381';\n * // G1 keys, G2 signatures\n * const privateKey = '67d53f170b908cabb9eb326c3c337762d59289a8fec79f7bc9254b584b73265c';\n * const message = '64726e3da8';\n * const publicKey = bls.getPublicKey(privateKey);\n * const signature = bls.sign(message, privateKey);\n * const isValid = bls.verify(signature, message, publicKey);\n */\nexport const bls12_381: CurveFn = bls({\n  // Fields\n  fields: {\n    Fp,\n    Fp2,\n    Fp6,\n    Fp12,\n    Fr,\n  },\n  // G1 is the order-q subgroup of E1(Fp) : y² = x³ + 4, #E1(Fp) = h1q, where\n  // characteristic; z + (z⁴ - z² + 1)(z - 1)²/3\n  G1: {\n    Fp,\n    // cofactor; (z - 1)²/3\n    h: BigInt('0x396c8c005555e1568c00aaab0000aaab'),\n    // generator's coordinates\n    // x = 3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507\n    // y = 1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569\n    Gx: BigInt(\n      '0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb'\n    ),\n    Gy: BigInt(\n      '0x08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1'\n    ),\n    a: Fp.ZERO,\n    b: _4n,\n    htfDefaults: { ...htfDefaults, m: 1, DST: 'BLS_SIG_BLS12381G1_XMD:SHA-256_SSWU_RO_NUL_' },\n    wrapPrivateKey: true,\n    allowInfinityPoint: true,\n    // Checks is the point resides in prime-order subgroup.\n    // point.isTorsionFree() should return true for valid points\n    // It returns false for shitty points.\n    // https://eprint.iacr.org/2021/1130.pdf\n    isTorsionFree: (c, point): boolean => {\n      // GLV endomorphism ψ(P)\n      const beta = BigInt(\n        '0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe'\n      );\n      const phi = new c(Fp.mul(point.px, beta), point.py, point.pz);\n      // TODO: unroll\n      const xP = point.multiplyUnsafe(BLS_X).negate(); // [x]P\n      const u2P = xP.multiplyUnsafe(BLS_X); // [u2]P\n      return u2P.equals(phi);\n    },\n    // Clear cofactor of G1\n    // https://eprint.iacr.org/2019/403\n    clearCofactor: (_c, point) => {\n      // return this.multiplyUnsafe(CURVE.h);\n      return point.multiplyUnsafe(BLS_X).add(point); // x*P + P\n    },\n    mapToCurve: (scalars: bigint[]) => {\n      const { x, y } = G1_SWU(Fp.create(scalars[0]));\n      return isogenyMapG1(x, y);\n    },\n    fromBytes: (bytes: Uint8Array): AffinePoint<Fp> => {\n      const { compressed, infinity, sort, value } = parseMask(bytes);\n      if (value.length === 48 && compressed) {\n        // TODO: Fp.bytes\n        const P = Fp.ORDER;\n        const compressedValue = bytesToNumberBE(value);\n        // Zero\n        const x = Fp.create(compressedValue & Fp.MASK);\n        if (infinity) {\n          if (x !== _0n) throw new Error('G1: non-empty compressed point at infinity');\n          return { x: _0n, y: _0n };\n        }\n        const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381.params.G1b)); // y² = x³ + b\n        let y = Fp.sqrt(right);\n        if (!y) throw new Error('invalid compressed G1 point');\n        if ((y * _2n) / P !== BigInt(sort)) y = Fp.neg(y);\n        return { x: Fp.create(x), y: Fp.create(y) };\n      } else if (value.length === 96 && !compressed) {\n        // Check if the infinity flag is set\n        const x = bytesToNumberBE(value.subarray(0, Fp.BYTES));\n        const y = bytesToNumberBE(value.subarray(Fp.BYTES));\n        if (infinity) {\n          if (x !== _0n || y !== _0n) throw new Error('G1: non-empty point at infinity');\n          return bls12_381.G1.ProjectivePoint.ZERO.toAffine();\n        }\n        return { x: Fp.create(x), y: Fp.create(y) };\n      } else {\n        throw new Error('invalid point G1, expected 48/96 bytes');\n      }\n    },\n    toBytes: (c, point, isCompressed) => {\n      const isZero = point.equals(c.ZERO);\n      const { x, y } = point.toAffine();\n      if (isCompressed) {\n        if (isZero) return COMPRESSED_ZERO.slice();\n        const P = Fp.ORDER;\n        const sort = Boolean((y * _2n) / P);\n        return setMask(numberToBytesBE(x, Fp.BYTES), { compressed: true, sort });\n      } else {\n        if (isZero) {\n          // 2x PUBLIC_KEY_LENGTH\n          const x = concatB(new Uint8Array([0x40]), new Uint8Array(2 * Fp.BYTES - 1));\n          return x;\n        } else {\n          return concatB(numberToBytesBE(x, Fp.BYTES), numberToBytesBE(y, Fp.BYTES));\n        }\n      }\n    },\n    ShortSignature: {\n      fromHex(hex: Hex): ProjPointType<Fp> {\n        const { infinity, sort, value } = parseMask(ensureBytes('signatureHex', hex, 48));\n        const P = Fp.ORDER;\n        const compressedValue = bytesToNumberBE(value);\n        // Zero\n        if (infinity) return bls12_381.G1.ProjectivePoint.ZERO;\n        const x = Fp.create(compressedValue & Fp.MASK);\n        const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381.params.G1b)); // y² = x³ + b\n        let y = Fp.sqrt(right);\n        if (!y) throw new Error('invalid compressed G1 point');\n        const aflag = BigInt(sort);\n        if ((y * _2n) / P !== aflag) y = Fp.neg(y);\n        const point = bls12_381.G1.ProjectivePoint.fromAffine({ x, y });\n        point.assertValidity();\n        return point;\n      },\n      toRawBytes(point: ProjPointType<Fp>) {\n        return signatureG1ToRawBytes(point);\n      },\n      toHex(point: ProjPointType<Fp>) {\n        return bytesToHex(signatureG1ToRawBytes(point));\n      },\n    },\n  },\n  // G2 is the order-q subgroup of E2(Fp²) : y² = x³+4(1+√−1),\n  // where Fp2 is Fp[√−1]/(x2+1). #E2(Fp2 ) = h2q, where\n  // G² - 1\n  // h2q\n  G2: {\n    Fp: Fp2,\n    // cofactor\n    h: BigInt(\n      '0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5'\n    ),\n    Gx: Fp2.fromBigTuple([\n      BigInt(\n        '0x024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8'\n      ),\n      BigInt(\n        '0x13e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e'\n      ),\n    ]),\n    // y =\n    // 927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582,\n    // 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905\n    Gy: Fp2.fromBigTuple([\n      BigInt(\n        '0x0ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801'\n      ),\n      BigInt(\n        '0x0606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be'\n      ),\n    ]),\n    a: Fp2.ZERO,\n    b: Fp2.fromBigTuple([_4n, _4n]),\n    hEff: BigInt(\n      '0xbc69f08f2ee75b3584c6a0ea91b352888e2a8e9145ad7689986ff031508ffe1329c2f178731db956d82bf015d1212b02ec0ec69d7477c1ae954cbc06689f6a359894c0adebbf6b4e8020005aaa95551'\n    ),\n    htfDefaults: { ...htfDefaults },\n    wrapPrivateKey: true,\n    allowInfinityPoint: true,\n    mapToCurve: (scalars: bigint[]) => {\n      const { x, y } = G2_SWU(Fp2.fromBigTuple(scalars));\n      return isogenyMapG2(x, y);\n    },\n    // Checks is the point resides in prime-order subgroup.\n    // point.isTorsionFree() should return true for valid points\n    // It returns false for shitty points.\n    // https://eprint.iacr.org/2021/1130.pdf\n    // Older version: https://eprint.iacr.org/2019/814.pdf\n    isTorsionFree: (c, P): boolean => {\n      return P.multiplyUnsafe(BLS_X).negate().equals(G2psi(c, P)); // ψ(P) == [u](P)\n    },\n    // Maps the point into the prime-order subgroup G2.\n    // clear_cofactor_bls12381_g2 from RFC 9380.\n    // https://eprint.iacr.org/2017/419.pdf\n    // prettier-ignore\n    clearCofactor: (c, P) => {\n      const x = BLS_X;\n      let t1 = P.multiplyUnsafe(x).negate();  // [-x]P\n      let t2 = G2psi(c, P);                   // Ψ(P)\n      let t3 = P.double();                    // 2P\n      t3 = G2psi2(c, t3);                     // Ψ²(2P)\n      t3 = t3.subtract(t2);                   // Ψ²(2P) - Ψ(P)\n      t2 = t1.add(t2);                        // [-x]P + Ψ(P)\n      t2 = t2.multiplyUnsafe(x).negate();     // [x²]P - [x]Ψ(P)\n      t3 = t3.add(t2);                        // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P)\n      t3 = t3.subtract(t1);                   // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P) + [x]P\n      const Q = t3.subtract(P);               // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P) + [x]P - 1P\n      return Q;                               // [x²-x-1]P + [x-1]Ψ(P) + Ψ²(2P)\n    },\n    fromBytes: (bytes: Uint8Array): AffinePoint<Fp2> => {\n      const { compressed, infinity, sort, value } = parseMask(bytes);\n      if (\n        (!compressed && !infinity && sort) || // 00100000\n        (!compressed && infinity && sort) || // 01100000\n        (sort && infinity && compressed) // 11100000\n      ) {\n        throw new Error('invalid encoding flag: ' + (bytes[0] & 0b1110_0000));\n      }\n      const L = Fp.BYTES;\n      const slc = (b: Uint8Array, from: number, to?: number) => bytesToNumberBE(b.slice(from, to));\n      if (value.length === 96 && compressed) {\n        const b = bls12_381.params.G2b;\n        const P = Fp.ORDER;\n        if (infinity) {\n          // check that all bytes are 0\n          if (value.reduce((p, c) => (p !== 0 ? c + 1 : c), 0) > 0) {\n            throw new Error('invalid compressed G2 point');\n          }\n          return { x: Fp2.ZERO, y: Fp2.ZERO };\n        }\n        const x_1 = slc(value, 0, L);\n        const x_0 = slc(value, L, 2 * L);\n        const x = Fp2.create({ c0: Fp.create(x_0), c1: Fp.create(x_1) });\n        const right = Fp2.add(Fp2.pow(x, _3n), b); // y² = x³ + 4 * (u+1) = x³ + b\n        let y = Fp2.sqrt(right);\n        const Y_bit = y.c1 === _0n ? (y.c0 * _2n) / P : (y.c1 * _2n) / P ? _1n : _0n;\n        y = sort && Y_bit > 0 ? y : Fp2.neg(y);\n        return { x, y };\n      } else if (value.length === 192 && !compressed) {\n        if (infinity) {\n          if (value.reduce((p, c) => (p !== 0 ? c + 1 : c), 0) > 0) {\n            throw new Error('invalid uncompressed G2 point');\n          }\n          return { x: Fp2.ZERO, y: Fp2.ZERO };\n        }\n        const x1 = slc(value, 0, L);\n        const x0 = slc(value, L, 2 * L);\n        const y1 = slc(value, 2 * L, 3 * L);\n        const y0 = slc(value, 3 * L, 4 * L);\n        return { x: Fp2.fromBigTuple([x0, x1]), y: Fp2.fromBigTuple([y0, y1]) };\n      } else {\n        throw new Error('invalid point G2, expected 96/192 bytes');\n      }\n    },\n    toBytes: (c, point, isCompressed) => {\n      const { BYTES: len, ORDER: P } = Fp;\n      const isZero = point.equals(c.ZERO);\n      const { x, y } = point.toAffine();\n      if (isCompressed) {\n        if (isZero) return concatB(COMPRESSED_ZERO, numberToBytesBE(_0n, len));\n        const flag = Boolean(y.c1 === _0n ? (y.c0 * _2n) / P : (y.c1 * _2n) / P);\n        return concatB(\n          setMask(numberToBytesBE(x.c1, len), { compressed: true, sort: flag }),\n          numberToBytesBE(x.c0, len)\n        );\n      } else {\n        if (isZero) return concatB(new Uint8Array([0x40]), new Uint8Array(4 * len - 1)); // bytes[0] |= 1 << 6;\n        const { re: x0, im: x1 } = Fp2.reim(x);\n        const { re: y0, im: y1 } = Fp2.reim(y);\n        return concatB(\n          numberToBytesBE(x1, len),\n          numberToBytesBE(x0, len),\n          numberToBytesBE(y1, len),\n          numberToBytesBE(y0, len)\n        );\n      }\n    },\n    Signature: {\n      // TODO: Optimize, it's very slow because of sqrt.\n      fromHex(hex: Hex): ProjPointType<Fp2> {\n        const { infinity, sort, value } = parseMask(ensureBytes('signatureHex', hex));\n        const P = Fp.ORDER;\n        const half = value.length / 2;\n        if (half !== 48 && half !== 96)\n          throw new Error('invalid compressed signature length, must be 96 or 192');\n        const z1 = bytesToNumberBE(value.slice(0, half));\n        const z2 = bytesToNumberBE(value.slice(half));\n        // Indicates the infinity point\n        if (infinity) return bls12_381.G2.ProjectivePoint.ZERO;\n        const x1 = Fp.create(z1 & Fp.MASK);\n        const x2 = Fp.create(z2);\n        const x = Fp2.create({ c0: x2, c1: x1 });\n        const y2 = Fp2.add(Fp2.pow(x, _3n), bls12_381.params.G2b); // y² = x³ + 4\n        // The slow part\n        let y = Fp2.sqrt(y2);\n        if (!y) throw new Error('Failed to find a square root');\n\n        // Choose the y whose leftmost bit of the imaginary part is equal to the a_flag1\n        // If y1 happens to be zero, then use the bit of y0\n        const { re: y0, im: y1 } = Fp2.reim(y);\n        const aflag1 = BigInt(sort);\n        const isGreater = y1 > _0n && (y1 * _2n) / P !== aflag1;\n        const isZero = y1 === _0n && (y0 * _2n) / P !== aflag1;\n        if (isGreater || isZero) y = Fp2.neg(y);\n        const point = bls12_381.G2.ProjectivePoint.fromAffine({ x, y });\n        point.assertValidity();\n        return point;\n      },\n      toRawBytes(point: ProjPointType<Fp2>) {\n        return signatureG2ToRawBytes(point);\n      },\n      toHex(point: ProjPointType<Fp2>) {\n        return bytesToHex(signatureG2ToRawBytes(point));\n      },\n    },\n  },\n  params: {\n    ateLoopSize: BLS_X, // The BLS parameter x for BLS12-381\n    r: Fr.ORDER, // order; z⁴ − z² + 1; CURVE.n from other curves\n    xNegative: true,\n    twistType: 'multiplicative',\n  },\n  htfDefaults,\n  hash: sha256,\n  randomBytes,\n});\n", "import { bls12_381 as bls } from '@noble/curves/bls12-381'\n\nimport type * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport type { Branded, Compute } from './internal/types.js'\n\n/** Type for a field element in the base field of the BLS12-381 curve. */\nexport type Fp = bigint\n/** Type for a field element in the extension field of the BLS12-381 curve. */\nexport type Fp2 = Compute<{ c0: bigint; c1: bigint }>\n\n/** Root type for a BLS point on the G1 or G2 curve. */\nexport type BlsPoint<type = Fp | Fp2> = Compute<{\n  x: type\n  y: type\n  z: type\n}>\n\n/** Type for a BLS point on the G1 curve. */\nexport type G1 = BlsPoint<Fp>\n/** Branded type for a bytes representation of a G1 point. */\nexport type G1Bytes = Branded<Bytes.Bytes, 'G1'>\n/** Branded type for a hex representation of a G1 point. */\nexport type G1Hex = Branded<Hex.Hex, 'G1'>\n\n/** Type for a BLS point on the G2 curve. */\nexport type G2 = BlsPoint<Fp2>\n/** Branded type for a bytes representation of a G2 point. */\nexport type G2Bytes = Branded<Bytes.Bytes, 'G2'>\n/** Branded type for a hex representation of a G2 point. */\nexport type G2Hex = Branded<Hex.Hex, 'G2'>\n\n/**\n * Converts a BLS point to {@link ox#Bytes.Bytes}.\n *\n * @example\n * ### Public Key to Bytes\n * ```ts twoslash\n * import { Bls, BlsPoint } from 'ox'\n *\n * const publicKey = Bls.getPublicKey({ privateKey: '0x...' })\n * const publicKeyBytes = BlsPoint.toBytes(publicKey)\n * // @log: Uint8Array [172, 175, 255, ...]\n * ```\n *\n * @example\n * ### Signature to Bytes\n * ```ts twoslash\n * import { Bls, BlsPoint } from 'ox'\n *\n * const signature = Bls.sign({ payload: '0x...', privateKey: '0x...' })\n * const signatureBytes = BlsPoint.toBytes(signature)\n * // @log: Uint8Array [172, 175, 255, ...]\n * ```\n *\n * @param point - The BLS point to convert.\n * @returns The bytes representation of the BLS point.\n */\nexport function toBytes<point extends G1 | G2>(\n  point: point,\n): point extends G1 ? G1Bytes : G2Bytes {\n  const group = typeof point.z === 'bigint' ? bls.G1 : bls.G2\n  return new (group as any).ProjectivePoint(\n    point.x,\n    point.y,\n    point.z,\n  ).toRawBytes()\n}\n\nexport declare namespace toBytes {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a BLS point to {@link ox#Hex.Hex}.\n *\n * @example\n * ### Public Key to Hex\n *\n * ```ts twoslash\n * import { Bls, BlsPoint } from 'ox'\n *\n * const publicKey = Bls.getPublicKey({ privateKey: '0x...' })\n * const publicKeyHex = BlsPoint.toHex(publicKey)\n * // @log: '0xacafff52270773ad1728df2807c0f1b0b271fa6b37dfb8b2f75448573c76c81bcd6790328a60e40ef5a13343b32d9e66'\n * ```\n *\n * @example\n * ### Signature to Hex\n *\n * ```ts twoslash\n * import { Bls, BlsPoint } from 'ox'\n *\n * const signature = Bls.sign({ payload: '0x...', privateKey: '0x...' })\n * const signatureHex = BlsPoint.toHex(signature)\n * // @log: '0xb4698f7611999fba87033b9cf72312c76c683bbc48175e2d4cb275907d6a267ab9840a66e3051e5ed36fd13aa712f9a9024f9fa9b67f716dfb74ae4efb7d9f1b7b43b4679abed6644cf476c12e79f309351ea8452487cd93f66e29e04ebe427c'\n * ```\n *\n * @param point - The BLS point to convert.\n * @returns The hex representation of the BLS point.\n */\nexport function toHex<point extends G1 | G2>(\n  point: point,\n): point extends G1 ? G1Hex : G2Hex\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function toHex(point: G1 | G2): Hex.Hex {\n  return Hex.fromBytes(toBytes(point))\n}\n\nexport declare namespace toHex {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts {@link ox#Bytes.Bytes} to a BLS point.\n *\n * @example\n * ### Bytes to Public Key\n *\n * ```ts twoslash\n * // @noErrors\n * import { BlsPoint } from 'ox'\n *\n * const publicKey = BlsPoint.fromBytes(Bytes.from([172, 175, 255, ...]), 'G1')\n * // @log: {\n * // @log:   x: 172...n,\n * // @log:   y: 175...n,\n * // @log:   z: 1n,\n * // @log: }\n * ```\n *\n * @example\n * ### Bytes to Signature\n *\n * ```ts twoslash\n * // @noErrors\n * import { BlsPoint } from 'ox'\n *\n * const signature = BlsPoint.fromBytes(Bytes.from([172, 175, 255, ...]), 'G2')\n * // @log: {\n * // @log:   x: 511...n,\n * // @log:   y: 234...n,\n * // @log:   z: 1n,\n * // @log: }\n * ```\n *\n * @param bytes - The bytes to convert.\n * @returns The BLS point.\n */\nexport function fromBytes<group extends 'G1' | 'G2'>(\n  bytes: Bytes.Bytes,\n  group: group,\n): group extends 'G1' ? G1 : G2\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function fromBytes(bytes: Bytes.Bytes): BlsPoint<any> {\n  const group = bytes.length === 48 ? bls.G1 : bls.G2\n  const point = group.ProjectivePoint.fromHex(bytes)\n  return {\n    x: point.px,\n    y: point.py,\n    z: point.pz,\n  }\n}\n\nexport declare namespace fromBytes {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts {@link ox#Hex.Hex} to a BLS point.\n *\n * @example\n * ### Hex to Public Key\n *\n * ```ts twoslash\n * // @noErrors\n * import { BlsPoint } from 'ox'\n *\n * const publicKey = BlsPoint.fromHex('0xacafff52270773ad1728df2807c0f1b0b271fa6b37dfb8b2f75448573c76c81bcd6790328a60e40ef5a13343b32d9e66', 'G1')\n * // @log: {\n * // @log:   x: 172...n,\n * // @log:   y: 175...n,\n * // @log:   z: 1n,\n * // @log: }\n * ```\n *\n * @example\n * ### Hex to Signature\n *\n * ```ts twoslash\n * // @noErrors\n * import { BlsPoint } from 'ox'\n *\n * const signature = BlsPoint.fromHex(\n *   '0xb4698f7611999fba87033b9cf72312c76c683bbc48175e2d4cb275907d6a267ab9840a66e3051e5ed36fd13aa712f9a9024f9fa9b67f716dfb74ae4efb7d9f1b7b43b4679abed6644cf476c12e79f309351ea8452487cd93f66e29e04ebe427c',\n *   'G2',\n * )\n * // @log: {\n * // @log:   x: 511...n,\n * // @log:   y: 234...n,\n * // @log:   z: 1n,\n * // @log: }\n * ```\n *\n * @param bytes - The bytes to convert.\n * @returns The BLS point.\n */\nexport function fromHex<group extends 'G1' | 'G2'>(\n  hex: Hex.Hex,\n  group: group,\n): group extends 'G1' ? G1 : G2\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function fromHex(hex: Hex.Hex, group: 'G1' | 'G2'): BlsPoint<any> {\n  return fromBytes(Hex.toBytes(hex), group)\n}\n\nexport declare namespace fromHex {\n  type ErrorType = Errors.GlobalErrorType\n}\n", "import * as Address from './Address.js'\nimport * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as Hex from './Hex.js'\nimport * as Rlp from './Rlp.js'\nimport type { OneOf } from './internal/types.js'\n\n/**\n * Computes Contract Address generated by the [CREATE](https://ethereum.stackexchange.com/questions/68943/create-opcode-what-does-it-really-do/68945#68945) or [CREATE2](https://eips.ethereum.org/EIPS/eip-1014) opcode.\n *\n * @example\n * ### CREATE\n *\n * Computes via the [CREATE](https://ethereum.stackexchange.com/questions/68943/create-opcode-what-does-it-really-do/68945#68945) opcode. Shorthand for {@link ox#ContractAddress.(fromCreate:function)}.\n *\n * ```ts twoslash\n * import { ContractAddress } from 'ox'\n * ContractAddress.from({\n *   from: '0x1a1e021a302c237453d3d45c7b82b19ceeb7e2e6',\n *   nonce: 0n,\n * })\n * // @log: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2'\n * ```\n *\n * @example\n * ### CREATE2\n *\n * Computes via the [CREATE2](https://eips.ethereum.org/EIPS/eip-1014) opcode. Shorthand for {@link ox#ContractAddress.(fromCreate2:function)}.\n *\n * ```ts twoslash\n * import { ContractAddress, Hex } from 'ox'\n * ContractAddress.from({\n *   from: '0x1a1e021a302c237453d3d45c7b82b19ceeb7e2e6',\n *   bytecode: '0x6394198df16000526103ff60206004601c335afa6040516060f3',\n *   salt: Hex.fromString('hello world'),\n * })\n * // @log: '0x59fbB593ABe27Cb193b6ee5C5DC7bbde312290aB'\n * ```\n *\n * @param options - Options.\n * @returns Contract Address.\n */\nexport function from(options: from.Options): Address.Address {\n  if (options.salt) return fromCreate2(options)\n  return fromCreate(options)\n}\n\nexport declare namespace from {\n  export type Options = OneOf<fromCreate.Options | fromCreate2.Options>\n\n  type ErrorType =\n    | fromCreate.ErrorType\n    | fromCreate2.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Computes contract address via [CREATE](https://ethereum.stackexchange.com/questions/68943/create-opcode-what-does-it-really-do/68945#68945) opcode.\n *\n * @example\n * ```ts twoslash\n * import { ContractAddress } from 'ox'\n *\n * ContractAddress.fromCreate({\n *   from: '0x1a1e021a302c237453d3d45c7b82b19ceeb7e2e6',\n *   nonce: 0n,\n * })\n * // @log: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2'\n * ```\n *\n * @param options - Options for retrieving address.\n * @returns Contract Address.\n */\nexport function fromCreate(options: fromCreate.Options): Address.Address {\n  const from = Bytes.fromHex(Address.from(options.from))\n\n  let nonce = Bytes.fromNumber(options.nonce)\n  if (nonce[0] === 0) nonce = new Uint8Array([])\n\n  return Address.from(\n    `0x${Hash.keccak256(Rlp.fromBytes([from, nonce], { as: 'Hex' })).slice(26)}` as Address.Address,\n  )\n}\n\nexport declare namespace fromCreate {\n  type Options = {\n    /** The address the contract was deployed from. */\n    from: Address.Address\n    /** The nonce of the transaction which deployed the contract. */\n    nonce: bigint\n  }\n\n  type ErrorType =\n    | Hash.keccak256.ErrorType\n    | Address.from.ErrorType\n    | Bytes.fromHex.ErrorType\n    | Bytes.fromNumber.ErrorType\n    | Rlp.fromBytes.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Computes contract address via [CREATE2](https://eips.ethereum.org/EIPS/eip-1014) opcode.\n *\n * @example\n * ```ts twoslash\n * import { ContractAddress, Hex } from 'ox'\n *\n * ContractAddress.fromCreate2({\n *   from: '0x1a1e021a302c237453d3d45c7b82b19ceeb7e2e6',\n *   bytecode: '0x6394198df16000526103ff60206004601c335afa6040516060f3',\n *   salt: Hex.fromString('hello world'),\n * })\n * // @log: '0x59fbB593ABe27Cb193b6ee5C5DC7bbde312290aB'\n * ```\n *\n * @param options - Options for retrieving address.\n * @returns Contract Address.\n */\nexport function fromCreate2(options: fromCreate2.Options): Address.Address {\n  const from = Bytes.fromHex(Address.from(options.from))\n  const salt = Bytes.padLeft(\n    Bytes.validate(options.salt) ? options.salt : Bytes.fromHex(options.salt),\n    32,\n  )\n\n  const bytecodeHash = (() => {\n    if ('bytecodeHash' in options) {\n      if (Bytes.validate(options.bytecodeHash)) return options.bytecodeHash\n      return Bytes.fromHex(options.bytecodeHash)\n    }\n    return Hash.keccak256(options.bytecode, { as: 'Bytes' })\n  })()\n\n  return Address.from(\n    Hex.slice(\n      Hash.keccak256(\n        Bytes.concat(Bytes.fromHex('0xff'), from, salt, bytecodeHash),\n        { as: 'Hex' },\n      ),\n      12,\n    ),\n  )\n}\n\nexport declare namespace fromCreate2 {\n  type Options =\n    | {\n        bytecode: Bytes.Bytes | Hex.Hex\n        from: Address.Address\n        salt: Bytes.Bytes | Hex.Hex\n      }\n    | {\n        bytecodeHash: Bytes.Bytes | Hex.Hex\n        from: Address.Address\n        salt: Bytes.Bytes | Hex.Hex\n      }\n\n  type ErrorType =\n    | Address.from.ErrorType\n    | Bytes.concat.ErrorType\n    | Bytes.validate.ErrorType\n    | Bytes.padLeft.ErrorType\n    | Hash.keccak256.ErrorType\n    | Hex.slice.ErrorType\n    | Bytes.fromHex.ErrorType\n    | Errors.GlobalErrorType\n}\n", "import type * as Address from './Address.js'\nimport type * as Block from './Block.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport type { Compute } from './internal/types.js'\n\n/** A Filter as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/filter.yaml). */\nexport type Filter<bigintType = bigint> = Compute<{\n  /** Address to filter for logs. */\n  address?: Address.Address | readonly Address.Address[] | null | undefined\n  /** Block number or tag to filter logs from. */\n  fromBlock?: Block.Number<bigintType> | Block.Tag | undefined\n  /** Block number or tag to filter logs to. */\n  toBlock?: Block.Number<bigintType> | Block.Tag | undefined\n  /** Topics to filter for logs. */\n  topics?: Topics | undefined\n}>\n\n/** RPC representation of a {@link ox#Filter.Filter}. */\nexport type Rpc = Filter<Hex.Hex>\n\n/** Set of Filter topics. */\nexport type Topics = readonly Topic[]\n\n/**\n * A filter topic.\n *\n * - `null`: Matches any topic.\n * - `Hex`: Matches if the topic is equal.\n * - `Hex[]`: Matches if the topic is in the array.\n */\nexport type Topic = Hex.Hex | readonly Hex.Hex[] | null\n\n/**\n * Converts a {@link ox#Filter.Rpc} to an {@link ox#Filter.Filter}.\n *\n * @example\n * ```ts twoslash\n * import { Filter } from 'ox'\n *\n * const filter = Filter.fromRpc({\n *   address: '0xd3cda913deb6f67967b99d671a681250403edf27',\n *   fromBlock: 'latest',\n *   toBlock: '0x010f2c',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     null,\n *     '0x0000000000000000000000000c04d9e9278ec5e4d424476d3ebec70cb5d648d1',\n *   ],\n * })\n * // @log: {\n * // @log:   address: '0xd3cda913deb6f67967b99d671a681250403edf27',\n * // @log:   fromBlock: 'latest',\n * // @log:   toBlock: 69420n,\n * // @log:   topics: [\n * // @log:     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n * // @log:     null,\n * // @log:     '0x0000000000000000000000000c04d9e9278ec5e4d424476d3ebec70cb5d648d1',\n * // @log:   ],\n * // @log: }\n * ```\n *\n * @param filter - The RPC filter to convert.\n * @returns An instantiated {@link ox#Filter.Filter}.\n */\nexport function fromRpc(filter: Rpc): Filter {\n  const { fromBlock, toBlock } = filter\n  return {\n    ...filter,\n    ...(fromBlock && {\n      fromBlock: Hex.validate(fromBlock, { strict: false })\n        ? BigInt(fromBlock)\n        : fromBlock,\n    }),\n    ...(toBlock && {\n      toBlock: Hex.validate(toBlock, { strict: false })\n        ? BigInt(toBlock)\n        : toBlock,\n    }),\n  } as Filter\n}\n\nexport declare namespace fromRpc {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#Filter.Filter} to a {@link ox#Filter.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent, Filter } from 'ox'\n *\n * const transfer = AbiEvent.from('event Transfer(address indexed, address indexed, uint256)')\n * const { topics } = AbiEvent.encode(transfer)\n *\n * const filter = Filter.toRpc({\n *   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n *   topics,\n * })\n * // @log: {\n * // @log:   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n * // @log:   topics: [\n * // @log:     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n * // @log:   ],\n * // @log: }\n * ```\n *\n * @param filter - The filter to convert.\n * @returns An RPC filter.\n */\nexport function toRpc(filter: Filter): Rpc {\n  const { address, topics, fromBlock, toBlock } = filter\n  return {\n    ...(address && { address }),\n    ...(topics && { topics }),\n    ...(typeof fromBlock !== 'undefined'\n      ? {\n          fromBlock:\n            typeof fromBlock === 'bigint'\n              ? Hex.fromNumber(fromBlock)\n              : fromBlock,\n        }\n      : {}),\n    ...(typeof toBlock !== 'undefined'\n      ? {\n          toBlock:\n            typeof toBlock === 'bigint' ? Hex.fromNumber(toBlock) : toBlock,\n        }\n      : {}),\n  }\n}\n\nexport declare namespace toRpc {\n  type ErrorType = Errors.GlobalErrorType\n}\n", "import { HDKey, type Versions } from '@scure/bip32'\nimport * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport type * as Hex from './Hex.js'\nimport type * as PublicKey from './PublicKey.js'\nimport * as internal from './internal/hdKey.js'\n\n/** Root type for a Hierarchical Deterministic (HD) Key. */\nexport type HdKey = {\n  derive: (path: string) => HdKey\n  depth: number\n  index: number\n  identifier: Hex.Hex\n  privateKey: Hex.Hex\n  privateExtendedKey: string\n  publicKey: PublicKey.PublicKey<false>\n  publicExtendedKey: string\n  versions: Versions\n}\n\n/**\n * Creates a HD Key from an extended private key.\n *\n * @example\n * ```ts twoslash\n * import { HdKey } from 'ox'\n *\n * const hdKey = HdKey.fromExtendedKey('...')\n *\n * console.log(hdKey.privateKey)\n * // @log: '0x...'\n * ```\n *\n * @param extendedKey - The extended private key.\n * @returns The HD Key.\n */\nexport function fromExtendedKey(extendedKey: string): HdKey {\n  const key = HDKey.fromExtendedKey(extendedKey)\n  return internal.fromScure(key)\n}\n\nexport declare namespace fromExtendedKey {\n  type ErrorType = internal.fromScure.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Creates a HD Key from a JSON object containing an extended private key (`xpriv`).\n *\n * @example\n * ```ts twoslash\n * import { HdKey } from 'ox'\n *\n * const hdKey = HdKey.fromJson({ xpriv: '...' })\n *\n * console.log(hdKey.privateKey)\n * // @log: '0x...'\n * ```\n *\n * @param json - The JSON object containing an extended private key (`xpriv`).\n * @returns The HD Key.\n */\nexport function fromJson(json: { xpriv: string }): HdKey {\n  return internal.fromScure(HDKey.fromJSON(json))\n}\n\nexport declare namespace fromJson {\n  type ErrorType = internal.fromScure.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Creates a HD Key from a master seed.\n *\n * @example\n * ```ts twoslash\n * import { HdKey, Mnemonic } from 'ox'\n *\n * const seed = Mnemonic.toSeed('test test test test test test test test test test test junk')\n * const hdKey = HdKey.fromSeed(seed)\n * ```\n *\n * @example\n * ### Path Derivation\n *\n * You can derive a HD Key at a specific path using `derive`.\n *\n * ```ts twoslash\n * import { HdKey, Mnemonic } from 'ox'\n *\n * const mnemonic = Mnemonic.toSeed('test test test test test test test test test test test junk')\n * const hdKey = HdKey.fromSeed(mnemonic).derive(HdKey.path())\n *\n * console.log(hdKey.privateKey)\n * // @log: '0x...'\n * ```\n *\n * @param seed - The master seed to create the HD Key from.\n * @param options - Creation options.\n * @returns The HD Key.\n */\nexport function fromSeed(\n  seed: Hex.Hex | Bytes.Bytes,\n  options: fromSeed.Options = {},\n): HdKey {\n  const { versions } = options\n  const key = HDKey.fromMasterSeed(Bytes.from(seed), versions)\n  return internal.fromScure(key)\n}\n\nexport declare namespace fromSeed {\n  type Options = {\n    /** The versions to use for the HD Key. */\n    versions?: Versions | undefined\n  }\n\n  type ErrorType =\n    | Bytes.from.ErrorType\n    | internal.fromScure.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Creates an Ethereum-based BIP-44 HD path.\n *\n * @example\n * ```ts twoslash\n * import { HdKey } from 'ox'\n *\n * const path = HdKey.path({ account: 1, index: 2 })\n * // @log: \"m/44'/60'/1'/0/2\"\n * ```\n *\n * @param options - Path options.\n * @returns The path.\n */\nexport function path(options: path.Options = {}): string {\n  const { account = 0, change = 0, index = 0 } = options\n  return `m/44'/60'/${account}'/${change}/${index}`\n}\n\nexport declare namespace path {\n  type Options = {\n    /**\n     * The account.\n     * @default 0\n     */\n    account?: number | undefined\n    /**\n     * The change.\n     * @default 0\n     */\n    change?: number | undefined\n    /**\n     * The address index.\n     * @default 0\n     */\n    index?: number | undefined\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n", "/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\nexport interface Coder<F, T> {\n  encode(from: F): T;\n  decode(to: T): F;\n}\n\nexport interface BytesCoder extends Coder<Uint8Array, string> {\n  encode: (data: Uint8Array) => string;\n  decode: (str: string) => Uint8Array;\n}\n\nfunction isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is Uint8Array. */\nfunction abytes(b: Uint8Array | undefined, ...lengths: number[]): void {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n\nfunction isArrayOf(isString: boolean, arr: any[]) {\n  if (!Array.isArray(arr)) return false;\n  if (arr.length === 0) return true;\n  if (isString) {\n    return arr.every((item) => typeof item === 'string');\n  } else {\n    return arr.every((item) => Number.isSafeInteger(item));\n  }\n}\n\n// no abytes: seems to have 10% slowdown. Why?!\n\nfunction afn(input: Function): input is Function {\n  if (typeof input !== 'function') throw new Error('function expected');\n  return true;\n}\n\nfunction astr(label: string, input: unknown): input is string {\n  if (typeof input !== 'string') throw new Error(`${label}: string expected`);\n  return true;\n}\n\nfunction anumber(n: number): void {\n  if (!Number.isSafeInteger(n)) throw new Error(`invalid integer: ${n}`);\n}\n\nfunction aArr(input: any[]) {\n  if (!Array.isArray(input)) throw new Error('array expected');\n}\nfunction astrArr(label: string, input: string[]) {\n  if (!isArrayOf(true, input)) throw new Error(`${label}: array of strings expected`);\n}\nfunction anumArr(label: string, input: number[]) {\n  if (!isArrayOf(false, input)) throw new Error(`${label}: array of numbers expected`);\n}\n\n// TODO: some recusive type inference so it would check correct order of input/output inside rest?\n// like <string, number>, <number, bytes>, <bytes, float>\ntype Chain = [Coder<any, any>, ...Coder<any, any>[]];\n// Extract info from Coder type\ntype Input<F> = F extends Coder<infer T, any> ? T : never;\ntype Output<F> = F extends Coder<any, infer T> ? T : never;\n// Generic function for arrays\ntype First<T> = T extends [infer U, ...any[]] ? U : never;\ntype Last<T> = T extends [...any[], infer U] ? U : never;\ntype Tail<T> = T extends [any, ...infer U] ? U : never;\n\ntype AsChain<C extends Chain, Rest = Tail<C>> = {\n  // C[K] = Coder<Input<C[K]>, Input<Rest[k]>>\n  [K in keyof C]: Coder<Input<C[K]>, Input<K extends keyof Rest ? Rest[K] : any>>;\n};\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction chain<T extends Chain & AsChain<T>>(...args: T): Coder<Input<First<T>>, Output<Last<T>>> {\n  const id = (a: any) => a;\n  // Wrap call in closure so JIT can inline calls\n  const wrap = (a: any, b: any) => (c: any) => a(b(c));\n  // Construct chain of args[-1].encode(args[-2].encode([...]))\n  const encode = args.map((x) => x.encode).reduceRight(wrap, id);\n  // Construct chain of args[0].decode(args[1].decode(...))\n  const decode = args.map((x) => x.decode).reduce(wrap, id);\n  return { encode, decode };\n}\n\n/**\n * Encodes integer radix representation to array of strings using alphabet and back.\n * Could also be array of strings.\n * @__NO_SIDE_EFFECTS__\n */\nfunction alphabet(letters: string | string[]): Coder<number[], string[]> {\n  // mapping 1 to \"b\"\n  const lettersA = typeof letters === 'string' ? letters.split('') : letters;\n  const len = lettersA.length;\n  astrArr('alphabet', lettersA);\n\n  // mapping \"b\" to 1\n  const indexes = new Map(lettersA.map((l, i) => [l, i]));\n  return {\n    encode: (digits: number[]) => {\n      aArr(digits);\n      return digits.map((i) => {\n        if (!Number.isSafeInteger(i) || i < 0 || i >= len)\n          throw new Error(\n            `alphabet.encode: digit index outside alphabet \"${i}\". Allowed: ${letters}`\n          );\n        return lettersA[i]!;\n      });\n    },\n    decode: (input: string[]): number[] => {\n      aArr(input);\n      return input.map((letter) => {\n        astr('alphabet.decode', letter);\n        const i = indexes.get(letter);\n        if (i === undefined) throw new Error(`Unknown letter: \"${letter}\". Allowed: ${letters}`);\n        return i;\n      });\n    },\n  };\n}\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction join(separator = ''): Coder<string[], string> {\n  astr('join', separator);\n  return {\n    encode: (from) => {\n      astrArr('join.decode', from);\n      return from.join(separator);\n    },\n    decode: (to) => {\n      astr('join.decode', to);\n      return to.split(separator);\n    },\n  };\n}\n\n/**\n * Pad strings array so it has integer number of bits\n * @__NO_SIDE_EFFECTS__\n */\nfunction padding(bits: number, chr = '='): Coder<string[], string[]> {\n  anumber(bits);\n  astr('padding', chr);\n  return {\n    encode(data: string[]): string[] {\n      astrArr('padding.encode', data);\n      while ((data.length * bits) % 8) data.push(chr);\n      return data;\n    },\n    decode(input: string[]): string[] {\n      astrArr('padding.decode', input);\n      let end = input.length;\n      if ((end * bits) % 8)\n        throw new Error('padding: invalid, string should have whole number of bytes');\n      for (; end > 0 && input[end - 1] === chr; end--) {\n        const last = end - 1;\n        const byte = last * bits;\n        if (byte % 8 === 0) throw new Error('padding: invalid, string has too much padding');\n      }\n      return input.slice(0, end);\n    },\n  };\n}\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction normalize<T>(fn: (val: T) => T): Coder<T, T> {\n  afn(fn);\n  return { encode: (from: T) => from, decode: (to: T) => fn(to) };\n}\n\n/**\n * Slow: O(n^2) time complexity\n */\nfunction convertRadix(data: number[], from: number, to: number): number[] {\n  // base 1 is impossible\n  if (from < 2) throw new Error(`convertRadix: invalid from=${from}, base cannot be less than 2`);\n  if (to < 2) throw new Error(`convertRadix: invalid to=${to}, base cannot be less than 2`);\n  aArr(data);\n  if (!data.length) return [];\n  let pos = 0;\n  const res = [];\n  const digits = Array.from(data, (d) => {\n    anumber(d);\n    if (d < 0 || d >= from) throw new Error(`invalid integer: ${d}`);\n    return d;\n  });\n  const dlen = digits.length;\n  while (true) {\n    let carry = 0;\n    let done = true;\n    for (let i = pos; i < dlen; i++) {\n      const digit = digits[i]!;\n      const fromCarry = from * carry;\n      const digitBase = fromCarry + digit;\n      if (\n        !Number.isSafeInteger(digitBase) ||\n        fromCarry / from !== carry ||\n        digitBase - digit !== fromCarry\n      ) {\n        throw new Error('convertRadix: carry overflow');\n      }\n      const div = digitBase / to;\n      carry = digitBase % to;\n      const rounded = Math.floor(div);\n      digits[i] = rounded;\n      if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)\n        throw new Error('convertRadix: carry overflow');\n      if (!done) continue;\n      else if (!rounded) pos = i;\n      else done = false;\n    }\n    res.push(carry);\n    if (done) break;\n  }\n  for (let i = 0; i < data.length - 1 && data[i] === 0; i++) res.push(0);\n  return res.reverse();\n}\n\nconst gcd = (a: number, b: number): number => (b === 0 ? a : gcd(b, a % b));\nconst radix2carry = /* @__NO_SIDE_EFFECTS__ */ (from: number, to: number) =>\n  from + (to - gcd(from, to));\nconst powers: number[] = /* @__PURE__ */ (() => {\n  let res = [];\n  for (let i = 0; i < 40; i++) res.push(2 ** i);\n  return res;\n})();\n/**\n * Implemented with numbers, because BigInt is 5x slower\n */\nfunction convertRadix2(data: number[], from: number, to: number, padding: boolean): number[] {\n  aArr(data);\n  if (from <= 0 || from > 32) throw new Error(`convertRadix2: wrong from=${from}`);\n  if (to <= 0 || to > 32) throw new Error(`convertRadix2: wrong to=${to}`);\n  if (radix2carry(from, to) > 32) {\n    throw new Error(\n      `convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`\n    );\n  }\n  let carry = 0;\n  let pos = 0; // bitwise position in current element\n  const max = powers[from]!;\n  const mask = powers[to]! - 1;\n  const res: number[] = [];\n  for (const n of data) {\n    anumber(n);\n    if (n >= max) throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n    carry = (carry << from) | n;\n    if (pos + from > 32) throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n    pos += from;\n    for (; pos >= to; pos -= to) res.push(((carry >> (pos - to)) & mask) >>> 0);\n    const pow = powers[pos];\n    if (pow === undefined) throw new Error('invalid carry');\n    carry &= pow - 1; // clean carry, otherwise it will cause overflow\n  }\n  carry = (carry << (to - pos)) & mask;\n  if (!padding && pos >= from) throw new Error('Excess padding');\n  if (!padding && carry > 0) throw new Error(`Non-zero padding: ${carry}`);\n  if (padding && pos > 0) res.push(carry >>> 0);\n  return res;\n}\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix(num: number): Coder<Uint8Array, number[]> {\n  anumber(num);\n  const _256 = 2 ** 8;\n  return {\n    encode: (bytes: Uint8Array) => {\n      if (!isBytes(bytes)) throw new Error('radix.encode input should be Uint8Array');\n      return convertRadix(Array.from(bytes), _256, num);\n    },\n    decode: (digits: number[]) => {\n      anumArr('radix.decode', digits);\n      return Uint8Array.from(convertRadix(digits, num, _256));\n    },\n  };\n}\n\n/**\n * If both bases are power of same number (like `2**8 <-> 2**64`),\n * there is a linear algorithm. For now we have implementation for power-of-two bases only.\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix2(bits: number, revPadding = false): Coder<Uint8Array, number[]> {\n  anumber(bits);\n  if (bits <= 0 || bits > 32) throw new Error('radix2: bits should be in (0..32]');\n  if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n    throw new Error('radix2: carry overflow');\n  return {\n    encode: (bytes: Uint8Array) => {\n      if (!isBytes(bytes)) throw new Error('radix2.encode input should be Uint8Array');\n      return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n    },\n    decode: (digits: number[]) => {\n      anumArr('radix2.decode', digits);\n      return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n    },\n  };\n}\n\ntype ArgumentTypes<F extends Function> = F extends (...args: infer A) => any ? A : never;\nfunction unsafeWrapper<T extends (...args: any) => any>(fn: T) {\n  afn(fn);\n  return function (...args: ArgumentTypes<T>): ReturnType<T> | void {\n    try {\n      return fn.apply(null, args);\n    } catch (e) {}\n  };\n}\n\nfunction checksum(\n  len: number,\n  fn: (data: Uint8Array) => Uint8Array\n): Coder<Uint8Array, Uint8Array> {\n  anumber(len);\n  afn(fn);\n  return {\n    encode(data: Uint8Array) {\n      if (!isBytes(data)) throw new Error('checksum.encode: input should be Uint8Array');\n      const sum = fn(data).slice(0, len);\n      const res = new Uint8Array(data.length + len);\n      res.set(data);\n      res.set(sum, data.length);\n      return res;\n    },\n    decode(data: Uint8Array) {\n      if (!isBytes(data)) throw new Error('checksum.decode: input should be Uint8Array');\n      const payload = data.slice(0, -len);\n      const oldChecksum = data.slice(-len);\n      const newChecksum = fn(payload).slice(0, len);\n      for (let i = 0; i < len; i++)\n        if (newChecksum[i] !== oldChecksum[i]) throw new Error('Invalid checksum');\n      return payload;\n    },\n  };\n}\n\n// prettier-ignore\nexport const utils: { alphabet: typeof alphabet; chain: typeof chain; checksum: typeof checksum; convertRadix: typeof convertRadix; convertRadix2: typeof convertRadix2; radix: typeof radix; radix2: typeof radix2; join: typeof join; padding: typeof padding; } = {\n  alphabet, chain, checksum, convertRadix, convertRadix2, radix, radix2, join, padding,\n};\n\n// RFC 4648 aka RFC 3548\n// ---------------------\n\n/**\n * base16 encoding from RFC 4648.\n * @example\n * ```js\n * base16.encode(Uint8Array.from([0x12, 0xab]));\n * // => '12AB'\n * ```\n */\nexport const base16: BytesCoder = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\n\n/**\n * base32 encoding from RFC 4648. Has padding.\n * Use `base32nopad` for unpadded version.\n * Also check out `base32hex`, `base32hexnopad`, `base32crockford`.\n * @example\n * ```js\n * base32.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'CKVQ===='\n * base32.decode('CKVQ====');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base32: BytesCoder = chain(\n  radix2(5),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'),\n  padding(5),\n  join('')\n);\n\n/**\n * base32 encoding from RFC 4648. No padding.\n * Use `base32` for padded version.\n * Also check out `base32hex`, `base32hexnopad`, `base32crockford`.\n * @example\n * ```js\n * base32nopad.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'CKVQ'\n * base32nopad.decode('CKVQ');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base32nopad: BytesCoder = chain(\n  radix2(5),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'),\n  join('')\n);\n/**\n * base32 encoding from RFC 4648. Padded. Compared to ordinary `base32`, slightly different alphabet.\n * Use `base32hexnopad` for unpadded version.\n * @example\n * ```js\n * base32hex.encode(Uint8Array.from([0x12, 0xab]));\n * // => '2ALG===='\n * base32hex.decode('2ALG====');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base32hex: BytesCoder = chain(\n  radix2(5),\n  alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'),\n  padding(5),\n  join('')\n);\n\n/**\n * base32 encoding from RFC 4648. No padding. Compared to ordinary `base32`, slightly different alphabet.\n * Use `base32hex` for padded version.\n * @example\n * ```js\n * base32hexnopad.encode(Uint8Array.from([0x12, 0xab]));\n * // => '2ALG'\n * base32hexnopad.decode('2ALG');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base32hexnopad: BytesCoder = chain(\n  radix2(5),\n  alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'),\n  join('')\n);\n/**\n * base32 encoding from RFC 4648. Doug Crockford's version.\n * https://www.crockford.com/base32.html\n * @example\n * ```js\n * base32crockford.encode(Uint8Array.from([0x12, 0xab]));\n * // => '2ANG'\n * base32crockford.decode('2ANG');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base32crockford: BytesCoder = chain(\n  radix2(5),\n  alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'),\n  join(''),\n  normalize((s: string) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1'))\n);\n\n// Built-in base64 conversion https://caniuse.com/mdn-javascript_builtins_uint8array_frombase64\n// prettier-ignore\nconst hasBase64Builtin: boolean = /* @__PURE__ */ (() =>\n  typeof (Uint8Array as any).from([]).toBase64 === 'function' &&\n  typeof (Uint8Array as any).fromBase64 === 'function')();\n\nconst decodeBase64Builtin = (s: string, isUrl: boolean) => {\n  astr('base64', s);\n  const re = isUrl ? /^[A-Za-z0-9=_-]+$/ : /^[A-Za-z0-9=+/]+$/;\n  const alphabet = isUrl ? 'base64url' : 'base64';\n  if (s.length > 0 && !re.test(s)) throw new Error('invalid base64');\n  return (Uint8Array as any).fromBase64(s, { alphabet, lastChunkHandling: 'strict' });\n};\n\n/**\n * base64 from RFC 4648. Padded.\n * Use `base64nopad` for unpadded version.\n * Also check out `base64url`, `base64urlnopad`.\n * Falls back to built-in function, when available.\n * @example\n * ```js\n * base64.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'Eqs='\n * base64.decode('Eqs=');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\n// prettier-ignore\nexport const base64: BytesCoder = hasBase64Builtin ? {\n  encode(b) { abytes(b); return (b as any).toBase64(); },\n  decode(s) { return decodeBase64Builtin(s, false); },\n} : chain(\n  radix2(6),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'),\n  padding(6),\n  join('')\n);\n/**\n * base64 from RFC 4648. No padding.\n * Use `base64` for padded version.\n * @example\n * ```js\n * base64nopad.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'Eqs'\n * base64nopad.decode('Eqs');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base64nopad: BytesCoder = chain(\n  radix2(6),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'),\n  join('')\n);\n\n/**\n * base64 from RFC 4648, using URL-safe alphabet. Padded.\n * Use `base64urlnopad` for unpadded version.\n * Falls back to built-in function, when available.\n * @example\n * ```js\n * base64url.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'Eqs='\n * base64url.decode('Eqs=');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\n// prettier-ignore\nexport const base64url: BytesCoder = hasBase64Builtin ? {\n  encode(b) { abytes(b); return (b as any).toBase64({ alphabet: 'base64url' }); },\n  decode(s) { return decodeBase64Builtin(s, true); },\n} : chain(\n  radix2(6),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'),\n  padding(6),\n  join('')\n);\n\n/**\n * base64 from RFC 4648, using URL-safe alphabet. No padding.\n * Use `base64url` for padded version.\n * @example\n * ```js\n * base64urlnopad.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'Eqs'\n * base64urlnopad.decode('Eqs');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base64urlnopad: BytesCoder = chain(\n  radix2(6),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'),\n  join('')\n);\n\n// base58 code\n// -----------\nconst genBase58 = /* @__NO_SIDE_EFFECTS__ */ (abc: string) =>\n  chain(radix(58), alphabet(abc), join(''));\n\n/**\n * base58: base64 without ambigous characters +, /, 0, O, I, l.\n * Quadratic (O(n^2)) - so, can't be used on large inputs.\n * @example\n * ```js\n * base58.decode('01abcdef');\n * // => '3UhJW'\n * ```\n */\nexport const base58: BytesCoder = genBase58(\n  '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n);\n/**\n * base58: flickr version. Check out `base58`.\n */\nexport const base58flickr: BytesCoder = genBase58(\n  '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n);\n/**\n * base58: XRP version. Check out `base58`.\n */\nexport const base58xrp: BytesCoder = genBase58(\n  'rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz'\n);\n\n// Data len (index) -> encoded block len\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\n\n/**\n * base58: XMR version. Check out `base58`.\n * Done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.\n * Block encoding significantly reduces quadratic complexity of base58.\n */\nexport const base58xmr: BytesCoder = {\n  encode(data: Uint8Array) {\n    let res = '';\n    for (let i = 0; i < data.length; i += 8) {\n      const block = data.subarray(i, i + 8);\n      res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length]!, '1');\n    }\n    return res;\n  },\n  decode(str: string) {\n    let res: number[] = [];\n    for (let i = 0; i < str.length; i += 11) {\n      const slice = str.slice(i, i + 11);\n      const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n      const block = base58.decode(slice);\n      for (let j = 0; j < block.length - blockLen; j++) {\n        if (block[j] !== 0) throw new Error('base58xmr: wrong padding');\n      }\n      res = res.concat(Array.from(block.slice(block.length - blockLen)));\n    }\n    return Uint8Array.from(res);\n  },\n};\n\n/**\n * Method, which creates base58check encoder.\n * Requires function, calculating sha256.\n */\nexport const createBase58check = (sha256: (data: Uint8Array) => Uint8Array): BytesCoder =>\n  chain(\n    checksum(4, (data) => sha256(sha256(data))),\n    base58\n  );\n\n/**\n * Use `createBase58check` instead.\n * @deprecated\n */\nexport const base58check: (sha256: (data: Uint8Array) => Uint8Array) => BytesCoder =\n  createBase58check;\n\n// Bech32 code\n// -----------\nexport interface Bech32Decoded<Prefix extends string = string> {\n  prefix: Prefix;\n  words: number[];\n}\nexport interface Bech32DecodedWithArray<Prefix extends string = string> {\n  prefix: Prefix;\n  words: number[];\n  bytes: Uint8Array;\n}\n\nconst BECH_ALPHABET: Coder<number[], string> = chain(\n  alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'),\n  join('')\n);\n\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre: number): number {\n  const b = pre >> 25;\n  let chk = (pre & 0x1ffffff) << 5;\n  for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n    if (((b >> i) & 1) === 1) chk ^= POLYMOD_GENERATORS[i]!;\n  }\n  return chk;\n}\n\nfunction bechChecksum(prefix: string, words: number[], encodingConst = 1): string {\n  const len = prefix.length;\n  let chk = 1;\n  for (let i = 0; i < len; i++) {\n    const c = prefix.charCodeAt(i);\n    if (c < 33 || c > 126) throw new Error(`Invalid prefix (${prefix})`);\n    chk = bech32Polymod(chk) ^ (c >> 5);\n  }\n  chk = bech32Polymod(chk);\n  for (let i = 0; i < len; i++) chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n  for (let v of words) chk = bech32Polymod(chk) ^ v;\n  for (let i = 0; i < 6; i++) chk = bech32Polymod(chk);\n  chk ^= encodingConst;\n  return BECH_ALPHABET.encode(convertRadix2([chk % powers[30]!], 30, 5, false));\n}\n\nexport interface Bech32 {\n  encode<Prefix extends string>(\n    prefix: Prefix,\n    words: number[] | Uint8Array,\n    limit?: number | false\n  ): `${Lowercase<Prefix>}1${string}`;\n  decode<Prefix extends string>(\n    str: `${Prefix}1${string}`,\n    limit?: number | false\n  ): Bech32Decoded<Prefix>;\n  encodeFromBytes(prefix: string, bytes: Uint8Array): string;\n  decodeToBytes(str: string): Bech32DecodedWithArray;\n  decodeUnsafe(str: string, limit?: number | false): void | Bech32Decoded<string>;\n  fromWords(to: number[]): Uint8Array;\n  fromWordsUnsafe(to: number[]): void | Uint8Array;\n  toWords(from: Uint8Array): number[];\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction genBech32(encoding: 'bech32' | 'bech32m'): Bech32 {\n  const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n  const _words = radix2(5);\n  const fromWords = _words.decode;\n  const toWords = _words.encode;\n  const fromWordsUnsafe = unsafeWrapper(fromWords);\n\n  function encode<Prefix extends string>(\n    prefix: Prefix,\n    words: number[] | Uint8Array,\n    limit: number | false = 90\n  ): `${Lowercase<Prefix>}1${string}` {\n    astr('bech32.encode prefix', prefix);\n    if (isBytes(words)) words = Array.from(words);\n    anumArr('bech32.encode', words);\n    const plen = prefix.length;\n    if (plen === 0) throw new TypeError(`Invalid prefix length ${plen}`);\n    const actualLength = plen + 7 + words.length;\n    if (limit !== false && actualLength > limit)\n      throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n    const lowered = prefix.toLowerCase();\n    const sum = bechChecksum(lowered, words, ENCODING_CONST);\n    return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}` as `${Lowercase<Prefix>}1${string}`;\n  }\n\n  function decode<Prefix extends string>(\n    str: `${Prefix}1${string}`,\n    limit?: number | false\n  ): Bech32Decoded<Prefix>;\n  function decode(str: string, limit?: number | false): Bech32Decoded;\n  function decode(str: string, limit: number | false = 90): Bech32Decoded {\n    astr('bech32.decode input', str);\n    const slen = str.length;\n    if (slen < 8 || (limit !== false && slen > limit))\n      throw new TypeError(`invalid string length: ${slen} (${str}). Expected (8..${limit})`);\n    // don't allow mixed case\n    const lowered = str.toLowerCase();\n    if (str !== lowered && str !== str.toUpperCase())\n      throw new Error(`String must be lowercase or uppercase`);\n    const sepIndex = lowered.lastIndexOf('1');\n    if (sepIndex === 0 || sepIndex === -1)\n      throw new Error(`Letter \"1\" must be present between prefix and data only`);\n    const prefix = lowered.slice(0, sepIndex);\n    const data = lowered.slice(sepIndex + 1);\n    if (data.length < 6) throw new Error('Data must be at least 6 characters long');\n    const words = BECH_ALPHABET.decode(data).slice(0, -6);\n    const sum = bechChecksum(prefix, words, ENCODING_CONST);\n    if (!data.endsWith(sum)) throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n    return { prefix, words };\n  }\n\n  const decodeUnsafe = unsafeWrapper(decode);\n\n  function decodeToBytes(str: string): Bech32DecodedWithArray {\n    const { prefix, words } = decode(str, false);\n    return { prefix, words, bytes: fromWords(words) };\n  }\n\n  function encodeFromBytes(prefix: string, bytes: Uint8Array) {\n    return encode(prefix, toWords(bytes));\n  }\n\n  return {\n    encode,\n    decode,\n    encodeFromBytes,\n    decodeToBytes,\n    decodeUnsafe,\n    fromWords,\n    fromWordsUnsafe,\n    toWords,\n  };\n}\n\n/**\n * bech32 from BIP 173. Operates on words.\n * For high-level, check out scure-btc-signer:\n * https://github.com/paulmillr/scure-btc-signer.\n */\nexport const bech32: Bech32 = genBech32('bech32');\n\n/**\n * bech32m from BIP 350. Operates on words.\n * It was to mitigate `bech32` weaknesses.\n * For high-level, check out scure-btc-signer:\n * https://github.com/paulmillr/scure-btc-signer.\n */\nexport const bech32m: Bech32 = genBech32('bech32m');\n\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\n/**\n * UTF-8-to-byte decoder. Uses built-in TextDecoder / TextEncoder.\n * @example\n * ```js\n * const b = utf8.decode(\"hey\"); // => new Uint8Array([ 104, 101, 121 ])\n * const str = utf8.encode(b); // \"hey\"\n * ```\n */\nexport const utf8: BytesCoder = {\n  encode: (data) => new TextDecoder().decode(data),\n  decode: (str) => new TextEncoder().encode(str),\n};\n\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\n// prettier-ignore\nconst hasHexBuiltin: boolean = /* @__PURE__ */ (() =>\n  typeof (Uint8Array as any).from([]).toHex === 'function' &&\n  typeof (Uint8Array as any).fromHex === 'function')();\n// prettier-ignore\nconst hexBuiltin: BytesCoder = {\n  encode(data) { abytes(data); return (data as any).toHex(); },\n  decode(s) { astr('hex', s); return (Uint8Array as any).fromHex(s); },\n};\n/**\n * hex string decoder. Uses built-in function, when available.\n * @example\n * ```js\n * const b = hex.decode(\"0102ff\"); // => new Uint8Array([ 1, 2, 255 ])\n * const str = hex.encode(b); // \"0102ff\"\n * ```\n */\nexport const hex: BytesCoder = hasHexBuiltin\n  ? hexBuiltin\n  : chain(\n      radix2(4),\n      alphabet('0123456789abcdef'),\n      join(''),\n      normalize((s: string) => {\n        if (typeof s !== 'string' || s.length % 2 !== 0)\n          throw new TypeError(\n            `hex.decode: expected string, got ${typeof s} with length ${s.length}`\n          );\n        return s.toLowerCase();\n      })\n    );\n\nexport type SomeCoders = {\n  utf8: BytesCoder;\n  hex: BytesCoder;\n  base16: BytesCoder;\n  base32: BytesCoder;\n  base64: BytesCoder;\n  base64url: BytesCoder;\n  base58: BytesCoder;\n  base58xmr: BytesCoder;\n};\n// prettier-ignore\nconst CODERS: SomeCoders = {\n  utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\ntype CoderType = keyof SomeCoders;\nconst coderTypeError =\n  'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';\n\n/** @deprecated */\nexport const bytesToString = (type: CoderType, bytes: Uint8Array): string => {\n  if (typeof type !== 'string' || !CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);\n  if (!isBytes(bytes)) throw new TypeError('bytesToString() expects Uint8Array');\n  return CODERS[type].encode(bytes);\n};\n\n/** @deprecated */\nexport const str: (type: CoderType, bytes: Uint8Array) => string = bytesToString; // as in python, but for bytes only\n\n/** @deprecated */\nexport const stringToBytes = (type: CoderType, str: string): Uint8Array => {\n  if (!CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);\n  if (typeof str !== 'string') throw new TypeError('stringToBytes() expects string');\n  return CODERS[type].decode(str);\n};\n/** @deprecated */\nexport const bytes: (type: CoderType, str: string) => Uint8Array = stringToBytes;\n", "/**\n * @module BIP32 hierarchical deterministic (HD) wallets over secp256k1.\n * @example\n * ```js\n * import { HDKey } from \"@scure/bip32\";\n * const hdkey1 = HDKey.fromMasterSeed(seed);\n * const hdkey2 = HDKey.fromExtendedKey(base58key);\n * const hdkey3 = HDKey.fromJSON({ xpriv: string });\n *\n * // props\n * [hdkey1.depth, hdkey1.index, hdkey1.chainCode];\n * console.log(hdkey2.privateKey, hdkey2.publicKey);\n * console.log(hdkey3.derive(\"m/0/2147483647'/1\"));\n * const sig = hdkey3.sign(hash);\n * hdkey3.verify(hash, sig);\n * ```\n */\n/*! scure-bip32 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\nimport { mod } from '@noble/curves/abstract/modular';\nimport { secp256k1 as secp } from '@noble/curves/secp256k1';\nimport { hmac } from '@noble/hashes/hmac';\nimport { ripemd160 } from '@noble/hashes/legacy';\nimport { sha256, sha512 } from '@noble/hashes/sha2';\nimport {\n  abytes,\n  bytesToHex,\n  concatBytes,\n  createView,\n  hexToBytes,\n  utf8ToBytes,\n} from '@noble/hashes/utils';\nimport { createBase58check } from '@scure/base';\n\nconst Point = secp.ProjectivePoint;\nconst base58check = createBase58check(sha256);\n\nfunction bytesToNumber(bytes: Uint8Array): bigint {\n  abytes(bytes);\n  const h = bytes.length === 0 ? '0' : bytesToHex(bytes);\n  return BigInt('0x' + h);\n}\n\nfunction numberToBytes(num: bigint): Uint8Array {\n  if (typeof num !== 'bigint') throw new Error('bigint expected');\n  return hexToBytes(num.toString(16).padStart(64, '0'));\n}\n\nconst MASTER_SECRET = utf8ToBytes('Bitcoin seed');\n// Bitcoin hardcoded by default\nconst BITCOIN_VERSIONS: Versions = { private: 0x0488ade4, public: 0x0488b21e };\nexport const HARDENED_OFFSET: number = 0x80000000;\n\nexport interface Versions {\n  private: number;\n  public: number;\n}\n\nconst hash160 = (data: Uint8Array) => ripemd160(sha256(data));\nconst fromU32 = (data: Uint8Array) => createView(data).getUint32(0, false);\nconst toU32 = (n: number) => {\n  if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\n    throw new Error('invalid number, should be from 0 to 2**32-1, got ' + n);\n  }\n  const buf = new Uint8Array(4);\n  createView(buf).setUint32(0, n, false);\n  return buf;\n};\n\ninterface HDKeyOpt {\n  versions?: Versions;\n  depth?: number;\n  index?: number;\n  parentFingerprint?: number;\n  chainCode?: Uint8Array;\n  publicKey?: Uint8Array;\n  privateKey?: Uint8Array | bigint;\n}\n\nexport class HDKey {\n  get fingerprint(): number {\n    if (!this.pubHash) {\n      throw new Error('No publicKey set!');\n    }\n    return fromU32(this.pubHash);\n  }\n  get identifier(): Uint8Array | undefined {\n    return this.pubHash;\n  }\n  get pubKeyHash(): Uint8Array | undefined {\n    return this.pubHash;\n  }\n  get privateKey(): Uint8Array | null {\n    return this.privKeyBytes || null;\n  }\n  get publicKey(): Uint8Array | null {\n    return this.pubKey || null;\n  }\n  get privateExtendedKey(): string {\n    const priv = this.privateKey;\n    if (!priv) {\n      throw new Error('No private key');\n    }\n    return base58check.encode(\n      this.serialize(this.versions.private, concatBytes(new Uint8Array([0]), priv))\n    );\n  }\n  get publicExtendedKey(): string {\n    if (!this.pubKey) {\n      throw new Error('No public key');\n    }\n    return base58check.encode(this.serialize(this.versions.public, this.pubKey));\n  }\n\n  public static fromMasterSeed(seed: Uint8Array, versions: Versions = BITCOIN_VERSIONS): HDKey {\n    abytes(seed);\n    if (8 * seed.length < 128 || 8 * seed.length > 512) {\n      throw new Error(\n        'HDKey: seed length must be between 128 and 512 bits; 256 bits is advised, got ' +\n          seed.length\n      );\n    }\n    const I = hmac(sha512, MASTER_SECRET, seed);\n    return new HDKey({\n      versions,\n      chainCode: I.slice(32),\n      privateKey: I.slice(0, 32),\n    });\n  }\n\n  public static fromExtendedKey(base58key: string, versions: Versions = BITCOIN_VERSIONS): HDKey {\n    // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n    const keyBuffer: Uint8Array = base58check.decode(base58key);\n    const keyView = createView(keyBuffer);\n    const version = keyView.getUint32(0, false);\n    const opt = {\n      versions,\n      depth: keyBuffer[4],\n      parentFingerprint: keyView.getUint32(5, false),\n      index: keyView.getUint32(9, false),\n      chainCode: keyBuffer.slice(13, 45),\n    };\n    const key = keyBuffer.slice(45);\n    const isPriv = key[0] === 0;\n    if (version !== versions[isPriv ? 'private' : 'public']) {\n      throw new Error('Version mismatch');\n    }\n    if (isPriv) {\n      return new HDKey({ ...opt, privateKey: key.slice(1) });\n    } else {\n      return new HDKey({ ...opt, publicKey: key });\n    }\n  }\n\n  public static fromJSON(json: { xpriv: string }): HDKey {\n    return HDKey.fromExtendedKey(json.xpriv);\n  }\n  public readonly versions: Versions;\n  public readonly depth: number = 0;\n  public readonly index: number = 0;\n  public readonly chainCode: Uint8Array | null = null;\n  public readonly parentFingerprint: number = 0;\n  private privKey?: bigint;\n  private privKeyBytes?: Uint8Array;\n  private pubKey?: Uint8Array;\n  private pubHash: Uint8Array | undefined;\n\n  constructor(opt: HDKeyOpt) {\n    if (!opt || typeof opt !== 'object') {\n      throw new Error('HDKey.constructor must not be called directly');\n    }\n    this.versions = opt.versions || BITCOIN_VERSIONS;\n    this.depth = opt.depth || 0;\n    this.chainCode = opt.chainCode || null;\n    this.index = opt.index || 0;\n    this.parentFingerprint = opt.parentFingerprint || 0;\n    if (!this.depth) {\n      if (this.parentFingerprint || this.index) {\n        throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\n      }\n    }\n    if (opt.publicKey && opt.privateKey) {\n      throw new Error('HDKey: publicKey and privateKey at same time.');\n    }\n    if (opt.privateKey) {\n      if (!secp.utils.isValidPrivateKey(opt.privateKey)) {\n        throw new Error('Invalid private key');\n      }\n      this.privKey =\n        typeof opt.privateKey === 'bigint' ? opt.privateKey : bytesToNumber(opt.privateKey);\n      this.privKeyBytes = numberToBytes(this.privKey);\n      this.pubKey = secp.getPublicKey(opt.privateKey, true);\n    } else if (opt.publicKey) {\n      this.pubKey = Point.fromHex(opt.publicKey).toRawBytes(true); // force compressed point\n    } else {\n      throw new Error('HDKey: no public or private key provided');\n    }\n    this.pubHash = hash160(this.pubKey);\n  }\n\n  public derive(path: string): HDKey {\n    if (!/^[mM]'?/.test(path)) {\n      throw new Error('Path must start with \"m\" or \"M\"');\n    }\n    if (/^[mM]'?$/.test(path)) {\n      return this;\n    }\n    const parts = path.replace(/^[mM]'?\\//, '').split('/');\n    // tslint:disable-next-line\n    let child: HDKey = this;\n    for (const c of parts) {\n      const m = /^(\\d+)('?)$/.exec(c);\n      const m1 = m && m[1];\n      if (!m || m.length !== 3 || typeof m1 !== 'string')\n        throw new Error('invalid child index: ' + c);\n      let idx = +m1;\n      if (!Number.isSafeInteger(idx) || idx >= HARDENED_OFFSET) {\n        throw new Error('Invalid index');\n      }\n      // hardened key\n      if (m[2] === \"'\") {\n        idx += HARDENED_OFFSET;\n      }\n      child = child.deriveChild(idx);\n    }\n    return child;\n  }\n\n  public deriveChild(index: number): HDKey {\n    if (!this.pubKey || !this.chainCode) {\n      throw new Error('No publicKey or chainCode set');\n    }\n    let data = toU32(index);\n    if (index >= HARDENED_OFFSET) {\n      // Hardened\n      const priv = this.privateKey;\n      if (!priv) {\n        throw new Error('Could not derive hardened child key');\n      }\n      // Hardened child: 0x00 || ser256(kpar) || ser32(index)\n      data = concatBytes(new Uint8Array([0]), priv, data);\n    } else {\n      // Normal child: serP(point(kpar)) || ser32(index)\n      data = concatBytes(this.pubKey, data);\n    }\n    const I = hmac(sha512, this.chainCode, data);\n    const childTweak = bytesToNumber(I.slice(0, 32));\n    const chainCode = I.slice(32);\n    if (!secp.utils.isValidPrivateKey(childTweak)) {\n      throw new Error('Tweak bigger than curve order');\n    }\n    const opt: HDKeyOpt = {\n      versions: this.versions,\n      chainCode,\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint,\n      index,\n    };\n    try {\n      // Private parent key -> private child key\n      if (this.privateKey) {\n        const added = mod(this.privKey! + childTweak, secp.CURVE.n);\n        if (!secp.utils.isValidPrivateKey(added)) {\n          throw new Error('The tweak was out of range or the resulted private key is invalid');\n        }\n        opt.privateKey = added;\n      } else {\n        const added = Point.fromHex(this.pubKey).add(Point.fromPrivateKey(childTweak));\n        // Cryptographically impossible: hmac-sha512 preimage would need to be found\n        if (added.equals(Point.ZERO)) {\n          throw new Error('The tweak was equal to negative P, which made the result key invalid');\n        }\n        opt.publicKey = added.toRawBytes(true);\n      }\n      return new HDKey(opt);\n    } catch (err) {\n      return this.deriveChild(index + 1);\n    }\n  }\n\n  public sign(hash: Uint8Array): Uint8Array {\n    if (!this.privateKey) {\n      throw new Error('No privateKey set!');\n    }\n    abytes(hash, 32);\n    return secp.sign(hash, this.privKey!).toCompactRawBytes();\n  }\n\n  public verify(hash: Uint8Array, signature: Uint8Array): boolean {\n    abytes(hash, 32);\n    abytes(signature, 64);\n    if (!this.publicKey) {\n      throw new Error('No publicKey set!');\n    }\n    let sig;\n    try {\n      sig = secp.Signature.fromCompact(signature);\n    } catch (error) {\n      return false;\n    }\n    return secp.verify(sig, hash, this.publicKey);\n  }\n\n  public wipePrivateData(): this {\n    this.privKey = undefined;\n    if (this.privKeyBytes) {\n      this.privKeyBytes.fill(0);\n      this.privKeyBytes = undefined;\n    }\n    return this;\n  }\n  public toJSON(): { xpriv: string; xpub: string } {\n    return {\n      xpriv: this.privateExtendedKey,\n      xpub: this.publicExtendedKey,\n    };\n  }\n\n  private serialize(version: number, key: Uint8Array) {\n    if (!this.chainCode) {\n      throw new Error('No chainCode set');\n    }\n    abytes(key, 33);\n    // version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n    return concatBytes(\n      toU32(version),\n      new Uint8Array([this.depth]),\n      toU32(this.parentFingerprint),\n      toU32(this.index),\n      this.chainCode,\n      key\n    );\n  }\n}\n", "import { secp256k1 } from '@noble/curves/secp256k1'\nimport * as Address from './Address.js'\nimport * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport * as PublicKey from './PublicKey.js'\nimport type * as Signature from './Signature.js'\nimport * as Entropy from './internal/entropy.js'\nimport type { OneOf } from './internal/types.js'\n\n/** Re-export of noble/curves secp256k1 utilities. */\nexport const noble = secp256k1\n\n/**\n * Computes the secp256k1 ECDSA public key from a provided private key.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const publicKey = Secp256k1.getPublicKey({ privateKey: '0x...' })\n * ```\n *\n * @param options - The options to compute the public key.\n * @returns The computed public key.\n */\nexport function getPublicKey(\n  options: getPublicKey.Options,\n): PublicKey.PublicKey {\n  const { privateKey } = options\n  const point = secp256k1.ProjectivePoint.fromPrivateKey(\n    Hex.from(privateKey).slice(2),\n  )\n  return PublicKey.from(point)\n}\n\nexport declare namespace getPublicKey {\n  type Options = {\n    /**\n     * Private key to compute the public key from.\n     */\n    privateKey: Hex.Hex | Bytes.Bytes\n  }\n\n  type ErrorType =\n    | Hex.from.ErrorType\n    | PublicKey.from.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Generates a random ECDSA private key on the secp256k1 curve.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const privateKey = Secp256k1.randomPrivateKey()\n * ```\n *\n * @param options - The options to generate the private key.\n * @returns The generated private key.\n */\nexport function randomPrivateKey<as extends 'Hex' | 'Bytes' = 'Hex'>(\n  options: randomPrivateKey.Options<as> = {},\n): randomPrivateKey.ReturnType<as> {\n  const { as = 'Hex' } = options\n  const bytes = secp256k1.utils.randomPrivateKey()\n  if (as === 'Hex') return Hex.fromBytes(bytes) as never\n  return bytes as never\n}\n\nexport declare namespace randomPrivateKey {\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex'> = {\n    /**\n     * Format of the returned private key.\n     * @default 'Hex'\n     */\n    as?: as | 'Hex' | 'Bytes' | undefined\n  }\n\n  type ReturnType<as extends 'Hex' | 'Bytes'> =\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\n    | (as extends 'Hex' ? Hex.Hex : never)\n\n  type ErrorType = Hex.fromBytes.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Recovers the signing address from the signed payload and signature.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey: '0x...' })\n *\n * const address = Secp256k1.recoverAddress({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The recovery options.\n * @returns The recovered address.\n */\nexport function recoverAddress(\n  options: recoverAddress.Options,\n): recoverAddress.ReturnType {\n  return Address.fromPublicKey(recoverPublicKey(options))\n}\n\nexport declare namespace recoverAddress {\n  type Options = {\n    /** Payload that was signed. */\n    payload: Hex.Hex | Bytes.Bytes\n    /** Signature of the payload. */\n    signature: Signature.Signature\n  }\n\n  type ReturnType = Address.Address\n\n  type ErrorType =\n    | Address.fromPublicKey.ErrorType\n    | recoverPublicKey.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Recovers the signing public key from the signed payload and signature.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey: '0x...' })\n *\n * const publicKey = Secp256k1.recoverPublicKey({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The recovery options.\n * @returns The recovered public key.\n */\nexport function recoverPublicKey(\n  options: recoverPublicKey.Options,\n): PublicKey.PublicKey {\n  const { payload, signature } = options\n  const { r, s, yParity } = signature\n  const signature_ = new secp256k1.Signature(\n    BigInt(r),\n    BigInt(s),\n  ).addRecoveryBit(yParity)\n  const point = signature_.recoverPublicKey(Hex.from(payload).substring(2))\n  return PublicKey.from(point)\n}\n\nexport declare namespace recoverPublicKey {\n  type Options = {\n    /** Payload that was signed. */\n    payload: Hex.Hex | Bytes.Bytes\n    /** Signature of the payload. */\n    signature: Signature.Signature\n  }\n\n  type ErrorType =\n    | PublicKey.from.ErrorType\n    | Hex.from.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Signs the payload with the provided private key.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const signature = Secp256k1.sign({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   privateKey: '0x...' // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The signing options.\n * @returns The ECDSA {@link ox#Signature.Signature}.\n */\nexport function sign(options: sign.Options): Signature.Signature {\n  const {\n    extraEntropy = Entropy.extraEntropy,\n    hash,\n    payload,\n    privateKey,\n  } = options\n  const { r, s, recovery } = secp256k1.sign(\n    Bytes.from(payload),\n    Bytes.from(privateKey),\n    {\n      extraEntropy:\n        typeof extraEntropy === 'boolean'\n          ? extraEntropy\n          : Hex.from(extraEntropy).slice(2),\n      lowS: true,\n      ...(hash ? { prehash: true } : {}),\n    },\n  )\n  return {\n    r,\n    s,\n    yParity: recovery,\n  }\n}\n\nexport declare namespace sign {\n  type Options = {\n    /**\n     * Extra entropy to add to the signing process. Setting to `false` will disable it.\n     * @default true\n     */\n    extraEntropy?: boolean | Hex.Hex | Bytes.Bytes | undefined\n    /**\n     *  If set to `true`, the payload will be hashed (sha256) before being signed.\n     */\n    hash?: boolean | undefined\n    /**\n     * Payload to sign.\n     */\n    payload: Hex.Hex | Bytes.Bytes\n    /**\n     * ECDSA private key.\n     */\n    privateKey: Hex.Hex | Bytes.Bytes\n  }\n\n  type ErrorType = Bytes.from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Verifies a payload was signed by the provided address.\n *\n * @example\n * ### Verify with Ethereum Address\n *\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey: '0x...' })\n *\n * const verified = Secp256k1.verify({ // [!code focus]\n *   address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @example\n * ### Verify with Public Key\n *\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const privateKey = '0x...'\n * const publicKey = Secp256k1.getPublicKey({ privateKey })\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey })\n *\n * const verified = Secp256k1.verify({ // [!code focus]\n *   publicKey, // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The verification options.\n * @returns Whether the payload was signed by the provided address.\n */\nexport function verify(options: verify.Options): boolean {\n  const { address, hash, payload, publicKey, signature } = options\n  if (address)\n    return Address.isEqual(address, recoverAddress({ payload, signature }))\n  return secp256k1.verify(\n    signature,\n    Bytes.from(payload),\n    PublicKey.toBytes(publicKey),\n    ...(hash ? [{ prehash: true, lowS: true }] : []),\n  )\n}\n\nexport declare namespace verify {\n  type Options = {\n    /** If set to `true`, the payload will be hashed (sha256) before being verified. */\n    hash?: boolean | undefined\n    /** Payload that was signed. */\n    payload: Hex.Hex | Bytes.Bytes\n  } & OneOf<\n    | {\n        /** Address that signed the payload. */\n        address: Address.Address\n        /** Signature of the payload. */\n        signature: Signature.Signature\n      }\n    | {\n        /** Public key that signed the payload. */\n        publicKey: PublicKey.PublicKey<boolean>\n        /** Signature of the payload. */\n        signature: Signature.Signature<false>\n      }\n  >\n\n  type ErrorType = Errors.GlobalErrorType\n}\n", "export let extraEntropy = false\n\n/** @internal */\nexport function setExtraEntropy(entropy: boolean) {\n  extraEntropy = entropy\n}\n", "import type { HDKey } from '@scure/bip32'\nimport type * as Errors from '../Errors.js'\nimport type * as HdKey from '../HdKey.js'\nimport * as Hex from '../Hex.js'\nimport * as Secp256k1 from '../Secp256k1.js'\n\n/** @internal */\nexport function fromScure(key: HDKey): HdKey.HdKey {\n  return {\n    derive: (path) => fromScure(key.derive(path)),\n    depth: key.depth,\n    identifier: Hex.fromBytes(key.identifier!),\n    index: key.index,\n    privateKey: Hex.fromBytes(key.privateKey!),\n    privateExtendedKey: key.privateExtendedKey,\n    publicKey: Secp256k1.getPublicKey({ privateKey: key.privateKey! }),\n    publicExtendedKey: key.publicExtendedKey,\n    versions: key.versions,\n  }\n}\n\n/** @internal */\nexport declare namespace fromScure {\n  type ErrorType = Errors.GlobalErrorType\n}\n", "export {};\n//# sourceMappingURL=Fee.js.map", "import { ctr } from '@noble/ciphers/aes'\nimport {\n  pbkdf2Async as pbkdf2Async_noble,\n  pbkdf2 as pbkdf2_noble,\n} from '@noble/hashes/pbkdf2'\nimport {\n  scryptAsync as scryptAsync_noble,\n  scrypt as scrypt_noble,\n} from '@noble/hashes/scrypt'\nimport { sha256 } from '@noble/hashes/sha2'\nimport * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport type * as Hex from './Hex.js'\n\n/** Base Key. */\ntype BaseKey<\n  kdf extends string = string,\n  kdfparams extends Record<string, unknown> = Record<string, unknown>,\n> = {\n  iv: Bytes.Bytes\n  key: () => string\n  kdfparams: kdfparams\n  kdf: kdf\n}\n\n/** Keystore. */\nexport type Keystore = {\n  crypto: {\n    cipher: 'aes-128-ctr'\n    ciphertext: string\n    cipherparams: {\n      iv: string\n    }\n    mac: string\n  } & Pick<Key, 'kdf' | 'kdfparams'>\n  id: string\n  version: 3\n}\n\n/** Key. */\nexport type Key = Pbkdf2Key | ScryptKey\n\n/** PBKDF2 Key. */\nexport type Pbkdf2Key = BaseKey<\n  'pbkdf2',\n  {\n    c: number\n    dklen: number\n    prf: 'hmac-sha256'\n    salt: string\n  }\n>\n\n/** Scrypt Key. */\nexport type ScryptKey = BaseKey<\n  'scrypt',\n  {\n    dklen: number\n    n: number\n    p: number\n    r: number\n    salt: string\n  }\n>\n\n/**\n * Decrypts a [JSON keystore](https://ethereum.org/en/developers/docs/data-structures-and-encoding/web3-secret-storage/)\n * into a private key.\n *\n * Supports the following key derivation functions (KDFs):\n * - {@link ox#Keystore.(pbkdf2:function)}\n * - {@link ox#Keystore.(scrypt:function)}\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Keystore, Secp256k1 } from 'ox'\n *\n * // JSON keystore.\n * const keystore = { crypto: { ... }, id: '...', version: 3 }\n *\n * // Derive key from password.\n * const key = Keystore.pbkdf2({ password: 'testpassword' })\n *\n * // Decrypt the private key.\n * const privateKey = await Keystore.decrypt(keystore, key)\n * // @log: \"0x...\"\n * ```\n *\n * @param keystore - JSON keystore.\n * @param key - Key to use for decryption.\n * @param options - Decryption options.\n * @returns Decrypted private key.\n */\nexport async function decrypt<as extends 'Hex' | 'Bytes' = 'Hex'>(\n  keystore: Keystore,\n  key: Key,\n  options: decrypt.Options<as> = {},\n): Promise<decrypt.ReturnType<as>> {\n  const { as = 'Hex' } = options\n  const key_ = Bytes.from(`0x${key.key()}`)\n\n  const encKey = Bytes.slice(key_, 0, 16)\n  const macKey = Bytes.slice(key_, 16, 32)\n\n  const ciphertext = Bytes.from(`0x${keystore.crypto.ciphertext}`)\n  const mac = Hash.keccak256(Bytes.concat(macKey, ciphertext))\n\n  if (!Bytes.isEqual(mac, Bytes.from(`0x${keystore.crypto.mac}`)))\n    throw new Error('corrupt keystore')\n\n  const data = ctr(encKey, key.iv).decrypt(ciphertext)\n\n  if (as === 'Hex') return Bytes.toHex(data) as never\n  return data as never\n}\n\nexport declare namespace decrypt {\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> = {\n    /** Output format. @default 'Hex' */\n    as?: as | 'Hex' | 'Bytes' | undefined\n  }\n\n  type ReturnType<as extends 'Hex' | 'Bytes' = 'Hex' | 'Bytes'> =\n    | (as extends 'Hex' ? Hex.Hex : never)\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\n}\n\n/**\n * Encrypts a private key as a [JSON keystore](https://ethereum.org/en/developers/docs/data-structures-and-encoding/web3-secret-storage/)\n * using a derived key.\n *\n * Supports the following key derivation functions (KDFs):\n * - {@link ox#Keystore.(pbkdf2:function)}\n * - {@link ox#Keystore.(scrypt:function)}\n *\n * @example\n * ```ts twoslash\n * import { Keystore, Secp256k1 } from 'ox'\n *\n * // Generate a random private key.\n * const privateKey = Secp256k1.randomPrivateKey()\n *\n * // Derive key from password.\n * const key = Keystore.pbkdf2({ password: 'testpassword' })\n *\n * // Encrypt the private key.\n * const encrypted = await Keystore.encrypt(privateKey, key)\n * // @log: {\n * // @log:   \"crypto\": {\n * // @log:     \"cipher\": \"aes-128-ctr\",\n * // @log:     \"ciphertext\": \"...\",\n * // @log:     \"cipherparams\": {\n * // @log:       \"iv\": \"...\",\n * // @log:     },\n * // @log:     \"kdf\": \"pbkdf2\",\n * // @log:     \"kdfparams\": {\n * // @log:       \"salt\": \"...\",\n * // @log:       \"dklen\": 32,\n * // @log:       \"prf\": \"hmac-sha256\",\n * // @log:       \"c\": 262144,\n * // @log:     },\n * // @log:     \"mac\": \"...\",\n * // @log:   },\n * // @log:   \"id\": \"...\",\n * // @log:   \"version\": 3,\n * // @log: }\n * ```\n *\n * @param privateKey - Private key to encrypt.\n * @param key - Key to use for encryption.\n * @param options - Encryption options.\n * @returns Encrypted keystore.\n */\nexport async function encrypt(\n  privateKey: Bytes.Bytes | Hex.Hex,\n  key: Key,\n  options: encrypt.Options = {},\n): Promise<Keystore> {\n  const { id = crypto.randomUUID() } = options\n\n  const key_ = Bytes.from(`0x${key.key()}`)\n  const value_ = Bytes.from(privateKey)\n\n  const encKey = Bytes.slice(key_, 0, 16)\n  const macKey = Bytes.slice(key_, 16, 32)\n\n  const ciphertext = ctr(encKey, key.iv).encrypt(value_)\n  const mac = Hash.keccak256(Bytes.concat(macKey, ciphertext))\n\n  return {\n    crypto: {\n      cipher: 'aes-128-ctr',\n      ciphertext: Bytes.toHex(ciphertext).slice(2),\n      cipherparams: { iv: Bytes.toHex(key.iv).slice(2) },\n      kdf: key.kdf,\n      kdfparams: key.kdfparams,\n      mac: Bytes.toHex(mac).slice(2),\n    } as Keystore['crypto'],\n    id,\n    version: 3,\n  }\n}\n\nexport declare namespace encrypt {\n  type Options = {\n    /** UUID. */\n    id?: string | undefined\n  }\n}\n\n/**\n * Derives a key from a password using [PBKDF2](https://en.wikipedia.org/wiki/PBKDF2).\n *\n * @example\n * ```ts twoslash\n * import { Keystore } from 'ox'\n *\n * const key = Keystore.pbkdf2({ password: 'testpassword' })\n * ```\n *\n * @param options - PBKDF2 options.\n * @returns PBKDF2 key.\n */\nexport function pbkdf2(options: pbkdf2.Options) {\n  const { iv, iterations = 262_144, password } = options\n\n  const salt = options.salt ? Bytes.from(options.salt) : Bytes.random(32)\n  const key = Bytes.toHex(\n    pbkdf2_noble(sha256, password, salt, { c: iterations, dkLen: 32 }),\n  ).slice(2)\n\n  return defineKey({\n    iv,\n    key: () => key,\n    kdfparams: {\n      c: iterations,\n      dklen: 32,\n      prf: 'hmac-sha256',\n      salt: Bytes.toHex(salt).slice(2),\n    },\n    kdf: 'pbkdf2',\n  }) satisfies Pbkdf2Key\n}\n\nexport declare namespace pbkdf2 {\n  type Options = {\n    /** The counter to use for the AES-CTR encryption. */\n    iv?: Bytes.Bytes | Hex.Hex | undefined\n    /** The number of iterations to use. @default 262_144 */\n    iterations?: number | undefined\n    /** Password to derive key from. */\n    password: string\n    /** Salt to use for key derivation. @default `Bytes.random(32)` */\n    salt?: Bytes.Bytes | Hex.Hex | undefined\n  }\n}\n\n/**\n * Derives a key from a password using [PBKDF2](https://en.wikipedia.org/wiki/PBKDF2).\n *\n * @example\n * ```ts twoslash\n * import { Keystore } from 'ox'\n *\n * const key = await Keystore.pbkdf2Async({ password: 'testpassword' })\n * ```\n *\n * @param options - PBKDF2 options.\n * @returns PBKDF2 key.\n */\nexport async function pbkdf2Async(options: pbkdf2.Options) {\n  const { iv, iterations = 262_144, password } = options\n\n  const salt = options.salt ? Bytes.from(options.salt) : Bytes.random(32)\n  const key = Bytes.toHex(\n    await pbkdf2Async_noble(sha256, password, salt, {\n      c: iterations,\n      dkLen: 32,\n    }),\n  ).slice(2)\n\n  return defineKey({\n    iv,\n    key: () => key,\n    kdfparams: {\n      c: iterations,\n      dklen: 32,\n      prf: 'hmac-sha256',\n      salt: Bytes.toHex(salt).slice(2),\n    },\n    kdf: 'pbkdf2',\n  }) satisfies Pbkdf2Key\n}\n\nexport declare namespace pbkdf2Async {\n  type Options = pbkdf2.Options\n}\n\n/**\n * Derives a key from a password using [scrypt](https://en.wikipedia.org/wiki/Scrypt).\n *\n * @example\n * ```ts twoslash\n * import { Keystore } from 'ox'\n *\n * const key = Keystore.scrypt({ password: 'testpassword' })\n * ```\n *\n * @param options - Scrypt options.\n * @returns Scrypt key.\n */\nexport function scrypt(options: scrypt.Options) {\n  const { iv, n = 262_144, password } = options\n\n  const p = 8\n  const r = 1\n\n  const salt = options.salt ? Bytes.from(options.salt) : Bytes.random(32)\n  const key = Bytes.toHex(\n    scrypt_noble(password, salt, { N: n, dkLen: 32, r, p }),\n  ).slice(2)\n\n  return defineKey({\n    iv,\n    key: () => key,\n    kdfparams: {\n      dklen: 32,\n      n,\n      p,\n      r,\n      salt: Bytes.toHex(salt).slice(2),\n    },\n    kdf: 'scrypt',\n  }) satisfies ScryptKey\n}\n\nexport declare namespace scrypt {\n  type Options = {\n    /** The counter to use for the AES-CTR encryption. */\n    iv?: Bytes.Bytes | Hex.Hex | undefined\n    /** Cost factor. @default 262_144 */\n    n?: number | undefined\n    /** Password to derive key from. */\n    password: string\n    /** Salt to use for key derivation. @default `Bytes.random(32)` */\n    salt?: Bytes.Bytes | Hex.Hex | undefined\n  }\n}\n\n/**\n * Derives a key from a password using [scrypt](https://en.wikipedia.org/wiki/Scrypt).\n *\n * @example\n * ```ts twoslash\n * import { Keystore } from 'ox'\n *\n * const key = await Keystore.scryptAsync({ password: 'testpassword' })\n * ```\n *\n * @param options - Scrypt options.\n * @returns Scrypt key.\n */\nexport async function scryptAsync(options: scrypt.Options) {\n  const { iv, n = 262_144, password } = options\n\n  const p = 8\n  const r = 1\n\n  const salt = options.salt ? Bytes.from(options.salt) : Bytes.random(32)\n  const key = Bytes.toHex(\n    await scryptAsync_noble(password, salt, { N: n, dkLen: 32, r, p }),\n  ).slice(2)\n\n  return defineKey({\n    iv,\n    key: () => key,\n    kdfparams: {\n      dklen: 32,\n      n,\n      p,\n      r,\n      salt: Bytes.toHex(salt).slice(2),\n    },\n    kdf: 'scrypt',\n  }) satisfies ScryptKey\n}\n\nexport declare namespace scryptAsync {\n  type Options = scrypt.Options\n}\n\n///////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nfunction defineKey<const key extends defineKey.Value>(\n  key: key,\n): key & { iv: Bytes.Bytes } {\n  const iv = key.iv ? Bytes.from(key.iv) : Bytes.random(16)\n  return { ...key, iv }\n}\n\n/** @internal */\ndeclare namespace defineKey {\n  type Value<\n    kdf extends string = string,\n    kdfparams extends Record<string, unknown> = Record<string, unknown>,\n  > = Omit<BaseKey<kdf, kdfparams>, 'iv'> & {\n    iv?: Bytes.Bytes | Hex.Hex | undefined\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n", "/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com) */\n\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\nexport function isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\n/** Asserts something is boolean. */\nexport function abool(b: boolean): void {\n  if (typeof b !== 'boolean') throw new Error(`boolean expected, not ${b}`);\n}\n\n/** Asserts something is positive integer. */\nexport function anumber(n: number): void {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\n}\n\n/** Asserts something is Uint8Array. */\nexport function abytes(b: Uint8Array | undefined, ...lengths: number[]): void {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n\n/**\n * Asserts something is hash\n * TODO: remove\n * @deprecated\n */\nexport function ahash(h: IHash): void {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.createHasher');\n  anumber(h.outputLen);\n  anumber(h.blockLen);\n}\n\n/** Asserts a hash instance has not been destroyed / finished */\nexport function aexists(instance: any, checkFinished = true): void {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\n\n/** Asserts output is properly-sized byte array */\nexport function aoutput(out: any, instance: any): void {\n  abytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error('digestInto() expects output buffer of length at least ' + min);\n  }\n}\n\nexport type IHash = {\n  (data: string | Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\n\n/** Generic type encompassing 8/16/32-byte arrays - but not 64-byte. */\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n/** Cast u8 / u16 / u32 to u8. */\nexport function u8(arr: TypedArray): Uint8Array {\n  return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** Cast u8 / u16 / u32 to u32. */\nexport function u32(arr: TypedArray): Uint32Array {\n  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\nexport function clean(...arrays: TypedArray[]): void {\n  for (let i = 0; i < arrays.length; i++) {\n    arrays[i].fill(0);\n  }\n}\n\n/** Create DataView of an array for easy byte-level manipulation. */\nexport function createView(arr: TypedArray): DataView {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE: boolean = /* @__PURE__ */ (() =>\n  new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin: boolean = /* @__PURE__ */ (() =>\n  // @ts-ignore\n  typeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // @ts-ignore\n  if (hasHexBuiltin) return bytes.toHex();\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\nfunction asciiToBase16(ch: number): number | undefined {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // @ts-ignore\n  if (hasHexBuiltin) return Uint8Array.fromHex(hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n\n// Used in micro\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  return BigInt(hex === '' ? '0' : '0x' + hex); // Big Endian\n}\n\n// Used in ff1\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\n\n// Used in micro, ff1\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\n\n// TODO: remove\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async (): Promise<void> => {};\n\n// Global symbols, but ts doesn't see them: https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error('string expected');\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(new Uint8Array([97, 98, 99])) // 'abc'\n */\nexport function bytesToUtf8(bytes: Uint8Array): string {\n  return new TextDecoder().decode(bytes);\n}\n\n// TODO: remove\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: string | Uint8Array): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  else if (isBytes(data)) data = copyBytes(data);\n  else throw new Error('Uint8Array expected, got ' + typeof data);\n  return data;\n}\n\n/**\n * Checks if two U8A use same underlying buffer and overlaps.\n * This is invalid and can corrupt data.\n */\nexport function overlapBytes(a: Uint8Array, b: Uint8Array): boolean {\n  return (\n    a.buffer === b.buffer && // best we can do, may fail with an obscure Proxy\n    a.byteOffset < b.byteOffset + b.byteLength && // a starts before b end\n    b.byteOffset < a.byteOffset + a.byteLength // b starts before a end\n  );\n}\n\n/**\n * If input and output overlap and input starts before output, we will overwrite end of input before\n * we start processing it, so this is not supported for most ciphers (except chacha/salse, which designed with this)\n */\nexport function complexOverlapBytes(input: Uint8Array, output: Uint8Array): void {\n  // This is very cursed. It works somehow, but I'm completely unsure,\n  // reasoning about overlapping aligned windows is very hard.\n  if (overlapBytes(input, output) && input.byteOffset < output.byteOffset)\n    throw new Error('complex overlap of input and output is not supported');\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// Used in ARX only\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts: T2\n): T1 & T2 {\n  if (opts == null || typeof opts !== 'object') throw new Error('options must be defined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\n/** Compares 2 uint8array-s in kinda constant time. */\nexport function equalBytes(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n// TODO: remove\n/** For runtime check if class implements interface. */\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: string | Uint8Array): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n}\n\n// This will allow to re-use with composable things like packed & base encoders\n// Also, we probably can make tags composable\n\n/** Sync cipher: takes byte array and returns byte array. */\nexport type Cipher = {\n  encrypt(plaintext: Uint8Array): Uint8Array;\n  decrypt(ciphertext: Uint8Array): Uint8Array;\n};\n\n/** Async cipher e.g. from built-in WebCrypto. */\nexport type AsyncCipher = {\n  encrypt(plaintext: Uint8Array): Promise<Uint8Array>;\n  decrypt(ciphertext: Uint8Array): Promise<Uint8Array>;\n};\n\n/** Cipher with `output` argument which can optimize by doing 1 less allocation. */\nexport type CipherWithOutput = Cipher & {\n  encrypt(plaintext: Uint8Array, output?: Uint8Array): Uint8Array;\n  decrypt(ciphertext: Uint8Array, output?: Uint8Array): Uint8Array;\n};\n\n/**\n * Params are outside of return type, so it is accessible before calling constructor.\n * If function support multiple nonceLength's, we return the best one.\n */\nexport type CipherParams = {\n  blockSize: number;\n  nonceLength?: number;\n  tagLength?: number;\n  varSizeNonce?: boolean;\n};\n/** ARX cipher, like salsa or chacha. */\nexport type ARXCipher = ((\n  key: Uint8Array,\n  nonce: Uint8Array,\n  AAD?: Uint8Array\n) => CipherWithOutput) & {\n  blockSize: number;\n  nonceLength: number;\n  tagLength: number;\n};\nexport type CipherCons<T extends any[]> = (key: Uint8Array, ...args: T) => Cipher;\n/**\n * Wraps a cipher: validates args, ensures encrypt() can only be called once.\n * @__NO_SIDE_EFFECTS__\n */\nexport const wrapCipher = <C extends CipherCons<any>, P extends CipherParams>(\n  params: P,\n  constructor: C\n): C & P => {\n  function wrappedCipher(key: Uint8Array, ...args: any[]): CipherWithOutput {\n    // Validate key\n    abytes(key);\n\n    // Big-Endian hardware is rare. Just in case someone still decides to run ciphers:\n    if (!isLE) throw new Error('Non little-endian hardware is not yet supported');\n\n    // Validate nonce if nonceLength is present\n    if (params.nonceLength !== undefined) {\n      const nonce = args[0];\n      if (!nonce) throw new Error('nonce / iv required');\n      if (params.varSizeNonce) abytes(nonce);\n      else abytes(nonce, params.nonceLength);\n    }\n\n    // Validate AAD if tagLength present\n    const tagl = params.tagLength;\n    if (tagl && args[1] !== undefined) {\n      abytes(args[1]);\n    }\n\n    const cipher = constructor(key, ...args);\n    const checkOutput = (fnLength: number, output?: Uint8Array) => {\n      if (output !== undefined) {\n        if (fnLength !== 2) throw new Error('cipher output not supported');\n        abytes(output);\n      }\n    };\n    // Create wrapped cipher with validation and single-use encryption\n    let called = false;\n    const wrCipher = {\n      encrypt(data: Uint8Array, output?: Uint8Array) {\n        if (called) throw new Error('cannot encrypt() twice with same key + nonce');\n        called = true;\n        abytes(data);\n        checkOutput(cipher.encrypt.length, output);\n        return (cipher as CipherWithOutput).encrypt(data, output);\n      },\n      decrypt(data: Uint8Array, output?: Uint8Array) {\n        abytes(data);\n        if (tagl && data.length < tagl)\n          throw new Error('invalid ciphertext length: smaller than tagLength=' + tagl);\n        checkOutput(cipher.decrypt.length, output);\n        return (cipher as CipherWithOutput).decrypt(data, output);\n      },\n    };\n\n    return wrCipher;\n  }\n\n  Object.assign(wrappedCipher, params);\n  return wrappedCipher as C & P;\n};\n\n/** Represents salsa / chacha stream. */\nexport type XorStream = (\n  key: Uint8Array,\n  nonce: Uint8Array,\n  data: Uint8Array,\n  output?: Uint8Array,\n  counter?: number\n) => Uint8Array;\n\n/**\n * By default, returns u8a of length.\n * When out is available, it checks it for validity and uses it.\n */\nexport function getOutput(\n  expectedLength: number,\n  out?: Uint8Array,\n  onlyAligned = true\n): Uint8Array {\n  if (out === undefined) return new Uint8Array(expectedLength);\n  if (out.length !== expectedLength)\n    throw new Error('invalid output length, expected ' + expectedLength + ', got: ' + out.length);\n  if (onlyAligned && !isAligned32(out)) throw new Error('invalid output, must be aligned');\n  return out;\n}\n\n/** Polyfill for Safari 14. */\nexport function setBigUint64(\n  view: DataView,\n  byteOffset: number,\n  value: bigint,\n  isLE: boolean\n): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\nexport function u64Lengths(dataLength: number, aadLength: number, isLE: boolean): Uint8Array {\n  abool(isLE);\n  const num = new Uint8Array(16);\n  const view = createView(num);\n  setBigUint64(view, 0, BigInt(aadLength), isLE);\n  setBigUint64(view, 8, BigInt(dataLength), isLE);\n  return num;\n}\n\n// Is byte array aligned to 4 byte offset (u32)?\nexport function isAligned32(bytes: Uint8Array): boolean {\n  return bytes.byteOffset % 4 === 0;\n}\n\n// copy bytes to new u8a (aligned). Because Buffer.slice is broken.\nexport function copyBytes(bytes: Uint8Array): Uint8Array {\n  return Uint8Array.from(bytes);\n}\n", "/**\n * GHash from AES-GCM and its little-endian \"mirror image\" Polyval from AES-SIV.\n *\n * Implemented in terms of GHash with conversion function for keys\n * GCM GHASH from\n * [NIST SP800-38d](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf),\n * SIV from\n * [RFC 8452](https://datatracker.ietf.org/doc/html/rfc8452).\n *\n * GHASH   modulo: x^128 + x^7   + x^2   + x     + 1\n * POLYVAL modulo: x^128 + x^127 + x^126 + x^121 + 1\n *\n * @module\n */\n// prettier-ignore\nimport {\n  abytes, aexists, aoutput,\n  clean, copyBytes, createView, Hash, type Input, toBytes, u32,\n} from './utils.ts';\n\nconst BLOCK_SIZE = 16;\n// TODO: rewrite\n// temporary padding buffer\nconst ZEROS16 = /* @__PURE__ */ new Uint8Array(16);\nconst ZEROS32 = u32(ZEROS16);\nconst POLY = 0xe1; // v = 2*v % POLY\n\n// v = 2*v % POLY\n// NOTE: because x + x = 0 (add/sub is same), mul2(x) != x+x\n// We can multiply any number using montgomery ladder and this function (works as double, add is simple xor)\nconst mul2 = (s0: number, s1: number, s2: number, s3: number) => {\n  const hiBit = s3 & 1;\n  return {\n    s3: (s2 << 31) | (s3 >>> 1),\n    s2: (s1 << 31) | (s2 >>> 1),\n    s1: (s0 << 31) | (s1 >>> 1),\n    s0: (s0 >>> 1) ^ ((POLY << 24) & -(hiBit & 1)), // reduce % poly\n  };\n};\n\nconst swapLE = (n: number) =>\n  (((n >>> 0) & 0xff) << 24) |\n  (((n >>> 8) & 0xff) << 16) |\n  (((n >>> 16) & 0xff) << 8) |\n  ((n >>> 24) & 0xff) |\n  0;\n\n/**\n * `mulX_POLYVAL(ByteReverse(H))` from spec\n * @param k mutated in place\n */\nexport function _toGHASHKey(k: Uint8Array): Uint8Array {\n  k.reverse();\n  const hiBit = k[15] & 1;\n  // k >>= 1\n  let carry = 0;\n  for (let i = 0; i < k.length; i++) {\n    const t = k[i];\n    k[i] = (t >>> 1) | carry;\n    carry = (t & 1) << 7;\n  }\n  k[0] ^= -hiBit & 0xe1; // if (hiBit) n ^= 0xe1000000000000000000000000000000;\n  return k;\n}\n\ntype Value = { s0: number; s1: number; s2: number; s3: number };\n\nconst estimateWindow = (bytes: number) => {\n  if (bytes > 64 * 1024) return 8;\n  if (bytes > 1024) return 4;\n  return 2;\n};\n\nclass GHASH implements Hash<GHASH> {\n  readonly blockLen = BLOCK_SIZE;\n  readonly outputLen = BLOCK_SIZE;\n  protected s0 = 0;\n  protected s1 = 0;\n  protected s2 = 0;\n  protected s3 = 0;\n  protected finished = false;\n  protected t: Value[];\n  private W: number;\n  private windowSize: number;\n  // We select bits per window adaptively based on expectedLength\n  constructor(key: Input, expectedLength?: number) {\n    key = toBytes(key);\n    abytes(key, 16);\n    const kView = createView(key);\n    let k0 = kView.getUint32(0, false);\n    let k1 = kView.getUint32(4, false);\n    let k2 = kView.getUint32(8, false);\n    let k3 = kView.getUint32(12, false);\n    // generate table of doubled keys (half of montgomery ladder)\n    const doubles: Value[] = [];\n    for (let i = 0; i < 128; i++) {\n      doubles.push({ s0: swapLE(k0), s1: swapLE(k1), s2: swapLE(k2), s3: swapLE(k3) });\n      ({ s0: k0, s1: k1, s2: k2, s3: k3 } = mul2(k0, k1, k2, k3));\n    }\n    const W = estimateWindow(expectedLength || 1024);\n    if (![1, 2, 4, 8].includes(W))\n      throw new Error('ghash: invalid window size, expected 2, 4 or 8');\n    this.W = W;\n    const bits = 128; // always 128 bits;\n    const windows = bits / W;\n    const windowSize = (this.windowSize = 2 ** W);\n    const items: Value[] = [];\n    // Create precompute table for window of W bits\n    for (let w = 0; w < windows; w++) {\n      // truth table: 00, 01, 10, 11\n      for (let byte = 0; byte < windowSize; byte++) {\n        // prettier-ignore\n        let s0 = 0, s1 = 0, s2 = 0, s3 = 0;\n        for (let j = 0; j < W; j++) {\n          const bit = (byte >>> (W - j - 1)) & 1;\n          if (!bit) continue;\n          const { s0: d0, s1: d1, s2: d2, s3: d3 } = doubles[W * w + j];\n          (s0 ^= d0), (s1 ^= d1), (s2 ^= d2), (s3 ^= d3);\n        }\n        items.push({ s0, s1, s2, s3 });\n      }\n    }\n    this.t = items;\n  }\n  protected _updateBlock(s0: number, s1: number, s2: number, s3: number) {\n    (s0 ^= this.s0), (s1 ^= this.s1), (s2 ^= this.s2), (s3 ^= this.s3);\n    const { W, t, windowSize } = this;\n    // prettier-ignore\n    let o0 = 0, o1 = 0, o2 = 0, o3 = 0;\n    const mask = (1 << W) - 1; // 2**W will kill performance.\n    let w = 0;\n    for (const num of [s0, s1, s2, s3]) {\n      for (let bytePos = 0; bytePos < 4; bytePos++) {\n        const byte = (num >>> (8 * bytePos)) & 0xff;\n        for (let bitPos = 8 / W - 1; bitPos >= 0; bitPos--) {\n          const bit = (byte >>> (W * bitPos)) & mask;\n          const { s0: e0, s1: e1, s2: e2, s3: e3 } = t[w * windowSize + bit];\n          (o0 ^= e0), (o1 ^= e1), (o2 ^= e2), (o3 ^= e3);\n          w += 1;\n        }\n      }\n    }\n    this.s0 = o0;\n    this.s1 = o1;\n    this.s2 = o2;\n    this.s3 = o3;\n  }\n  update(data: Input): this {\n    aexists(this);\n    data = toBytes(data);\n    abytes(data);\n    const b32 = u32(data);\n    const blocks = Math.floor(data.length / BLOCK_SIZE);\n    const left = data.length % BLOCK_SIZE;\n    for (let i = 0; i < blocks; i++) {\n      this._updateBlock(b32[i * 4 + 0], b32[i * 4 + 1], b32[i * 4 + 2], b32[i * 4 + 3]);\n    }\n    if (left) {\n      ZEROS16.set(data.subarray(blocks * BLOCK_SIZE));\n      this._updateBlock(ZEROS32[0], ZEROS32[1], ZEROS32[2], ZEROS32[3]);\n      clean(ZEROS32); // clean tmp buffer\n    }\n    return this;\n  }\n  destroy() {\n    const { t } = this;\n    // clean precompute table\n    for (const elm of t) {\n      (elm.s0 = 0), (elm.s1 = 0), (elm.s2 = 0), (elm.s3 = 0);\n    }\n  }\n  digestInto(out: Uint8Array) {\n    aexists(this);\n    aoutput(out, this);\n    this.finished = true;\n    const { s0, s1, s2, s3 } = this;\n    const o32 = u32(out);\n    o32[0] = s0;\n    o32[1] = s1;\n    o32[2] = s2;\n    o32[3] = s3;\n    return out;\n  }\n  digest(): Uint8Array {\n    const res = new Uint8Array(BLOCK_SIZE);\n    this.digestInto(res);\n    this.destroy();\n    return res;\n  }\n}\n\nclass Polyval extends GHASH {\n  constructor(key: Input, expectedLength?: number) {\n    key = toBytes(key);\n    abytes(key);\n    const ghKey = _toGHASHKey(copyBytes(key));\n    super(ghKey, expectedLength);\n    clean(ghKey);\n  }\n  update(data: Input): this {\n    data = toBytes(data);\n    aexists(this);\n    const b32 = u32(data);\n    const left = data.length % BLOCK_SIZE;\n    const blocks = Math.floor(data.length / BLOCK_SIZE);\n    for (let i = 0; i < blocks; i++) {\n      this._updateBlock(\n        swapLE(b32[i * 4 + 3]),\n        swapLE(b32[i * 4 + 2]),\n        swapLE(b32[i * 4 + 1]),\n        swapLE(b32[i * 4 + 0])\n      );\n    }\n    if (left) {\n      ZEROS16.set(data.subarray(blocks * BLOCK_SIZE));\n      this._updateBlock(\n        swapLE(ZEROS32[3]),\n        swapLE(ZEROS32[2]),\n        swapLE(ZEROS32[1]),\n        swapLE(ZEROS32[0])\n      );\n      clean(ZEROS32);\n    }\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    aexists(this);\n    aoutput(out, this);\n    this.finished = true;\n    // tmp ugly hack\n    const { s0, s1, s2, s3 } = this;\n    const o32 = u32(out);\n    o32[0] = s0;\n    o32[1] = s1;\n    o32[2] = s2;\n    o32[3] = s3;\n    return out.reverse();\n  }\n}\n\nexport type CHashPV = ReturnType<typeof wrapConstructorWithKey>;\nfunction wrapConstructorWithKey<H extends Hash<H>>(\n  hashCons: (key: Input, expectedLength?: number) => Hash<H>\n): {\n  (msg: Input, key: Input): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(key: Input, expectedLength?: number): Hash<H>;\n} {\n  const hashC = (msg: Input, key: Input): Uint8Array =>\n    hashCons(key, msg.length).update(toBytes(msg)).digest();\n  const tmp = hashCons(new Uint8Array(16), 0);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (key: Input, expectedLength?: number) => hashCons(key, expectedLength);\n  return hashC;\n}\n\n/** GHash MAC for AES-GCM. */\nexport const ghash: CHashPV = wrapConstructorWithKey(\n  (key, expectedLength) => new GHASH(key, expectedLength)\n);\n\n/** Polyval MAC for AES-SIV. */\nexport const polyval: CHashPV = wrapConstructorWithKey(\n  (key, expectedLength) => new Polyval(key, expectedLength)\n);\n", "/**\n * [AES](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard)\n * a.k.a. Advanced Encryption Standard\n * is a variant of Rijndael block cipher, standardized by NIST in 2001.\n * We provide the fastest available pure JS implementation.\n *\n * Data is split into 128-bit blocks. Encrypted in 10/12/14 rounds (128/192/256 bits). In every round:\n * 1. **S-box**, table substitution\n * 2. **Shift rows**, cyclic shift left of all rows of data array\n * 3. **Mix columns**, multiplying every column by fixed polynomial\n * 4. **Add round key**, round_key xor i-th column of array\n *\n * Check out [FIPS-197](https://csrc.nist.gov/files/pubs/fips/197/final/docs/fips-197.pdf)\n * and [original proposal](https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/aes-development/rijndael-ammended.pdf)\n * @module\n */\nimport { ghash, polyval } from './_polyval.ts';\n// prettier-ignore\nimport {\n  abytes, clean, complexOverlapBytes, concatBytes,\n  copyBytes, createView, equalBytes, getOutput, isAligned32, overlapBytes,\n  setBigUint64, u32, u64Lengths, u8, wrapCipher,\n  type Cipher, type CipherWithOutput,\n} from './utils.ts';\n\nconst BLOCK_SIZE = 16;\nconst BLOCK_SIZE32 = 4;\nconst EMPTY_BLOCK = /* @__PURE__ */ new Uint8Array(BLOCK_SIZE);\nconst POLY = 0x11b; // 1 + x + x**3 + x**4 + x**8\n\n// TODO: remove multiplication, binary ops only\nfunction mul2(n: number) {\n  return (n << 1) ^ (POLY & -(n >> 7));\n}\n\nfunction mul(a: number, b: number) {\n  let res = 0;\n  for (; b > 0; b >>= 1) {\n    // Montgomery ladder\n    res ^= a & -(b & 1); // if (b&1) res ^=a (but const-time).\n    a = mul2(a); // a = 2*a\n  }\n  return res;\n}\n\n// AES S-box is generated using finite field inversion,\n// an affine transform, and xor of a constant 0x63.\nconst sbox = /* @__PURE__ */ (() => {\n  const t = new Uint8Array(256);\n  for (let i = 0, x = 1; i < 256; i++, x ^= mul2(x)) t[i] = x;\n  const box = new Uint8Array(256);\n  box[0] = 0x63; // first elm\n  for (let i = 0; i < 255; i++) {\n    let x = t[255 - i];\n    x |= x << 8;\n    box[t[i]] = (x ^ (x >> 4) ^ (x >> 5) ^ (x >> 6) ^ (x >> 7) ^ 0x63) & 0xff;\n  }\n  clean(t);\n  return box;\n})();\n\n// Inverted S-box\nconst invSbox = /* @__PURE__ */ sbox.map((_, j) => sbox.indexOf(j));\n\n// Rotate u32 by 8\nconst rotr32_8 = (n: number) => (n << 24) | (n >>> 8);\nconst rotl32_8 = (n: number) => (n << 8) | (n >>> 24);\n// The byte swap operation for uint32 (LE<->BE)\nconst byteSwap = (word: number) =>\n  ((word << 24) & 0xff000000) |\n  ((word << 8) & 0xff0000) |\n  ((word >>> 8) & 0xff00) |\n  ((word >>> 24) & 0xff);\n\n// T-table is optimization suggested in 5.2 of original proposal (missed from FIPS-197). Changes:\n// - LE instead of BE\n// - bigger tables: T0 and T1 are merged into T01 table and T2 & T3 into T23;\n//   so index is u16, instead of u8. This speeds up things, unexpectedly\nfunction genTtable(sbox: Uint8Array, fn: (n: number) => number) {\n  if (sbox.length !== 256) throw new Error('Wrong sbox length');\n  const T0 = new Uint32Array(256).map((_, j) => fn(sbox[j]));\n  const T1 = T0.map(rotl32_8);\n  const T2 = T1.map(rotl32_8);\n  const T3 = T2.map(rotl32_8);\n  const T01 = new Uint32Array(256 * 256);\n  const T23 = new Uint32Array(256 * 256);\n  const sbox2 = new Uint16Array(256 * 256);\n  for (let i = 0; i < 256; i++) {\n    for (let j = 0; j < 256; j++) {\n      const idx = i * 256 + j;\n      T01[idx] = T0[i] ^ T1[j];\n      T23[idx] = T2[i] ^ T3[j];\n      sbox2[idx] = (sbox[i] << 8) | sbox[j];\n    }\n  }\n  return { sbox, sbox2, T0, T1, T2, T3, T01, T23 };\n}\n\nconst tableEncoding = /* @__PURE__ */ genTtable(\n  sbox,\n  (s: number) => (mul(s, 3) << 24) | (s << 16) | (s << 8) | mul(s, 2)\n);\nconst tableDecoding = /* @__PURE__ */ genTtable(\n  invSbox,\n  (s) => (mul(s, 11) << 24) | (mul(s, 13) << 16) | (mul(s, 9) << 8) | mul(s, 14)\n);\n\nconst xPowers = /* @__PURE__ */ (() => {\n  const p = new Uint8Array(16);\n  for (let i = 0, x = 1; i < 16; i++, x = mul2(x)) p[i] = x;\n  return p;\n})();\n\n/** Key expansion used in CTR. */\nfunction expandKeyLE(key: Uint8Array): Uint32Array {\n  abytes(key);\n  const len = key.length;\n  if (![16, 24, 32].includes(len))\n    throw new Error('aes: invalid key size, should be 16, 24 or 32, got ' + len);\n  const { sbox2 } = tableEncoding;\n  const toClean = [];\n  if (!isAligned32(key)) toClean.push((key = copyBytes(key)));\n  const k32 = u32(key);\n  const Nk = k32.length;\n  const subByte = (n: number) => applySbox(sbox2, n, n, n, n);\n  const xk = new Uint32Array(len + 28); // expanded key\n  xk.set(k32);\n  // 4.3.1 Key expansion\n  for (let i = Nk; i < xk.length; i++) {\n    let t = xk[i - 1];\n    if (i % Nk === 0) t = subByte(rotr32_8(t)) ^ xPowers[i / Nk - 1];\n    else if (Nk > 6 && i % Nk === 4) t = subByte(t);\n    xk[i] = xk[i - Nk] ^ t;\n  }\n  clean(...toClean);\n  return xk;\n}\n\nfunction expandKeyDecLE(key: Uint8Array): Uint32Array {\n  const encKey = expandKeyLE(key);\n  const xk = encKey.slice();\n  const Nk = encKey.length;\n  const { sbox2 } = tableEncoding;\n  const { T0, T1, T2, T3 } = tableDecoding;\n  // Inverse key by chunks of 4 (rounds)\n  for (let i = 0; i < Nk; i += 4) {\n    for (let j = 0; j < 4; j++) xk[i + j] = encKey[Nk - i - 4 + j];\n  }\n  clean(encKey);\n  // apply InvMixColumn except first & last round\n  for (let i = 4; i < Nk - 4; i++) {\n    const x = xk[i];\n    const w = applySbox(sbox2, x, x, x, x);\n    xk[i] = T0[w & 0xff] ^ T1[(w >>> 8) & 0xff] ^ T2[(w >>> 16) & 0xff] ^ T3[w >>> 24];\n  }\n  return xk;\n}\n\n// Apply tables\nfunction apply0123(\n  T01: Uint32Array,\n  T23: Uint32Array,\n  s0: number,\n  s1: number,\n  s2: number,\n  s3: number\n) {\n  return (\n    T01[((s0 << 8) & 0xff00) | ((s1 >>> 8) & 0xff)] ^\n    T23[((s2 >>> 8) & 0xff00) | ((s3 >>> 24) & 0xff)]\n  );\n}\n\nfunction applySbox(sbox2: Uint16Array, s0: number, s1: number, s2: number, s3: number) {\n  return (\n    sbox2[(s0 & 0xff) | (s1 & 0xff00)] |\n    (sbox2[((s2 >>> 16) & 0xff) | ((s3 >>> 16) & 0xff00)] << 16)\n  );\n}\n\nfunction encrypt(\n  xk: Uint32Array,\n  s0: number,\n  s1: number,\n  s2: number,\n  s3: number\n): { s0: number; s1: number; s2: number; s3: number } {\n  const { sbox2, T01, T23 } = tableEncoding;\n  let k = 0;\n  (s0 ^= xk[k++]), (s1 ^= xk[k++]), (s2 ^= xk[k++]), (s3 ^= xk[k++]);\n  const rounds = xk.length / 4 - 2;\n  for (let i = 0; i < rounds; i++) {\n    const t0 = xk[k++] ^ apply0123(T01, T23, s0, s1, s2, s3);\n    const t1 = xk[k++] ^ apply0123(T01, T23, s1, s2, s3, s0);\n    const t2 = xk[k++] ^ apply0123(T01, T23, s2, s3, s0, s1);\n    const t3 = xk[k++] ^ apply0123(T01, T23, s3, s0, s1, s2);\n    (s0 = t0), (s1 = t1), (s2 = t2), (s3 = t3);\n  }\n  // last round (without mixcolumns, so using SBOX2 table)\n  const t0 = xk[k++] ^ applySbox(sbox2, s0, s1, s2, s3);\n  const t1 = xk[k++] ^ applySbox(sbox2, s1, s2, s3, s0);\n  const t2 = xk[k++] ^ applySbox(sbox2, s2, s3, s0, s1);\n  const t3 = xk[k++] ^ applySbox(sbox2, s3, s0, s1, s2);\n  return { s0: t0, s1: t1, s2: t2, s3: t3 };\n}\n\n// Can't be merged with encrypt: arg positions for apply0123 / applySbox are different\nfunction decrypt(\n  xk: Uint32Array,\n  s0: number,\n  s1: number,\n  s2: number,\n  s3: number\n): {\n  s0: number;\n  s1: number;\n  s2: number;\n  s3: number;\n} {\n  const { sbox2, T01, T23 } = tableDecoding;\n  let k = 0;\n  (s0 ^= xk[k++]), (s1 ^= xk[k++]), (s2 ^= xk[k++]), (s3 ^= xk[k++]);\n  const rounds = xk.length / 4 - 2;\n  for (let i = 0; i < rounds; i++) {\n    const t0 = xk[k++] ^ apply0123(T01, T23, s0, s3, s2, s1);\n    const t1 = xk[k++] ^ apply0123(T01, T23, s1, s0, s3, s2);\n    const t2 = xk[k++] ^ apply0123(T01, T23, s2, s1, s0, s3);\n    const t3 = xk[k++] ^ apply0123(T01, T23, s3, s2, s1, s0);\n    (s0 = t0), (s1 = t1), (s2 = t2), (s3 = t3);\n  }\n  // Last round\n  const t0: number = xk[k++] ^ applySbox(sbox2, s0, s3, s2, s1);\n  const t1: number = xk[k++] ^ applySbox(sbox2, s1, s0, s3, s2);\n  const t2: number = xk[k++] ^ applySbox(sbox2, s2, s1, s0, s3);\n  const t3: number = xk[k++] ^ applySbox(sbox2, s3, s2, s1, s0);\n  return { s0: t0, s1: t1, s2: t2, s3: t3 };\n}\n\n// TODO: investigate merging with ctr32\nfunction ctrCounter(\n  xk: Uint32Array,\n  nonce: Uint8Array,\n  src: Uint8Array,\n  dst?: Uint8Array\n): Uint8Array {\n  abytes(nonce, BLOCK_SIZE);\n  abytes(src);\n  const srcLen = src.length;\n  dst = getOutput(srcLen, dst);\n  complexOverlapBytes(src, dst);\n  const ctr = nonce;\n  const c32 = u32(ctr);\n  // Fill block (empty, ctr=0)\n  let { s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]);\n  const src32 = u32(src);\n  const dst32 = u32(dst);\n  // process blocks\n  for (let i = 0; i + 4 <= src32.length; i += 4) {\n    dst32[i + 0] = src32[i + 0] ^ s0;\n    dst32[i + 1] = src32[i + 1] ^ s1;\n    dst32[i + 2] = src32[i + 2] ^ s2;\n    dst32[i + 3] = src32[i + 3] ^ s3;\n    // Full 128 bit counter with wrap around\n    let carry = 1;\n    for (let i = ctr.length - 1; i >= 0; i--) {\n      carry = (carry + (ctr[i] & 0xff)) | 0;\n      ctr[i] = carry & 0xff;\n      carry >>>= 8;\n    }\n    ({ s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]));\n  }\n  // leftovers (less than block)\n  // It's possible to handle > u32 fast, but is it worth it?\n  const start = BLOCK_SIZE * Math.floor(src32.length / BLOCK_SIZE32);\n  if (start < srcLen) {\n    const b32 = new Uint32Array([s0, s1, s2, s3]);\n    const buf = u8(b32);\n    for (let i = start, pos = 0; i < srcLen; i++, pos++) dst[i] = src[i] ^ buf[pos];\n    clean(b32);\n  }\n  return dst;\n}\n\n// AES CTR with overflowing 32 bit counter\n// It's possible to do 32le significantly simpler (and probably faster) by using u32.\n// But, we need both, and perf bottleneck is in ghash anyway.\nfunction ctr32(\n  xk: Uint32Array,\n  isLE: boolean,\n  nonce: Uint8Array,\n  src: Uint8Array,\n  dst?: Uint8Array\n): Uint8Array {\n  abytes(nonce, BLOCK_SIZE);\n  abytes(src);\n  dst = getOutput(src.length, dst);\n  const ctr = nonce; // write new value to nonce, so it can be re-used\n  const c32 = u32(ctr);\n  const view = createView(ctr);\n  const src32 = u32(src);\n  const dst32 = u32(dst);\n  const ctrPos = isLE ? 0 : 12;\n  const srcLen = src.length;\n  // Fill block (empty, ctr=0)\n  let ctrNum = view.getUint32(ctrPos, isLE); // read current counter value\n  let { s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]);\n  // process blocks\n  for (let i = 0; i + 4 <= src32.length; i += 4) {\n    dst32[i + 0] = src32[i + 0] ^ s0;\n    dst32[i + 1] = src32[i + 1] ^ s1;\n    dst32[i + 2] = src32[i + 2] ^ s2;\n    dst32[i + 3] = src32[i + 3] ^ s3;\n    ctrNum = (ctrNum + 1) >>> 0; // u32 wrap\n    view.setUint32(ctrPos, ctrNum, isLE);\n    ({ s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]));\n  }\n  // leftovers (less than a block)\n  const start = BLOCK_SIZE * Math.floor(src32.length / BLOCK_SIZE32);\n  if (start < srcLen) {\n    const b32 = new Uint32Array([s0, s1, s2, s3]);\n    const buf = u8(b32);\n    for (let i = start, pos = 0; i < srcLen; i++, pos++) dst[i] = src[i] ^ buf[pos];\n    clean(b32);\n  }\n  return dst;\n}\n\n/**\n * CTR: counter mode. Creates stream cipher.\n * Requires good IV. Parallelizable. OK, but no MAC.\n */\nexport const ctr: ((key: Uint8Array, nonce: Uint8Array) => CipherWithOutput) & {\n  blockSize: number;\n  nonceLength: number;\n} = /* @__PURE__ */ wrapCipher(\n  { blockSize: 16, nonceLength: 16 },\n  function aesctr(key: Uint8Array, nonce: Uint8Array): CipherWithOutput {\n    function processCtr(buf: Uint8Array, dst?: Uint8Array) {\n      abytes(buf);\n      if (dst !== undefined) {\n        abytes(dst);\n        if (!isAligned32(dst)) throw new Error('unaligned destination');\n      }\n      const xk = expandKeyLE(key);\n      const n = copyBytes(nonce); // align + avoid changing\n      const toClean = [xk, n];\n      if (!isAligned32(buf)) toClean.push((buf = copyBytes(buf)));\n      const out = ctrCounter(xk, n, buf, dst);\n      clean(...toClean);\n      return out;\n    }\n    return {\n      encrypt: (plaintext: Uint8Array, dst?: Uint8Array) => processCtr(plaintext, dst),\n      decrypt: (ciphertext: Uint8Array, dst?: Uint8Array) => processCtr(ciphertext, dst),\n    };\n  }\n);\n\nfunction validateBlockDecrypt(data: Uint8Array) {\n  abytes(data);\n  if (data.length % BLOCK_SIZE !== 0) {\n    throw new Error(\n      'aes-(cbc/ecb).decrypt ciphertext should consist of blocks with size ' + BLOCK_SIZE\n    );\n  }\n}\n\nfunction validateBlockEncrypt(plaintext: Uint8Array, pcks5: boolean, dst?: Uint8Array) {\n  abytes(plaintext);\n  let outLen = plaintext.length;\n  const remaining = outLen % BLOCK_SIZE;\n  if (!pcks5 && remaining !== 0)\n    throw new Error('aec/(cbc-ecb): unpadded plaintext with disabled padding');\n  if (!isAligned32(plaintext)) plaintext = copyBytes(plaintext);\n  const b = u32(plaintext);\n  if (pcks5) {\n    let left = BLOCK_SIZE - remaining;\n    if (!left) left = BLOCK_SIZE; // if no bytes left, create empty padding block\n    outLen = outLen + left;\n  }\n  dst = getOutput(outLen, dst);\n  complexOverlapBytes(plaintext, dst);\n  const o = u32(dst);\n  return { b, o, out: dst };\n}\n\nfunction validatePCKS(data: Uint8Array, pcks5: boolean) {\n  if (!pcks5) return data;\n  const len = data.length;\n  if (!len) throw new Error('aes/pcks5: empty ciphertext not allowed');\n  const lastByte = data[len - 1];\n  if (lastByte <= 0 || lastByte > 16) throw new Error('aes/pcks5: wrong padding');\n  const out = data.subarray(0, -lastByte);\n  for (let i = 0; i < lastByte; i++)\n    if (data[len - i - 1] !== lastByte) throw new Error('aes/pcks5: wrong padding');\n  return out;\n}\n\nfunction padPCKS(left: Uint8Array) {\n  const tmp = new Uint8Array(16);\n  const tmp32 = u32(tmp);\n  tmp.set(left);\n  const paddingByte = BLOCK_SIZE - left.length;\n  for (let i = BLOCK_SIZE - paddingByte; i < BLOCK_SIZE; i++) tmp[i] = paddingByte;\n  return tmp32;\n}\n\n/** Options for ECB and CBC. */\nexport type BlockOpts = { disablePadding?: boolean };\n\n/**\n * ECB: Electronic CodeBook. Simple deterministic replacement.\n * Dangerous: always map x to y. See [AES Penguin](https://words.filippo.io/the-ecb-penguin/).\n */\nexport const ecb: ((key: Uint8Array, opts?: BlockOpts) => CipherWithOutput) & {\n  blockSize: number;\n} = /* @__PURE__ */ wrapCipher(\n  { blockSize: 16 },\n  function aesecb(key: Uint8Array, opts: BlockOpts = {}): CipherWithOutput {\n    const pcks5 = !opts.disablePadding;\n    return {\n      encrypt(plaintext: Uint8Array, dst?: Uint8Array) {\n        const { b, o, out: _out } = validateBlockEncrypt(plaintext, pcks5, dst);\n        const xk = expandKeyLE(key);\n        let i = 0;\n        for (; i + 4 <= b.length; ) {\n          const { s0, s1, s2, s3 } = encrypt(xk, b[i + 0], b[i + 1], b[i + 2], b[i + 3]);\n          (o[i++] = s0), (o[i++] = s1), (o[i++] = s2), (o[i++] = s3);\n        }\n        if (pcks5) {\n          const tmp32 = padPCKS(plaintext.subarray(i * 4));\n          const { s0, s1, s2, s3 } = encrypt(xk, tmp32[0], tmp32[1], tmp32[2], tmp32[3]);\n          (o[i++] = s0), (o[i++] = s1), (o[i++] = s2), (o[i++] = s3);\n        }\n        clean(xk);\n        return _out;\n      },\n      decrypt(ciphertext: Uint8Array, dst?: Uint8Array) {\n        validateBlockDecrypt(ciphertext);\n        const xk = expandKeyDecLE(key);\n        dst = getOutput(ciphertext.length, dst);\n        const toClean: (Uint8Array | Uint32Array)[] = [xk];\n        if (!isAligned32(ciphertext)) toClean.push((ciphertext = copyBytes(ciphertext)));\n        complexOverlapBytes(ciphertext, dst);\n        const b = u32(ciphertext);\n        const o = u32(dst);\n        for (let i = 0; i + 4 <= b.length; ) {\n          const { s0, s1, s2, s3 } = decrypt(xk, b[i + 0], b[i + 1], b[i + 2], b[i + 3]);\n          (o[i++] = s0), (o[i++] = s1), (o[i++] = s2), (o[i++] = s3);\n        }\n        clean(...toClean);\n        return validatePCKS(dst, pcks5);\n      },\n    };\n  }\n);\n\n/**\n * CBC: Cipher-Block-Chaining. Key is previous round’s block.\n * Fragile: needs proper padding. Unauthenticated: needs MAC.\n */\nexport const cbc: ((key: Uint8Array, iv: Uint8Array, opts?: BlockOpts) => CipherWithOutput) & {\n  blockSize: number;\n  nonceLength: number;\n} = /* @__PURE__ */ wrapCipher(\n  { blockSize: 16, nonceLength: 16 },\n  function aescbc(key: Uint8Array, iv: Uint8Array, opts: BlockOpts = {}): CipherWithOutput {\n    const pcks5 = !opts.disablePadding;\n    return {\n      encrypt(plaintext: Uint8Array, dst?: Uint8Array) {\n        const xk = expandKeyLE(key);\n        const { b, o, out: _out } = validateBlockEncrypt(plaintext, pcks5, dst);\n        let _iv = iv;\n        const toClean: (Uint8Array | Uint32Array)[] = [xk];\n        if (!isAligned32(_iv)) toClean.push((_iv = copyBytes(_iv)));\n        const n32 = u32(_iv);\n        // prettier-ignore\n        let s0 = n32[0], s1 = n32[1], s2 = n32[2], s3 = n32[3];\n        let i = 0;\n        for (; i + 4 <= b.length; ) {\n          (s0 ^= b[i + 0]), (s1 ^= b[i + 1]), (s2 ^= b[i + 2]), (s3 ^= b[i + 3]);\n          ({ s0, s1, s2, s3 } = encrypt(xk, s0, s1, s2, s3));\n          (o[i++] = s0), (o[i++] = s1), (o[i++] = s2), (o[i++] = s3);\n        }\n        if (pcks5) {\n          const tmp32 = padPCKS(plaintext.subarray(i * 4));\n          (s0 ^= tmp32[0]), (s1 ^= tmp32[1]), (s2 ^= tmp32[2]), (s3 ^= tmp32[3]);\n          ({ s0, s1, s2, s3 } = encrypt(xk, s0, s1, s2, s3));\n          (o[i++] = s0), (o[i++] = s1), (o[i++] = s2), (o[i++] = s3);\n        }\n        clean(...toClean);\n        return _out;\n      },\n      decrypt(ciphertext: Uint8Array, dst?: Uint8Array) {\n        validateBlockDecrypt(ciphertext);\n        const xk = expandKeyDecLE(key);\n        let _iv = iv;\n        const toClean: (Uint8Array | Uint32Array)[] = [xk];\n        if (!isAligned32(_iv)) toClean.push((_iv = copyBytes(_iv)));\n        const n32 = u32(_iv);\n        dst = getOutput(ciphertext.length, dst);\n        if (!isAligned32(ciphertext)) toClean.push((ciphertext = copyBytes(ciphertext)));\n        complexOverlapBytes(ciphertext, dst);\n        const b = u32(ciphertext);\n        const o = u32(dst);\n        // prettier-ignore\n        let s0 = n32[0], s1 = n32[1], s2 = n32[2], s3 = n32[3];\n        for (let i = 0; i + 4 <= b.length; ) {\n          // prettier-ignore\n          const ps0 = s0, ps1 = s1, ps2 = s2, ps3 = s3;\n          (s0 = b[i + 0]), (s1 = b[i + 1]), (s2 = b[i + 2]), (s3 = b[i + 3]);\n          const { s0: o0, s1: o1, s2: o2, s3: o3 } = decrypt(xk, s0, s1, s2, s3);\n          (o[i++] = o0 ^ ps0), (o[i++] = o1 ^ ps1), (o[i++] = o2 ^ ps2), (o[i++] = o3 ^ ps3);\n        }\n        clean(...toClean);\n        return validatePCKS(dst, pcks5);\n      },\n    };\n  }\n);\n\n/**\n * CFB: Cipher Feedback Mode. The input for the block cipher is the previous cipher output.\n * Unauthenticated: needs MAC.\n */\nexport const cfb: ((key: Uint8Array, iv: Uint8Array) => CipherWithOutput) & {\n  blockSize: number;\n  nonceLength: number;\n} = /* @__PURE__ */ wrapCipher(\n  { blockSize: 16, nonceLength: 16 },\n  function aescfb(key: Uint8Array, iv: Uint8Array): CipherWithOutput {\n    function processCfb(src: Uint8Array, isEncrypt: boolean, dst?: Uint8Array) {\n      abytes(src);\n      const srcLen = src.length;\n      dst = getOutput(srcLen, dst);\n      if (overlapBytes(src, dst)) throw new Error('overlapping src and dst not supported.');\n      const xk = expandKeyLE(key);\n      let _iv = iv;\n      const toClean: (Uint8Array | Uint32Array)[] = [xk];\n      if (!isAligned32(_iv)) toClean.push((_iv = copyBytes(_iv)));\n      if (!isAligned32(src)) toClean.push((src = copyBytes(src)));\n      const src32 = u32(src);\n      const dst32 = u32(dst);\n      const next32 = isEncrypt ? dst32 : src32;\n      const n32 = u32(_iv);\n      // prettier-ignore\n      let s0 = n32[0], s1 = n32[1], s2 = n32[2], s3 = n32[3];\n      for (let i = 0; i + 4 <= src32.length; ) {\n        const { s0: e0, s1: e1, s2: e2, s3: e3 } = encrypt(xk, s0, s1, s2, s3);\n        dst32[i + 0] = src32[i + 0] ^ e0;\n        dst32[i + 1] = src32[i + 1] ^ e1;\n        dst32[i + 2] = src32[i + 2] ^ e2;\n        dst32[i + 3] = src32[i + 3] ^ e3;\n        (s0 = next32[i++]), (s1 = next32[i++]), (s2 = next32[i++]), (s3 = next32[i++]);\n      }\n      // leftovers (less than block)\n      const start = BLOCK_SIZE * Math.floor(src32.length / BLOCK_SIZE32);\n      if (start < srcLen) {\n        ({ s0, s1, s2, s3 } = encrypt(xk, s0, s1, s2, s3));\n        const buf = u8(new Uint32Array([s0, s1, s2, s3]));\n        for (let i = start, pos = 0; i < srcLen; i++, pos++) dst[i] = src[i] ^ buf[pos];\n        clean(buf);\n      }\n      clean(...toClean);\n      return dst;\n    }\n    return {\n      encrypt: (plaintext: Uint8Array, dst?: Uint8Array) => processCfb(plaintext, true, dst),\n      decrypt: (ciphertext: Uint8Array, dst?: Uint8Array) => processCfb(ciphertext, false, dst),\n    };\n  }\n);\n\n// TODO: merge with chacha, however gcm has bitLen while chacha has byteLen\nfunction computeTag(\n  fn: typeof ghash,\n  isLE: boolean,\n  key: Uint8Array,\n  data: Uint8Array,\n  AAD?: Uint8Array\n) {\n  const aadLength = AAD ? AAD.length : 0;\n  const h = fn.create(key, data.length + aadLength);\n  if (AAD) h.update(AAD);\n  const num = u64Lengths(8 * data.length, 8 * aadLength, isLE);\n  h.update(data);\n  h.update(num);\n  const res = h.digest();\n  clean(num);\n  return res;\n}\n\n/**\n * GCM: Galois/Counter Mode.\n * Modern, parallel version of CTR, with MAC.\n * Be careful: MACs can be forged.\n * Unsafe to use random nonces under the same key, due to collision chance.\n * As for nonce size, prefer 12-byte, instead of 8-byte.\n */\nexport const gcm: ((key: Uint8Array, nonce: Uint8Array, AAD?: Uint8Array) => Cipher) & {\n  blockSize: number;\n  nonceLength: number;\n  tagLength: number;\n  varSizeNonce: true;\n} = /* @__PURE__ */ wrapCipher(\n  { blockSize: 16, nonceLength: 12, tagLength: 16, varSizeNonce: true },\n  function aesgcm(key: Uint8Array, nonce: Uint8Array, AAD?: Uint8Array): Cipher {\n    // NIST 800-38d doesn't enforce minimum nonce length.\n    // We enforce 8 bytes for compat with openssl.\n    // 12 bytes are recommended. More than 12 bytes would be converted into 12.\n    if (nonce.length < 8) throw new Error('aes/gcm: invalid nonce length');\n    const tagLength = 16;\n    function _computeTag(authKey: Uint8Array, tagMask: Uint8Array, data: Uint8Array) {\n      const tag = computeTag(ghash, false, authKey, data, AAD);\n      for (let i = 0; i < tagMask.length; i++) tag[i] ^= tagMask[i];\n      return tag;\n    }\n    function deriveKeys() {\n      const xk = expandKeyLE(key);\n      const authKey = EMPTY_BLOCK.slice();\n      const counter = EMPTY_BLOCK.slice();\n      ctr32(xk, false, counter, counter, authKey);\n      // NIST 800-38d, page 15: different behavior for 96-bit and non-96-bit nonces\n      if (nonce.length === 12) {\n        counter.set(nonce);\n      } else {\n        const nonceLen = EMPTY_BLOCK.slice();\n        const view = createView(nonceLen);\n        setBigUint64(view, 8, BigInt(nonce.length * 8), false);\n        // ghash(nonce || u64be(0) || u64be(nonceLen*8))\n        const g = ghash.create(authKey).update(nonce).update(nonceLen);\n        g.digestInto(counter); // digestInto doesn't trigger '.destroy'\n        g.destroy();\n      }\n      const tagMask = ctr32(xk, false, counter, EMPTY_BLOCK);\n      return { xk, authKey, counter, tagMask };\n    }\n    return {\n      encrypt(plaintext: Uint8Array) {\n        const { xk, authKey, counter, tagMask } = deriveKeys();\n        const out = new Uint8Array(plaintext.length + tagLength);\n        const toClean: (Uint8Array | Uint32Array)[] = [xk, authKey, counter, tagMask];\n        if (!isAligned32(plaintext)) toClean.push((plaintext = copyBytes(plaintext)));\n        ctr32(xk, false, counter, plaintext, out.subarray(0, plaintext.length));\n        const tag = _computeTag(authKey, tagMask, out.subarray(0, out.length - tagLength));\n        toClean.push(tag);\n        out.set(tag, plaintext.length);\n        clean(...toClean);\n        return out;\n      },\n      decrypt(ciphertext: Uint8Array) {\n        const { xk, authKey, counter, tagMask } = deriveKeys();\n        const toClean: (Uint8Array | Uint32Array)[] = [xk, authKey, tagMask, counter];\n        if (!isAligned32(ciphertext)) toClean.push((ciphertext = copyBytes(ciphertext)));\n        const data = ciphertext.subarray(0, -tagLength);\n        const passedTag = ciphertext.subarray(-tagLength);\n        const tag = _computeTag(authKey, tagMask, data);\n        toClean.push(tag);\n        if (!equalBytes(tag, passedTag)) throw new Error('aes/gcm: invalid ghash tag');\n        const out = ctr32(xk, false, counter, data);\n        clean(...toClean);\n        return out;\n      },\n    };\n  }\n);\n\nconst limit = (name: string, min: number, max: number) => (value: number) => {\n  if (!Number.isSafeInteger(value) || min > value || value > max) {\n    const minmax = '[' + min + '..' + max + ']';\n    throw new Error('' + name + ': expected value in range ' + minmax + ', got ' + value);\n  }\n};\n\n/**\n * AES-GCM-SIV: classic AES-GCM with nonce-misuse resistance.\n * Guarantees that, when a nonce is repeated, the only security loss is that identical\n * plaintexts will produce identical ciphertexts.\n * RFC 8452, https://datatracker.ietf.org/doc/html/rfc8452\n */\nexport const gcmsiv: ((key: Uint8Array, nonce: Uint8Array, AAD?: Uint8Array) => Cipher) & {\n  blockSize: number;\n  nonceLength: number;\n  tagLength: number;\n  varSizeNonce: true;\n} = /* @__PURE__ */ wrapCipher(\n  { blockSize: 16, nonceLength: 12, tagLength: 16, varSizeNonce: true },\n  function aessiv(key: Uint8Array, nonce: Uint8Array, AAD?: Uint8Array): Cipher {\n    const tagLength = 16;\n    // From RFC 8452: Section 6\n    const AAD_LIMIT = limit('AAD', 0, 2 ** 36);\n    const PLAIN_LIMIT = limit('plaintext', 0, 2 ** 36);\n    const NONCE_LIMIT = limit('nonce', 12, 12);\n    const CIPHER_LIMIT = limit('ciphertext', 16, 2 ** 36 + 16);\n    abytes(key, 16, 24, 32);\n    NONCE_LIMIT(nonce.length);\n    if (AAD !== undefined) AAD_LIMIT(AAD.length);\n    function deriveKeys() {\n      const xk = expandKeyLE(key);\n      const encKey = new Uint8Array(key.length);\n      const authKey = new Uint8Array(16);\n      const toClean: (Uint8Array | Uint32Array)[] = [xk, encKey];\n      let _nonce = nonce;\n      if (!isAligned32(_nonce)) toClean.push((_nonce = copyBytes(_nonce)));\n      const n32 = u32(_nonce);\n      // prettier-ignore\n      let s0 = 0, s1 = n32[0], s2 = n32[1], s3 = n32[2];\n      let counter = 0;\n      for (const derivedKey of [authKey, encKey].map(u32)) {\n        const d32 = u32(derivedKey);\n        for (let i = 0; i < d32.length; i += 2) {\n          // aes(u32le(0) || nonce)[:8] || aes(u32le(1) || nonce)[:8] ...\n          const { s0: o0, s1: o1 } = encrypt(xk, s0, s1, s2, s3);\n          d32[i + 0] = o0;\n          d32[i + 1] = o1;\n          s0 = ++counter; // increment counter inside state\n        }\n      }\n      const res = { authKey, encKey: expandKeyLE(encKey) };\n      // Cleanup\n      clean(...toClean);\n      return res;\n    }\n    function _computeTag(encKey: Uint32Array, authKey: Uint8Array, data: Uint8Array) {\n      const tag = computeTag(polyval, true, authKey, data, AAD);\n      // Compute the expected tag by XORing S_s and the nonce, clearing the\n      // most significant bit of the last byte and encrypting with the\n      // message-encryption key.\n      for (let i = 0; i < 12; i++) tag[i] ^= nonce[i];\n      tag[15] &= 0x7f; // Clear the highest bit\n      // encrypt tag as block\n      const t32 = u32(tag);\n      // prettier-ignore\n      let s0 = t32[0], s1 = t32[1], s2 = t32[2], s3 = t32[3];\n      ({ s0, s1, s2, s3 } = encrypt(encKey, s0, s1, s2, s3));\n      (t32[0] = s0), (t32[1] = s1), (t32[2] = s2), (t32[3] = s3);\n      return tag;\n    }\n    // actual decrypt/encrypt of message.\n    function processSiv(encKey: Uint32Array, tag: Uint8Array, input: Uint8Array) {\n      let block = copyBytes(tag);\n      block[15] |= 0x80; // Force highest bit\n      const res = ctr32(encKey, true, block, input);\n      // Cleanup\n      clean(block);\n      return res;\n    }\n    return {\n      encrypt(plaintext: Uint8Array) {\n        PLAIN_LIMIT(plaintext.length);\n        const { encKey, authKey } = deriveKeys();\n        const tag = _computeTag(encKey, authKey, plaintext);\n        const toClean: (Uint8Array | Uint32Array)[] = [encKey, authKey, tag];\n        if (!isAligned32(plaintext)) toClean.push((plaintext = copyBytes(plaintext)));\n        const out = new Uint8Array(plaintext.length + tagLength);\n        out.set(tag, plaintext.length);\n        out.set(processSiv(encKey, tag, plaintext));\n        // Cleanup\n        clean(...toClean);\n        return out;\n      },\n      decrypt(ciphertext: Uint8Array) {\n        CIPHER_LIMIT(ciphertext.length);\n        const tag = ciphertext.subarray(-tagLength);\n        const { encKey, authKey } = deriveKeys();\n        const toClean: (Uint8Array | Uint32Array)[] = [encKey, authKey];\n        if (!isAligned32(ciphertext)) toClean.push((ciphertext = copyBytes(ciphertext)));\n        const plaintext = processSiv(encKey, tag, ciphertext.subarray(0, -tagLength));\n        const expectedTag = _computeTag(encKey, authKey, plaintext);\n        toClean.push(expectedTag);\n        if (!equalBytes(tag, expectedTag)) {\n          clean(...toClean);\n          throw new Error('invalid polyval tag');\n        }\n        // Cleanup\n        clean(...toClean);\n        return plaintext;\n      },\n    };\n  }\n);\n\n/**\n * AES-GCM-SIV, not AES-SIV.\n * This is legace name, use `gcmsiv` export instead.\n * @deprecated\n */\nexport const siv: typeof gcmsiv = gcmsiv;\n\nfunction isBytes32(a: unknown): a is Uint32Array {\n  return (\n    a instanceof Uint32Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint32Array')\n  );\n}\n\nfunction encryptBlock(xk: Uint32Array, block: Uint8Array): Uint8Array {\n  abytes(block, 16);\n  if (!isBytes32(xk)) throw new Error('_encryptBlock accepts result of expandKeyLE');\n  const b32 = u32(block);\n  let { s0, s1, s2, s3 } = encrypt(xk, b32[0], b32[1], b32[2], b32[3]);\n  (b32[0] = s0), (b32[1] = s1), (b32[2] = s2), (b32[3] = s3);\n  return block;\n}\n\nfunction decryptBlock(xk: Uint32Array, block: Uint8Array): Uint8Array {\n  abytes(block, 16);\n  if (!isBytes32(xk)) throw new Error('_decryptBlock accepts result of expandKeyLE');\n  const b32 = u32(block);\n  let { s0, s1, s2, s3 } = decrypt(xk, b32[0], b32[1], b32[2], b32[3]);\n  (b32[0] = s0), (b32[1] = s1), (b32[2] = s2), (b32[3] = s3);\n  return block;\n}\n\n/**\n * AES-W (base for AESKW/AESKWP).\n * Specs: [SP800-38F](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-38F.pdf),\n * [RFC 3394](https://datatracker.ietf.org/doc/rfc3394/),\n * [RFC 5649](https://datatracker.ietf.org/doc/rfc5649/).\n */\nconst AESW = {\n  /*\n  High-level pseudocode:\n  ```\n  A: u64 = IV\n  out = []\n  for (let i=0, ctr = 0; i<6; i++) {\n    for (const chunk of chunks(plaintext, 8)) {\n      A ^= swapEndianess(ctr++)\n      [A, res] = chunks(encrypt(A || chunk), 8);\n      out ||= res\n    }\n  }\n  out = A || out\n  ```\n  Decrypt is the same, but reversed.\n  */\n  encrypt(kek: Uint8Array, out: Uint8Array) {\n    // Size is limited to 4GB, otherwise ctr will overflow and we'll need to switch to bigints.\n    // If you need it larger, open an issue.\n    if (out.length >= 2 ** 32) throw new Error('plaintext should be less than 4gb');\n    const xk = expandKeyLE(kek);\n    if (out.length === 16) encryptBlock(xk, out);\n    else {\n      const o32 = u32(out);\n      // prettier-ignore\n      let a0 = o32[0], a1 = o32[1]; // A\n      for (let j = 0, ctr = 1; j < 6; j++) {\n        for (let pos = 2; pos < o32.length; pos += 2, ctr++) {\n          const { s0, s1, s2, s3 } = encrypt(xk, a0, a1, o32[pos], o32[pos + 1]);\n          // A = MSB(64, B) ^ t where t = (n*j)+i\n          (a0 = s0), (a1 = s1 ^ byteSwap(ctr)), (o32[pos] = s2), (o32[pos + 1] = s3);\n        }\n      }\n      (o32[0] = a0), (o32[1] = a1); // out = A || out\n    }\n    xk.fill(0);\n  },\n  decrypt(kek: Uint8Array, out: Uint8Array) {\n    if (out.length - 8 >= 2 ** 32) throw new Error('ciphertext should be less than 4gb');\n    const xk = expandKeyDecLE(kek);\n    const chunks = out.length / 8 - 1; // first chunk is IV\n    if (chunks === 1) decryptBlock(xk, out);\n    else {\n      const o32 = u32(out);\n      // prettier-ignore\n      let a0 = o32[0], a1 = o32[1]; // A\n      for (let j = 0, ctr = chunks * 6; j < 6; j++) {\n        for (let pos = chunks * 2; pos >= 1; pos -= 2, ctr--) {\n          a1 ^= byteSwap(ctr);\n          const { s0, s1, s2, s3 } = decrypt(xk, a0, a1, o32[pos], o32[pos + 1]);\n          (a0 = s0), (a1 = s1), (o32[pos] = s2), (o32[pos + 1] = s3);\n        }\n      }\n      (o32[0] = a0), (o32[1] = a1);\n    }\n    xk.fill(0);\n  },\n};\n\nconst AESKW_IV = /* @__PURE__ */ new Uint8Array(8).fill(0xa6); // A6A6A6A6A6A6A6A6\n\n/**\n * AES-KW (key-wrap). Injects static IV into plaintext, adds counter, encrypts 6 times.\n * Reduces block size from 16 to 8 bytes.\n * For padded version, use aeskwp.\n * [RFC 3394](https://datatracker.ietf.org/doc/rfc3394/),\n * [NIST.SP.800-38F](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-38F.pdf).\n */\nexport const aeskw: ((kek: Uint8Array) => Cipher) & {\n  blockSize: number;\n} = /* @__PURE__ */ wrapCipher(\n  { blockSize: 8 },\n  (kek: Uint8Array): Cipher => ({\n    encrypt(plaintext: Uint8Array) {\n      if (!plaintext.length || plaintext.length % 8 !== 0)\n        throw new Error('invalid plaintext length');\n      if (plaintext.length === 8)\n        throw new Error('8-byte keys not allowed in AESKW, use AESKWP instead');\n      const out = concatBytes(AESKW_IV, plaintext);\n      AESW.encrypt(kek, out);\n      return out;\n    },\n    decrypt(ciphertext: Uint8Array) {\n      // ciphertext must be at least 24 bytes and a multiple of 8 bytes\n      // 24 because should have at least two block (1 iv + 2).\n      // Replace with 16 to enable '8-byte keys'\n      if (ciphertext.length % 8 !== 0 || ciphertext.length < 3 * 8)\n        throw new Error('invalid ciphertext length');\n      const out = copyBytes(ciphertext);\n      AESW.decrypt(kek, out);\n      if (!equalBytes(out.subarray(0, 8), AESKW_IV)) throw new Error('integrity check failed');\n      out.subarray(0, 8).fill(0); // ciphertext.subarray(0, 8) === IV, but we clean it anyway\n      return out.subarray(8);\n    },\n  })\n);\n\n/*\nWe don't support 8-byte keys. The rabbit hole:\n\n- Wycheproof says: \"NIST SP 800-38F does not define the wrapping of 8 byte keys.\n  RFC 3394 Section 2  on the other hand specifies that 8 byte keys are wrapped\n  by directly encrypting one block with AES.\"\n    - https://github.com/C2SP/wycheproof/blob/master/doc/key_wrap.md\n    - \"RFC 3394 specifies in Section 2, that the input for the key wrap\n      algorithm must be at least two blocks and otherwise the constant\n      field and key are simply encrypted with ECB as a single block\"\n- What RFC 3394 actually says (in Section 2):\n    - \"Before being wrapped, the key data is parsed into n blocks of 64 bits.\n      The only restriction the key wrap algorithm places on n is that n be\n      at least two\"\n    - \"For key data with length less than or equal to 64 bits, the constant\n      field used in this specification and the key data form a single\n      128-bit codebook input making this key wrap unnecessary.\"\n- Which means \"assert(n >= 2)\" and \"use something else for 8 byte keys\"\n- NIST SP800-38F actually prohibits 8-byte in \"5.3.1 Mandatory Limits\".\n  It states that plaintext for KW should be \"2 to 2^54 -1 semiblocks\".\n- So, where does \"directly encrypt single block with AES\" come from?\n    - Not RFC 3394. Pseudocode of key wrap in 2.2 explicitly uses\n      loop of 6 for any code path\n    - There is a weird W3C spec:\n      https://www.w3.org/TR/2002/REC-xmlenc-core-20021210/Overview.html#kw-aes128\n    - This spec is outdated, as admitted by Wycheproof authors\n    - There is RFC 5649 for padded key wrap, which is padding construction on\n      top of AESKW. In '4.1.2' it says: \"If the padded plaintext contains exactly\n      eight octets, then prepend the AIV as defined in Section 3 above to P[1] and\n      encrypt the resulting 128-bit block using AES in ECB mode [Modes] with key\n      K (the KEK).  In this case, the output is two 64-bit blocks C[0] and C[1]:\"\n    - Browser subtle crypto is actually crashes on wrapping keys less than 16 bytes:\n      `Error: error:1C8000E6:Provider routines::invalid input length] { opensslErrorStack: [ 'error:030000BD:digital envelope routines::update error' ]`\n\nIn the end, seems like a bug in Wycheproof.\nThe 8-byte check can be easily disabled inside of AES_W.\n*/\n\nconst AESKWP_IV = 0xa65959a6; // single u32le value\n\n/**\n * AES-KW, but with padding and allows random keys.\n * Second u32 of IV is used as counter for length.\n * [RFC 5649](https://www.rfc-editor.org/rfc/rfc5649)\n */\nexport const aeskwp: ((kek: Uint8Array) => Cipher) & {\n  blockSize: number;\n} = /* @__PURE__ */ wrapCipher(\n  { blockSize: 8 },\n  (kek: Uint8Array): Cipher => ({\n    encrypt(plaintext: Uint8Array) {\n      if (!plaintext.length) throw new Error('invalid plaintext length');\n      const padded = Math.ceil(plaintext.length / 8) * 8;\n      const out = new Uint8Array(8 + padded);\n      out.set(plaintext, 8);\n      const out32 = u32(out);\n      out32[0] = AESKWP_IV;\n      out32[1] = byteSwap(plaintext.length);\n      AESW.encrypt(kek, out);\n      return out;\n    },\n    decrypt(ciphertext: Uint8Array) {\n      // 16 because should have at least one block\n      if (ciphertext.length < 16) throw new Error('invalid ciphertext length');\n      const out = copyBytes(ciphertext);\n      const o32 = u32(out);\n      AESW.decrypt(kek, out);\n      const len = byteSwap(o32[1]) >>> 0;\n      const padded = Math.ceil(len / 8) * 8;\n      if (o32[0] !== AESKWP_IV || out.length - 8 !== padded)\n        throw new Error('integrity check failed');\n      for (let i = len; i < padded; i++)\n        if (out[8 + i] !== 0) throw new Error('integrity check failed');\n      out.subarray(0, 8).fill(0); // ciphertext.subarray(0, 8) === IV, but we clean it anyway\n      return out.subarray(8, 8 + len);\n    },\n  })\n);\n\n/** Unsafe low-level internal methods. May change at any time. */\nexport const unsafe: {\n  expandKeyLE: typeof expandKeyLE;\n  expandKeyDecLE: typeof expandKeyDecLE;\n  encrypt: typeof encrypt;\n  decrypt: typeof decrypt;\n  encryptBlock: typeof encryptBlock;\n  decryptBlock: typeof decryptBlock;\n  ctrCounter: typeof ctrCounter;\n  ctr32: typeof ctr32;\n} = {\n  expandKeyLE,\n  expandKeyDecLE,\n  encrypt,\n  decrypt,\n  encryptBlock,\n  decryptBlock,\n  ctrCounter,\n  ctr32,\n};\n", "/**\n * PBKDF (RFC 2898). Can be used to create a key from password and salt.\n * @module\n */\nimport { hmac } from './hmac.ts';\n// prettier-ignore\nimport {\n  ahash, anumber,\n  asyncLoop, checkOpts, clean, createView, Hash, kdfInputToBytes,\n  type CHash,\n  type KDFInput\n} from './utils.ts';\n\nexport type Pbkdf2Opt = {\n  c: number; // Iterations\n  dkLen?: number; // Desired key length in bytes (Intended output length in octets of the derived key\n  asyncTick?: number; // Maximum time in ms for which async function can block execution\n};\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash: CHash, _password: KDFInput, _salt: KDFInput, _opts: Pbkdf2Opt) {\n  ahash(hash);\n  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);\n  const { c, dkLen, asyncTick } = opts;\n  anumber(c);\n  anumber(dkLen);\n  anumber(asyncTick);\n  if (c < 1) throw new Error('iterations (c) should be >= 1');\n  const password = kdfInputToBytes(_password);\n  const salt = kdfInputToBytes(_salt);\n  // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n  const DK = new Uint8Array(dkLen);\n  // U1 = PRF(Password, Salt + INT_32_BE(i))\n  const PRF = hmac.create(hash, password);\n  const PRFSalt = PRF._cloneInto().update(salt);\n  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\n\nfunction pbkdf2Output<T extends Hash<T>>(\n  PRF: Hash<T>,\n  PRFSalt: Hash<T>,\n  DK: Uint8Array,\n  prfW: Hash<T>,\n  u: Uint8Array\n) {\n  PRF.destroy();\n  PRFSalt.destroy();\n  if (prfW) prfW.destroy();\n  clean(u);\n  return DK;\n}\n\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n * @example\n * const key = pbkdf2(sha256, 'password', 'salt', { dkLen: 32, c: Math.pow(2, 18) });\n */\nexport function pbkdf2(\n  hash: CHash,\n  password: KDFInput,\n  salt: KDFInput,\n  opts: Pbkdf2Opt\n): Uint8Array {\n  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    for (let ui = 1; ui < c; ui++) {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    }\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function. Async version.\n * @example\n * await pbkdf2Async(sha256, 'password', 'salt', { dkLen: 32, c: 500_000 });\n */\nexport async function pbkdf2Async(\n  hash: CHash,\n  password: KDFInput,\n  salt: KDFInput,\n  opts: Pbkdf2Opt\n): Promise<Uint8Array> {\n  const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    await asyncLoop(c - 1, asyncTick, () => {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    });\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n", "/**\n * RFC 7914 Scrypt KDF. Can be used to create a key from password and salt.\n * @module\n */\nimport { pbkdf2 } from './pbkdf2.ts';\nimport { sha256 } from './sha2.ts';\n// prettier-ignore\nimport {\n  anumber, asyncLoop,\n  checkOpts, clean,\n  type KDFInput, rotl,\n  swap32IfBE,\n  u32\n} from './utils.ts';\n\n// The main Scrypt loop: uses Salsa extensively.\n// Six versions of the function were tried, this is the fastest one.\n// prettier-ignore\nfunction XorAndSalsa(\n  prev: Uint32Array,\n  pi: number,\n  input: Uint32Array,\n  ii: number,\n  out: Uint32Array,\n  oi: number\n) {\n  // Based on https://cr.yp.to/salsa20.html\n  // Xor blocks\n  let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];\n  let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];\n  let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];\n  let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];\n  let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];\n  let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];\n  let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];\n  let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];\n  // Save state to temporary variables (salsa)\n  let x00 = y00, x01 = y01, x02 = y02, x03 = y03,\n      x04 = y04, x05 = y05, x06 = y06, x07 = y07,\n      x08 = y08, x09 = y09, x10 = y10, x11 = y11,\n      x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n  // Main loop (salsa)\n  for (let i = 0; i < 8; i += 2) {\n    x04 ^= rotl(x00 + x12 | 0,  7); x08 ^= rotl(x04 + x00 | 0,  9);\n    x12 ^= rotl(x08 + x04 | 0, 13); x00 ^= rotl(x12 + x08 | 0, 18);\n    x09 ^= rotl(x05 + x01 | 0,  7); x13 ^= rotl(x09 + x05 | 0,  9);\n    x01 ^= rotl(x13 + x09 | 0, 13); x05 ^= rotl(x01 + x13 | 0, 18);\n    x14 ^= rotl(x10 + x06 | 0,  7); x02 ^= rotl(x14 + x10 | 0,  9);\n    x06 ^= rotl(x02 + x14 | 0, 13); x10 ^= rotl(x06 + x02 | 0, 18);\n    x03 ^= rotl(x15 + x11 | 0,  7); x07 ^= rotl(x03 + x15 | 0,  9);\n    x11 ^= rotl(x07 + x03 | 0, 13); x15 ^= rotl(x11 + x07 | 0, 18);\n    x01 ^= rotl(x00 + x03 | 0,  7); x02 ^= rotl(x01 + x00 | 0,  9);\n    x03 ^= rotl(x02 + x01 | 0, 13); x00 ^= rotl(x03 + x02 | 0, 18);\n    x06 ^= rotl(x05 + x04 | 0,  7); x07 ^= rotl(x06 + x05 | 0,  9);\n    x04 ^= rotl(x07 + x06 | 0, 13); x05 ^= rotl(x04 + x07 | 0, 18);\n    x11 ^= rotl(x10 + x09 | 0,  7); x08 ^= rotl(x11 + x10 | 0,  9);\n    x09 ^= rotl(x08 + x11 | 0, 13); x10 ^= rotl(x09 + x08 | 0, 18);\n    x12 ^= rotl(x15 + x14 | 0,  7); x13 ^= rotl(x12 + x15 | 0,  9);\n    x14 ^= rotl(x13 + x12 | 0, 13); x15 ^= rotl(x14 + x13 | 0, 18);\n  }\n  // Write output (salsa)\n  out[oi++] = (y00 + x00) | 0; out[oi++] = (y01 + x01) | 0;\n  out[oi++] = (y02 + x02) | 0; out[oi++] = (y03 + x03) | 0;\n  out[oi++] = (y04 + x04) | 0; out[oi++] = (y05 + x05) | 0;\n  out[oi++] = (y06 + x06) | 0; out[oi++] = (y07 + x07) | 0;\n  out[oi++] = (y08 + x08) | 0; out[oi++] = (y09 + x09) | 0;\n  out[oi++] = (y10 + x10) | 0; out[oi++] = (y11 + x11) | 0;\n  out[oi++] = (y12 + x12) | 0; out[oi++] = (y13 + x13) | 0;\n  out[oi++] = (y14 + x14) | 0; out[oi++] = (y15 + x15) | 0;\n}\n\nfunction BlockMix(input: Uint32Array, ii: number, out: Uint32Array, oi: number, r: number) {\n  // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)\n  let head = oi + 0;\n  let tail = oi + 16 * r;\n  for (let i = 0; i < 16; i++) out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]\n  for (let i = 0; i < r; i++, head += 16, ii += 16) {\n    // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1\n    XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])\n    if (i > 0) tail += 16; // First iteration overwrites tmp value in tail\n    XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])\n  }\n}\n\nexport type ScryptOpts = {\n  N: number; // cost factor\n  r: number; // block size\n  p: number; // parallelization\n  dkLen?: number; // key length\n  asyncTick?: number; // block execution max time\n  maxmem?: number;\n  onProgress?: (progress: number) => void;\n};\n\n// Common prologue and epilogue for sync/async functions\nfunction scryptInit(password: KDFInput, salt: KDFInput, _opts?: ScryptOpts) {\n  // Maxmem - 1GB+1KB by default\n  const opts = checkOpts(\n    {\n      dkLen: 32,\n      asyncTick: 10,\n      maxmem: 1024 ** 3 + 1024,\n    },\n    _opts\n  );\n  const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;\n  anumber(N);\n  anumber(r);\n  anumber(p);\n  anumber(dkLen);\n  anumber(asyncTick);\n  anumber(maxmem);\n  if (onProgress !== undefined && typeof onProgress !== 'function')\n    throw new Error('progressCb should be function');\n  const blockSize = 128 * r;\n  const blockSize32 = blockSize / 4;\n\n  // Max N is 2^32 (Integrify is 32-bit). Real limit is 2^22: JS engines Uint8Array limit is 4GB in 2024.\n  // Spec check `N >= 2^(blockSize / 8)` is not done for compat with popular libs,\n  // which used incorrect r: 1, p: 8. Also, the check seems to be a spec error:\n  // https://www.rfc-editor.org/errata_search.php?rfc=7914\n  const pow32 = Math.pow(2, 32);\n  if (N <= 1 || (N & (N - 1)) !== 0 || N > pow32) {\n    throw new Error('Scrypt: N must be larger than 1, a power of 2, and less than 2^32');\n  }\n  if (p < 0 || p > ((pow32 - 1) * 32) / blockSize) {\n    throw new Error(\n      'Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)'\n    );\n  }\n  if (dkLen < 0 || dkLen > (pow32 - 1) * 32) {\n    throw new Error(\n      'Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32'\n    );\n  }\n  const memUsed = blockSize * (N + p);\n  if (memUsed > maxmem) {\n    throw new Error(\n      'Scrypt: memused is bigger than maxMem. Expected 128 * r * (N + p) > maxmem of ' + maxmem\n    );\n  }\n  // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)\n  // Since it has only one iteration there is no reason to use async variant\n  const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });\n  const B32 = u32(B);\n  // Re-used between parallel iterations. Array(iterations) of B\n  const V = u32(new Uint8Array(blockSize * N));\n  const tmp = u32(new Uint8Array(blockSize));\n  let blockMixCb = () => {};\n  if (onProgress) {\n    const totalBlockMix = 2 * N * p;\n    // Invoke callback if progress changes from 10.01 to 10.02\n    // Allows to draw smooth progress bar on up to 8K screen\n    const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);\n    let blockMixCnt = 0;\n    blockMixCb = () => {\n      blockMixCnt++;\n      if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))\n        onProgress(blockMixCnt / totalBlockMix);\n    };\n  }\n  return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };\n}\n\nfunction scryptOutput(\n  password: KDFInput,\n  dkLen: number,\n  B: Uint8Array,\n  V: Uint32Array,\n  tmp: Uint32Array\n) {\n  const res = pbkdf2(sha256, password, B, { c: 1, dkLen });\n  clean(B, V, tmp);\n  return res;\n}\n\n/**\n * Scrypt KDF from RFC 7914.\n * @param password - pass\n * @param salt - salt\n * @param opts - parameters\n * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)\n * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance\n * - `p` is parallelization factor (1 is common)\n * - `dkLen` is output key length in bytes e.g. 32.\n * - `asyncTick` - (default: 10) max time in ms for which async function can block execution\n * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt\n * - `onProgress` - callback function that would be executed for progress report\n * @returns Derived key\n * @example\n * scrypt('password', 'salt', { N: 2**18, r: 8, p: 1, dkLen: 32 });\n */\nexport function scrypt(password: KDFInput, salt: KDFInput, opts: ScryptOpts): Uint8Array {\n  const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(\n    password,\n    salt,\n    opts\n  );\n  swap32IfBE(B32);\n  for (let pi = 0; pi < p; pi++) {\n    const Pi = blockSize32 * pi;\n    for (let i = 0; i < blockSize32; i++) V[i] = B32[Pi + i]; // V[0] = B[i]\n    for (let i = 0, pos = 0; i < N - 1; i++) {\n      BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n      blockMixCb();\n    }\n    BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n    blockMixCb();\n    for (let i = 0; i < N; i++) {\n      // First u32 of the last 64-byte block (u32 is LE)\n      const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n      for (let k = 0; k < blockSize32; k++) tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n      BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n      blockMixCb();\n    }\n  }\n  swap32IfBE(B32);\n  return scryptOutput(password, dkLen, B, V, tmp);\n}\n\n/**\n * Scrypt KDF from RFC 7914. Async version.\n * @example\n * await scryptAsync('password', 'salt', { N: 2**18, r: 8, p: 1, dkLen: 32 });\n */\nexport async function scryptAsync(\n  password: KDFInput,\n  salt: KDFInput,\n  opts: ScryptOpts\n): Promise<Uint8Array> {\n  const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(\n    password,\n    salt,\n    opts\n  );\n  swap32IfBE(B32);\n  for (let pi = 0; pi < p; pi++) {\n    const Pi = blockSize32 * pi;\n    for (let i = 0; i < blockSize32; i++) V[i] = B32[Pi + i]; // V[0] = B[i]\n    let pos = 0;\n    await asyncLoop(N - 1, asyncTick, () => {\n      BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n      blockMixCb();\n    });\n    BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n    blockMixCb();\n    await asyncLoop(N, asyncTick, () => {\n      // First u32 of the last 64-byte block (u32 is LE)\n      const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n      for (let k = 0; k < blockSize32; k++) tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n      BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n      blockMixCb();\n    });\n  }\n  swap32IfBE(B32);\n  return scryptOutput(password, dkLen, B, V, tmp);\n}\n", "import type * as Address from './Address.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport type { Compute } from './internal/types.js'\n\n/** A Log as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/receipt.yaml). */\nexport type Log<\n  pending extends boolean = false,\n  bigintType = bigint,\n  numberType = number,\n> = Compute<{\n  /** The address from which this log originated */\n  address: Address.Address\n  /** Hash of block containing this log or `null` if pending */\n  blockHash: pending extends true ? null : Hex.Hex\n  /** Number of block containing this log or `null` if pending */\n  blockNumber: pending extends true ? null : bigintType\n  /** Contains the non-integered arguments of the log */\n  data: Hex.Hex\n  /** Index of this log within its block or `null` if pending */\n  logIndex: pending extends true ? null : numberType\n  /** List of topics associated with this log */\n  topics: [Hex.Hex, ...(readonly Hex.Hex[])]\n  /** Hash of the transaction that created this log or `null` if pending */\n  transactionHash: pending extends true ? null : Hex.Hex\n  /** Index of the transaction that created this log or `null` if pending */\n  transactionIndex: pending extends true ? null : numberType\n  /** `true` if this filter has been destroyed and is invalid */\n  removed: boolean\n}>\n\n/** An RPC Log as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/receipt.yaml). */\nexport type Rpc<pending extends boolean = false> = Log<\n  pending,\n  Hex.Hex,\n  Hex.Hex\n>\n\n/**\n * Converts a {@link ox#Log.Rpc} to an {@link ox#Log.Log}.\n *\n * @example\n * ```ts twoslash\n * import { Log } from 'ox'\n *\n * const log = Log.fromRpc({\n *   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x0000000000000000000000000000000000000000000000000000000000000000',\n *     '0x0000000000000000000000000c04d9e9278ec5e4d424476d3ebec70cb5d648d1',\n *     '0x000000000000000000000000000000000000000000000000000000000000025b',\n *   ],\n *   data: '0x',\n *   blockHash:\n *     '0xabe69134e80a12f6a93d0aa18215b5b86c2fb338bae911790ca374a8716e01a4',\n *   blockNumber: '0x12d846c',\n *   transactionHash:\n *     '0xcfa52db0bc2cb5bdcb2c5bd8816df7a2f018a0e3964ab1ef4d794cf327966e93',\n *   transactionIndex: '0x91',\n *   logIndex: '0x10f',\n *   removed: false,\n * })\n * // @log: {\n * // @log:   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n * // @log:   blockHash: '0xabe69134e80a12f6a93d0aa18215b5b86c2fb338bae911790ca374a8716e01a4',\n * // @log:   blockNumber: 19760236n,\n * // @log:   data: '0x',\n * // @log:   logIndex: 271,\n * // @log:   removed: false,\n * // @log:   topics: [\n * // @log:     \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n * // @log:     \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n * // @log:     \"0x0000000000000000000000000c04d9e9278ec5e4d424476d3ebec70cb5d648d1\",\n * // @log:     \"0x000000000000000000000000000000000000000000000000000000000000025b\",\n * // @log:   transactionHash:\n * // @log:     '0xcfa52db0bc2cb5bdcb2c5bd8816df7a2f018a0e3964ab1ef4d794cf327966e93',\n * // @log:   transactionIndex: 145,\n * // @log: }\n * ```\n *\n * @example\n * ### End-to-end\n *\n * Below is an example of how to use `Log.fromRpc` to instantiate a {@link ox#Log.Log} from an RPC log.\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { AbiEvent, Hex, Log } from 'ox'\n *\n * const transfer = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 indexed value)',\n * )\n *\n * const { topics } = AbiEvent.encode(transfer)\n *\n * const logs = await window.ethereum!.request({\n *   method: 'eth_getLogs',\n *   params: [\n *     {\n *       address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n *       fromBlock: Hex.fromNumber(19760235n),\n *       toBlock: Hex.fromNumber(19760240n),\n *       topics,\n *     },\n *   ],\n * })\n *\n * const log = Log.fromRpc(logs[0]) // [!code focus]\n * // @log: {\n * // @log:   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n * // @log:   blockHash: '0xabe69134e80a12f6a93d0aa18215b5b86c2fb338bae911790ca374a8716e01a4',\n * // @log:   blockNumber: 19760236n,\n * // @log:   data: '0x',\n * // @log:   logIndex: 271,\n * // @log:   removed: false,\n * // @log:   topics: [\n * // @log:     \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n * // @log:     \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n * // @log:     \"0x0000000000000000000000000c04d9e9278ec5e4d424476d3ebec70cb5d648d1\",\n * // @log:     \"0x000000000000000000000000000000000000000000000000000000000000025b\",\n * // @log:   transactionHash:\n * // @log:     '0xcfa52db0bc2cb5bdcb2c5bd8816df7a2f018a0e3964ab1ef4d794cf327966e93',\n * // @log:   transactionIndex: 145,\n * // @log: }\n * ```\n *\n * :::note\n *\n * For simplicity, the above example uses `window.ethereum.request`, but you can use any\n * type of JSON-RPC interface.\n *\n * :::\n *\n * @param log - The RPC log to convert.\n * @returns An instantiated {@link ox#Log.Log}.\n */\nexport function fromRpc<\n  const log extends Rpc<boolean>,\n  pending extends boolean = false,\n>(\n  log: log | Rpc<boolean>,\n  _options: fromRpc.Options<pending> = {},\n): Log<pending> {\n  return {\n    ...log,\n    blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,\n    logIndex: log.logIndex ? Number(log.logIndex) : null,\n    transactionIndex: log.transactionIndex\n      ? Number(log.transactionIndex)\n      : null,\n  } as Log<pending>\n}\n\nexport declare namespace fromRpc {\n  type Options<pending extends boolean = false> = {\n    pending?: pending | boolean | undefined\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#Log.Log} to a {@link ox#Log.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { Log } from 'ox'\n *\n * const log = Log.toRpc({\n *   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n *   blockHash:\n *     '0xabe69134e80a12f6a93d0aa18215b5b86c2fb338bae911790ca374a8716e01a4',\n *   blockNumber: 19760236n,\n *   data: '0x',\n *   logIndex: 271,\n *   removed: false,\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x0000000000000000000000000000000000000000000000000000000000000000',\n *     '0x0000000000000000000000000c04d9e9278ec5e4d424476d3ebec70cb5d648d1',\n *     '0x000000000000000000000000000000000000000000000000000000000000025b',\n *   ],\n *   transactionHash:\n *     '0xcfa52db0bc2cb5bdcb2c5bd8816df7a2f018a0e3964ab1ef4d794cf327966e93',\n *   transactionIndex: 145,\n * })\n * // @log: {\n * // @log:   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n * // @log:   blockHash: '0xabe69134e80a12f6a93d0aa18215b5b86c2fb338bae911790ca374a8716e01a4',\n * // @log:   blockNumber: '0x012d846c',\n * // @log:   data: '0x',\n * // @log:   logIndex: '0x010f',\n * // @log:   removed: false,\n * // @log:   topics: [\n * // @log:     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n * // @log:     '0x0000000000000000000000000000000000000000000000000000000000000000',\n * // @log:     '0x0000000000000000000000000c04d9e9278ec5e4d424476d3ebec70cb5d648d1',\n * // @log:     '0x000000000000000000000000000000000000000000000000000000000000025b',\n * // @log:   ],\n * // @log:   transactionHash:\n * // @log:     '0xcfa52db0bc2cb5bdcb2c5bd8816df7a2f018a0e3964ab1ef4d794cf327966e93',\n * // @log:   transactionIndex: '0x91',\n * // @log: }\n * ```\n *\n * @param log - The log to convert.\n * @returns An RPC log.\n */\nexport function toRpc<\n  const log extends Log<boolean>,\n  pending extends boolean = false,\n>(log: log, _options: toRpc.Options<pending> = {}): Rpc<pending> {\n  return {\n    address: log.address,\n    blockHash: log.blockHash,\n    blockNumber:\n      typeof log.blockNumber === 'bigint'\n        ? Hex.fromNumber(log.blockNumber)\n        : null,\n    data: log.data,\n    logIndex:\n      typeof log.logIndex === 'number' ? Hex.fromNumber(log.logIndex) : null,\n    topics: log.topics,\n    transactionHash: log.transactionHash,\n    transactionIndex:\n      typeof log.transactionIndex === 'number'\n        ? Hex.fromNumber(log.transactionIndex)\n        : null,\n    removed: log.removed,\n  } as Rpc as never\n}\n\nexport declare namespace toRpc {\n  type Options<pending extends boolean = false> = {\n    pending?: pending | boolean | undefined\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n", "import {\n  generateMnemonic,\n  mnemonicToSeedSync,\n  validateMnemonic,\n} from '@scure/bip39'\nimport * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport * as HdKey from './HdKey.js'\nimport type * as Hex from './Hex.js'\n\nexport { path } from './HdKey.js'\n\nexport {\n  english,\n  czech,\n  french,\n  italian,\n  japanese,\n  korean,\n  portuguese,\n  simplifiedChinese,\n  spanish,\n  traditionalChinese,\n} from './internal/mnemonic/wordlists.js'\n\n/**\n * Generates a random mnemonic.\n *\n * @example\n * ```ts twoslash\n * import { Mnemonic } from 'ox'\n *\n * const mnemonic = Mnemonic.random(Mnemonic.english)\n * // @log: 'buyer zoo end danger ice capable shrug naive twist relief mass bonus'\n * ```\n *\n * @param wordlist - The wordlist to use.\n * @param options - Generation options.\n * @returns The mnemonic.\n */\nexport function random(\n  wordlist: string[],\n  options: random.Options = {},\n): string {\n  const { strength = 128 } = options\n  return generateMnemonic(wordlist, strength)\n}\n\nexport declare namespace random {\n  type Options = {\n    /**\n     * The strength of the mnemonic to generate, in bits.\n     * @default 128\n     */\n    strength?: number | undefined\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a mnemonic to a HD Key.\n *\n * @example\n * ```ts twoslash\n * import { Mnemonic } from 'ox'\n *\n * const mnemonic = Mnemonic.random(Mnemonic.english)\n * const hdKey = Mnemonic.toHdKey(mnemonic)\n * ```\n *\n * @example\n * ### Path Derivation\n *\n * You can derive a HD Key at a specific path using `derive`:\n *\n * ```ts twoslash\n * import { Mnemonic } from 'ox'\n *\n * const mnemonic = Mnemonic.random(Mnemonic.english)\n * const hdKey = Mnemonic.toHdKey(mnemonic).derive(Mnemonic.path({ index: 1 }))\n * ```\n *\n * @param mnemonic - The mnemonic to convert.\n * @param options - Conversion options.\n * @returns The HD Key.\n */\nexport function toHdKey(\n  mnemonic: string,\n  options: toHdKey.Options = {},\n): HdKey.HdKey {\n  const { passphrase } = options\n  const seed = toSeed(mnemonic, { passphrase })\n  return HdKey.fromSeed(seed)\n}\n\nexport declare namespace toHdKey {\n  type Options = {\n    /** An optional passphrase for additional protection to the seed. */\n    passphrase?: string | undefined\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a mnemonic to a private key.\n *\n * @example\n * ```ts twoslash\n * import { Mnemonic } from 'ox'\n *\n * const mnemonic = Mnemonic.random(Mnemonic.english)\n * const privateKey = Mnemonic.toPrivateKey(mnemonic)\n * // @log: '0x...'\n * ```\n *\n * @example\n * ### Paths\n *\n * You can derive a private key at a specific path using the `path` option.\n *\n * ```ts twoslash\n * import { Mnemonic } from 'ox'\n *\n * const mnemonic = Mnemonic.random(Mnemonic.english)\n * const privateKey = Mnemonic.toPrivateKey(mnemonic, {\n *   path: Mnemonic.path({ index: 1 }) // 'm/44'/60'/0'/0/1' // [!code focus]\n * })\n * // @log: '0x...'\n * ```\n *\n * @param mnemonic - The mnemonic to convert.\n * @param options - Conversion options.\n * @returns The private key.\n */\nexport function toPrivateKey<as extends 'Bytes' | 'Hex' = 'Bytes'>(\n  mnemonic: string,\n  options: toPrivateKey.Options<as> = {},\n): toPrivateKey.ReturnType<as> {\n  const { path = HdKey.path(), passphrase } = options\n  const hdKey = toHdKey(mnemonic, { passphrase }).derive(path)\n  if (options.as === 'Bytes') return Bytes.from(hdKey.privateKey) as never\n  return hdKey.privateKey as never\n}\n\nexport declare namespace toPrivateKey {\n  type Options<as extends 'Bytes' | 'Hex' = 'Bytes'> = {\n    /** The output format. @default 'Bytes' */\n    as?: as | 'Bytes' | 'Hex' | undefined\n    /** An optional path to derive the private key from. @default `m/44'/60'/0'/0/0` */\n    path?: string | undefined\n    /** An optional passphrase for additional protection to the seed. */\n    passphrase?: string | undefined\n  }\n\n  type ReturnType<as extends 'Bytes' | 'Hex' = 'Bytes'> =\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\n    | (as extends 'Hex' ? Hex.Hex : never)\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts a mnemonic to a master seed.\n *\n * @example\n * ```ts twoslash\n * import { Mnemonic } from 'ox'\n *\n * const mnemonic = Mnemonic.random(Mnemonic.english)\n * const seed = Mnemonic.toSeed(mnemonic)\n * // @log: Uint8Array [...64 bytes]\n * ```\n *\n * @param mnemonic - The mnemonic to convert.\n * @param options - Conversion options.\n * @returns The master seed.\n */\nexport function toSeed<as extends 'Bytes' | 'Hex' = 'Bytes'>(\n  mnemonic: string,\n  options: toSeed.Options<as> = {},\n): toSeed.ReturnType<as> {\n  const { passphrase } = options\n  const seed = mnemonicToSeedSync(mnemonic, passphrase)\n  if (options.as === 'Hex') return Bytes.toHex(seed) as never\n  return seed as never\n}\n\nexport declare namespace toSeed {\n  type Options<as extends 'Bytes' | 'Hex' = 'Bytes'> = {\n    /** The output format. @default 'Bytes' */\n    as?: as | 'Bytes' | 'Hex' | undefined\n    /** An optional passphrase for additional protection to the seed. */\n    passphrase?: string | undefined\n  }\n\n  type ReturnType<as extends 'Bytes' | 'Hex' = 'Bytes'> =\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\n    | (as extends 'Hex' ? Hex.Hex : never)\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Checks if a mnemonic is valid, given a wordlist.\n *\n * @example\n * ```ts twoslash\n * import { Mnemonic } from 'ox'\n *\n * const mnemonic = Mnemonic.validate(\n *   'buyer zoo end danger ice capable shrug naive twist relief mass bonus',\n *   Mnemonic.english\n * )\n * // @log: true\n * ```\n *\n * @param mnemonic - The mnemonic to validate.\n * @param wordlist - The wordlist to use.\n * @returns Whether the mnemonic is valid.\n */\nexport function validate(mnemonic: string, wordlist: string[]): boolean {\n  return validateMnemonic(mnemonic, wordlist)\n}\n\nexport declare namespace validate {\n  type ErrorType = Errors.GlobalErrorType\n}\n", "/**\n * Audited & minimal JS implementation of\n * [BIP39 mnemonic phrases](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).\n * @module\n * @example\n```js\nimport * as bip39 from '@scure/bip39';\nimport { wordlist } from '@scure/bip39/wordlists/english';\nconst mn = bip39.generateMnemonic(wordlist);\nconsole.log(mn);\nconst ent = bip39.mnemonicToEntropy(mn, wordlist)\nbip39.entropyToMnemonic(ent, wordlist);\nbip39.validateMnemonic(mn, wordlist);\nawait bip39.mnemonicToSeed(mn, 'password');\nbip39.mnemonicToSeedSync(mn, 'password');\n\n// Wordlists\nimport { wordlist as czech } from '@scure/bip39/wordlists/czech';\nimport { wordlist as english } from '@scure/bip39/wordlists/english';\nimport { wordlist as french } from '@scure/bip39/wordlists/french';\nimport { wordlist as italian } from '@scure/bip39/wordlists/italian';\nimport { wordlist as japanese } from '@scure/bip39/wordlists/japanese';\nimport { wordlist as korean } from '@scure/bip39/wordlists/korean';\nimport { wordlist as portuguese } from '@scure/bip39/wordlists/portuguese';\nimport { wordlist as simplifiedChinese } from '@scure/bip39/wordlists/simplified-chinese';\nimport { wordlist as spanish } from '@scure/bip39/wordlists/spanish';\nimport { wordlist as traditionalChinese } from '@scure/bip39/wordlists/traditional-chinese';\n```\n */\n/*! scure-bip39 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\nimport { pbkdf2, pbkdf2Async } from '@noble/hashes/pbkdf2';\nimport { sha256, sha512 } from '@noble/hashes/sha2';\nimport { abytes, anumber, randomBytes } from '@noble/hashes/utils';\nimport { utils as baseUtils } from '@scure/base';\n// Japanese wordlist\nconst isJapanese = (wordlist) => wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093';\n// Normalization replaces equivalent sequences of characters\n// so that any two texts that are equivalent will be reduced\n// to the same sequence of code points, called the normal form of the original text.\n// https://tonsky.me/blog/unicode/#why-is-a----\nfunction nfkd(str) {\n    if (typeof str !== 'string')\n        throw new TypeError('invalid mnemonic type: ' + typeof str);\n    return str.normalize('NFKD');\n}\nfunction normalize(str) {\n    const norm = nfkd(str);\n    const words = norm.split(' ');\n    if (![12, 15, 18, 21, 24].includes(words.length))\n        throw new Error('Invalid mnemonic');\n    return { nfkd: norm, words };\n}\nfunction aentropy(ent) {\n    abytes(ent, 16, 20, 24, 28, 32);\n}\n/**\n * Generate x random words. Uses Cryptographically-Secure Random Number Generator.\n * @param wordlist imported wordlist for specific language\n * @param strength mnemonic strength 128-256 bits\n * @example\n * generateMnemonic(wordlist, 128)\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nexport function generateMnemonic(wordlist, strength = 128) {\n    anumber(strength);\n    if (strength % 32 !== 0 || strength > 256)\n        throw new TypeError('Invalid entropy');\n    return entropyToMnemonic(randomBytes(strength / 8), wordlist);\n}\nconst calcChecksum = (entropy) => {\n    // Checksum is ent.length/4 bits long\n    const bitsLeft = 8 - entropy.length / 4;\n    // Zero rightmost \"bitsLeft\" bits in byte\n    // For example: bitsLeft=4 val=10111101 -> 10110000\n    return new Uint8Array([(sha256(entropy)[0] >> bitsLeft) << bitsLeft]);\n};\nfunction getCoder(wordlist) {\n    if (!Array.isArray(wordlist) || wordlist.length !== 2048 || typeof wordlist[0] !== 'string')\n        throw new Error('Wordlist: expected array of 2048 strings');\n    wordlist.forEach((i) => {\n        if (typeof i !== 'string')\n            throw new Error('wordlist: non-string element: ' + i);\n    });\n    return baseUtils.chain(baseUtils.checksum(1, calcChecksum), baseUtils.radix2(11, true), baseUtils.alphabet(wordlist));\n}\n/**\n * Reversible: Converts mnemonic string to raw entropy in form of byte array.\n * @param mnemonic 12-24 words\n * @param wordlist imported wordlist for specific language\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToEntropy(mnem, wordlist)\n * // Produces\n * new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ])\n */\nexport function mnemonicToEntropy(mnemonic, wordlist) {\n    const { words } = normalize(mnemonic);\n    const entropy = getCoder(wordlist).decode(words);\n    aentropy(entropy);\n    return entropy;\n}\n/**\n * Reversible: Converts raw entropy in form of byte array to mnemonic string.\n * @param entropy byte array\n * @param wordlist imported wordlist for specific language\n * @returns 12-24 words\n * @example\n * const ent = new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ]);\n * entropyToMnemonic(ent, wordlist);\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nexport function entropyToMnemonic(entropy, wordlist) {\n    aentropy(entropy);\n    const words = getCoder(wordlist).encode(entropy);\n    return words.join(isJapanese(wordlist) ? '\\u3000' : ' ');\n}\n/**\n * Validates mnemonic for being 12-24 words contained in `wordlist`.\n */\nexport function validateMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nconst psalt = (passphrase) => nfkd('mnemonic' + passphrase);\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * await mnemonicToSeed(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nexport function mnemonicToSeed(mnemonic, passphrase = '') {\n    return pbkdf2Async(sha512, normalize(mnemonic).nfkd, psalt(passphrase), { c: 2048, dkLen: 64 });\n}\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToSeedSync(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nexport function mnemonicToSeedSync(mnemonic, passphrase = '') {\n    return pbkdf2(sha512, normalize(mnemonic).nfkd, psalt(passphrase), { c: 2048, dkLen: 64 });\n}\n", "export const wordlist = `abdikace\nabeceda\nadresa\nagrese\nakce\naktovka\nalej\nalkohol\namputace\nananas\nandulka\nanekdota\nanketa\nantika\nanulovat\narcha\narogance\nasfalt\nasistent\naspirace\nastma\nastronom\natlas\natletika\natol\nautobus\nazyl\nbabka\nbachor\nbacil\nbaculka\nbadatel\nbageta\nbagr\nbahno\nbakterie\nbalada\nbaletka\nbalkon\nbalonek\nbalvan\nbalza\nbambus\nbankomat\nbarbar\nbaret\nbarman\nbaroko\nbarva\nbaterka\nbatoh\nbavlna\nbazalka\nbazilika\nbazuka\nbedna\nberan\nbeseda\nbestie\nbeton\nbezinka\nbezmoc\nbeztak\nbicykl\nbidlo\nbiftek\nbikiny\nbilance\nbiograf\nbiolog\nbitva\nbizon\nblahobyt\nblatouch\nblecha\nbledule\nblesk\nblikat\nblizna\nblokovat\nbloudit\nblud\nbobek\nbobr\nbodlina\nbodnout\nbohatost\nbojkot\nbojovat\nbokorys\nbolest\nborec\nborovice\nbota\nboubel\nbouchat\nbouda\nboule\nbourat\nboxer\nbradavka\nbrambora\nbranka\nbratr\nbrepta\nbriketa\nbrko\nbrloh\nbronz\nbroskev\nbrunetka\nbrusinka\nbrzda\nbrzy\nbublina\nbubnovat\nbuchta\nbuditel\nbudka\nbudova\nbufet\nbujarost\nbukvice\nbuldok\nbulva\nbunda\nbunkr\nburza\nbutik\nbuvol\nbuzola\nbydlet\nbylina\nbytovka\nbzukot\ncapart\ncarevna\ncedr\ncedule\ncejch\ncejn\ncela\nceler\ncelkem\ncelnice\ncenina\ncennost\ncenovka\ncentrum\ncenzor\ncestopis\ncetka\nchalupa\nchapadlo\ncharita\nchata\nchechtat\nchemie\nchichot\nchirurg\nchlad\nchleba\nchlubit\nchmel\nchmura\nchobot\nchochol\nchodba\ncholera\nchomout\nchopit\nchoroba\nchov\nchrapot\nchrlit\nchrt\nchrup\nchtivost\nchudina\nchutnat\nchvat\nchvilka\nchvost\nchyba\nchystat\nchytit\ncibule\ncigareta\ncihelna\ncihla\ncinkot\ncirkus\ncisterna\ncitace\ncitrus\ncizinec\ncizost\nclona\ncokoliv\ncouvat\nctitel\nctnost\ncudnost\ncuketa\ncukr\ncupot\ncvaknout\ncval\ncvik\ncvrkot\ncyklista\ndaleko\ndareba\ndatel\ndatum\ndcera\ndebata\ndechovka\ndecibel\ndeficit\ndeflace\ndekl\ndekret\ndemokrat\ndeprese\nderby\ndeska\ndetektiv\ndikobraz\ndiktovat\ndioda\ndiplom\ndisk\ndisplej\ndivadlo\ndivoch\ndlaha\ndlouho\ndluhopis\ndnes\ndobro\ndobytek\ndocent\ndochutit\ndodnes\ndohled\ndohoda\ndohra\ndojem\ndojnice\ndoklad\ndokola\ndoktor\ndokument\ndolar\ndoleva\ndolina\ndoma\ndominant\ndomluvit\ndomov\ndonutit\ndopad\ndopis\ndoplnit\ndoposud\ndoprovod\ndopustit\ndorazit\ndorost\ndort\ndosah\ndoslov\ndostatek\ndosud\ndosyta\ndotaz\ndotek\ndotknout\ndoufat\ndoutnat\ndovozce\ndozadu\ndoznat\ndozorce\ndrahota\ndrak\ndramatik\ndravec\ndraze\ndrdol\ndrobnost\ndrogerie\ndrozd\ndrsnost\ndrtit\ndrzost\nduben\nduchovno\ndudek\nduha\nduhovka\ndusit\ndusno\ndutost\ndvojice\ndvorec\ndynamit\nekolog\nekonomie\nelektron\nelipsa\nemail\nemise\nemoce\nempatie\nepizoda\nepocha\nepopej\nepos\nesej\nesence\neskorta\neskymo\netiketa\neuforie\nevoluce\nexekuce\nexkurze\nexpedice\nexploze\nexport\nextrakt\nfacka\nfajfka\nfakulta\nfanatik\nfantazie\nfarmacie\nfavorit\nfazole\nfederace\nfejeton\nfenka\nfialka\nfigurant\nfilozof\nfiltr\nfinance\nfinta\nfixace\nfjord\nflanel\nflirt\nflotila\nfond\nfosfor\nfotbal\nfotka\nfoton\nfrakce\nfreska\nfronta\nfukar\nfunkce\nfyzika\ngaleje\ngarant\ngenetika\ngeolog\ngilotina\nglazura\nglejt\ngolem\ngolfista\ngotika\ngraf\ngramofon\ngranule\ngrep\ngril\ngrog\ngroteska\nguma\nhadice\nhadr\nhala\nhalenka\nhanba\nhanopis\nharfa\nharpuna\nhavran\nhebkost\nhejkal\nhejno\nhejtman\nhektar\nhelma\nhematom\nherec\nherna\nheslo\nhezky\nhistorik\nhladovka\nhlasivky\nhlava\nhledat\nhlen\nhlodavec\nhloh\nhloupost\nhltat\nhlubina\nhluchota\nhmat\nhmota\nhmyz\nhnis\nhnojivo\nhnout\nhoblina\nhoboj\nhoch\nhodiny\nhodlat\nhodnota\nhodovat\nhojnost\nhokej\nholinka\nholka\nholub\nhomole\nhonitba\nhonorace\nhoral\nhorda\nhorizont\nhorko\nhorlivec\nhormon\nhornina\nhoroskop\nhorstvo\nhospoda\nhostina\nhotovost\nhouba\nhouf\nhoupat\nhouska\nhovor\nhradba\nhranice\nhravost\nhrazda\nhrbolek\nhrdina\nhrdlo\nhrdost\nhrnek\nhrobka\nhromada\nhrot\nhrouda\nhrozen\nhrstka\nhrubost\nhryzat\nhubenost\nhubnout\nhudba\nhukot\nhumr\nhusita\nhustota\nhvozd\nhybnost\nhydrant\nhygiena\nhymna\nhysterik\nidylka\nihned\nikona\niluze\nimunita\ninfekce\ninflace\ninkaso\ninovace\ninspekce\ninternet\ninvalida\ninvestor\ninzerce\nironie\njablko\njachta\njahoda\njakmile\njakost\njalovec\njantar\njarmark\njaro\njasan\njasno\njatka\njavor\njazyk\njedinec\njedle\njednatel\njehlan\njekot\njelen\njelito\njemnost\njenom\njepice\njeseter\njevit\njezdec\njezero\njinak\njindy\njinoch\njiskra\njistota\njitrnice\njizva\njmenovat\njogurt\njurta\nkabaret\nkabel\nkabinet\nkachna\nkadet\nkadidlo\nkahan\nkajak\nkajuta\nkakao\nkaktus\nkalamita\nkalhoty\nkalibr\nkalnost\nkamera\nkamkoliv\nkamna\nkanibal\nkanoe\nkantor\nkapalina\nkapela\nkapitola\nkapka\nkaple\nkapota\nkapr\nkapusta\nkapybara\nkaramel\nkarotka\nkarton\nkasa\nkatalog\nkatedra\nkauce\nkauza\nkavalec\nkazajka\nkazeta\nkazivost\nkdekoliv\nkdesi\nkedluben\nkemp\nkeramika\nkino\nklacek\nkladivo\nklam\nklapot\nklasika\nklaun\nklec\nklenba\nklepat\nklesnout\nklid\nklima\nklisna\nklobouk\nklokan\nklopa\nkloub\nklubovna\nklusat\nkluzkost\nkmen\nkmitat\nkmotr\nkniha\nknot\nkoalice\nkoberec\nkobka\nkobliha\nkobyla\nkocour\nkohout\nkojenec\nkokos\nkoktejl\nkolaps\nkoleda\nkolize\nkolo\nkomando\nkometa\nkomik\nkomnata\nkomora\nkompas\nkomunita\nkonat\nkoncept\nkondice\nkonec\nkonfese\nkongres\nkonina\nkonkurs\nkontakt\nkonzerva\nkopanec\nkopie\nkopnout\nkoprovka\nkorbel\nkorektor\nkormidlo\nkoroptev\nkorpus\nkoruna\nkoryto\nkorzet\nkosatec\nkostka\nkotel\nkotleta\nkotoul\nkoukat\nkoupelna\nkousek\nkouzlo\nkovboj\nkoza\nkozoroh\nkrabice\nkrach\nkrajina\nkralovat\nkrasopis\nkravata\nkredit\nkrejcar\nkresba\nkreveta\nkriket\nkritik\nkrize\nkrkavec\nkrmelec\nkrmivo\nkrocan\nkrok\nkronika\nkropit\nkroupa\nkrovka\nkrtek\nkruhadlo\nkrupice\nkrutost\nkrvinka\nkrychle\nkrypta\nkrystal\nkryt\nkudlanka\nkufr\nkujnost\nkukla\nkulajda\nkulich\nkulka\nkulomet\nkultura\nkuna\nkupodivu\nkurt\nkurzor\nkutil\nkvalita\nkvasinka\nkvestor\nkynolog\nkyselina\nkytara\nkytice\nkytka\nkytovec\nkyvadlo\nlabrador\nlachtan\nladnost\nlaik\nlakomec\nlamela\nlampa\nlanovka\nlasice\nlaso\nlastura\nlatinka\nlavina\nlebka\nleckdy\nleden\nlednice\nledovka\nledvina\nlegenda\nlegie\nlegrace\nlehce\nlehkost\nlehnout\nlektvar\nlenochod\nlentilka\nlepenka\nlepidlo\nletadlo\nletec\nletmo\nletokruh\nlevhart\nlevitace\nlevobok\nlibra\nlichotka\nlidojed\nlidskost\nlihovina\nlijavec\nlilek\nlimetka\nlinie\nlinka\nlinoleum\nlistopad\nlitina\nlitovat\nlobista\nlodivod\nlogika\nlogoped\nlokalita\nloket\nlomcovat\nlopata\nlopuch\nlord\nlosos\nlotr\nloudal\nlouh\nlouka\nlouskat\nlovec\nlstivost\nlucerna\nlucifer\nlump\nlusk\nlustrace\nlvice\nlyra\nlyrika\nlysina\nmadam\nmadlo\nmagistr\nmahagon\nmajetek\nmajitel\nmajorita\nmakak\nmakovice\nmakrela\nmalba\nmalina\nmalovat\nmalvice\nmaminka\nmandle\nmanko\nmarnost\nmasakr\nmaskot\nmasopust\nmatice\nmatrika\nmaturita\nmazanec\nmazivo\nmazlit\nmazurka\nmdloba\nmechanik\nmeditace\nmedovina\nmelasa\nmeloun\nmentolka\nmetla\nmetoda\nmetr\nmezera\nmigrace\nmihnout\nmihule\nmikina\nmikrofon\nmilenec\nmilimetr\nmilost\nmimika\nmincovna\nminibar\nminomet\nminulost\nmiska\nmistr\nmixovat\nmladost\nmlha\nmlhovina\nmlok\nmlsat\nmluvit\nmnich\nmnohem\nmobil\nmocnost\nmodelka\nmodlitba\nmohyla\nmokro\nmolekula\nmomentka\nmonarcha\nmonokl\nmonstrum\nmontovat\nmonzun\nmosaz\nmoskyt\nmost\nmotivace\nmotorka\nmotyka\nmoucha\nmoudrost\nmozaika\nmozek\nmozol\nmramor\nmravenec\nmrkev\nmrtvola\nmrzet\nmrzutost\nmstitel\nmudrc\nmuflon\nmulat\nmumie\nmunice\nmuset\nmutace\nmuzeum\nmuzikant\nmyslivec\nmzda\nnabourat\nnachytat\nnadace\nnadbytek\nnadhoz\nnadobro\nnadpis\nnahlas\nnahnat\nnahodile\nnahradit\nnaivita\nnajednou\nnajisto\nnajmout\nnaklonit\nnakonec\nnakrmit\nnalevo\nnamazat\nnamluvit\nnanometr\nnaoko\nnaopak\nnaostro\nnapadat\nnapevno\nnaplnit\nnapnout\nnaposled\nnaprosto\nnarodit\nnaruby\nnarychlo\nnasadit\nnasekat\nnaslepo\nnastat\nnatolik\nnavenek\nnavrch\nnavzdory\nnazvat\nnebe\nnechat\nnecky\nnedaleko\nnedbat\nneduh\nnegace\nnehet\nnehoda\nnejen\nnejprve\nneklid\nnelibost\nnemilost\nnemoc\nneochota\nneonka\nnepokoj\nnerost\nnerv\nnesmysl\nnesoulad\nnetvor\nneuron\nnevina\nnezvykle\nnicota\nnijak\nnikam\nnikdy\nnikl\nnikterak\nnitro\nnocleh\nnohavice\nnominace\nnora\nnorek\nnositel\nnosnost\nnouze\nnoviny\nnovota\nnozdra\nnuda\nnudle\nnuget\nnutit\nnutnost\nnutrie\nnymfa\nobal\nobarvit\nobava\nobdiv\nobec\nobehnat\nobejmout\nobezita\nobhajoba\nobilnice\nobjasnit\nobjekt\nobklopit\noblast\noblek\nobliba\nobloha\nobluda\nobnos\nobohatit\nobojek\nobout\nobrazec\nobrna\nobruba\nobrys\nobsah\nobsluha\nobstarat\nobuv\nobvaz\nobvinit\nobvod\nobvykle\nobyvatel\nobzor\nocas\nocel\nocenit\nochladit\nochota\nochrana\nocitnout\nodboj\nodbyt\nodchod\nodcizit\nodebrat\nodeslat\nodevzdat\nodezva\nodhadce\nodhodit\nodjet\nodjinud\nodkaz\nodkoupit\nodliv\nodluka\nodmlka\nodolnost\nodpad\nodpis\nodplout\nodpor\nodpustit\nodpykat\nodrazka\nodsoudit\nodstup\nodsun\nodtok\nodtud\nodvaha\nodveta\nodvolat\nodvracet\nodznak\nofina\nofsajd\nohlas\nohnisko\nohrada\nohrozit\nohryzek\nokap\nokenice\noklika\nokno\nokouzlit\nokovy\nokrasa\nokres\nokrsek\nokruh\nokupant\nokurka\nokusit\nolejnina\nolizovat\nomak\nomeleta\nomezit\nomladina\nomlouvat\nomluva\nomyl\nonehdy\nopakovat\nopasek\noperace\nopice\nopilost\nopisovat\nopora\nopozice\nopravdu\noproti\norbital\norchestr\norgie\norlice\norloj\nortel\nosada\noschnout\nosika\nosivo\noslava\noslepit\noslnit\noslovit\nosnova\nosoba\nosolit\nospalec\nosten\nostraha\nostuda\nostych\nosvojit\noteplit\notisk\notop\notrhat\notrlost\notrok\notruby\notvor\novanout\novar\noves\novlivnit\novoce\noxid\nozdoba\npachatel\npacient\npadouch\npahorek\npakt\npalanda\npalec\npalivo\npaluba\npamflet\npamlsek\npanenka\npanika\npanna\npanovat\npanstvo\npantofle\npaprika\nparketa\nparodie\nparta\nparuka\nparyba\npaseka\npasivita\npastelka\npatent\npatrona\npavouk\npazneht\npazourek\npecka\npedagog\npejsek\npeklo\npeloton\npenalta\npendrek\npenze\nperiskop\npero\npestrost\npetarda\npetice\npetrolej\npevnina\npexeso\npianista\npiha\npijavice\npikle\npiknik\npilina\npilnost\npilulka\npinzeta\npipeta\npisatel\npistole\npitevna\npivnice\npivovar\nplacenta\nplakat\nplamen\nplaneta\nplastika\nplatit\nplavidlo\nplaz\nplech\nplemeno\nplenta\nples\npletivo\nplevel\nplivat\nplnit\nplno\nplocha\nplodina\nplomba\nplout\npluk\nplyn\npobavit\npobyt\npochod\npocit\npoctivec\npodat\npodcenit\npodepsat\npodhled\npodivit\npodklad\npodmanit\npodnik\npodoba\npodpora\npodraz\npodstata\npodvod\npodzim\npoezie\npohanka\npohnutka\npohovor\npohroma\npohyb\npointa\npojistka\npojmout\npokazit\npokles\npokoj\npokrok\npokuta\npokyn\npoledne\npolibek\npolknout\npoloha\npolynom\npomalu\npominout\npomlka\npomoc\npomsta\npomyslet\nponechat\nponorka\nponurost\npopadat\npopel\npopisek\npoplach\npoprosit\npopsat\npopud\nporadce\nporce\nporod\nporucha\nporyv\nposadit\nposed\nposila\nposkok\nposlanec\nposoudit\npospolu\npostava\nposudek\nposyp\npotah\npotkan\npotlesk\npotomek\npotrava\npotupa\npotvora\npoukaz\npouto\npouzdro\npovaha\npovidla\npovlak\npovoz\npovrch\npovstat\npovyk\npovzdech\npozdrav\npozemek\npoznatek\npozor\npozvat\npracovat\nprahory\npraktika\nprales\npraotec\npraporek\nprase\npravda\nprincip\nprkno\nprobudit\nprocento\nprodej\nprofese\nprohra\nprojekt\nprolomit\npromile\npronikat\npropad\nprorok\nprosba\nproton\nproutek\nprovaz\nprskavka\nprsten\nprudkost\nprut\nprvek\nprvohory\npsanec\npsovod\npstruh\nptactvo\npuberta\npuch\npudl\npukavec\npuklina\npukrle\npult\npumpa\npunc\npupen\npusa\npusinka\npustina\nputovat\nputyka\npyramida\npysk\npytel\nracek\nrachot\nradiace\nradnice\nradon\nraft\nragby\nraketa\nrakovina\nrameno\nrampouch\nrande\nrarach\nrarita\nrasovna\nrastr\nratolest\nrazance\nrazidlo\nreagovat\nreakce\nrecept\nredaktor\nreferent\nreflex\nrejnok\nreklama\nrekord\nrekrut\nrektor\nreputace\nrevize\nrevma\nrevolver\nrezerva\nriskovat\nriziko\nrobotika\nrodokmen\nrohovka\nrokle\nrokoko\nromaneto\nropovod\nropucha\nrorejs\nrosol\nrostlina\nrotmistr\nrotoped\nrotunda\nroubenka\nroucho\nroup\nroura\nrovina\nrovnice\nrozbor\nrozchod\nrozdat\nrozeznat\nrozhodce\nrozinka\nrozjezd\nrozkaz\nrozloha\nrozmar\nrozpad\nrozruch\nrozsah\nroztok\nrozum\nrozvod\nrubrika\nruchadlo\nrukavice\nrukopis\nryba\nrybolov\nrychlost\nrydlo\nrypadlo\nrytina\nryzost\nsadista\nsahat\nsako\nsamec\nsamizdat\nsamota\nsanitka\nsardinka\nsasanka\nsatelit\nsazba\nsazenice\nsbor\nschovat\nsebranka\nsecese\nsedadlo\nsediment\nsedlo\nsehnat\nsejmout\nsekera\nsekta\nsekunda\nsekvoje\nsemeno\nseno\nservis\nsesadit\nseshora\nseskok\nseslat\nsestra\nsesuv\nsesypat\nsetba\nsetina\nsetkat\nsetnout\nsetrvat\nsever\nseznam\nshoda\nshrnout\nsifon\nsilnice\nsirka\nsirotek\nsirup\nsituace\nskafandr\nskalisko\nskanzen\nskaut\nskeptik\nskica\nskladba\nsklenice\nsklo\nskluz\nskoba\nskokan\nskoro\nskripta\nskrz\nskupina\nskvost\nskvrna\nslabika\nsladidlo\nslanina\nslast\nslavnost\nsledovat\nslepec\nsleva\nslezina\nslib\nslina\nsliznice\nslon\nsloupek\nslovo\nsluch\nsluha\nslunce\nslupka\nslza\nsmaragd\nsmetana\nsmilstvo\nsmlouva\nsmog\nsmrad\nsmrk\nsmrtka\nsmutek\nsmysl\nsnad\nsnaha\nsnob\nsobota\nsocha\nsodovka\nsokol\nsopka\nsotva\nsouboj\nsoucit\nsoudce\nsouhlas\nsoulad\nsoumrak\nsouprava\nsoused\nsoutok\nsouviset\nspalovna\nspasitel\nspis\nsplav\nspodek\nspojenec\nspolu\nsponzor\nspornost\nspousta\nsprcha\nspustit\nsranda\nsraz\nsrdce\nsrna\nsrnec\nsrovnat\nsrpen\nsrst\nsrub\nstanice\nstarosta\nstatika\nstavba\nstehno\nstezka\nstodola\nstolek\nstopa\nstorno\nstoupat\nstrach\nstres\nstrhnout\nstrom\nstruna\nstudna\nstupnice\nstvol\nstyk\nsubjekt\nsubtropy\nsuchar\nsudost\nsukno\nsundat\nsunout\nsurikata\nsurovina\nsvah\nsvalstvo\nsvetr\nsvatba\nsvazek\nsvisle\nsvitek\nsvoboda\nsvodidlo\nsvorka\nsvrab\nsykavka\nsykot\nsynek\nsynovec\nsypat\nsypkost\nsyrovost\nsysel\nsytost\ntabletka\ntabule\ntahoun\ntajemno\ntajfun\ntajga\ntajit\ntajnost\ntaktika\ntamhle\ntampon\ntancovat\ntanec\ntanker\ntapeta\ntavenina\ntazatel\ntechnika\ntehdy\ntekutina\ntelefon\ntemnota\ntendence\ntenista\ntenor\nteplota\ntepna\nteprve\nterapie\ntermoska\ntextil\nticho\ntiskopis\ntitulek\ntkadlec\ntkanina\ntlapka\ntleskat\ntlukot\ntlupa\ntmel\ntoaleta\ntopinka\ntopol\ntorzo\ntouha\ntoulec\ntradice\ntraktor\ntramp\ntrasa\ntraverza\ntrefit\ntrest\ntrezor\ntrhavina\ntrhlina\ntrochu\ntrojice\ntroska\ntrouba\ntrpce\ntrpitel\ntrpkost\ntrubec\ntruchlit\ntruhlice\ntrus\ntrvat\ntudy\ntuhnout\ntuhost\ntundra\nturista\nturnaj\ntuzemsko\ntvaroh\ntvorba\ntvrdost\ntvrz\ntygr\ntykev\nubohost\nuboze\nubrat\nubrousek\nubrus\nubytovna\nucho\nuctivost\nudivit\nuhradit\nujednat\nujistit\nujmout\nukazatel\nuklidnit\nuklonit\nukotvit\nukrojit\nulice\nulita\nulovit\numyvadlo\nunavit\nuniforma\nuniknout\nupadnout\nuplatnit\nuplynout\nupoutat\nupravit\nuran\nurazit\nusednout\nusilovat\nusmrtit\nusnadnit\nusnout\nusoudit\nustlat\nustrnout\nutahovat\nutkat\nutlumit\nutonout\nutopenec\nutrousit\nuvalit\nuvolnit\nuvozovka\nuzdravit\nuzel\nuzenina\nuzlina\nuznat\nvagon\nvalcha\nvaloun\nvana\nvandal\nvanilka\nvaran\nvarhany\nvarovat\nvcelku\nvchod\nvdova\nvedro\nvegetace\nvejce\nvelbloud\nveletrh\nvelitel\nvelmoc\nvelryba\nvenkov\nveranda\nverze\nveselka\nveskrze\nvesnice\nvespodu\nvesta\nveterina\nveverka\nvibrace\nvichr\nvideohra\nvidina\nvidle\nvila\nvinice\nviset\nvitalita\nvize\nvizitka\nvjezd\nvklad\nvkus\nvlajka\nvlak\nvlasec\nvlevo\nvlhkost\nvliv\nvlnovka\nvloupat\nvnucovat\nvnuk\nvoda\nvodivost\nvodoznak\nvodstvo\nvojensky\nvojna\nvojsko\nvolant\nvolba\nvolit\nvolno\nvoskovka\nvozidlo\nvozovna\nvpravo\nvrabec\nvracet\nvrah\nvrata\nvrba\nvrcholek\nvrhat\nvrstva\nvrtule\nvsadit\nvstoupit\nvstup\nvtip\nvybavit\nvybrat\nvychovat\nvydat\nvydra\nvyfotit\nvyhledat\nvyhnout\nvyhodit\nvyhradit\nvyhubit\nvyjasnit\nvyjet\nvyjmout\nvyklopit\nvykonat\nvylekat\nvymazat\nvymezit\nvymizet\nvymyslet\nvynechat\nvynikat\nvynutit\nvypadat\nvyplatit\nvypravit\nvypustit\nvyrazit\nvyrovnat\nvyrvat\nvyslovit\nvysoko\nvystavit\nvysunout\nvysypat\nvytasit\nvytesat\nvytratit\nvyvinout\nvyvolat\nvyvrhel\nvyzdobit\nvyznat\nvzadu\nvzbudit\nvzchopit\nvzdor\nvzduch\nvzdychat\nvzestup\nvzhledem\nvzkaz\nvzlykat\nvznik\nvzorek\nvzpoura\nvztah\nvztek\nxylofon\nzabrat\nzabydlet\nzachovat\nzadarmo\nzadusit\nzafoukat\nzahltit\nzahodit\nzahrada\nzahynout\nzajatec\nzajet\nzajistit\nzaklepat\nzakoupit\nzalepit\nzamezit\nzamotat\nzamyslet\nzanechat\nzanikat\nzaplatit\nzapojit\nzapsat\nzarazit\nzastavit\nzasunout\nzatajit\nzatemnit\nzatknout\nzaujmout\nzavalit\nzavelet\nzavinit\nzavolat\nzavrtat\nzazvonit\nzbavit\nzbrusu\nzbudovat\nzbytek\nzdaleka\nzdarma\nzdatnost\nzdivo\nzdobit\nzdroj\nzdvih\nzdymadlo\nzelenina\nzeman\nzemina\nzeptat\nzezadu\nzezdola\nzhatit\nzhltnout\nzhluboka\nzhotovit\nzhruba\nzima\nzimnice\nzjemnit\nzklamat\nzkoumat\nzkratka\nzkumavka\nzlato\nzlehka\nzloba\nzlom\nzlost\nzlozvyk\nzmapovat\nzmar\nzmatek\nzmije\nzmizet\nzmocnit\nzmodrat\nzmrzlina\nzmutovat\nznak\nznalost\nznamenat\nznovu\nzobrazit\nzotavit\nzoubek\nzoufale\nzplodit\nzpomalit\nzprava\nzprostit\nzprudka\nzprvu\nzrada\nzranit\nzrcadlo\nzrnitost\nzrno\nzrovna\nzrychlit\nzrzavost\nzticha\nztratit\nzubovina\nzubr\nzvednout\nzvenku\nzvesela\nzvon\nzvrat\nzvukovod\nzvyk`.split('\\n');\n", "export const wordlist = `abandon\nability\nable\nabout\nabove\nabsent\nabsorb\nabstract\nabsurd\nabuse\naccess\naccident\naccount\naccuse\nachieve\nacid\nacoustic\nacquire\nacross\nact\naction\nactor\nactress\nactual\nadapt\nadd\naddict\naddress\nadjust\nadmit\nadult\nadvance\nadvice\naerobic\naffair\nafford\nafraid\nagain\nage\nagent\nagree\nahead\naim\nair\nairport\naisle\nalarm\nalbum\nalcohol\nalert\nalien\nall\nalley\nallow\nalmost\nalone\nalpha\nalready\nalso\nalter\nalways\namateur\namazing\namong\namount\namused\nanalyst\nanchor\nancient\nanger\nangle\nangry\nanimal\nankle\nannounce\nannual\nanother\nanswer\nantenna\nantique\nanxiety\nany\napart\napology\nappear\napple\napprove\napril\narch\narctic\narea\narena\nargue\narm\narmed\narmor\narmy\naround\narrange\narrest\narrive\narrow\nart\nartefact\nartist\nartwork\nask\naspect\nassault\nasset\nassist\nassume\nasthma\nathlete\natom\nattack\nattend\nattitude\nattract\nauction\naudit\naugust\naunt\nauthor\nauto\nautumn\naverage\navocado\navoid\nawake\naware\naway\nawesome\nawful\nawkward\naxis\nbaby\nbachelor\nbacon\nbadge\nbag\nbalance\nbalcony\nball\nbamboo\nbanana\nbanner\nbar\nbarely\nbargain\nbarrel\nbase\nbasic\nbasket\nbattle\nbeach\nbean\nbeauty\nbecause\nbecome\nbeef\nbefore\nbegin\nbehave\nbehind\nbelieve\nbelow\nbelt\nbench\nbenefit\nbest\nbetray\nbetter\nbetween\nbeyond\nbicycle\nbid\nbike\nbind\nbiology\nbird\nbirth\nbitter\nblack\nblade\nblame\nblanket\nblast\nbleak\nbless\nblind\nblood\nblossom\nblouse\nblue\nblur\nblush\nboard\nboat\nbody\nboil\nbomb\nbone\nbonus\nbook\nboost\nborder\nboring\nborrow\nboss\nbottom\nbounce\nbox\nboy\nbracket\nbrain\nbrand\nbrass\nbrave\nbread\nbreeze\nbrick\nbridge\nbrief\nbright\nbring\nbrisk\nbroccoli\nbroken\nbronze\nbroom\nbrother\nbrown\nbrush\nbubble\nbuddy\nbudget\nbuffalo\nbuild\nbulb\nbulk\nbullet\nbundle\nbunker\nburden\nburger\nburst\nbus\nbusiness\nbusy\nbutter\nbuyer\nbuzz\ncabbage\ncabin\ncable\ncactus\ncage\ncake\ncall\ncalm\ncamera\ncamp\ncan\ncanal\ncancel\ncandy\ncannon\ncanoe\ncanvas\ncanyon\ncapable\ncapital\ncaptain\ncar\ncarbon\ncard\ncargo\ncarpet\ncarry\ncart\ncase\ncash\ncasino\ncastle\ncasual\ncat\ncatalog\ncatch\ncategory\ncattle\ncaught\ncause\ncaution\ncave\nceiling\ncelery\ncement\ncensus\ncentury\ncereal\ncertain\nchair\nchalk\nchampion\nchange\nchaos\nchapter\ncharge\nchase\nchat\ncheap\ncheck\ncheese\nchef\ncherry\nchest\nchicken\nchief\nchild\nchimney\nchoice\nchoose\nchronic\nchuckle\nchunk\nchurn\ncigar\ncinnamon\ncircle\ncitizen\ncity\ncivil\nclaim\nclap\nclarify\nclaw\nclay\nclean\nclerk\nclever\nclick\nclient\ncliff\nclimb\nclinic\nclip\nclock\nclog\nclose\ncloth\ncloud\nclown\nclub\nclump\ncluster\nclutch\ncoach\ncoast\ncoconut\ncode\ncoffee\ncoil\ncoin\ncollect\ncolor\ncolumn\ncombine\ncome\ncomfort\ncomic\ncommon\ncompany\nconcert\nconduct\nconfirm\ncongress\nconnect\nconsider\ncontrol\nconvince\ncook\ncool\ncopper\ncopy\ncoral\ncore\ncorn\ncorrect\ncost\ncotton\ncouch\ncountry\ncouple\ncourse\ncousin\ncover\ncoyote\ncrack\ncradle\ncraft\ncram\ncrane\ncrash\ncrater\ncrawl\ncrazy\ncream\ncredit\ncreek\ncrew\ncricket\ncrime\ncrisp\ncritic\ncrop\ncross\ncrouch\ncrowd\ncrucial\ncruel\ncruise\ncrumble\ncrunch\ncrush\ncry\ncrystal\ncube\nculture\ncup\ncupboard\ncurious\ncurrent\ncurtain\ncurve\ncushion\ncustom\ncute\ncycle\ndad\ndamage\ndamp\ndance\ndanger\ndaring\ndash\ndaughter\ndawn\nday\ndeal\ndebate\ndebris\ndecade\ndecember\ndecide\ndecline\ndecorate\ndecrease\ndeer\ndefense\ndefine\ndefy\ndegree\ndelay\ndeliver\ndemand\ndemise\ndenial\ndentist\ndeny\ndepart\ndepend\ndeposit\ndepth\ndeputy\nderive\ndescribe\ndesert\ndesign\ndesk\ndespair\ndestroy\ndetail\ndetect\ndevelop\ndevice\ndevote\ndiagram\ndial\ndiamond\ndiary\ndice\ndiesel\ndiet\ndiffer\ndigital\ndignity\ndilemma\ndinner\ndinosaur\ndirect\ndirt\ndisagree\ndiscover\ndisease\ndish\ndismiss\ndisorder\ndisplay\ndistance\ndivert\ndivide\ndivorce\ndizzy\ndoctor\ndocument\ndog\ndoll\ndolphin\ndomain\ndonate\ndonkey\ndonor\ndoor\ndose\ndouble\ndove\ndraft\ndragon\ndrama\ndrastic\ndraw\ndream\ndress\ndrift\ndrill\ndrink\ndrip\ndrive\ndrop\ndrum\ndry\nduck\ndumb\ndune\nduring\ndust\ndutch\nduty\ndwarf\ndynamic\neager\neagle\nearly\nearn\nearth\neasily\neast\neasy\necho\necology\neconomy\nedge\nedit\neducate\neffort\negg\neight\neither\nelbow\nelder\nelectric\nelegant\nelement\nelephant\nelevator\nelite\nelse\nembark\nembody\nembrace\nemerge\nemotion\nemploy\nempower\nempty\nenable\nenact\nend\nendless\nendorse\nenemy\nenergy\nenforce\nengage\nengine\nenhance\nenjoy\nenlist\nenough\nenrich\nenroll\nensure\nenter\nentire\nentry\nenvelope\nepisode\nequal\nequip\nera\nerase\nerode\nerosion\nerror\nerupt\nescape\nessay\nessence\nestate\neternal\nethics\nevidence\nevil\nevoke\nevolve\nexact\nexample\nexcess\nexchange\nexcite\nexclude\nexcuse\nexecute\nexercise\nexhaust\nexhibit\nexile\nexist\nexit\nexotic\nexpand\nexpect\nexpire\nexplain\nexpose\nexpress\nextend\nextra\neye\neyebrow\nfabric\nface\nfaculty\nfade\nfaint\nfaith\nfall\nfalse\nfame\nfamily\nfamous\nfan\nfancy\nfantasy\nfarm\nfashion\nfat\nfatal\nfather\nfatigue\nfault\nfavorite\nfeature\nfebruary\nfederal\nfee\nfeed\nfeel\nfemale\nfence\nfestival\nfetch\nfever\nfew\nfiber\nfiction\nfield\nfigure\nfile\nfilm\nfilter\nfinal\nfind\nfine\nfinger\nfinish\nfire\nfirm\nfirst\nfiscal\nfish\nfit\nfitness\nfix\nflag\nflame\nflash\nflat\nflavor\nflee\nflight\nflip\nfloat\nflock\nfloor\nflower\nfluid\nflush\nfly\nfoam\nfocus\nfog\nfoil\nfold\nfollow\nfood\nfoot\nforce\nforest\nforget\nfork\nfortune\nforum\nforward\nfossil\nfoster\nfound\nfox\nfragile\nframe\nfrequent\nfresh\nfriend\nfringe\nfrog\nfront\nfrost\nfrown\nfrozen\nfruit\nfuel\nfun\nfunny\nfurnace\nfury\nfuture\ngadget\ngain\ngalaxy\ngallery\ngame\ngap\ngarage\ngarbage\ngarden\ngarlic\ngarment\ngas\ngasp\ngate\ngather\ngauge\ngaze\ngeneral\ngenius\ngenre\ngentle\ngenuine\ngesture\nghost\ngiant\ngift\ngiggle\nginger\ngiraffe\ngirl\ngive\nglad\nglance\nglare\nglass\nglide\nglimpse\nglobe\ngloom\nglory\nglove\nglow\nglue\ngoat\ngoddess\ngold\ngood\ngoose\ngorilla\ngospel\ngossip\ngovern\ngown\ngrab\ngrace\ngrain\ngrant\ngrape\ngrass\ngravity\ngreat\ngreen\ngrid\ngrief\ngrit\ngrocery\ngroup\ngrow\ngrunt\nguard\nguess\nguide\nguilt\nguitar\ngun\ngym\nhabit\nhair\nhalf\nhammer\nhamster\nhand\nhappy\nharbor\nhard\nharsh\nharvest\nhat\nhave\nhawk\nhazard\nhead\nhealth\nheart\nheavy\nhedgehog\nheight\nhello\nhelmet\nhelp\nhen\nhero\nhidden\nhigh\nhill\nhint\nhip\nhire\nhistory\nhobby\nhockey\nhold\nhole\nholiday\nhollow\nhome\nhoney\nhood\nhope\nhorn\nhorror\nhorse\nhospital\nhost\nhotel\nhour\nhover\nhub\nhuge\nhuman\nhumble\nhumor\nhundred\nhungry\nhunt\nhurdle\nhurry\nhurt\nhusband\nhybrid\nice\nicon\nidea\nidentify\nidle\nignore\nill\nillegal\nillness\nimage\nimitate\nimmense\nimmune\nimpact\nimpose\nimprove\nimpulse\ninch\ninclude\nincome\nincrease\nindex\nindicate\nindoor\nindustry\ninfant\ninflict\ninform\ninhale\ninherit\ninitial\ninject\ninjury\ninmate\ninner\ninnocent\ninput\ninquiry\ninsane\ninsect\ninside\ninspire\ninstall\nintact\ninterest\ninto\ninvest\ninvite\ninvolve\niron\nisland\nisolate\nissue\nitem\nivory\njacket\njaguar\njar\njazz\njealous\njeans\njelly\njewel\njob\njoin\njoke\njourney\njoy\njudge\njuice\njump\njungle\njunior\njunk\njust\nkangaroo\nkeen\nkeep\nketchup\nkey\nkick\nkid\nkidney\nkind\nkingdom\nkiss\nkit\nkitchen\nkite\nkitten\nkiwi\nknee\nknife\nknock\nknow\nlab\nlabel\nlabor\nladder\nlady\nlake\nlamp\nlanguage\nlaptop\nlarge\nlater\nlatin\nlaugh\nlaundry\nlava\nlaw\nlawn\nlawsuit\nlayer\nlazy\nleader\nleaf\nlearn\nleave\nlecture\nleft\nleg\nlegal\nlegend\nleisure\nlemon\nlend\nlength\nlens\nleopard\nlesson\nletter\nlevel\nliar\nliberty\nlibrary\nlicense\nlife\nlift\nlight\nlike\nlimb\nlimit\nlink\nlion\nliquid\nlist\nlittle\nlive\nlizard\nload\nloan\nlobster\nlocal\nlock\nlogic\nlonely\nlong\nloop\nlottery\nloud\nlounge\nlove\nloyal\nlucky\nluggage\nlumber\nlunar\nlunch\nluxury\nlyrics\nmachine\nmad\nmagic\nmagnet\nmaid\nmail\nmain\nmajor\nmake\nmammal\nman\nmanage\nmandate\nmango\nmansion\nmanual\nmaple\nmarble\nmarch\nmargin\nmarine\nmarket\nmarriage\nmask\nmass\nmaster\nmatch\nmaterial\nmath\nmatrix\nmatter\nmaximum\nmaze\nmeadow\nmean\nmeasure\nmeat\nmechanic\nmedal\nmedia\nmelody\nmelt\nmember\nmemory\nmention\nmenu\nmercy\nmerge\nmerit\nmerry\nmesh\nmessage\nmetal\nmethod\nmiddle\nmidnight\nmilk\nmillion\nmimic\nmind\nminimum\nminor\nminute\nmiracle\nmirror\nmisery\nmiss\nmistake\nmix\nmixed\nmixture\nmobile\nmodel\nmodify\nmom\nmoment\nmonitor\nmonkey\nmonster\nmonth\nmoon\nmoral\nmore\nmorning\nmosquito\nmother\nmotion\nmotor\nmountain\nmouse\nmove\nmovie\nmuch\nmuffin\nmule\nmultiply\nmuscle\nmuseum\nmushroom\nmusic\nmust\nmutual\nmyself\nmystery\nmyth\nnaive\nname\nnapkin\nnarrow\nnasty\nnation\nnature\nnear\nneck\nneed\nnegative\nneglect\nneither\nnephew\nnerve\nnest\nnet\nnetwork\nneutral\nnever\nnews\nnext\nnice\nnight\nnoble\nnoise\nnominee\nnoodle\nnormal\nnorth\nnose\nnotable\nnote\nnothing\nnotice\nnovel\nnow\nnuclear\nnumber\nnurse\nnut\noak\nobey\nobject\noblige\nobscure\nobserve\nobtain\nobvious\noccur\nocean\noctober\nodor\noff\noffer\noffice\noften\noil\nokay\nold\nolive\nolympic\nomit\nonce\none\nonion\nonline\nonly\nopen\nopera\nopinion\noppose\noption\norange\norbit\norchard\norder\nordinary\norgan\norient\noriginal\norphan\nostrich\nother\noutdoor\nouter\noutput\noutside\noval\noven\nover\nown\nowner\noxygen\noyster\nozone\npact\npaddle\npage\npair\npalace\npalm\npanda\npanel\npanic\npanther\npaper\nparade\nparent\npark\nparrot\nparty\npass\npatch\npath\npatient\npatrol\npattern\npause\npave\npayment\npeace\npeanut\npear\npeasant\npelican\npen\npenalty\npencil\npeople\npepper\nperfect\npermit\nperson\npet\nphone\nphoto\nphrase\nphysical\npiano\npicnic\npicture\npiece\npig\npigeon\npill\npilot\npink\npioneer\npipe\npistol\npitch\npizza\nplace\nplanet\nplastic\nplate\nplay\nplease\npledge\npluck\nplug\nplunge\npoem\npoet\npoint\npolar\npole\npolice\npond\npony\npool\npopular\nportion\nposition\npossible\npost\npotato\npottery\npoverty\npowder\npower\npractice\npraise\npredict\nprefer\nprepare\npresent\npretty\nprevent\nprice\npride\nprimary\nprint\npriority\nprison\nprivate\nprize\nproblem\nprocess\nproduce\nprofit\nprogram\nproject\npromote\nproof\nproperty\nprosper\nprotect\nproud\nprovide\npublic\npudding\npull\npulp\npulse\npumpkin\npunch\npupil\npuppy\npurchase\npurity\npurpose\npurse\npush\nput\npuzzle\npyramid\nquality\nquantum\nquarter\nquestion\nquick\nquit\nquiz\nquote\nrabbit\nraccoon\nrace\nrack\nradar\nradio\nrail\nrain\nraise\nrally\nramp\nranch\nrandom\nrange\nrapid\nrare\nrate\nrather\nraven\nraw\nrazor\nready\nreal\nreason\nrebel\nrebuild\nrecall\nreceive\nrecipe\nrecord\nrecycle\nreduce\nreflect\nreform\nrefuse\nregion\nregret\nregular\nreject\nrelax\nrelease\nrelief\nrely\nremain\nremember\nremind\nremove\nrender\nrenew\nrent\nreopen\nrepair\nrepeat\nreplace\nreport\nrequire\nrescue\nresemble\nresist\nresource\nresponse\nresult\nretire\nretreat\nreturn\nreunion\nreveal\nreview\nreward\nrhythm\nrib\nribbon\nrice\nrich\nride\nridge\nrifle\nright\nrigid\nring\nriot\nripple\nrisk\nritual\nrival\nriver\nroad\nroast\nrobot\nrobust\nrocket\nromance\nroof\nrookie\nroom\nrose\nrotate\nrough\nround\nroute\nroyal\nrubber\nrude\nrug\nrule\nrun\nrunway\nrural\nsad\nsaddle\nsadness\nsafe\nsail\nsalad\nsalmon\nsalon\nsalt\nsalute\nsame\nsample\nsand\nsatisfy\nsatoshi\nsauce\nsausage\nsave\nsay\nscale\nscan\nscare\nscatter\nscene\nscheme\nschool\nscience\nscissors\nscorpion\nscout\nscrap\nscreen\nscript\nscrub\nsea\nsearch\nseason\nseat\nsecond\nsecret\nsection\nsecurity\nseed\nseek\nsegment\nselect\nsell\nseminar\nsenior\nsense\nsentence\nseries\nservice\nsession\nsettle\nsetup\nseven\nshadow\nshaft\nshallow\nshare\nshed\nshell\nsheriff\nshield\nshift\nshine\nship\nshiver\nshock\nshoe\nshoot\nshop\nshort\nshoulder\nshove\nshrimp\nshrug\nshuffle\nshy\nsibling\nsick\nside\nsiege\nsight\nsign\nsilent\nsilk\nsilly\nsilver\nsimilar\nsimple\nsince\nsing\nsiren\nsister\nsituate\nsix\nsize\nskate\nsketch\nski\nskill\nskin\nskirt\nskull\nslab\nslam\nsleep\nslender\nslice\nslide\nslight\nslim\nslogan\nslot\nslow\nslush\nsmall\nsmart\nsmile\nsmoke\nsmooth\nsnack\nsnake\nsnap\nsniff\nsnow\nsoap\nsoccer\nsocial\nsock\nsoda\nsoft\nsolar\nsoldier\nsolid\nsolution\nsolve\nsomeone\nsong\nsoon\nsorry\nsort\nsoul\nsound\nsoup\nsource\nsouth\nspace\nspare\nspatial\nspawn\nspeak\nspecial\nspeed\nspell\nspend\nsphere\nspice\nspider\nspike\nspin\nspirit\nsplit\nspoil\nsponsor\nspoon\nsport\nspot\nspray\nspread\nspring\nspy\nsquare\nsqueeze\nsquirrel\nstable\nstadium\nstaff\nstage\nstairs\nstamp\nstand\nstart\nstate\nstay\nsteak\nsteel\nstem\nstep\nstereo\nstick\nstill\nsting\nstock\nstomach\nstone\nstool\nstory\nstove\nstrategy\nstreet\nstrike\nstrong\nstruggle\nstudent\nstuff\nstumble\nstyle\nsubject\nsubmit\nsubway\nsuccess\nsuch\nsudden\nsuffer\nsugar\nsuggest\nsuit\nsummer\nsun\nsunny\nsunset\nsuper\nsupply\nsupreme\nsure\nsurface\nsurge\nsurprise\nsurround\nsurvey\nsuspect\nsustain\nswallow\nswamp\nswap\nswarm\nswear\nsweet\nswift\nswim\nswing\nswitch\nsword\nsymbol\nsymptom\nsyrup\nsystem\ntable\ntackle\ntag\ntail\ntalent\ntalk\ntank\ntape\ntarget\ntask\ntaste\ntattoo\ntaxi\nteach\nteam\ntell\nten\ntenant\ntennis\ntent\nterm\ntest\ntext\nthank\nthat\ntheme\nthen\ntheory\nthere\nthey\nthing\nthis\nthought\nthree\nthrive\nthrow\nthumb\nthunder\nticket\ntide\ntiger\ntilt\ntimber\ntime\ntiny\ntip\ntired\ntissue\ntitle\ntoast\ntobacco\ntoday\ntoddler\ntoe\ntogether\ntoilet\ntoken\ntomato\ntomorrow\ntone\ntongue\ntonight\ntool\ntooth\ntop\ntopic\ntopple\ntorch\ntornado\ntortoise\ntoss\ntotal\ntourist\ntoward\ntower\ntown\ntoy\ntrack\ntrade\ntraffic\ntragic\ntrain\ntransfer\ntrap\ntrash\ntravel\ntray\ntreat\ntree\ntrend\ntrial\ntribe\ntrick\ntrigger\ntrim\ntrip\ntrophy\ntrouble\ntruck\ntrue\ntruly\ntrumpet\ntrust\ntruth\ntry\ntube\ntuition\ntumble\ntuna\ntunnel\nturkey\nturn\nturtle\ntwelve\ntwenty\ntwice\ntwin\ntwist\ntwo\ntype\ntypical\nugly\numbrella\nunable\nunaware\nuncle\nuncover\nunder\nundo\nunfair\nunfold\nunhappy\nuniform\nunique\nunit\nuniverse\nunknown\nunlock\nuntil\nunusual\nunveil\nupdate\nupgrade\nuphold\nupon\nupper\nupset\nurban\nurge\nusage\nuse\nused\nuseful\nuseless\nusual\nutility\nvacant\nvacuum\nvague\nvalid\nvalley\nvalve\nvan\nvanish\nvapor\nvarious\nvast\nvault\nvehicle\nvelvet\nvendor\nventure\nvenue\nverb\nverify\nversion\nvery\nvessel\nveteran\nviable\nvibrant\nvicious\nvictory\nvideo\nview\nvillage\nvintage\nviolin\nvirtual\nvirus\nvisa\nvisit\nvisual\nvital\nvivid\nvocal\nvoice\nvoid\nvolcano\nvolume\nvote\nvoyage\nwage\nwagon\nwait\nwalk\nwall\nwalnut\nwant\nwarfare\nwarm\nwarrior\nwash\nwasp\nwaste\nwater\nwave\nway\nwealth\nweapon\nwear\nweasel\nweather\nweb\nwedding\nweekend\nweird\nwelcome\nwest\nwet\nwhale\nwhat\nwheat\nwheel\nwhen\nwhere\nwhip\nwhisper\nwide\nwidth\nwife\nwild\nwill\nwin\nwindow\nwine\nwing\nwink\nwinner\nwinter\nwire\nwisdom\nwise\nwish\nwitness\nwolf\nwoman\nwonder\nwood\nwool\nword\nwork\nworld\nworry\nworth\nwrap\nwreck\nwrestle\nwrist\nwrite\nwrong\nyard\nyear\nyellow\nyou\nyoung\nyouth\nzebra\nzero\nzone\nzoo`.split('\\n');\n", "export const wordlist = `abaisser\nabandon\nabdiquer\nabeille\nabolir\naborder\naboutir\naboyer\nabrasif\nabreuver\nabriter\nabroger\nabrupt\nabsence\nabsolu\nabsurde\nabusif\nabyssal\nacadémie\nacajou\nacarien\naccabler\naccepter\nacclamer\naccolade\naccroche\naccuser\nacerbe\nachat\nacheter\naciduler\nacier\nacompte\nacquérir\nacronyme\nacteur\nactif\nactuel\nadepte\nadéquat\nadhésif\nadjectif\nadjuger\nadmettre\nadmirer\nadopter\nadorer\nadoucir\nadresse\nadroit\nadulte\nadverbe\naérer\naéronef\naffaire\naffecter\naffiche\naffreux\naffubler\nagacer\nagencer\nagile\nagiter\nagrafer\nagréable\nagrume\naider\naiguille\nailier\naimable\naisance\najouter\najuster\nalarmer\nalchimie\nalerte\nalgèbre\nalgue\naliéner\naliment\nalléger\nalliage\nallouer\nallumer\nalourdir\nalpaga\naltesse\nalvéole\namateur\nambigu\nambre\naménager\namertume\namidon\namiral\namorcer\namour\namovible\namphibie\nampleur\namusant\nanalyse\nanaphore\nanarchie\nanatomie\nancien\nanéantir\nangle\nangoisse\nanguleux\nanimal\nannexer\nannonce\nannuel\nanodin\nanomalie\nanonyme\nanormal\nantenne\nantidote\nanxieux\napaiser\napéritif\naplanir\napologie\nappareil\nappeler\napporter\nappuyer\naquarium\naqueduc\narbitre\narbuste\nardeur\nardoise\nargent\narlequin\narmature\narmement\narmoire\narmure\narpenter\narracher\narriver\narroser\narsenic\nartériel\narticle\naspect\nasphalte\naspirer\nassaut\nasservir\nassiette\nassocier\nassurer\nasticot\nastre\nastuce\natelier\natome\natrium\natroce\nattaque\nattentif\nattirer\nattraper\naubaine\nauberge\naudace\naudible\naugurer\naurore\nautomne\nautruche\navaler\navancer\navarice\navenir\naverse\naveugle\naviateur\navide\navion\naviser\navoine\navouer\navril\naxial\naxiome\nbadge\nbafouer\nbagage\nbaguette\nbaignade\nbalancer\nbalcon\nbaleine\nbalisage\nbambin\nbancaire\nbandage\nbanlieue\nbannière\nbanquier\nbarbier\nbaril\nbaron\nbarque\nbarrage\nbassin\nbastion\nbataille\nbateau\nbatterie\nbaudrier\nbavarder\nbelette\nbélier\nbelote\nbénéfice\nberceau\nberger\nberline\nbermuda\nbesace\nbesogne\nbétail\nbeurre\nbiberon\nbicycle\nbidule\nbijou\nbilan\nbilingue\nbillard\nbinaire\nbiologie\nbiopsie\nbiotype\nbiscuit\nbison\nbistouri\nbitume\nbizarre\nblafard\nblague\nblanchir\nblessant\nblinder\nblond\nbloquer\nblouson\nbobard\nbobine\nboire\nboiser\nbolide\nbonbon\nbondir\nbonheur\nbonifier\nbonus\nbordure\nborne\nbotte\nboucle\nboueux\nbougie\nboulon\nbouquin\nbourse\nboussole\nboutique\nboxeur\nbranche\nbrasier\nbrave\nbrebis\nbrèche\nbreuvage\nbricoler\nbrigade\nbrillant\nbrioche\nbrique\nbrochure\nbroder\nbronzer\nbrousse\nbroyeur\nbrume\nbrusque\nbrutal\nbruyant\nbuffle\nbuisson\nbulletin\nbureau\nburin\nbustier\nbutiner\nbutoir\nbuvable\nbuvette\ncabanon\ncabine\ncachette\ncadeau\ncadre\ncaféine\ncaillou\ncaisson\ncalculer\ncalepin\ncalibre\ncalmer\ncalomnie\ncalvaire\ncamarade\ncaméra\ncamion\ncampagne\ncanal\ncaneton\ncanon\ncantine\ncanular\ncapable\ncaporal\ncaprice\ncapsule\ncapter\ncapuche\ncarabine\ncarbone\ncaresser\ncaribou\ncarnage\ncarotte\ncarreau\ncarton\ncascade\ncasier\ncasque\ncassure\ncauser\ncaution\ncavalier\ncaverne\ncaviar\ncédille\nceinture\ncéleste\ncellule\ncendrier\ncensurer\ncentral\ncercle\ncérébral\ncerise\ncerner\ncerveau\ncesser\nchagrin\nchaise\nchaleur\nchambre\nchance\nchapitre\ncharbon\nchasseur\nchaton\nchausson\nchavirer\nchemise\nchenille\nchéquier\nchercher\ncheval\nchien\nchiffre\nchignon\nchimère\nchiot\nchlorure\nchocolat\nchoisir\nchose\nchouette\nchrome\nchute\ncigare\ncigogne\ncimenter\ncinéma\ncintrer\ncirculer\ncirer\ncirque\nciterne\ncitoyen\ncitron\ncivil\nclairon\nclameur\nclaquer\nclasse\nclavier\nclient\ncligner\nclimat\nclivage\ncloche\nclonage\ncloporte\ncobalt\ncobra\ncocasse\ncocotier\ncoder\ncodifier\ncoffre\ncogner\ncohésion\ncoiffer\ncoincer\ncolère\ncolibri\ncolline\ncolmater\ncolonel\ncombat\ncomédie\ncommande\ncompact\nconcert\nconduire\nconfier\ncongeler\nconnoter\nconsonne\ncontact\nconvexe\ncopain\ncopie\ncorail\ncorbeau\ncordage\ncorniche\ncorpus\ncorrect\ncortège\ncosmique\ncostume\ncoton\ncoude\ncoupure\ncourage\ncouteau\ncouvrir\ncoyote\ncrabe\ncrainte\ncravate\ncrayon\ncréature\ncréditer\ncrémeux\ncreuser\ncrevette\ncribler\ncrier\ncristal\ncritère\ncroire\ncroquer\ncrotale\ncrucial\ncruel\ncrypter\ncubique\ncueillir\ncuillère\ncuisine\ncuivre\nculminer\ncultiver\ncumuler\ncupide\ncuratif\ncurseur\ncyanure\ncycle\ncylindre\ncynique\ndaigner\ndamier\ndanger\ndanseur\ndauphin\ndébattre\ndébiter\ndéborder\ndébrider\ndébutant\ndécaler\ndécembre\ndéchirer\ndécider\ndéclarer\ndécorer\ndécrire\ndécupler\ndédale\ndéductif\ndéesse\ndéfensif\ndéfiler\ndéfrayer\ndégager\ndégivrer\ndéglutir\ndégrafer\ndéjeuner\ndélice\ndéloger\ndemander\ndemeurer\ndémolir\ndénicher\ndénouer\ndentelle\ndénuder\ndépart\ndépenser\ndéphaser\ndéplacer\ndéposer\ndéranger\ndérober\ndésastre\ndescente\ndésert\ndésigner\ndésobéir\ndessiner\ndestrier\ndétacher\ndétester\ndétourer\ndétresse\ndevancer\ndevenir\ndeviner\ndevoir\ndiable\ndialogue\ndiamant\ndicter\ndifférer\ndigérer\ndigital\ndigne\ndiluer\ndimanche\ndiminuer\ndioxyde\ndirectif\ndiriger\ndiscuter\ndisposer\ndissiper\ndistance\ndivertir\ndiviser\ndocile\ndocteur\ndogme\ndoigt\ndomaine\ndomicile\ndompter\ndonateur\ndonjon\ndonner\ndopamine\ndortoir\ndorure\ndosage\ndoseur\ndossier\ndotation\ndouanier\ndouble\ndouceur\ndouter\ndoyen\ndragon\ndraper\ndresser\ndribbler\ndroiture\nduperie\nduplexe\ndurable\ndurcir\ndynastie\néblouir\nécarter\nécharpe\néchelle\néclairer\néclipse\néclore\nécluse\nécole\néconomie\nécorce\nécouter\nécraser\nécrémer\nécrivain\nécrou\nécume\nécureuil\nédifier\néduquer\neffacer\neffectif\neffigie\neffort\neffrayer\neffusion\négaliser\négarer\néjecter\nélaborer\nélargir\nélectron\nélégant\néléphant\nélève\néligible\nélitisme\néloge\nélucider\néluder\nemballer\nembellir\nembryon\némeraude\némission\nemmener\némotion\némouvoir\nempereur\nemployer\nemporter\nemprise\némulsion\nencadrer\nenchère\nenclave\nencoche\nendiguer\nendosser\nendroit\nenduire\nénergie\nenfance\nenfermer\nenfouir\nengager\nengin\nenglober\nénigme\nenjamber\nenjeu\nenlever\nennemi\nennuyeux\nenrichir\nenrobage\nenseigne\nentasser\nentendre\nentier\nentourer\nentraver\nénumérer\nenvahir\nenviable\nenvoyer\nenzyme\néolien\népaissir\népargne\népatant\népaule\népicerie\népidémie\népier\népilogue\népine\népisode\népitaphe\népoque\népreuve\néprouver\népuisant\néquerre\néquipe\nériger\nérosion\nerreur\néruption\nescalier\nespadon\nespèce\nespiègle\nespoir\nesprit\nesquiver\nessayer\nessence\nessieu\nessorer\nestime\nestomac\nestrade\nétagère\nétaler\nétanche\nétatique\néteindre\nétendoir\néternel\néthanol\néthique\nethnie\nétirer\nétoffer\nétoile\nétonnant\nétourdir\nétrange\nétroit\nétude\neuphorie\névaluer\névasion\néventail\névidence\néviter\névolutif\névoquer\nexact\nexagérer\nexaucer\nexceller\nexcitant\nexclusif\nexcuse\nexécuter\nexemple\nexercer\nexhaler\nexhorter\nexigence\nexiler\nexister\nexotique\nexpédier\nexplorer\nexposer\nexprimer\nexquis\nextensif\nextraire\nexulter\nfable\nfabuleux\nfacette\nfacile\nfacture\nfaiblir\nfalaise\nfameux\nfamille\nfarceur\nfarfelu\nfarine\nfarouche\nfasciner\nfatal\nfatigue\nfaucon\nfautif\nfaveur\nfavori\nfébrile\nféconder\nfédérer\nfélin\nfemme\nfémur\nfendoir\nféodal\nfermer\nféroce\nferveur\nfestival\nfeuille\nfeutre\nfévrier\nfiasco\nficeler\nfictif\nfidèle\nfigure\nfilature\nfiletage\nfilière\nfilleul\nfilmer\nfilou\nfiltrer\nfinancer\nfinir\nfiole\nfirme\nfissure\nfixer\nflairer\nflamme\nflasque\nflatteur\nfléau\nflèche\nfleur\nflexion\nflocon\nflore\nfluctuer\nfluide\nfluvial\nfolie\nfonderie\nfongible\nfontaine\nforcer\nforgeron\nformuler\nfortune\nfossile\nfoudre\nfougère\nfouiller\nfoulure\nfourmi\nfragile\nfraise\nfranchir\nfrapper\nfrayeur\nfrégate\nfreiner\nfrelon\nfrémir\nfrénésie\nfrère\nfriable\nfriction\nfrisson\nfrivole\nfroid\nfromage\nfrontal\nfrotter\nfruit\nfugitif\nfuite\nfureur\nfurieux\nfurtif\nfusion\nfutur\ngagner\ngalaxie\ngalerie\ngambader\ngarantir\ngardien\ngarnir\ngarrigue\ngazelle\ngazon\ngéant\ngélatine\ngélule\ngendarme\ngénéral\ngénie\ngenou\ngentil\ngéologie\ngéomètre\ngéranium\ngerme\ngestuel\ngeyser\ngibier\ngicler\ngirafe\ngivre\nglace\nglaive\nglisser\nglobe\ngloire\nglorieux\ngolfeur\ngomme\ngonfler\ngorge\ngorille\ngoudron\ngouffre\ngoulot\ngoupille\ngourmand\ngoutte\ngraduel\ngraffiti\ngraine\ngrand\ngrappin\ngratuit\ngravir\ngrenat\ngriffure\ngriller\ngrimper\ngrogner\ngronder\ngrotte\ngroupe\ngruger\ngrutier\ngruyère\nguépard\nguerrier\nguide\nguimauve\nguitare\ngustatif\ngymnaste\ngyrostat\nhabitude\nhachoir\nhalte\nhameau\nhangar\nhanneton\nharicot\nharmonie\nharpon\nhasard\nhélium\nhématome\nherbe\nhérisson\nhermine\nhéron\nhésiter\nheureux\nhiberner\nhibou\nhilarant\nhistoire\nhiver\nhomard\nhommage\nhomogène\nhonneur\nhonorer\nhonteux\nhorde\nhorizon\nhorloge\nhormone\nhorrible\nhouleux\nhousse\nhublot\nhuileux\nhumain\nhumble\nhumide\nhumour\nhurler\nhydromel\nhygiène\nhymne\nhypnose\nidylle\nignorer\niguane\nillicite\nillusion\nimage\nimbiber\nimiter\nimmense\nimmobile\nimmuable\nimpact\nimpérial\nimplorer\nimposer\nimprimer\nimputer\nincarner\nincendie\nincident\nincliner\nincolore\nindexer\nindice\ninductif\ninédit\nineptie\ninexact\ninfini\ninfliger\ninformer\ninfusion\ningérer\ninhaler\ninhiber\ninjecter\ninjure\ninnocent\ninoculer\ninonder\ninscrire\ninsecte\ninsigne\ninsolite\ninspirer\ninstinct\ninsulter\nintact\nintense\nintime\nintrigue\nintuitif\ninutile\ninvasion\ninventer\ninviter\ninvoquer\nironique\nirradier\nirréel\nirriter\nisoler\nivoire\nivresse\njaguar\njaillir\njambe\njanvier\njardin\njauger\njaune\njavelot\njetable\njeton\njeudi\njeunesse\njoindre\njoncher\njongler\njoueur\njouissif\njournal\njovial\njoyau\njoyeux\njubiler\njugement\njunior\njupon\njuriste\njustice\njuteux\njuvénile\nkayak\nkimono\nkiosque\nlabel\nlabial\nlabourer\nlacérer\nlactose\nlagune\nlaine\nlaisser\nlaitier\nlambeau\nlamelle\nlampe\nlanceur\nlangage\nlanterne\nlapin\nlargeur\nlarme\nlaurier\nlavabo\nlavoir\nlecture\nlégal\nléger\nlégume\nlessive\nlettre\nlevier\nlexique\nlézard\nliasse\nlibérer\nlibre\nlicence\nlicorne\nliège\nlièvre\nligature\nligoter\nligue\nlimer\nlimite\nlimonade\nlimpide\nlinéaire\nlingot\nlionceau\nliquide\nlisière\nlister\nlithium\nlitige\nlittoral\nlivreur\nlogique\nlointain\nloisir\nlombric\nloterie\nlouer\nlourd\nloutre\nlouve\nloyal\nlubie\nlucide\nlucratif\nlueur\nlugubre\nluisant\nlumière\nlunaire\nlundi\nluron\nlutter\nluxueux\nmachine\nmagasin\nmagenta\nmagique\nmaigre\nmaillon\nmaintien\nmairie\nmaison\nmajorer\nmalaxer\nmaléfice\nmalheur\nmalice\nmallette\nmammouth\nmandater\nmaniable\nmanquant\nmanteau\nmanuel\nmarathon\nmarbre\nmarchand\nmardi\nmaritime\nmarqueur\nmarron\nmarteler\nmascotte\nmassif\nmatériel\nmatière\nmatraque\nmaudire\nmaussade\nmauve\nmaximal\nméchant\nméconnu\nmédaille\nmédecin\nméditer\nméduse\nmeilleur\nmélange\nmélodie\nmembre\nmémoire\nmenacer\nmener\nmenhir\nmensonge\nmentor\nmercredi\nmérite\nmerle\nmessager\nmesure\nmétal\nmétéore\nméthode\nmétier\nmeuble\nmiauler\nmicrobe\nmiette\nmignon\nmigrer\nmilieu\nmillion\nmimique\nmince\nminéral\nminimal\nminorer\nminute\nmiracle\nmiroiter\nmissile\nmixte\nmobile\nmoderne\nmoelleux\nmondial\nmoniteur\nmonnaie\nmonotone\nmonstre\nmontagne\nmonument\nmoqueur\nmorceau\nmorsure\nmortier\nmoteur\nmotif\nmouche\nmoufle\nmoulin\nmousson\nmouton\nmouvant\nmultiple\nmunition\nmuraille\nmurène\nmurmure\nmuscle\nmuséum\nmusicien\nmutation\nmuter\nmutuel\nmyriade\nmyrtille\nmystère\nmythique\nnageur\nnappe\nnarquois\nnarrer\nnatation\nnation\nnature\nnaufrage\nnautique\nnavire\nnébuleux\nnectar\nnéfaste\nnégation\nnégliger\nnégocier\nneige\nnerveux\nnettoyer\nneurone\nneutron\nneveu\nniche\nnickel\nnitrate\nniveau\nnoble\nnocif\nnocturne\nnoirceur\nnoisette\nnomade\nnombreux\nnommer\nnormatif\nnotable\nnotifier\nnotoire\nnourrir\nnouveau\nnovateur\nnovembre\nnovice\nnuage\nnuancer\nnuire\nnuisible\nnuméro\nnuptial\nnuque\nnutritif\nobéir\nobjectif\nobliger\nobscur\nobserver\nobstacle\nobtenir\nobturer\noccasion\noccuper\nocéan\noctobre\noctroyer\noctupler\noculaire\nodeur\nodorant\noffenser\nofficier\noffrir\nogive\noiseau\noisillon\nolfactif\nolivier\nombrage\nomettre\nonctueux\nonduler\nonéreux\nonirique\nopale\nopaque\nopérer\nopinion\nopportun\nopprimer\nopter\noptique\norageux\norange\norbite\nordonner\noreille\norgane\norgueil\norifice\nornement\norque\nortie\nosciller\nosmose\nossature\notarie\nouragan\nourson\noutil\noutrager\nouvrage\novation\noxyde\noxygène\nozone\npaisible\npalace\npalmarès\npalourde\npalper\npanache\npanda\npangolin\npaniquer\npanneau\npanorama\npantalon\npapaye\npapier\npapoter\npapyrus\nparadoxe\nparcelle\nparesse\nparfumer\nparler\nparole\nparrain\nparsemer\npartager\nparure\nparvenir\npassion\npastèque\npaternel\npatience\npatron\npavillon\npavoiser\npayer\npaysage\npeigne\npeintre\npelage\npélican\npelle\npelouse\npeluche\npendule\npénétrer\npénible\npensif\npénurie\npépite\npéplum\nperdrix\nperforer\npériode\npermuter\nperplexe\npersil\nperte\npeser\npétale\npetit\npétrir\npeuple\npharaon\nphobie\nphoque\nphoton\nphrase\nphysique\npiano\npictural\npièce\npierre\npieuvre\npilote\npinceau\npipette\npiquer\npirogue\npiscine\npiston\npivoter\npixel\npizza\nplacard\nplafond\nplaisir\nplaner\nplaque\nplastron\nplateau\npleurer\nplexus\npliage\nplomb\nplonger\npluie\nplumage\npochette\npoésie\npoète\npointe\npoirier\npoisson\npoivre\npolaire\npolicier\npollen\npolygone\npommade\npompier\nponctuel\npondérer\nponey\nportique\nposition\nposséder\nposture\npotager\npoteau\npotion\npouce\npoulain\npoumon\npourpre\npoussin\npouvoir\nprairie\npratique\nprécieux\nprédire\npréfixe\nprélude\nprénom\nprésence\nprétexte\nprévoir\nprimitif\nprince\nprison\npriver\nproblème\nprocéder\nprodige\nprofond\nprogrès\nproie\nprojeter\nprologue\npromener\npropre\nprospère\nprotéger\nprouesse\nproverbe\nprudence\npruneau\npsychose\npublic\npuceron\npuiser\npulpe\npulsar\npunaise\npunitif\npupitre\npurifier\npuzzle\npyramide\nquasar\nquerelle\nquestion\nquiétude\nquitter\nquotient\nracine\nraconter\nradieux\nragondin\nraideur\nraisin\nralentir\nrallonge\nramasser\nrapide\nrasage\nratisser\nravager\nravin\nrayonner\nréactif\nréagir\nréaliser\nréanimer\nrecevoir\nréciter\nréclamer\nrécolter\nrecruter\nreculer\nrecycler\nrédiger\nredouter\nrefaire\nréflexe\nréformer\nrefrain\nrefuge\nrégalien\nrégion\nréglage\nrégulier\nréitérer\nrejeter\nrejouer\nrelatif\nrelever\nrelief\nremarque\nremède\nremise\nremonter\nremplir\nremuer\nrenard\nrenfort\nrenifler\nrenoncer\nrentrer\nrenvoi\nreplier\nreporter\nreprise\nreptile\nrequin\nréserve\nrésineux\nrésoudre\nrespect\nrester\nrésultat\nrétablir\nretenir\nréticule\nretomber\nretracer\nréunion\nréussir\nrevanche\nrevivre\nrévolte\nrévulsif\nrichesse\nrideau\nrieur\nrigide\nrigoler\nrincer\nriposter\nrisible\nrisque\nrituel\nrival\nrivière\nrocheux\nromance\nrompre\nronce\nrondin\nroseau\nrosier\nrotatif\nrotor\nrotule\nrouge\nrouille\nrouleau\nroutine\nroyaume\nruban\nrubis\nruche\nruelle\nrugueux\nruiner\nruisseau\nruser\nrustique\nrythme\nsabler\nsaboter\nsabre\nsacoche\nsafari\nsagesse\nsaisir\nsalade\nsalive\nsalon\nsaluer\nsamedi\nsanction\nsanglier\nsarcasme\nsardine\nsaturer\nsaugrenu\nsaumon\nsauter\nsauvage\nsavant\nsavonner\nscalpel\nscandale\nscélérat\nscénario\nsceptre\nschéma\nscience\nscinder\nscore\nscrutin\nsculpter\nséance\nsécable\nsécher\nsecouer\nsécréter\nsédatif\nséduire\nseigneur\nséjour\nsélectif\nsemaine\nsembler\nsemence\nséminal\nsénateur\nsensible\nsentence\nséparer\nséquence\nserein\nsergent\nsérieux\nserrure\nsérum\nservice\nsésame\nsévir\nsevrage\nsextuple\nsidéral\nsiècle\nsiéger\nsiffler\nsigle\nsignal\nsilence\nsilicium\nsimple\nsincère\nsinistre\nsiphon\nsirop\nsismique\nsituer\nskier\nsocial\nsocle\nsodium\nsoigneux\nsoldat\nsoleil\nsolitude\nsoluble\nsombre\nsommeil\nsomnoler\nsonde\nsongeur\nsonnette\nsonore\nsorcier\nsortir\nsosie\nsottise\nsoucieux\nsoudure\nsouffle\nsoulever\nsoupape\nsource\nsoutirer\nsouvenir\nspacieux\nspatial\nspécial\nsphère\nspiral\nstable\nstation\nsternum\nstimulus\nstipuler\nstrict\nstudieux\nstupeur\nstyliste\nsublime\nsubstrat\nsubtil\nsubvenir\nsuccès\nsucre\nsuffixe\nsuggérer\nsuiveur\nsulfate\nsuperbe\nsupplier\nsurface\nsuricate\nsurmener\nsurprise\nsursaut\nsurvie\nsuspect\nsyllabe\nsymbole\nsymétrie\nsynapse\nsyntaxe\nsystème\ntabac\ntablier\ntactile\ntailler\ntalent\ntalisman\ntalonner\ntambour\ntamiser\ntangible\ntapis\ntaquiner\ntarder\ntarif\ntartine\ntasse\ntatami\ntatouage\ntaupe\ntaureau\ntaxer\ntémoin\ntemporel\ntenaille\ntendre\nteneur\ntenir\ntension\nterminer\nterne\nterrible\ntétine\ntexte\nthème\nthéorie\nthérapie\nthorax\ntibia\ntiède\ntimide\ntirelire\ntiroir\ntissu\ntitane\ntitre\ntituber\ntoboggan\ntolérant\ntomate\ntonique\ntonneau\ntoponyme\ntorche\ntordre\ntornade\ntorpille\ntorrent\ntorse\ntortue\ntotem\ntoucher\ntournage\ntousser\ntoxine\ntraction\ntrafic\ntragique\ntrahir\ntrain\ntrancher\ntravail\ntrèfle\ntremper\ntrésor\ntreuil\ntriage\ntribunal\ntricoter\ntrilogie\ntriomphe\ntripler\ntriturer\ntrivial\ntrombone\ntronc\ntropical\ntroupeau\ntuile\ntulipe\ntumulte\ntunnel\nturbine\ntuteur\ntutoyer\ntuyau\ntympan\ntyphon\ntypique\ntyran\nubuesque\nultime\nultrason\nunanime\nunifier\nunion\nunique\nunitaire\nunivers\nuranium\nurbain\nurticant\nusage\nusine\nusuel\nusure\nutile\nutopie\nvacarme\nvaccin\nvagabond\nvague\nvaillant\nvaincre\nvaisseau\nvalable\nvalise\nvallon\nvalve\nvampire\nvanille\nvapeur\nvarier\nvaseux\nvassal\nvaste\nvecteur\nvedette\nvégétal\nvéhicule\nveinard\nvéloce\nvendredi\nvénérer\nvenger\nvenimeux\nventouse\nverdure\nvérin\nvernir\nverrou\nverser\nvertu\nveston\nvétéran\nvétuste\nvexant\nvexer\nviaduc\nviande\nvictoire\nvidange\nvidéo\nvignette\nvigueur\nvilain\nvillage\nvinaigre\nviolon\nvipère\nvirement\nvirtuose\nvirus\nvisage\nviseur\nvision\nvisqueux\nvisuel\nvital\nvitesse\nviticole\nvitrine\nvivace\nvivipare\nvocation\nvoguer\nvoile\nvoisin\nvoiture\nvolaille\nvolcan\nvoltiger\nvolume\nvorace\nvortex\nvoter\nvouloir\nvoyage\nvoyelle\nwagon\nxénon\nyacht\nzèbre\nzénith\nzeste\nzoologie`.split('\\n');\n", "export const wordlist = `abaco\nabbaglio\nabbinato\nabete\nabisso\nabolire\nabrasivo\nabrogato\naccadere\naccenno\naccusato\nacetone\nachille\nacido\nacqua\nacre\nacrilico\nacrobata\nacuto\nadagio\naddebito\naddome\nadeguato\naderire\nadipe\nadottare\nadulare\naffabile\naffetto\naffisso\naffranto\naforisma\nafoso\nafricano\nagave\nagente\nagevole\naggancio\nagire\nagitare\nagonismo\nagricolo\nagrumeto\naguzzo\nalabarda\nalato\nalbatro\nalberato\nalbo\nalbume\nalce\nalcolico\nalettone\nalfa\nalgebra\naliante\nalibi\nalimento\nallagato\nallegro\nallievo\nallodola\nallusivo\nalmeno\nalogeno\nalpaca\nalpestre\naltalena\nalterno\nalticcio\naltrove\nalunno\nalveolo\nalzare\namalgama\namanita\namarena\nambito\nambrato\nameba\namerica\nametista\namico\nammasso\nammenda\nammirare\nammonito\namore\nampio\nampliare\namuleto\nanacardo\nanagrafe\nanalista\nanarchia\nanatra\nanca\nancella\nancora\nandare\nandrea\nanello\nangelo\nangolare\nangusto\nanima\nannegare\nannidato\nanno\nannuncio\nanonimo\nanticipo\nanzi\napatico\napertura\napode\napparire\nappetito\nappoggio\napprodo\nappunto\naprile\narabica\narachide\naragosta\naraldica\narancio\naratura\narazzo\narbitro\narchivio\nardito\narenile\nargento\nargine\narguto\naria\narmonia\narnese\narredato\narringa\narrosto\narsenico\narso\nartefice\narzillo\nasciutto\nascolto\nasepsi\nasettico\nasfalto\nasino\nasola\naspirato\naspro\nassaggio\nasse\nassoluto\nassurdo\nasta\nastenuto\nastice\nastratto\natavico\nateismo\natomico\natono\nattesa\nattivare\nattorno\nattrito\nattuale\nausilio\naustria\nautista\nautonomo\nautunno\navanzato\navere\navvenire\navviso\navvolgere\nazione\nazoto\nazzimo\nazzurro\nbabele\nbaccano\nbacino\nbaco\nbadessa\nbadilata\nbagnato\nbaita\nbalcone\nbaldo\nbalena\nballata\nbalzano\nbambino\nbandire\nbaraonda\nbarbaro\nbarca\nbaritono\nbarlume\nbarocco\nbasilico\nbasso\nbatosta\nbattuto\nbaule\nbava\nbavosa\nbecco\nbeffa\nbelgio\nbelva\nbenda\nbenevole\nbenigno\nbenzina\nbere\nberlina\nbeta\nbibita\nbici\nbidone\nbifido\nbiga\nbilancia\nbimbo\nbinocolo\nbiologo\nbipede\nbipolare\nbirbante\nbirra\nbiscotto\nbisesto\nbisnonno\nbisonte\nbisturi\nbizzarro\nblando\nblatta\nbollito\nbonifico\nbordo\nbosco\nbotanico\nbottino\nbozzolo\nbraccio\nbradipo\nbrama\nbranca\nbravura\nbretella\nbrevetto\nbrezza\nbriglia\nbrillante\nbrindare\nbroccolo\nbrodo\nbronzina\nbrullo\nbruno\nbubbone\nbuca\nbudino\nbuffone\nbuio\nbulbo\nbuono\nburlone\nburrasca\nbussola\nbusta\ncadetto\ncaduco\ncalamaro\ncalcolo\ncalesse\ncalibro\ncalmo\ncaloria\ncambusa\ncamerata\ncamicia\ncammino\ncamola\ncampale\ncanapa\ncandela\ncane\ncanino\ncanotto\ncantina\ncapace\ncapello\ncapitolo\ncapogiro\ncappero\ncapra\ncapsula\ncarapace\ncarcassa\ncardo\ncarisma\ncarovana\ncarretto\ncartolina\ncasaccio\ncascata\ncaserma\ncaso\ncassone\ncastello\ncasuale\ncatasta\ncatena\ncatrame\ncauto\ncavillo\ncedibile\ncedrata\ncefalo\ncelebre\ncellulare\ncena\ncenone\ncentesimo\nceramica\ncercare\ncerto\ncerume\ncervello\ncesoia\ncespo\nceto\nchela\nchiaro\nchicca\nchiedere\nchimera\nchina\nchirurgo\nchitarra\nciao\nciclismo\ncifrare\ncigno\ncilindro\nciottolo\ncirca\ncirrosi\ncitrico\ncittadino\nciuffo\ncivetta\ncivile\nclassico\nclinica\ncloro\ncocco\ncodardo\ncodice\ncoerente\ncognome\ncollare\ncolmato\ncolore\ncolposo\ncoltivato\ncolza\ncoma\ncometa\ncommando\ncomodo\ncomputer\ncomune\nconciso\ncondurre\nconferma\ncongelare\nconiuge\nconnesso\nconoscere\nconsumo\ncontinuo\nconvegno\ncoperto\ncopione\ncoppia\ncopricapo\ncorazza\ncordata\ncoricato\ncornice\ncorolla\ncorpo\ncorredo\ncorsia\ncortese\ncosmico\ncostante\ncottura\ncovato\ncratere\ncravatta\ncreato\ncredere\ncremoso\ncrescita\ncreta\ncriceto\ncrinale\ncrisi\ncritico\ncroce\ncronaca\ncrostata\ncruciale\ncrusca\ncucire\ncuculo\ncugino\ncullato\ncupola\ncuratore\ncursore\ncurvo\ncuscino\ncustode\ndado\ndaino\ndalmata\ndamerino\ndaniela\ndannoso\ndanzare\ndatato\ndavanti\ndavvero\ndebutto\ndecennio\ndeciso\ndeclino\ndecollo\ndecreto\ndedicato\ndefinito\ndeforme\ndegno\ndelegare\ndelfino\ndelirio\ndelta\ndemenza\ndenotato\ndentro\ndeposito\nderapata\nderivare\nderoga\ndescritto\ndeserto\ndesiderio\ndesumere\ndetersivo\ndevoto\ndiametro\ndicembre\ndiedro\ndifeso\ndiffuso\ndigerire\ndigitale\ndiluvio\ndinamico\ndinnanzi\ndipinto\ndiploma\ndipolo\ndiradare\ndire\ndirotto\ndirupo\ndisagio\ndiscreto\ndisfare\ndisgelo\ndisposto\ndistanza\ndisumano\ndito\ndivano\ndivelto\ndividere\ndivorato\ndoblone\ndocente\ndoganale\ndogma\ndolce\ndomato\ndomenica\ndominare\ndondolo\ndono\ndormire\ndote\ndottore\ndovuto\ndozzina\ndrago\ndruido\ndubbio\ndubitare\nducale\nduna\nduomo\nduplice\nduraturo\nebano\neccesso\necco\neclissi\neconomia\nedera\nedicola\nedile\neditoria\neducare\negemonia\negli\negoismo\negregio\nelaborato\nelargire\nelegante\nelencato\neletto\nelevare\nelfico\nelica\nelmo\nelsa\neluso\nemanato\nemblema\nemesso\nemiro\nemotivo\nemozione\nempirico\nemulo\nendemico\nenduro\nenergia\nenfasi\nenoteca\nentrare\nenzima\nepatite\nepilogo\nepisodio\nepocale\neppure\nequatore\nerario\nerba\nerboso\nerede\neremita\nerigere\nermetico\neroe\nerosivo\nerrante\nesagono\nesame\nesanime\nesaudire\nesca\nesempio\nesercito\nesibito\nesigente\nesistere\nesito\nesofago\nesortato\nesoso\nespanso\nespresso\nessenza\nesso\nesteso\nestimare\nestonia\nestroso\nesultare\netilico\netnico\netrusco\netto\neuclideo\neuropa\nevaso\nevidenza\nevitato\nevoluto\nevviva\nfabbrica\nfaccenda\nfachiro\nfalco\nfamiglia\nfanale\nfanfara\nfango\nfantasma\nfare\nfarfalla\nfarinoso\nfarmaco\nfascia\nfastoso\nfasullo\nfaticare\nfato\nfavoloso\nfebbre\nfecola\nfede\nfegato\nfelpa\nfeltro\nfemmina\nfendere\nfenomeno\nfermento\nferro\nfertile\nfessura\nfestivo\nfetta\nfeudo\nfiaba\nfiducia\nfifa\nfigurato\nfilo\nfinanza\nfinestra\nfinire\nfiore\nfiscale\nfisico\nfiume\nflacone\nflamenco\nflebo\nflemma\nflorido\nfluente\nfluoro\nfobico\nfocaccia\nfocoso\nfoderato\nfoglio\nfolata\nfolclore\nfolgore\nfondente\nfonetico\nfonia\nfontana\nforbito\nforchetta\nforesta\nformica\nfornaio\nforo\nfortezza\nforzare\nfosfato\nfosso\nfracasso\nfrana\nfrassino\nfratello\nfreccetta\nfrenata\nfresco\nfrigo\nfrollino\nfronde\nfrugale\nfrutta\nfucilata\nfucsia\nfuggente\nfulmine\nfulvo\nfumante\nfumetto\nfumoso\nfune\nfunzione\nfuoco\nfurbo\nfurgone\nfurore\nfuso\nfutile\ngabbiano\ngaffe\ngalateo\ngallina\ngaloppo\ngambero\ngamma\ngaranzia\ngarbo\ngarofano\ngarzone\ngasdotto\ngasolio\ngastrico\ngatto\ngaudio\ngazebo\ngazzella\ngeco\ngelatina\ngelso\ngemello\ngemmato\ngene\ngenitore\ngennaio\ngenotipo\ngergo\nghepardo\nghiaccio\nghisa\ngiallo\ngilda\nginepro\ngiocare\ngioiello\ngiorno\ngiove\ngirato\ngirone\ngittata\ngiudizio\ngiurato\ngiusto\nglobulo\nglutine\ngnomo\ngobba\ngolf\ngomito\ngommone\ngonfio\ngonna\ngoverno\ngracile\ngrado\ngrafico\ngrammo\ngrande\ngrattare\ngravoso\ngrazia\ngreca\ngregge\ngrifone\ngrigio\ngrinza\ngrotta\ngruppo\nguadagno\nguaio\nguanto\nguardare\ngufo\nguidare\nibernato\nicona\nidentico\nidillio\nidolo\nidra\nidrico\nidrogeno\nigiene\nignaro\nignorato\nilare\nilleso\nillogico\nilludere\nimballo\nimbevuto\nimbocco\nimbuto\nimmane\nimmerso\nimmolato\nimpacco\nimpeto\nimpiego\nimporto\nimpronta\ninalare\ninarcare\ninattivo\nincanto\nincendio\ninchino\nincisivo\nincluso\nincontro\nincrocio\nincubo\nindagine\nindia\nindole\ninedito\ninfatti\ninfilare\ninflitto\ningaggio\ningegno\ninglese\ningordo\ningrosso\ninnesco\ninodore\ninoltrare\ninondato\ninsano\ninsetto\ninsieme\ninsonnia\ninsulina\nintasato\nintero\nintonaco\nintuito\ninumidire\ninvalido\ninvece\ninvito\niperbole\nipnotico\nipotesi\nippica\niride\nirlanda\nironico\nirrigato\nirrorare\nisolato\nisotopo\nisterico\nistituto\nistrice\nitalia\niterare\nlabbro\nlabirinto\nlacca\nlacerato\nlacrima\nlacuna\nladdove\nlago\nlampo\nlancetta\nlanterna\nlardoso\nlarga\nlaringe\nlastra\nlatenza\nlatino\nlattuga\nlavagna\nlavoro\nlegale\nleggero\nlembo\nlentezza\nlenza\nleone\nlepre\nlesivo\nlessato\nlesto\nletterale\nleva\nlevigato\nlibero\nlido\nlievito\nlilla\nlimatura\nlimitare\nlimpido\nlineare\nlingua\nliquido\nlira\nlirica\nlisca\nlite\nlitigio\nlivrea\nlocanda\nlode\nlogica\nlombare\nlondra\nlongevo\nloquace\nlorenzo\nloto\nlotteria\nluce\nlucidato\nlumaca\nluminoso\nlungo\nlupo\nluppolo\nlusinga\nlusso\nlutto\nmacabro\nmacchina\nmacero\nmacinato\nmadama\nmagico\nmaglia\nmagnete\nmagro\nmaiolica\nmalafede\nmalgrado\nmalinteso\nmalsano\nmalto\nmalumore\nmana\nmancia\nmandorla\nmangiare\nmanifesto\nmannaro\nmanovra\nmansarda\nmantide\nmanubrio\nmappa\nmaratona\nmarcire\nmaretta\nmarmo\nmarsupio\nmaschera\nmassaia\nmastino\nmaterasso\nmatricola\nmattone\nmaturo\nmazurca\nmeandro\nmeccanico\nmecenate\nmedesimo\nmeditare\nmega\nmelassa\nmelis\nmelodia\nmeninge\nmeno\nmensola\nmercurio\nmerenda\nmerlo\nmeschino\nmese\nmessere\nmestolo\nmetallo\nmetodo\nmettere\nmiagolare\nmica\nmicelio\nmichele\nmicrobo\nmidollo\nmiele\nmigliore\nmilano\nmilite\nmimosa\nminerale\nmini\nminore\nmirino\nmirtillo\nmiscela\nmissiva\nmisto\nmisurare\nmitezza\nmitigare\nmitra\nmittente\nmnemonico\nmodello\nmodifica\nmodulo\nmogano\nmogio\nmole\nmolosso\nmonastero\nmonco\nmondina\nmonetario\nmonile\nmonotono\nmonsone\nmontato\nmonviso\nmora\nmordere\nmorsicato\nmostro\nmotivato\nmotosega\nmotto\nmovenza\nmovimento\nmozzo\nmucca\nmucosa\nmuffa\nmughetto\nmugnaio\nmulatto\nmulinello\nmultiplo\nmummia\nmunto\nmuovere\nmurale\nmusa\nmuscolo\nmusica\nmutevole\nmuto\nnababbo\nnafta\nnanometro\nnarciso\nnarice\nnarrato\nnascere\nnastrare\nnaturale\nnautica\nnaviglio\nnebulosa\nnecrosi\nnegativo\nnegozio\nnemmeno\nneofita\nneretto\nnervo\nnessuno\nnettuno\nneutrale\nneve\nnevrotico\nnicchia\nninfa\nnitido\nnobile\nnocivo\nnodo\nnome\nnomina\nnordico\nnormale\nnorvegese\nnostrano\nnotare\nnotizia\nnotturno\nnovella\nnucleo\nnulla\nnumero\nnuovo\nnutrire\nnuvola\nnuziale\noasi\nobbedire\nobbligo\nobelisco\noblio\nobolo\nobsoleto\noccasione\nocchio\noccidente\noccorrere\noccultare\nocra\noculato\nodierno\nodorare\nofferta\noffrire\noffuscato\noggetto\noggi\nognuno\nolandese\nolfatto\noliato\noliva\nologramma\noltre\nomaggio\nombelico\nombra\nomega\nomissione\nondoso\nonere\nonice\nonnivoro\nonorevole\nonta\noperato\nopinione\nopposto\noracolo\norafo\nordine\norecchino\norefice\norfano\norganico\norigine\norizzonte\norma\normeggio\nornativo\norologio\norrendo\norribile\nortensia\nortica\norzata\norzo\nosare\noscurare\nosmosi\nospedale\nospite\nossa\nossidare\nostacolo\noste\notite\notre\nottagono\nottimo\nottobre\novale\novest\novino\noviparo\novocito\novunque\novviare\nozio\npacchetto\npace\npacifico\npadella\npadrone\npaese\npaga\npagina\npalazzina\npalesare\npallido\npalo\npalude\npandoro\npannello\npaolo\npaonazzo\npaprica\nparabola\nparcella\nparere\npargolo\npari\nparlato\nparola\npartire\nparvenza\nparziale\npassivo\npasticca\npatacca\npatologia\npattume\npavone\npeccato\npedalare\npedonale\npeggio\npeloso\npenare\npendice\npenisola\npennuto\npenombra\npensare\npentola\npepe\npepita\nperbene\npercorso\nperdonato\nperforare\npergamena\nperiodo\npermesso\nperno\nperplesso\npersuaso\npertugio\npervaso\npesatore\npesista\npeso\npestifero\npetalo\npettine\npetulante\npezzo\npiacere\npianta\npiattino\npiccino\npicozza\npiega\npietra\npiffero\npigiama\npigolio\npigro\npila\npilifero\npillola\npilota\npimpante\npineta\npinna\npinolo\npioggia\npiombo\npiramide\npiretico\npirite\npirolisi\npitone\npizzico\nplacebo\nplanare\nplasma\nplatano\nplenario\npochezza\npoderoso\npodismo\npoesia\npoggiare\npolenta\npoligono\npollice\npolmonite\npolpetta\npolso\npoltrona\npolvere\npomice\npomodoro\nponte\npopoloso\nporfido\nporoso\nporpora\nporre\nportata\nposa\npositivo\npossesso\npostulato\npotassio\npotere\npranzo\nprassi\npratica\nprecluso\npredica\nprefisso\npregiato\nprelievo\npremere\nprenotare\npreparato\npresenza\npretesto\nprevalso\nprima\nprincipe\nprivato\nproblema\nprocura\nprodurre\nprofumo\nprogetto\nprolunga\npromessa\npronome\nproposta\nproroga\nproteso\nprova\nprudente\nprugna\nprurito\npsiche\npubblico\npudica\npugilato\npugno\npulce\npulito\npulsante\npuntare\npupazzo\npupilla\npuro\nquadro\nqualcosa\nquasi\nquerela\nquota\nraccolto\nraddoppio\nradicale\nradunato\nraffica\nragazzo\nragione\nragno\nramarro\nramingo\nramo\nrandagio\nrantolare\nrapato\nrapina\nrappreso\nrasatura\nraschiato\nrasente\nrassegna\nrastrello\nrata\nravveduto\nreale\nrecepire\nrecinto\nrecluta\nrecondito\nrecupero\nreddito\nredimere\nregalato\nregistro\nregola\nregresso\nrelazione\nremare\nremoto\nrenna\nreplica\nreprimere\nreputare\nresa\nresidente\nresponso\nrestauro\nrete\nretina\nretorica\nrettifica\nrevocato\nriassunto\nribadire\nribelle\nribrezzo\nricarica\nricco\nricevere\nriciclato\nricordo\nricreduto\nridicolo\nridurre\nrifasare\nriflesso\nriforma\nrifugio\nrigare\nrigettato\nrighello\nrilassato\nrilevato\nrimanere\nrimbalzo\nrimedio\nrimorchio\nrinascita\nrincaro\nrinforzo\nrinnovo\nrinomato\nrinsavito\nrintocco\nrinuncia\nrinvenire\nriparato\nripetuto\nripieno\nriportare\nripresa\nripulire\nrisata\nrischio\nriserva\nrisibile\nriso\nrispetto\nristoro\nrisultato\nrisvolto\nritardo\nritegno\nritmico\nritrovo\nriunione\nriva\nriverso\nrivincita\nrivolto\nrizoma\nroba\nrobotico\nrobusto\nroccia\nroco\nrodaggio\nrodere\nroditore\nrogito\nrollio\nromantico\nrompere\nronzio\nrosolare\nrospo\nrotante\nrotondo\nrotula\nrovescio\nrubizzo\nrubrica\nruga\nrullino\nrumine\nrumoroso\nruolo\nrupe\nrussare\nrustico\nsabato\nsabbiare\nsabotato\nsagoma\nsalasso\nsaldatura\nsalgemma\nsalivare\nsalmone\nsalone\nsaltare\nsaluto\nsalvo\nsapere\nsapido\nsaporito\nsaraceno\nsarcasmo\nsarto\nsassoso\nsatellite\nsatira\nsatollo\nsaturno\nsavana\nsavio\nsaziato\nsbadiglio\nsbalzo\nsbancato\nsbarra\nsbattere\nsbavare\nsbendare\nsbirciare\nsbloccato\nsbocciato\nsbrinare\nsbruffone\nsbuffare\nscabroso\nscadenza\nscala\nscambiare\nscandalo\nscapola\nscarso\nscatenare\nscavato\nscelto\nscenico\nscettro\nscheda\nschiena\nsciarpa\nscienza\nscindere\nscippo\nsciroppo\nscivolo\nsclerare\nscodella\nscolpito\nscomparto\nsconforto\nscoprire\nscorta\nscossone\nscozzese\nscriba\nscrollare\nscrutinio\nscuderia\nscultore\nscuola\nscuro\nscusare\nsdebitare\nsdoganare\nseccatura\nsecondo\nsedano\nseggiola\nsegnalato\nsegregato\nseguito\nselciato\nselettivo\nsella\nselvaggio\nsemaforo\nsembrare\nseme\nseminato\nsempre\nsenso\nsentire\nsepolto\nsequenza\nserata\nserbato\nsereno\nserio\nserpente\nserraglio\nservire\nsestina\nsetola\nsettimana\nsfacelo\nsfaldare\nsfamato\nsfarzoso\nsfaticato\nsfera\nsfida\nsfilato\nsfinge\nsfocato\nsfoderare\nsfogo\nsfoltire\nsforzato\nsfratto\nsfruttato\nsfuggito\nsfumare\nsfuso\nsgabello\nsgarbato\nsgonfiare\nsgorbio\nsgrassato\nsguardo\nsibilo\nsiccome\nsierra\nsigla\nsignore\nsilenzio\nsillaba\nsimbolo\nsimpatico\nsimulato\nsinfonia\nsingolo\nsinistro\nsino\nsintesi\nsinusoide\nsipario\nsisma\nsistole\nsituato\nslitta\nslogatura\nsloveno\nsmarrito\nsmemorato\nsmentito\nsmeraldo\nsmilzo\nsmontare\nsmottato\nsmussato\nsnellire\nsnervato\nsnodo\nsobbalzo\nsobrio\nsoccorso\nsociale\nsodale\nsoffitto\nsogno\nsoldato\nsolenne\nsolido\nsollazzo\nsolo\nsolubile\nsolvente\nsomatico\nsomma\nsonda\nsonetto\nsonnifero\nsopire\nsoppeso\nsopra\nsorgere\nsorpasso\nsorriso\nsorso\nsorteggio\nsorvolato\nsospiro\nsosta\nsottile\nspada\nspalla\nspargere\nspatola\nspavento\nspazzola\nspecie\nspedire\nspegnere\nspelatura\nsperanza\nspessore\nspettrale\nspezzato\nspia\nspigoloso\nspillato\nspinoso\nspirale\nsplendido\nsportivo\nsposo\nspranga\nsprecare\nspronato\nspruzzo\nspuntino\nsquillo\nsradicare\nsrotolato\nstabile\nstacco\nstaffa\nstagnare\nstampato\nstantio\nstarnuto\nstasera\nstatuto\nstelo\nsteppa\nsterzo\nstiletto\nstima\nstirpe\nstivale\nstizzoso\nstonato\nstorico\nstrappo\nstregato\nstridulo\nstrozzare\nstrutto\nstuccare\nstufo\nstupendo\nsubentro\nsuccoso\nsudore\nsuggerito\nsugo\nsultano\nsuonare\nsuperbo\nsupporto\nsurgelato\nsurrogato\nsussurro\nsutura\nsvagare\nsvedese\nsveglio\nsvelare\nsvenuto\nsvezia\nsviluppo\nsvista\nsvizzera\nsvolta\nsvuotare\ntabacco\ntabulato\ntacciare\ntaciturno\ntale\ntalismano\ntampone\ntannino\ntara\ntardivo\ntargato\ntariffa\ntarpare\ntartaruga\ntasto\ntattico\ntaverna\ntavolata\ntazza\nteca\ntecnico\ntelefono\ntemerario\ntempo\ntemuto\ntendone\ntenero\ntensione\ntentacolo\nteorema\nterme\nterrazzo\nterzetto\ntesi\ntesserato\ntestato\ntetro\ntettoia\ntifare\ntigella\ntimbro\ntinto\ntipico\ntipografo\ntiraggio\ntiro\ntitanio\ntitolo\ntitubante\ntizio\ntizzone\ntoccare\ntollerare\ntolto\ntombola\ntomo\ntonfo\ntonsilla\ntopazio\ntopologia\ntoppa\ntorba\ntornare\ntorrone\ntortora\ntoscano\ntossire\ntostatura\ntotano\ntrabocco\ntrachea\ntrafila\ntragedia\ntralcio\ntramonto\ntransito\ntrapano\ntrarre\ntrasloco\ntrattato\ntrave\ntreccia\ntremolio\ntrespolo\ntributo\ntricheco\ntrifoglio\ntrillo\ntrincea\ntrio\ntristezza\ntriturato\ntrivella\ntromba\ntrono\ntroppo\ntrottola\ntrovare\ntruccato\ntubatura\ntuffato\ntulipano\ntumulto\ntunisia\nturbare\nturchino\ntuta\ntutela\nubicato\nuccello\nuccisore\nudire\nuditivo\nuffa\nufficio\nuguale\nulisse\nultimato\numano\numile\numorismo\nuncinetto\nungere\nungherese\nunicorno\nunificato\nunisono\nunitario\nunte\nuovo\nupupa\nuragano\nurgenza\nurlo\nusanza\nusato\nuscito\nusignolo\nusuraio\nutensile\nutilizzo\nutopia\nvacante\nvaccinato\nvagabondo\nvagliato\nvalanga\nvalgo\nvalico\nvalletta\nvaloroso\nvalutare\nvalvola\nvampata\nvangare\nvanitoso\nvano\nvantaggio\nvanvera\nvapore\nvarano\nvarcato\nvariante\nvasca\nvedetta\nvedova\nveduto\nvegetale\nveicolo\nvelcro\nvelina\nvelluto\nveloce\nvenato\nvendemmia\nvento\nverace\nverbale\nvergogna\nverifica\nvero\nverruca\nverticale\nvescica\nvessillo\nvestale\nveterano\nvetrina\nvetusto\nviandante\nvibrante\nvicenda\nvichingo\nvicinanza\nvidimare\nvigilia\nvigneto\nvigore\nvile\nvillano\nvimini\nvincitore\nviola\nvipera\nvirgola\nvirologo\nvirulento\nviscoso\nvisione\nvispo\nvissuto\nvisura\nvita\nvitello\nvittima\nvivanda\nvivido\nviziare\nvoce\nvoga\nvolatile\nvolere\nvolpe\nvoragine\nvulcano\nzampogna\nzanna\nzappato\nzattera\nzavorra\nzefiro\nzelante\nzelo\nzenzero\nzerbino\nzibetto\nzinco\nzircone\nzitto\nzolla\nzotico\nzucchero\nzufolo\nzulu\nzuppa`.split('\\n');\n", "export const wordlist = `あいこくしん\nあいさつ\nあいだ\nあおぞら\nあかちゃん\nあきる\nあけがた\nあける\nあこがれる\nあさい\nあさひ\nあしあと\nあじわう\nあずかる\nあずき\nあそぶ\nあたえる\nあたためる\nあたりまえ\nあたる\nあつい\nあつかう\nあっしゅく\nあつまり\nあつめる\nあてな\nあてはまる\nあひる\nあぶら\nあぶる\nあふれる\nあまい\nあまど\nあまやかす\nあまり\nあみもの\nあめりか\nあやまる\nあゆむ\nあらいぐま\nあらし\nあらすじ\nあらためる\nあらゆる\nあらわす\nありがとう\nあわせる\nあわてる\nあんい\nあんがい\nあんこ\nあんぜん\nあんてい\nあんない\nあんまり\nいいだす\nいおん\nいがい\nいがく\nいきおい\nいきなり\nいきもの\nいきる\nいくじ\nいくぶん\nいけばな\nいけん\nいこう\nいこく\nいこつ\nいさましい\nいさん\nいしき\nいじゅう\nいじょう\nいじわる\nいずみ\nいずれ\nいせい\nいせえび\nいせかい\nいせき\nいぜん\nいそうろう\nいそがしい\nいだい\nいだく\nいたずら\nいたみ\nいたりあ\nいちおう\nいちじ\nいちど\nいちば\nいちぶ\nいちりゅう\nいつか\nいっしゅん\nいっせい\nいっそう\nいったん\nいっち\nいってい\nいっぽう\nいてざ\nいてん\nいどう\nいとこ\nいない\nいなか\nいねむり\nいのち\nいのる\nいはつ\nいばる\nいはん\nいびき\nいひん\nいふく\nいへん\nいほう\nいみん\nいもうと\nいもたれ\nいもり\nいやがる\nいやす\nいよかん\nいよく\nいらい\nいらすと\nいりぐち\nいりょう\nいれい\nいれもの\nいれる\nいろえんぴつ\nいわい\nいわう\nいわかん\nいわば\nいわゆる\nいんげんまめ\nいんさつ\nいんしょう\nいんよう\nうえき\nうえる\nうおざ\nうがい\nうかぶ\nうかべる\nうきわ\nうくらいな\nうくれれ\nうけたまわる\nうけつけ\nうけとる\nうけもつ\nうける\nうごかす\nうごく\nうこん\nうさぎ\nうしなう\nうしろがみ\nうすい\nうすぎ\nうすぐらい\nうすめる\nうせつ\nうちあわせ\nうちがわ\nうちき\nうちゅう\nうっかり\nうつくしい\nうったえる\nうつる\nうどん\nうなぎ\nうなじ\nうなずく\nうなる\nうねる\nうのう\nうぶげ\nうぶごえ\nうまれる\nうめる\nうもう\nうやまう\nうよく\nうらがえす\nうらぐち\nうらない\nうりあげ\nうりきれ\nうるさい\nうれしい\nうれゆき\nうれる\nうろこ\nうわき\nうわさ\nうんこう\nうんちん\nうんてん\nうんどう\nえいえん\nえいが\nえいきょう\nえいご\nえいせい\nえいぶん\nえいよう\nえいわ\nえおり\nえがお\nえがく\nえきたい\nえくせる\nえしゃく\nえすて\nえつらん\nえのぐ\nえほうまき\nえほん\nえまき\nえもじ\nえもの\nえらい\nえらぶ\nえりあ\nえんえん\nえんかい\nえんぎ\nえんげき\nえんしゅう\nえんぜつ\nえんそく\nえんちょう\nえんとつ\nおいかける\nおいこす\nおいしい\nおいつく\nおうえん\nおうさま\nおうじ\nおうせつ\nおうたい\nおうふく\nおうべい\nおうよう\nおえる\nおおい\nおおう\nおおどおり\nおおや\nおおよそ\nおかえり\nおかず\nおがむ\nおかわり\nおぎなう\nおきる\nおくさま\nおくじょう\nおくりがな\nおくる\nおくれる\nおこす\nおこなう\nおこる\nおさえる\nおさない\nおさめる\nおしいれ\nおしえる\nおじぎ\nおじさん\nおしゃれ\nおそらく\nおそわる\nおたがい\nおたく\nおだやか\nおちつく\nおっと\nおつり\nおでかけ\nおとしもの\nおとなしい\nおどり\nおどろかす\nおばさん\nおまいり\nおめでとう\nおもいで\nおもう\nおもたい\nおもちゃ\nおやつ\nおやゆび\nおよぼす\nおらんだ\nおろす\nおんがく\nおんけい\nおんしゃ\nおんせん\nおんだん\nおんちゅう\nおんどけい\nかあつ\nかいが\nがいき\nがいけん\nがいこう\nかいさつ\nかいしゃ\nかいすいよく\nかいぜん\nかいぞうど\nかいつう\nかいてん\nかいとう\nかいふく\nがいへき\nかいほう\nかいよう\nがいらい\nかいわ\nかえる\nかおり\nかかえる\nかがく\nかがし\nかがみ\nかくご\nかくとく\nかざる\nがぞう\nかたい\nかたち\nがちょう\nがっきゅう\nがっこう\nがっさん\nがっしょう\nかなざわし\nかのう\nがはく\nかぶか\nかほう\nかほご\nかまう\nかまぼこ\nかめれおん\nかゆい\nかようび\nからい\nかるい\nかろう\nかわく\nかわら\nがんか\nかんけい\nかんこう\nかんしゃ\nかんそう\nかんたん\nかんち\nがんばる\nきあい\nきあつ\nきいろ\nぎいん\nきうい\nきうん\nきえる\nきおう\nきおく\nきおち\nきおん\nきかい\nきかく\nきかんしゃ\nききて\nきくばり\nきくらげ\nきけんせい\nきこう\nきこえる\nきこく\nきさい\nきさく\nきさま\nきさらぎ\nぎじかがく\nぎしき\nぎじたいけん\nぎじにってい\nぎじゅつしゃ\nきすう\nきせい\nきせき\nきせつ\nきそう\nきぞく\nきぞん\nきたえる\nきちょう\nきつえん\nぎっちり\nきつつき\nきつね\nきてい\nきどう\nきどく\nきない\nきなが\nきなこ\nきぬごし\nきねん\nきのう\nきのした\nきはく\nきびしい\nきひん\nきふく\nきぶん\nきぼう\nきほん\nきまる\nきみつ\nきむずかしい\nきめる\nきもだめし\nきもち\nきもの\nきゃく\nきやく\nぎゅうにく\nきよう\nきょうりゅう\nきらい\nきらく\nきりん\nきれい\nきれつ\nきろく\nぎろん\nきわめる\nぎんいろ\nきんかくじ\nきんじょ\nきんようび\nぐあい\nくいず\nくうかん\nくうき\nくうぐん\nくうこう\nぐうせい\nくうそう\nぐうたら\nくうふく\nくうぼ\nくかん\nくきょう\nくげん\nぐこう\nくさい\nくさき\nくさばな\nくさる\nくしゃみ\nくしょう\nくすのき\nくすりゆび\nくせげ\nくせん\nぐたいてき\nくださる\nくたびれる\nくちこみ\nくちさき\nくつした\nぐっすり\nくつろぐ\nくとうてん\nくどく\nくなん\nくねくね\nくのう\nくふう\nくみあわせ\nくみたてる\nくめる\nくやくしょ\nくらす\nくらべる\nくるま\nくれる\nくろう\nくわしい\nぐんかん\nぐんしょく\nぐんたい\nぐんて\nけあな\nけいかく\nけいけん\nけいこ\nけいさつ\nげいじゅつ\nけいたい\nげいのうじん\nけいれき\nけいろ\nけおとす\nけおりもの\nげきか\nげきげん\nげきだん\nげきちん\nげきとつ\nげきは\nげきやく\nげこう\nげこくじょう\nげざい\nけさき\nげざん\nけしき\nけしごむ\nけしょう\nげすと\nけたば\nけちゃっぷ\nけちらす\nけつあつ\nけつい\nけつえき\nけっこん\nけつじょ\nけっせき\nけってい\nけつまつ\nげつようび\nげつれい\nけつろん\nげどく\nけとばす\nけとる\nけなげ\nけなす\nけなみ\nけぬき\nげねつ\nけねん\nけはい\nげひん\nけぶかい\nげぼく\nけまり\nけみかる\nけむし\nけむり\nけもの\nけらい\nけろけろ\nけわしい\nけんい\nけんえつ\nけんお\nけんか\nげんき\nけんげん\nけんこう\nけんさく\nけんしゅう\nけんすう\nげんそう\nけんちく\nけんてい\nけんとう\nけんない\nけんにん\nげんぶつ\nけんま\nけんみん\nけんめい\nけんらん\nけんり\nこあくま\nこいぬ\nこいびと\nごうい\nこうえん\nこうおん\nこうかん\nごうきゅう\nごうけい\nこうこう\nこうさい\nこうじ\nこうすい\nごうせい\nこうそく\nこうたい\nこうちゃ\nこうつう\nこうてい\nこうどう\nこうない\nこうはい\nごうほう\nごうまん\nこうもく\nこうりつ\nこえる\nこおり\nごかい\nごがつ\nごかん\nこくご\nこくさい\nこくとう\nこくない\nこくはく\nこぐま\nこけい\nこける\nここのか\nこころ\nこさめ\nこしつ\nこすう\nこせい\nこせき\nこぜん\nこそだて\nこたい\nこたえる\nこたつ\nこちょう\nこっか\nこつこつ\nこつばん\nこつぶ\nこてい\nこてん\nことがら\nことし\nことば\nことり\nこなごな\nこねこね\nこのまま\nこのみ\nこのよ\nごはん\nこひつじ\nこふう\nこふん\nこぼれる\nごまあぶら\nこまかい\nごますり\nこまつな\nこまる\nこむぎこ\nこもじ\nこもち\nこもの\nこもん\nこやく\nこやま\nこゆう\nこゆび\nこよい\nこよう\nこりる\nこれくしょん\nころっけ\nこわもて\nこわれる\nこんいん\nこんかい\nこんき\nこんしゅう\nこんすい\nこんだて\nこんとん\nこんなん\nこんびに\nこんぽん\nこんまけ\nこんや\nこんれい\nこんわく\nざいえき\nさいかい\nさいきん\nざいげん\nざいこ\nさいしょ\nさいせい\nざいたく\nざいちゅう\nさいてき\nざいりょう\nさうな\nさかいし\nさがす\nさかな\nさかみち\nさがる\nさぎょう\nさくし\nさくひん\nさくら\nさこく\nさこつ\nさずかる\nざせき\nさたん\nさつえい\nざつおん\nざっか\nざつがく\nさっきょく\nざっし\nさつじん\nざっそう\nさつたば\nさつまいも\nさてい\nさといも\nさとう\nさとおや\nさとし\nさとる\nさのう\nさばく\nさびしい\nさべつ\nさほう\nさほど\nさます\nさみしい\nさみだれ\nさむけ\nさめる\nさやえんどう\nさゆう\nさよう\nさよく\nさらだ\nざるそば\nさわやか\nさわる\nさんいん\nさんか\nさんきゃく\nさんこう\nさんさい\nざんしょ\nさんすう\nさんせい\nさんそ\nさんち\nさんま\nさんみ\nさんらん\nしあい\nしあげ\nしあさって\nしあわせ\nしいく\nしいん\nしうち\nしえい\nしおけ\nしかい\nしかく\nじかん\nしごと\nしすう\nじだい\nしたうけ\nしたぎ\nしたて\nしたみ\nしちょう\nしちりん\nしっかり\nしつじ\nしつもん\nしてい\nしてき\nしてつ\nじてん\nじどう\nしなぎれ\nしなもの\nしなん\nしねま\nしねん\nしのぐ\nしのぶ\nしはい\nしばかり\nしはつ\nしはらい\nしはん\nしひょう\nしふく\nじぶん\nしへい\nしほう\nしほん\nしまう\nしまる\nしみん\nしむける\nじむしょ\nしめい\nしめる\nしもん\nしゃいん\nしゃうん\nしゃおん\nじゃがいも\nしやくしょ\nしゃくほう\nしゃけん\nしゃこ\nしゃざい\nしゃしん\nしゃせん\nしゃそう\nしゃたい\nしゃちょう\nしゃっきん\nじゃま\nしゃりん\nしゃれい\nじゆう\nじゅうしょ\nしゅくはく\nじゅしん\nしゅっせき\nしゅみ\nしゅらば\nじゅんばん\nしょうかい\nしょくたく\nしょっけん\nしょどう\nしょもつ\nしらせる\nしらべる\nしんか\nしんこう\nじんじゃ\nしんせいじ\nしんちく\nしんりん\nすあげ\nすあし\nすあな\nずあん\nすいえい\nすいか\nすいとう\nずいぶん\nすいようび\nすうがく\nすうじつ\nすうせん\nすおどり\nすきま\nすくう\nすくない\nすける\nすごい\nすこし\nずさん\nすずしい\nすすむ\nすすめる\nすっかり\nずっしり\nずっと\nすてき\nすてる\nすねる\nすのこ\nすはだ\nすばらしい\nずひょう\nずぶぬれ\nすぶり\nすふれ\nすべて\nすべる\nずほう\nすぼん\nすまい\nすめし\nすもう\nすやき\nすらすら\nするめ\nすれちがう\nすろっと\nすわる\nすんぜん\nすんぽう\nせあぶら\nせいかつ\nせいげん\nせいじ\nせいよう\nせおう\nせかいかん\nせきにん\nせきむ\nせきゆ\nせきらんうん\nせけん\nせこう\nせすじ\nせたい\nせたけ\nせっかく\nせっきゃく\nぜっく\nせっけん\nせっこつ\nせっさたくま\nせつぞく\nせつだん\nせつでん\nせっぱん\nせつび\nせつぶん\nせつめい\nせつりつ\nせなか\nせのび\nせはば\nせびろ\nせぼね\nせまい\nせまる\nせめる\nせもたれ\nせりふ\nぜんあく\nせんい\nせんえい\nせんか\nせんきょ\nせんく\nせんげん\nぜんご\nせんさい\nせんしゅ\nせんすい\nせんせい\nせんぞ\nせんたく\nせんちょう\nせんてい\nせんとう\nせんぬき\nせんねん\nせんぱい\nぜんぶ\nぜんぽう\nせんむ\nせんめんじょ\nせんもん\nせんやく\nせんゆう\nせんよう\nぜんら\nぜんりゃく\nせんれい\nせんろ\nそあく\nそいとげる\nそいね\nそうがんきょう\nそうき\nそうご\nそうしん\nそうだん\nそうなん\nそうび\nそうめん\nそうり\nそえもの\nそえん\nそがい\nそげき\nそこう\nそこそこ\nそざい\nそしな\nそせい\nそせん\nそそぐ\nそだてる\nそつう\nそつえん\nそっかん\nそつぎょう\nそっけつ\nそっこう\nそっせん\nそっと\nそとがわ\nそとづら\nそなえる\nそなた\nそふぼ\nそぼく\nそぼろ\nそまつ\nそまる\nそむく\nそむりえ\nそめる\nそもそも\nそよかぜ\nそらまめ\nそろう\nそんかい\nそんけい\nそんざい\nそんしつ\nそんぞく\nそんちょう\nぞんび\nぞんぶん\nそんみん\nたあい\nたいいん\nたいうん\nたいえき\nたいおう\nだいがく\nたいき\nたいぐう\nたいけん\nたいこ\nたいざい\nだいじょうぶ\nだいすき\nたいせつ\nたいそう\nだいたい\nたいちょう\nたいてい\nだいどころ\nたいない\nたいねつ\nたいのう\nたいはん\nだいひょう\nたいふう\nたいへん\nたいほ\nたいまつばな\nたいみんぐ\nたいむ\nたいめん\nたいやき\nたいよう\nたいら\nたいりょく\nたいる\nたいわん\nたうえ\nたえる\nたおす\nたおる\nたおれる\nたかい\nたかね\nたきび\nたくさん\nたこく\nたこやき\nたさい\nたしざん\nだじゃれ\nたすける\nたずさわる\nたそがれ\nたたかう\nたたく\nただしい\nたたみ\nたちばな\nだっかい\nだっきゃく\nだっこ\nだっしゅつ\nだったい\nたてる\nたとえる\nたなばた\nたにん\nたぬき\nたのしみ\nたはつ\nたぶん\nたべる\nたぼう\nたまご\nたまる\nだむる\nためいき\nためす\nためる\nたもつ\nたやすい\nたよる\nたらす\nたりきほんがん\nたりょう\nたりる\nたると\nたれる\nたれんと\nたろっと\nたわむれる\nだんあつ\nたんい\nたんおん\nたんか\nたんき\nたんけん\nたんご\nたんさん\nたんじょうび\nだんせい\nたんそく\nたんたい\nだんち\nたんてい\nたんとう\nだんな\nたんにん\nだんねつ\nたんのう\nたんぴん\nだんぼう\nたんまつ\nたんめい\nだんれつ\nだんろ\nだんわ\nちあい\nちあん\nちいき\nちいさい\nちえん\nちかい\nちから\nちきゅう\nちきん\nちけいず\nちけん\nちこく\nちさい\nちしき\nちしりょう\nちせい\nちそう\nちたい\nちたん\nちちおや\nちつじょ\nちてき\nちてん\nちぬき\nちぬり\nちのう\nちひょう\nちへいせん\nちほう\nちまた\nちみつ\nちみどろ\nちめいど\nちゃんこなべ\nちゅうい\nちゆりょく\nちょうし\nちょさくけん\nちらし\nちらみ\nちりがみ\nちりょう\nちるど\nちわわ\nちんたい\nちんもく\nついか\nついたち\nつうか\nつうじょう\nつうはん\nつうわ\nつかう\nつかれる\nつくね\nつくる\nつけね\nつける\nつごう\nつたえる\nつづく\nつつじ\nつつむ\nつとめる\nつながる\nつなみ\nつねづね\nつのる\nつぶす\nつまらない\nつまる\nつみき\nつめたい\nつもり\nつもる\nつよい\nつるぼ\nつるみく\nつわもの\nつわり\nてあし\nてあて\nてあみ\nていおん\nていか\nていき\nていけい\nていこく\nていさつ\nていし\nていせい\nていたい\nていど\nていねい\nていひょう\nていへん\nていぼう\nてうち\nておくれ\nてきとう\nてくび\nでこぼこ\nてさぎょう\nてさげ\nてすり\nてそう\nてちがい\nてちょう\nてつがく\nてつづき\nでっぱ\nてつぼう\nてつや\nでぬかえ\nてぬき\nてぬぐい\nてのひら\nてはい\nてぶくろ\nてふだ\nてほどき\nてほん\nてまえ\nてまきずし\nてみじか\nてみやげ\nてらす\nてれび\nてわけ\nてわたし\nでんあつ\nてんいん\nてんかい\nてんき\nてんぐ\nてんけん\nてんごく\nてんさい\nてんし\nてんすう\nでんち\nてんてき\nてんとう\nてんない\nてんぷら\nてんぼうだい\nてんめつ\nてんらんかい\nでんりょく\nでんわ\nどあい\nといれ\nどうかん\nとうきゅう\nどうぐ\nとうし\nとうむぎ\nとおい\nとおか\nとおく\nとおす\nとおる\nとかい\nとかす\nときおり\nときどき\nとくい\nとくしゅう\nとくてん\nとくに\nとくべつ\nとけい\nとける\nとこや\nとさか\nとしょかん\nとそう\nとたん\nとちゅう\nとっきゅう\nとっくん\nとつぜん\nとつにゅう\nとどける\nととのえる\nとない\nとなえる\nとなり\nとのさま\nとばす\nどぶがわ\nとほう\nとまる\nとめる\nともだち\nともる\nどようび\nとらえる\nとんかつ\nどんぶり\nないかく\nないこう\nないしょ\nないす\nないせん\nないそう\nなおす\nながい\nなくす\nなげる\nなこうど\nなさけ\nなたでここ\nなっとう\nなつやすみ\nななおし\nなにごと\nなにもの\nなにわ\nなのか\nなふだ\nなまいき\nなまえ\nなまみ\nなみだ\nなめらか\nなめる\nなやむ\nならう\nならび\nならぶ\nなれる\nなわとび\nなわばり\nにあう\nにいがた\nにうけ\nにおい\nにかい\nにがて\nにきび\nにくしみ\nにくまん\nにげる\nにさんかたんそ\nにしき\nにせもの\nにちじょう\nにちようび\nにっか\nにっき\nにっけい\nにっこう\nにっさん\nにっしょく\nにっすう\nにっせき\nにってい\nになう\nにほん\nにまめ\nにもつ\nにやり\nにゅういん\nにりんしゃ\nにわとり\nにんい\nにんか\nにんき\nにんげん\nにんしき\nにんずう\nにんそう\nにんたい\nにんち\nにんてい\nにんにく\nにんぷ\nにんまり\nにんむ\nにんめい\nにんよう\nぬいくぎ\nぬかす\nぬぐいとる\nぬぐう\nぬくもり\nぬすむ\nぬまえび\nぬめり\nぬらす\nぬんちゃく\nねあげ\nねいき\nねいる\nねいろ\nねぐせ\nねくたい\nねくら\nねこぜ\nねこむ\nねさげ\nねすごす\nねそべる\nねだん\nねつい\nねっしん\nねつぞう\nねったいぎょ\nねぶそく\nねふだ\nねぼう\nねほりはほり\nねまき\nねまわし\nねみみ\nねむい\nねむたい\nねもと\nねらう\nねわざ\nねんいり\nねんおし\nねんかん\nねんきん\nねんぐ\nねんざ\nねんし\nねんちゃく\nねんど\nねんぴ\nねんぶつ\nねんまつ\nねんりょう\nねんれい\nのいず\nのおづま\nのがす\nのきなみ\nのこぎり\nのこす\nのこる\nのせる\nのぞく\nのぞむ\nのたまう\nのちほど\nのっく\nのばす\nのはら\nのべる\nのぼる\nのみもの\nのやま\nのらいぬ\nのらねこ\nのりもの\nのりゆき\nのれん\nのんき\nばあい\nはあく\nばあさん\nばいか\nばいく\nはいけん\nはいご\nはいしん\nはいすい\nはいせん\nはいそう\nはいち\nばいばい\nはいれつ\nはえる\nはおる\nはかい\nばかり\nはかる\nはくしゅ\nはけん\nはこぶ\nはさみ\nはさん\nはしご\nばしょ\nはしる\nはせる\nぱそこん\nはそん\nはたん\nはちみつ\nはつおん\nはっかく\nはづき\nはっきり\nはっくつ\nはっけん\nはっこう\nはっさん\nはっしん\nはったつ\nはっちゅう\nはってん\nはっぴょう\nはっぽう\nはなす\nはなび\nはにかむ\nはぶらし\nはみがき\nはむかう\nはめつ\nはやい\nはやし\nはらう\nはろうぃん\nはわい\nはんい\nはんえい\nはんおん\nはんかく\nはんきょう\nばんぐみ\nはんこ\nはんしゃ\nはんすう\nはんだん\nぱんち\nぱんつ\nはんてい\nはんとし\nはんのう\nはんぱ\nはんぶん\nはんぺん\nはんぼうき\nはんめい\nはんらん\nはんろん\nひいき\nひうん\nひえる\nひかく\nひかり\nひかる\nひかん\nひくい\nひけつ\nひこうき\nひこく\nひさい\nひさしぶり\nひさん\nびじゅつかん\nひしょ\nひそか\nひそむ\nひたむき\nひだり\nひたる\nひつぎ\nひっこし\nひっし\nひつじゅひん\nひっす\nひつぜん\nぴったり\nぴっちり\nひつよう\nひてい\nひとごみ\nひなまつり\nひなん\nひねる\nひはん\nひびく\nひひょう\nひほう\nひまわり\nひまん\nひみつ\nひめい\nひめじし\nひやけ\nひやす\nひよう\nびょうき\nひらがな\nひらく\nひりつ\nひりょう\nひるま\nひるやすみ\nひれい\nひろい\nひろう\nひろき\nひろゆき\nひんかく\nひんけつ\nひんこん\nひんしゅ\nひんそう\nぴんち\nひんぱん\nびんぼう\nふあん\nふいうち\nふうけい\nふうせん\nぷうたろう\nふうとう\nふうふ\nふえる\nふおん\nふかい\nふきん\nふくざつ\nふくぶくろ\nふこう\nふさい\nふしぎ\nふじみ\nふすま\nふせい\nふせぐ\nふそく\nぶたにく\nふたん\nふちょう\nふつう\nふつか\nふっかつ\nふっき\nふっこく\nぶどう\nふとる\nふとん\nふのう\nふはい\nふひょう\nふへん\nふまん\nふみん\nふめつ\nふめん\nふよう\nふりこ\nふりる\nふるい\nふんいき\nぶんがく\nぶんぐ\nふんしつ\nぶんせき\nふんそう\nぶんぽう\nへいあん\nへいおん\nへいがい\nへいき\nへいげん\nへいこう\nへいさ\nへいしゃ\nへいせつ\nへいそ\nへいたく\nへいてん\nへいねつ\nへいわ\nへきが\nへこむ\nべにいろ\nべにしょうが\nへらす\nへんかん\nべんきょう\nべんごし\nへんさい\nへんたい\nべんり\nほあん\nほいく\nぼうぎょ\nほうこく\nほうそう\nほうほう\nほうもん\nほうりつ\nほえる\nほおん\nほかん\nほきょう\nぼきん\nほくろ\nほけつ\nほけん\nほこう\nほこる\nほしい\nほしつ\nほしゅ\nほしょう\nほせい\nほそい\nほそく\nほたて\nほたる\nぽちぶくろ\nほっきょく\nほっさ\nほったん\nほとんど\nほめる\nほんい\nほんき\nほんけ\nほんしつ\nほんやく\nまいにち\nまかい\nまかせる\nまがる\nまける\nまこと\nまさつ\nまじめ\nますく\nまぜる\nまつり\nまとめ\nまなぶ\nまぬけ\nまねく\nまほう\nまもる\nまゆげ\nまよう\nまろやか\nまわす\nまわり\nまわる\nまんが\nまんきつ\nまんぞく\nまんなか\nみいら\nみうち\nみえる\nみがく\nみかた\nみかん\nみけん\nみこん\nみじかい\nみすい\nみすえる\nみせる\nみっか\nみつかる\nみつける\nみてい\nみとめる\nみなと\nみなみかさい\nみねらる\nみのう\nみのがす\nみほん\nみもと\nみやげ\nみらい\nみりょく\nみわく\nみんか\nみんぞく\nむいか\nむえき\nむえん\nむかい\nむかう\nむかえ\nむかし\nむぎちゃ\nむける\nむげん\nむさぼる\nむしあつい\nむしば\nむじゅん\nむしろ\nむすう\nむすこ\nむすぶ\nむすめ\nむせる\nむせん\nむちゅう\nむなしい\nむのう\nむやみ\nむよう\nむらさき\nむりょう\nむろん\nめいあん\nめいうん\nめいえん\nめいかく\nめいきょく\nめいさい\nめいし\nめいそう\nめいぶつ\nめいれい\nめいわく\nめぐまれる\nめざす\nめした\nめずらしい\nめだつ\nめまい\nめやす\nめんきょ\nめんせき\nめんどう\nもうしあげる\nもうどうけん\nもえる\nもくし\nもくてき\nもくようび\nもちろん\nもどる\nもらう\nもんく\nもんだい\nやおや\nやける\nやさい\nやさしい\nやすい\nやすたろう\nやすみ\nやせる\nやそう\nやたい\nやちん\nやっと\nやっぱり\nやぶる\nやめる\nややこしい\nやよい\nやわらかい\nゆうき\nゆうびんきょく\nゆうべ\nゆうめい\nゆけつ\nゆしゅつ\nゆせん\nゆそう\nゆたか\nゆちゃく\nゆでる\nゆにゅう\nゆびわ\nゆらい\nゆれる\nようい\nようか\nようきゅう\nようじ\nようす\nようちえん\nよかぜ\nよかん\nよきん\nよくせい\nよくぼう\nよけい\nよごれる\nよさん\nよしゅう\nよそう\nよそく\nよっか\nよてい\nよどがわく\nよねつ\nよやく\nよゆう\nよろこぶ\nよろしい\nらいう\nらくがき\nらくご\nらくさつ\nらくだ\nらしんばん\nらせん\nらぞく\nらたい\nらっか\nられつ\nりえき\nりかい\nりきさく\nりきせつ\nりくぐん\nりくつ\nりけん\nりこう\nりせい\nりそう\nりそく\nりてん\nりねん\nりゆう\nりゅうがく\nりよう\nりょうり\nりょかん\nりょくちゃ\nりょこう\nりりく\nりれき\nりろん\nりんご\nるいけい\nるいさい\nるいじ\nるいせき\nるすばん\nるりがわら\nれいかん\nれいぎ\nれいせい\nれいぞうこ\nれいとう\nれいぼう\nれきし\nれきだい\nれんあい\nれんけい\nれんこん\nれんさい\nれんしゅう\nれんぞく\nれんらく\nろうか\nろうご\nろうじん\nろうそく\nろくが\nろこつ\nろじうら\nろしゅつ\nろせん\nろてん\nろめん\nろれつ\nろんぎ\nろんぱ\nろんぶん\nろんり\nわかす\nわかめ\nわかやま\nわかれる\nわしつ\nわじまし\nわすれもの\nわらう\nわれる`.split('\\n');\n", "export const wordlist = `가격\n가끔\n가난\n가능\n가득\n가르침\n가뭄\n가방\n가상\n가슴\n가운데\n가을\n가이드\n가입\n가장\n가정\n가족\n가죽\n각오\n각자\n간격\n간부\n간섭\n간장\n간접\n간판\n갈등\n갈비\n갈색\n갈증\n감각\n감기\n감소\n감수성\n감자\n감정\n갑자기\n강남\n강당\n강도\n강력히\n강변\n강북\n강사\n강수량\n강아지\n강원도\n강의\n강제\n강조\n같이\n개구리\n개나리\n개방\n개별\n개선\n개성\n개인\n객관적\n거실\n거액\n거울\n거짓\n거품\n걱정\n건강\n건물\n건설\n건조\n건축\n걸음\n검사\n검토\n게시판\n게임\n겨울\n견해\n결과\n결국\n결론\n결석\n결승\n결심\n결정\n결혼\n경계\n경고\n경기\n경력\n경복궁\n경비\n경상도\n경영\n경우\n경쟁\n경제\n경주\n경찰\n경치\n경향\n경험\n계곡\n계단\n계란\n계산\n계속\n계약\n계절\n계층\n계획\n고객\n고구려\n고궁\n고급\n고등학생\n고무신\n고민\n고양이\n고장\n고전\n고집\n고춧가루\n고통\n고향\n곡식\n골목\n골짜기\n골프\n공간\n공개\n공격\n공군\n공급\n공기\n공동\n공무원\n공부\n공사\n공식\n공업\n공연\n공원\n공장\n공짜\n공책\n공통\n공포\n공항\n공휴일\n과목\n과일\n과장\n과정\n과학\n관객\n관계\n관광\n관념\n관람\n관련\n관리\n관습\n관심\n관점\n관찰\n광경\n광고\n광장\n광주\n괴로움\n굉장히\n교과서\n교문\n교복\n교실\n교양\n교육\n교장\n교직\n교통\n교환\n교훈\n구경\n구름\n구멍\n구별\n구분\n구석\n구성\n구속\n구역\n구입\n구청\n구체적\n국가\n국기\n국내\n국립\n국물\n국민\n국수\n국어\n국왕\n국적\n국제\n국회\n군대\n군사\n군인\n궁극적\n권리\n권위\n권투\n귀국\n귀신\n규정\n규칙\n균형\n그날\n그냥\n그늘\n그러나\n그룹\n그릇\n그림\n그제서야\n그토록\n극복\n극히\n근거\n근교\n근래\n근로\n근무\n근본\n근원\n근육\n근처\n글씨\n글자\n금강산\n금고\n금년\n금메달\n금액\n금연\n금요일\n금지\n긍정적\n기간\n기관\n기념\n기능\n기독교\n기둥\n기록\n기름\n기법\n기본\n기분\n기쁨\n기숙사\n기술\n기억\n기업\n기온\n기운\n기원\n기적\n기준\n기침\n기혼\n기획\n긴급\n긴장\n길이\n김밥\n김치\n김포공항\n깍두기\n깜빡\n깨달음\n깨소금\n껍질\n꼭대기\n꽃잎\n나들이\n나란히\n나머지\n나물\n나침반\n나흘\n낙엽\n난방\n날개\n날씨\n날짜\n남녀\n남대문\n남매\n남산\n남자\n남편\n남학생\n낭비\n낱말\n내년\n내용\n내일\n냄비\n냄새\n냇물\n냉동\n냉면\n냉방\n냉장고\n넥타이\n넷째\n노동\n노란색\n노력\n노인\n녹음\n녹차\n녹화\n논리\n논문\n논쟁\n놀이\n농구\n농담\n농민\n농부\n농업\n농장\n농촌\n높이\n눈동자\n눈물\n눈썹\n뉴욕\n느낌\n늑대\n능동적\n능력\n다방\n다양성\n다음\n다이어트\n다행\n단계\n단골\n단독\n단맛\n단순\n단어\n단위\n단점\n단체\n단추\n단편\n단풍\n달걀\n달러\n달력\n달리\n닭고기\n담당\n담배\n담요\n담임\n답변\n답장\n당근\n당분간\n당연히\n당장\n대규모\n대낮\n대단히\n대답\n대도시\n대략\n대량\n대륙\n대문\n대부분\n대신\n대응\n대장\n대전\n대접\n대중\n대책\n대출\n대충\n대통령\n대학\n대한민국\n대합실\n대형\n덩어리\n데이트\n도대체\n도덕\n도둑\n도망\n도서관\n도심\n도움\n도입\n도자기\n도저히\n도전\n도중\n도착\n독감\n독립\n독서\n독일\n독창적\n동화책\n뒷모습\n뒷산\n딸아이\n마누라\n마늘\n마당\n마라톤\n마련\n마무리\n마사지\n마약\n마요네즈\n마을\n마음\n마이크\n마중\n마지막\n마찬가지\n마찰\n마흔\n막걸리\n막내\n막상\n만남\n만두\n만세\n만약\n만일\n만점\n만족\n만화\n많이\n말기\n말씀\n말투\n맘대로\n망원경\n매년\n매달\n매력\n매번\n매스컴\n매일\n매장\n맥주\n먹이\n먼저\n먼지\n멀리\n메일\n며느리\n며칠\n면담\n멸치\n명단\n명령\n명예\n명의\n명절\n명칭\n명함\n모금\n모니터\n모델\n모든\n모범\n모습\n모양\n모임\n모조리\n모집\n모퉁이\n목걸이\n목록\n목사\n목소리\n목숨\n목적\n목표\n몰래\n몸매\n몸무게\n몸살\n몸속\n몸짓\n몸통\n몹시\n무관심\n무궁화\n무더위\n무덤\n무릎\n무슨\n무엇\n무역\n무용\n무조건\n무지개\n무척\n문구\n문득\n문법\n문서\n문제\n문학\n문화\n물가\n물건\n물결\n물고기\n물론\n물리학\n물음\n물질\n물체\n미국\n미디어\n미사일\n미술\n미역\n미용실\n미움\n미인\n미팅\n미혼\n민간\n민족\n민주\n믿음\n밀가루\n밀리미터\n밑바닥\n바가지\n바구니\n바나나\n바늘\n바닥\n바닷가\n바람\n바이러스\n바탕\n박물관\n박사\n박수\n반대\n반드시\n반말\n반발\n반성\n반응\n반장\n반죽\n반지\n반찬\n받침\n발가락\n발걸음\n발견\n발달\n발레\n발목\n발바닥\n발생\n발음\n발자국\n발전\n발톱\n발표\n밤하늘\n밥그릇\n밥맛\n밥상\n밥솥\n방금\n방면\n방문\n방바닥\n방법\n방송\n방식\n방안\n방울\n방지\n방학\n방해\n방향\n배경\n배꼽\n배달\n배드민턴\n백두산\n백색\n백성\n백인\n백제\n백화점\n버릇\n버섯\n버튼\n번개\n번역\n번지\n번호\n벌금\n벌레\n벌써\n범위\n범인\n범죄\n법률\n법원\n법적\n법칙\n베이징\n벨트\n변경\n변동\n변명\n변신\n변호사\n변화\n별도\n별명\n별일\n병실\n병아리\n병원\n보관\n보너스\n보라색\n보람\n보름\n보상\n보안\n보자기\n보장\n보전\n보존\n보통\n보편적\n보험\n복도\n복사\n복숭아\n복습\n볶음\n본격적\n본래\n본부\n본사\n본성\n본인\n본질\n볼펜\n봉사\n봉지\n봉투\n부근\n부끄러움\n부담\n부동산\n부문\n부분\n부산\n부상\n부엌\n부인\n부작용\n부장\n부정\n부족\n부지런히\n부친\n부탁\n부품\n부회장\n북부\n북한\n분노\n분량\n분리\n분명\n분석\n분야\n분위기\n분필\n분홍색\n불고기\n불과\n불교\n불꽃\n불만\n불법\n불빛\n불안\n불이익\n불행\n브랜드\n비극\n비난\n비닐\n비둘기\n비디오\n비로소\n비만\n비명\n비밀\n비바람\n비빔밥\n비상\n비용\n비율\n비중\n비타민\n비판\n빌딩\n빗물\n빗방울\n빗줄기\n빛깔\n빨간색\n빨래\n빨리\n사건\n사계절\n사나이\n사냥\n사람\n사랑\n사립\n사모님\n사물\n사방\n사상\n사생활\n사설\n사슴\n사실\n사업\n사용\n사월\n사장\n사전\n사진\n사촌\n사춘기\n사탕\n사투리\n사흘\n산길\n산부인과\n산업\n산책\n살림\n살인\n살짝\n삼계탕\n삼국\n삼십\n삼월\n삼촌\n상관\n상금\n상대\n상류\n상반기\n상상\n상식\n상업\n상인\n상자\n상점\n상처\n상추\n상태\n상표\n상품\n상황\n새벽\n색깔\n색연필\n생각\n생명\n생물\n생방송\n생산\n생선\n생신\n생일\n생활\n서랍\n서른\n서명\n서민\n서비스\n서양\n서울\n서적\n서점\n서쪽\n서클\n석사\n석유\n선거\n선물\n선배\n선생\n선수\n선원\n선장\n선전\n선택\n선풍기\n설거지\n설날\n설렁탕\n설명\n설문\n설사\n설악산\n설치\n설탕\n섭씨\n성공\n성당\n성명\n성별\n성인\n성장\n성적\n성질\n성함\n세금\n세미나\n세상\n세월\n세종대왕\n세탁\n센터\n센티미터\n셋째\n소규모\n소극적\n소금\n소나기\n소년\n소득\n소망\n소문\n소설\n소속\n소아과\n소용\n소원\n소음\n소중히\n소지품\n소질\n소풍\n소형\n속담\n속도\n속옷\n손가락\n손길\n손녀\n손님\n손등\n손목\n손뼉\n손실\n손질\n손톱\n손해\n솔직히\n솜씨\n송아지\n송이\n송편\n쇠고기\n쇼핑\n수건\n수년\n수단\n수돗물\n수동적\n수면\n수명\n수박\n수상\n수석\n수술\n수시로\n수업\n수염\n수영\n수입\n수준\n수집\n수출\n수컷\n수필\n수학\n수험생\n수화기\n숙녀\n숙소\n숙제\n순간\n순서\n순수\n순식간\n순위\n숟가락\n술병\n술집\n숫자\n스님\n스물\n스스로\n스승\n스웨터\n스위치\n스케이트\n스튜디오\n스트레스\n스포츠\n슬쩍\n슬픔\n습관\n습기\n승객\n승리\n승부\n승용차\n승진\n시각\n시간\n시골\n시금치\n시나리오\n시댁\n시리즈\n시멘트\n시민\n시부모\n시선\n시설\n시스템\n시아버지\n시어머니\n시월\n시인\n시일\n시작\n시장\n시절\n시점\n시중\n시즌\n시집\n시청\n시합\n시험\n식구\n식기\n식당\n식량\n식료품\n식물\n식빵\n식사\n식생활\n식초\n식탁\n식품\n신고\n신규\n신념\n신문\n신발\n신비\n신사\n신세\n신용\n신제품\n신청\n신체\n신화\n실감\n실내\n실력\n실례\n실망\n실수\n실습\n실시\n실장\n실정\n실질적\n실천\n실체\n실컷\n실태\n실패\n실험\n실현\n심리\n심부름\n심사\n심장\n심정\n심판\n쌍둥이\n씨름\n씨앗\n아가씨\n아나운서\n아드님\n아들\n아쉬움\n아스팔트\n아시아\n아울러\n아저씨\n아줌마\n아직\n아침\n아파트\n아프리카\n아픔\n아홉\n아흔\n악기\n악몽\n악수\n안개\n안경\n안과\n안내\n안녕\n안동\n안방\n안부\n안주\n알루미늄\n알코올\n암시\n암컷\n압력\n앞날\n앞문\n애인\n애정\n액수\n앨범\n야간\n야단\n야옹\n약간\n약국\n약속\n약수\n약점\n약품\n약혼녀\n양념\n양력\n양말\n양배추\n양주\n양파\n어둠\n어려움\n어른\n어젯밤\n어쨌든\n어쩌다가\n어쩐지\n언니\n언덕\n언론\n언어\n얼굴\n얼른\n얼음\n얼핏\n엄마\n업무\n업종\n업체\n엉덩이\n엉망\n엉터리\n엊그제\n에너지\n에어컨\n엔진\n여건\n여고생\n여관\n여군\n여권\n여대생\n여덟\n여동생\n여든\n여론\n여름\n여섯\n여성\n여왕\n여인\n여전히\n여직원\n여학생\n여행\n역사\n역시\n역할\n연결\n연구\n연극\n연기\n연락\n연설\n연세\n연속\n연습\n연애\n연예인\n연인\n연장\n연주\n연출\n연필\n연합\n연휴\n열기\n열매\n열쇠\n열심히\n열정\n열차\n열흘\n염려\n엽서\n영국\n영남\n영상\n영양\n영역\n영웅\n영원히\n영하\n영향\n영혼\n영화\n옆구리\n옆방\n옆집\n예감\n예금\n예방\n예산\n예상\n예선\n예술\n예습\n예식장\n예약\n예전\n예절\n예정\n예컨대\n옛날\n오늘\n오락\n오랫동안\n오렌지\n오로지\n오른발\n오븐\n오십\n오염\n오월\n오전\n오직\n오징어\n오페라\n오피스텔\n오히려\n옥상\n옥수수\n온갖\n온라인\n온몸\n온종일\n온통\n올가을\n올림픽\n올해\n옷차림\n와이셔츠\n와인\n완성\n완전\n왕비\n왕자\n왜냐하면\n왠지\n외갓집\n외국\n외로움\n외삼촌\n외출\n외침\n외할머니\n왼발\n왼손\n왼쪽\n요금\n요일\n요즘\n요청\n용기\n용서\n용어\n우산\n우선\n우승\n우연히\n우정\n우체국\n우편\n운동\n운명\n운반\n운전\n운행\n울산\n울음\n움직임\n웃어른\n웃음\n워낙\n원고\n원래\n원서\n원숭이\n원인\n원장\n원피스\n월급\n월드컵\n월세\n월요일\n웨이터\n위반\n위법\n위성\n위원\n위험\n위협\n윗사람\n유난히\n유럽\n유명\n유물\n유산\n유적\n유치원\n유학\n유행\n유형\n육군\n육상\n육십\n육체\n은행\n음력\n음료\n음반\n음성\n음식\n음악\n음주\n의견\n의논\n의문\n의복\n의식\n의심\n의외로\n의욕\n의원\n의학\n이것\n이곳\n이념\n이놈\n이달\n이대로\n이동\n이렇게\n이력서\n이론적\n이름\n이민\n이발소\n이별\n이불\n이빨\n이상\n이성\n이슬\n이야기\n이용\n이웃\n이월\n이윽고\n이익\n이전\n이중\n이튿날\n이틀\n이혼\n인간\n인격\n인공\n인구\n인근\n인기\n인도\n인류\n인물\n인생\n인쇄\n인연\n인원\n인재\n인종\n인천\n인체\n인터넷\n인하\n인형\n일곱\n일기\n일단\n일대\n일등\n일반\n일본\n일부\n일상\n일생\n일손\n일요일\n일월\n일정\n일종\n일주일\n일찍\n일체\n일치\n일행\n일회용\n임금\n임무\n입대\n입력\n입맛\n입사\n입술\n입시\n입원\n입장\n입학\n자가용\n자격\n자극\n자동\n자랑\n자부심\n자식\n자신\n자연\n자원\n자율\n자전거\n자정\n자존심\n자판\n작가\n작년\n작성\n작업\n작용\n작은딸\n작품\n잔디\n잔뜩\n잔치\n잘못\n잠깐\n잠수함\n잠시\n잠옷\n잠자리\n잡지\n장관\n장군\n장기간\n장래\n장례\n장르\n장마\n장면\n장모\n장미\n장비\n장사\n장소\n장식\n장애인\n장인\n장점\n장차\n장학금\n재능\n재빨리\n재산\n재생\n재작년\n재정\n재채기\n재판\n재학\n재활용\n저것\n저고리\n저곳\n저녁\n저런\n저렇게\n저번\n저울\n저절로\n저축\n적극\n적당히\n적성\n적용\n적응\n전개\n전공\n전기\n전달\n전라도\n전망\n전문\n전반\n전부\n전세\n전시\n전용\n전자\n전쟁\n전주\n전철\n전체\n전통\n전혀\n전후\n절대\n절망\n절반\n절약\n절차\n점검\n점수\n점심\n점원\n점점\n점차\n접근\n접시\n접촉\n젓가락\n정거장\n정도\n정류장\n정리\n정말\n정면\n정문\n정반대\n정보\n정부\n정비\n정상\n정성\n정오\n정원\n정장\n정지\n정치\n정확히\n제공\n제과점\n제대로\n제목\n제발\n제법\n제삿날\n제안\n제일\n제작\n제주도\n제출\n제품\n제한\n조각\n조건\n조금\n조깅\n조명\n조미료\n조상\n조선\n조용히\n조절\n조정\n조직\n존댓말\n존재\n졸업\n졸음\n종교\n종로\n종류\n종소리\n종업원\n종종\n종합\n좌석\n죄인\n주관적\n주름\n주말\n주머니\n주먹\n주문\n주민\n주방\n주변\n주식\n주인\n주일\n주장\n주전자\n주택\n준비\n줄거리\n줄기\n줄무늬\n중간\n중계방송\n중국\n중년\n중단\n중독\n중반\n중부\n중세\n중소기업\n중순\n중앙\n중요\n중학교\n즉석\n즉시\n즐거움\n증가\n증거\n증권\n증상\n증세\n지각\n지갑\n지경\n지극히\n지금\n지급\n지능\n지름길\n지리산\n지방\n지붕\n지식\n지역\n지우개\n지원\n지적\n지점\n지진\n지출\n직선\n직업\n직원\n직장\n진급\n진동\n진로\n진료\n진리\n진짜\n진찰\n진출\n진통\n진행\n질문\n질병\n질서\n짐작\n집단\n집안\n집중\n짜증\n찌꺼기\n차남\n차라리\n차량\n차림\n차별\n차선\n차츰\n착각\n찬물\n찬성\n참가\n참기름\n참새\n참석\n참여\n참외\n참조\n찻잔\n창가\n창고\n창구\n창문\n창밖\n창작\n창조\n채널\n채점\n책가방\n책방\n책상\n책임\n챔피언\n처벌\n처음\n천국\n천둥\n천장\n천재\n천천히\n철도\n철저히\n철학\n첫날\n첫째\n청년\n청바지\n청소\n청춘\n체계\n체력\n체온\n체육\n체중\n체험\n초등학생\n초반\n초밥\n초상화\n초순\n초여름\n초원\n초저녁\n초점\n초청\n초콜릿\n촛불\n총각\n총리\n총장\n촬영\n최근\n최상\n최선\n최신\n최악\n최종\n추석\n추억\n추진\n추천\n추측\n축구\n축소\n축제\n축하\n출근\n출발\n출산\n출신\n출연\n출입\n출장\n출판\n충격\n충고\n충돌\n충분히\n충청도\n취업\n취직\n취향\n치약\n친구\n친척\n칠십\n칠월\n칠판\n침대\n침묵\n침실\n칫솔\n칭찬\n카메라\n카운터\n칼국수\n캐릭터\n캠퍼스\n캠페인\n커튼\n컨디션\n컬러\n컴퓨터\n코끼리\n코미디\n콘서트\n콜라\n콤플렉스\n콩나물\n쾌감\n쿠데타\n크림\n큰길\n큰딸\n큰소리\n큰아들\n큰어머니\n큰일\n큰절\n클래식\n클럽\n킬로\n타입\n타자기\n탁구\n탁자\n탄생\n태권도\n태양\n태풍\n택시\n탤런트\n터널\n터미널\n테니스\n테스트\n테이블\n텔레비전\n토론\n토마토\n토요일\n통계\n통과\n통로\n통신\n통역\n통일\n통장\n통제\n통증\n통합\n통화\n퇴근\n퇴원\n퇴직금\n튀김\n트럭\n특급\n특별\n특성\n특수\n특징\n특히\n튼튼히\n티셔츠\n파란색\n파일\n파출소\n판결\n판단\n판매\n판사\n팔십\n팔월\n팝송\n패션\n팩스\n팩시밀리\n팬티\n퍼센트\n페인트\n편견\n편의\n편지\n편히\n평가\n평균\n평생\n평소\n평양\n평일\n평화\n포스터\n포인트\n포장\n포함\n표면\n표정\n표준\n표현\n품목\n품질\n풍경\n풍속\n풍습\n프랑스\n프린터\n플라스틱\n피곤\n피망\n피아노\n필름\n필수\n필요\n필자\n필통\n핑계\n하느님\n하늘\n하드웨어\n하룻밤\n하반기\n하숙집\n하순\n하여튼\n하지만\n하천\n하품\n하필\n학과\n학교\n학급\n학기\n학년\n학력\n학번\n학부모\n학비\n학생\n학술\n학습\n학용품\n학원\n학위\n학자\n학점\n한계\n한글\n한꺼번에\n한낮\n한눈\n한동안\n한때\n한라산\n한마디\n한문\n한번\n한복\n한식\n한여름\n한쪽\n할머니\n할아버지\n할인\n함께\n함부로\n합격\n합리적\n항공\n항구\n항상\n항의\n해결\n해군\n해답\n해당\n해물\n해석\n해설\n해수욕장\n해안\n핵심\n핸드백\n햄버거\n햇볕\n햇살\n행동\n행복\n행사\n행운\n행위\n향기\n향상\n향수\n허락\n허용\n헬기\n현관\n현금\n현대\n현상\n현실\n현장\n현재\n현지\n혈액\n협력\n형부\n형사\n형수\n형식\n형제\n형태\n형편\n혜택\n호기심\n호남\n호랑이\n호박\n호텔\n호흡\n혹시\n홀로\n홈페이지\n홍보\n홍수\n홍차\n화면\n화분\n화살\n화요일\n화장\n화학\n확보\n확인\n확장\n확정\n환갑\n환경\n환영\n환율\n환자\n활기\n활동\n활발히\n활용\n활짝\n회견\n회관\n회복\n회색\n회원\n회장\n회전\n횟수\n횡단보도\n효율적\n후반\n후춧가루\n훈련\n훨씬\n휴식\n휴일\n흉내\n흐름\n흑백\n흑인\n흔적\n흔히\n흥미\n흥분\n희곡\n희망\n희생\n흰색\n힘껏`.split('\\n');\n", "export const wordlist = `abacate\nabaixo\nabalar\nabater\nabduzir\nabelha\naberto\nabismo\nabotoar\nabranger\nabreviar\nabrigar\nabrupto\nabsinto\nabsoluto\nabsurdo\nabutre\nacabado\nacalmar\nacampar\nacanhar\nacaso\naceitar\nacelerar\nacenar\nacervo\nacessar\nacetona\nachatar\nacidez\nacima\nacionado\nacirrar\naclamar\naclive\nacolhida\nacomodar\nacoplar\nacordar\nacumular\nacusador\nadaptar\nadega\nadentro\nadepto\nadequar\naderente\nadesivo\nadeus\nadiante\naditivo\nadjetivo\nadjunto\nadmirar\nadorar\nadquirir\nadubo\nadverso\nadvogado\naeronave\nafastar\naferir\nafetivo\nafinador\nafivelar\naflito\nafluente\nafrontar\nagachar\nagarrar\nagasalho\nagenciar\nagilizar\nagiota\nagitado\nagora\nagradar\nagreste\nagrupar\naguardar\nagulha\najoelhar\najudar\najustar\nalameda\nalarme\nalastrar\nalavanca\nalbergue\nalbino\nalcatra\naldeia\nalecrim\nalegria\nalertar\nalface\nalfinete\nalgum\nalheio\naliar\nalicate\nalienar\nalinhar\naliviar\nalmofada\nalocar\nalpiste\nalterar\naltitude\nalucinar\nalugar\naluno\nalusivo\nalvo\namaciar\namador\namarelo\namassar\nambas\nambiente\nameixa\namenizar\namido\namistoso\namizade\namolador\namontoar\namoroso\namostra\namparar\nampliar\nampola\nanagrama\nanalisar\nanarquia\nanatomia\nandaime\nanel\nanexo\nangular\nanimar\nanjo\nanomalia\nanotado\nansioso\nanterior\nanuidade\nanunciar\nanzol\napagador\napalpar\napanhado\napego\napelido\napertada\napesar\napetite\napito\naplauso\naplicada\napoio\napontar\naposta\naprendiz\naprovar\naquecer\narame\naranha\narara\narcada\nardente\nareia\narejar\narenito\naresta\nargiloso\nargola\narma\narquivo\narraial\narrebate\narriscar\narroba\narrumar\narsenal\narterial\nartigo\narvoredo\nasfaltar\nasilado\naspirar\nassador\nassinar\nassoalho\nassunto\nastral\natacado\natadura\natalho\natarefar\natear\natender\naterro\nateu\natingir\natirador\nativo\natoleiro\natracar\natrevido\natriz\natual\natum\nauditor\naumentar\naura\naurora\nautismo\nautoria\nautuar\navaliar\navante\navaria\navental\navesso\naviador\navisar\navulso\naxila\nazarar\nazedo\nazeite\nazulejo\nbabar\nbabosa\nbacalhau\nbacharel\nbacia\nbagagem\nbaiano\nbailar\nbaioneta\nbairro\nbaixista\nbajular\nbaleia\nbaliza\nbalsa\nbanal\nbandeira\nbanho\nbanir\nbanquete\nbarato\nbarbado\nbaronesa\nbarraca\nbarulho\nbaseado\nbastante\nbatata\nbatedor\nbatida\nbatom\nbatucar\nbaunilha\nbeber\nbeijo\nbeirada\nbeisebol\nbeldade\nbeleza\nbelga\nbeliscar\nbendito\nbengala\nbenzer\nberimbau\nberlinda\nberro\nbesouro\nbexiga\nbezerro\nbico\nbicudo\nbienal\nbifocal\nbifurcar\nbigorna\nbilhete\nbimestre\nbimotor\nbiologia\nbiombo\nbiosfera\nbipolar\nbirrento\nbiscoito\nbisneto\nbispo\nbissexto\nbitola\nbizarro\nblindado\nbloco\nbloquear\nboato\nbobagem\nbocado\nbocejo\nbochecha\nboicotar\nbolada\nboletim\nbolha\nbolo\nbombeiro\nbonde\nboneco\nbonita\nborbulha\nborda\nboreal\nborracha\nbovino\nboxeador\nbranco\nbrasa\nbraveza\nbreu\nbriga\nbrilho\nbrincar\nbroa\nbrochura\nbronzear\nbroto\nbruxo\nbucha\nbudismo\nbufar\nbule\nburaco\nbusca\nbusto\nbuzina\ncabana\ncabelo\ncabide\ncabo\ncabrito\ncacau\ncacetada\ncachorro\ncacique\ncadastro\ncadeado\ncafezal\ncaiaque\ncaipira\ncaixote\ncajado\ncaju\ncalafrio\ncalcular\ncaldeira\ncalibrar\ncalmante\ncalota\ncamada\ncambista\ncamisa\ncamomila\ncampanha\ncamuflar\ncanavial\ncancelar\ncaneta\ncanguru\ncanhoto\ncanivete\ncanoa\ncansado\ncantar\ncanudo\ncapacho\ncapela\ncapinar\ncapotar\ncapricho\ncaptador\ncapuz\ncaracol\ncarbono\ncardeal\ncareca\ncarimbar\ncarneiro\ncarpete\ncarreira\ncartaz\ncarvalho\ncasaco\ncasca\ncasebre\ncastelo\ncasulo\ncatarata\ncativar\ncaule\ncausador\ncautelar\ncavalo\ncaverna\ncebola\ncedilha\ncegonha\ncelebrar\ncelular\ncenoura\ncenso\ncenteio\ncercar\ncerrado\ncerteiro\ncerveja\ncetim\ncevada\nchacota\nchaleira\nchamado\nchapada\ncharme\nchatice\nchave\nchefe\nchegada\ncheiro\ncheque\nchicote\nchifre\nchinelo\nchocalho\nchover\nchumbo\nchutar\nchuva\ncicatriz\nciclone\ncidade\ncidreira\nciente\ncigana\ncimento\ncinto\ncinza\nciranda\ncircuito\ncirurgia\ncitar\nclareza\nclero\nclicar\nclone\nclube\ncoado\ncoagir\ncobaia\ncobertor\ncobrar\ncocada\ncoelho\ncoentro\ncoeso\ncogumelo\ncoibir\ncoifa\ncoiote\ncolar\ncoleira\ncolher\ncolidir\ncolmeia\ncolono\ncoluna\ncomando\ncombinar\ncomentar\ncomitiva\ncomover\ncomplexo\ncomum\nconcha\ncondor\nconectar\nconfuso\ncongelar\nconhecer\nconjugar\nconsumir\ncontrato\nconvite\ncooperar\ncopeiro\ncopiador\ncopo\ncoquetel\ncoragem\ncordial\ncorneta\ncoronha\ncorporal\ncorreio\ncortejo\ncoruja\ncorvo\ncosseno\ncostela\ncotonete\ncouro\ncouve\ncovil\ncozinha\ncratera\ncravo\ncreche\ncredor\ncreme\ncrer\ncrespo\ncriada\ncriminal\ncrioulo\ncrise\ncriticar\ncrosta\ncrua\ncruzeiro\ncubano\ncueca\ncuidado\ncujo\nculatra\nculminar\nculpar\ncultura\ncumprir\ncunhado\ncupido\ncurativo\ncurral\ncursar\ncurto\ncuspir\ncustear\ncutelo\ndamasco\ndatar\ndebater\ndebitar\ndeboche\ndebulhar\ndecalque\ndecimal\ndeclive\ndecote\ndecretar\ndedal\ndedicado\ndeduzir\ndefesa\ndefumar\ndegelo\ndegrau\ndegustar\ndeitado\ndeixar\ndelator\ndelegado\ndelinear\ndelonga\ndemanda\ndemitir\ndemolido\ndentista\ndepenado\ndepilar\ndepois\ndepressa\ndepurar\nderiva\nderramar\ndesafio\ndesbotar\ndescanso\ndesenho\ndesfiado\ndesgaste\ndesigual\ndeslize\ndesmamar\ndesova\ndespesa\ndestaque\ndesviar\ndetalhar\ndetentor\ndetonar\ndetrito\ndeusa\ndever\ndevido\ndevotado\ndezena\ndiagrama\ndialeto\ndidata\ndifuso\ndigitar\ndilatado\ndiluente\ndiminuir\ndinastia\ndinheiro\ndiocese\ndireto\ndiscreta\ndisfarce\ndisparo\ndisquete\ndissipar\ndistante\nditador\ndiurno\ndiverso\ndivisor\ndivulgar\ndizer\ndobrador\ndolorido\ndomador\ndominado\ndonativo\ndonzela\ndormente\ndorsal\ndosagem\ndourado\ndoutor\ndrenagem\ndrible\ndrogaria\nduelar\nduende\ndueto\nduplo\nduquesa\ndurante\nduvidoso\neclodir\necoar\necologia\nedificar\nedital\neducado\nefeito\nefetivar\nejetar\nelaborar\neleger\neleitor\nelenco\nelevador\neliminar\nelogiar\nembargo\nembolado\nembrulho\nembutido\nemenda\nemergir\nemissor\nempatia\nempenho\nempinado\nempolgar\nemprego\nempurrar\nemulador\nencaixe\nencenado\nenchente\nencontro\nendeusar\nendossar\nenfaixar\nenfeite\nenfim\nengajado\nengenho\nenglobar\nengomado\nengraxar\nenguia\nenjoar\nenlatar\nenquanto\nenraizar\nenrolado\nenrugar\nensaio\nenseada\nensino\nensopado\nentanto\nenteado\nentidade\nentortar\nentrada\nentulho\nenvergar\nenviado\nenvolver\nenxame\nenxerto\nenxofre\nenxuto\nepiderme\nequipar\nereto\nerguido\nerrata\nerva\nervilha\nesbanjar\nesbelto\nescama\nescola\nescrita\nescuta\nesfinge\nesfolar\nesfregar\nesfumado\nesgrima\nesmalte\nespanto\nespelho\nespiga\nesponja\nespreita\nespumar\nesquerda\nestaca\nesteira\nesticar\nestofado\nestrela\nestudo\nesvaziar\netanol\netiqueta\neuforia\neuropeu\nevacuar\nevaporar\nevasivo\neventual\nevidente\nevoluir\nexagero\nexalar\nexaminar\nexato\nexausto\nexcesso\nexcitar\nexclamar\nexecutar\nexemplo\nexibir\nexigente\nexonerar\nexpandir\nexpelir\nexpirar\nexplanar\nexposto\nexpresso\nexpulsar\nexterno\nextinto\nextrato\nfabricar\nfabuloso\nfaceta\nfacial\nfada\nfadiga\nfaixa\nfalar\nfalta\nfamiliar\nfandango\nfanfarra\nfantoche\nfardado\nfarelo\nfarinha\nfarofa\nfarpa\nfartura\nfatia\nfator\nfavorita\nfaxina\nfazenda\nfechado\nfeijoada\nfeirante\nfelino\nfeminino\nfenda\nfeno\nfera\nferiado\nferrugem\nferver\nfestejar\nfetal\nfeudal\nfiapo\nfibrose\nficar\nficheiro\nfigurado\nfileira\nfilho\nfilme\nfiltrar\nfirmeza\nfisgada\nfissura\nfita\nfivela\nfixador\nfixo\nflacidez\nflamingo\nflanela\nflechada\nflora\nflutuar\nfluxo\nfocal\nfocinho\nfofocar\nfogo\nfoguete\nfoice\nfolgado\nfolheto\nforjar\nformiga\nforno\nforte\nfosco\nfossa\nfragata\nfralda\nfrango\nfrasco\nfraterno\nfreira\nfrente\nfretar\nfrieza\nfriso\nfritura\nfronha\nfrustrar\nfruteira\nfugir\nfulano\nfuligem\nfundar\nfungo\nfunil\nfurador\nfurioso\nfutebol\ngabarito\ngabinete\ngado\ngaiato\ngaiola\ngaivota\ngalega\ngalho\ngalinha\ngalocha\nganhar\ngaragem\ngarfo\ngargalo\ngarimpo\ngaroupa\ngarrafa\ngasoduto\ngasto\ngata\ngatilho\ngaveta\ngazela\ngelado\ngeleia\ngelo\ngemada\ngemer\ngemido\ngeneroso\ngengiva\ngenial\ngenoma\ngenro\ngeologia\ngerador\ngerminar\ngesso\ngestor\nginasta\ngincana\ngingado\ngirafa\ngirino\nglacial\nglicose\nglobal\nglorioso\ngoela\ngoiaba\ngolfe\ngolpear\ngordura\ngorjeta\ngorro\ngostoso\ngoteira\ngovernar\ngracejo\ngradual\ngrafite\ngralha\ngrampo\ngranada\ngratuito\ngraveto\ngraxa\ngrego\ngrelhar\ngreve\ngrilo\ngrisalho\ngritaria\ngrosso\ngrotesco\ngrudado\ngrunhido\ngruta\nguache\nguarani\nguaxinim\nguerrear\nguiar\nguincho\nguisado\ngula\nguloso\nguru\nhabitar\nharmonia\nhaste\nhaver\nhectare\nherdar\nheresia\nhesitar\nhiato\nhibernar\nhidratar\nhiena\nhino\nhipismo\nhipnose\nhipoteca\nhoje\nholofote\nhomem\nhonesto\nhonrado\nhormonal\nhospedar\nhumorado\niate\nideia\nidoso\nignorado\nigreja\niguana\nileso\nilha\niludido\niluminar\nilustrar\nimagem\nimediato\nimenso\nimersivo\niminente\nimitador\nimortal\nimpacto\nimpedir\nimplante\nimpor\nimprensa\nimpune\nimunizar\ninalador\ninapto\ninativo\nincenso\ninchar\nincidir\nincluir\nincolor\nindeciso\nindireto\nindutor\nineficaz\ninerente\ninfantil\ninfestar\ninfinito\ninflamar\ninformal\ninfrator\ningerir\ninibido\ninicial\ninimigo\ninjetar\ninocente\ninodoro\ninovador\ninox\ninquieto\ninscrito\ninseto\ninsistir\ninspetor\ninstalar\ninsulto\nintacto\nintegral\nintimar\nintocado\nintriga\ninvasor\ninverno\ninvicto\ninvocar\niogurte\niraniano\nironizar\nirreal\nirritado\nisca\nisento\nisolado\nisqueiro\nitaliano\njaneiro\njangada\njanta\njararaca\njardim\njarro\njasmim\njato\njavali\njazida\njejum\njoaninha\njoelhada\njogador\njoia\njornal\njorrar\njovem\njuba\njudeu\njudoca\njuiz\njulgador\njulho\njurado\njurista\njuro\njusta\nlabareda\nlaboral\nlacre\nlactante\nladrilho\nlagarta\nlagoa\nlaje\nlamber\nlamentar\nlaminar\nlampejo\nlanche\nlapidar\nlapso\nlaranja\nlareira\nlargura\nlasanha\nlastro\nlateral\nlatido\nlavanda\nlavoura\nlavrador\nlaxante\nlazer\nlealdade\nlebre\nlegado\nlegendar\nlegista\nleigo\nleiloar\nleitura\nlembrete\nleme\nlenhador\nlentilha\nleoa\nlesma\nleste\nletivo\nletreiro\nlevar\nleveza\nlevitar\nliberal\nlibido\nliderar\nligar\nligeiro\nlimitar\nlimoeiro\nlimpador\nlinda\nlinear\nlinhagem\nliquidez\nlistagem\nlisura\nlitoral\nlivro\nlixa\nlixeira\nlocador\nlocutor\nlojista\nlombo\nlona\nlonge\nlontra\nlorde\nlotado\nloteria\nloucura\nlousa\nlouvar\nluar\nlucidez\nlucro\nluneta\nlustre\nlutador\nluva\nmacaco\nmacete\nmachado\nmacio\nmadeira\nmadrinha\nmagnata\nmagreza\nmaior\nmais\nmalandro\nmalha\nmalote\nmaluco\nmamilo\nmamoeiro\nmamute\nmanada\nmancha\nmandato\nmanequim\nmanhoso\nmanivela\nmanobrar\nmansa\nmanter\nmanusear\nmapeado\nmaquinar\nmarcador\nmaresia\nmarfim\nmargem\nmarinho\nmarmita\nmaroto\nmarquise\nmarreco\nmartelo\nmarujo\nmascote\nmasmorra\nmassagem\nmastigar\nmatagal\nmaterno\nmatinal\nmatutar\nmaxilar\nmedalha\nmedida\nmedusa\nmegafone\nmeiga\nmelancia\nmelhor\nmembro\nmemorial\nmenino\nmenos\nmensagem\nmental\nmerecer\nmergulho\nmesada\nmesclar\nmesmo\nmesquita\nmestre\nmetade\nmeteoro\nmetragem\nmexer\nmexicano\nmicro\nmigalha\nmigrar\nmilagre\nmilenar\nmilhar\nmimado\nminerar\nminhoca\nministro\nminoria\nmiolo\nmirante\nmirtilo\nmisturar\nmocidade\nmoderno\nmodular\nmoeda\nmoer\nmoinho\nmoita\nmoldura\nmoleza\nmolho\nmolinete\nmolusco\nmontanha\nmoqueca\nmorango\nmorcego\nmordomo\nmorena\nmosaico\nmosquete\nmostarda\nmotel\nmotim\nmoto\nmotriz\nmuda\nmuito\nmulata\nmulher\nmultar\nmundial\nmunido\nmuralha\nmurcho\nmuscular\nmuseu\nmusical\nnacional\nnadador\nnaja\nnamoro\nnarina\nnarrado\nnascer\nnativa\nnatureza\nnavalha\nnavegar\nnavio\nneblina\nnebuloso\nnegativa\nnegociar\nnegrito\nnervoso\nneta\nneural\nnevasca\nnevoeiro\nninar\nninho\nnitidez\nnivelar\nnobreza\nnoite\nnoiva\nnomear\nnominal\nnordeste\nnortear\nnotar\nnoticiar\nnoturno\nnovelo\nnovilho\nnovo\nnublado\nnudez\nnumeral\nnupcial\nnutrir\nnuvem\nobcecado\nobedecer\nobjetivo\nobrigado\nobscuro\nobstetra\nobter\nobturar\nocidente\nocioso\nocorrer\noculista\nocupado\nofegante\nofensiva\noferenda\noficina\nofuscado\nogiva\nolaria\noleoso\nolhar\noliveira\nombro\nomelete\nomisso\nomitir\nondulado\noneroso\nontem\nopcional\noperador\noponente\noportuno\noposto\norar\norbitar\nordem\nordinal\norfanato\norgasmo\norgulho\noriental\norigem\noriundo\norla\nortodoxo\norvalho\noscilar\nossada\nosso\nostentar\notimismo\nousadia\noutono\noutubro\nouvido\novelha\novular\noxidar\noxigenar\npacato\npaciente\npacote\npactuar\npadaria\npadrinho\npagar\npagode\npainel\npairar\npaisagem\npalavra\npalestra\npalheta\npalito\npalmada\npalpitar\npancada\npanela\npanfleto\npanqueca\npantanal\npapagaio\npapelada\npapiro\nparafina\nparcial\npardal\nparede\npartida\npasmo\npassado\npastel\npatamar\npatente\npatinar\npatrono\npaulada\npausar\npeculiar\npedalar\npedestre\npediatra\npedra\npegada\npeitoral\npeixe\npele\npelicano\npenca\npendurar\npeneira\npenhasco\npensador\npente\nperceber\nperfeito\npergunta\nperito\npermitir\nperna\nperplexo\npersiana\npertence\nperuca\npescado\npesquisa\npessoa\npetiscar\npiada\npicado\npiedade\npigmento\npilastra\npilhado\npilotar\npimenta\npincel\npinguim\npinha\npinote\npintar\npioneiro\npipoca\npiquete\npiranha\npires\npirueta\npiscar\npistola\npitanga\npivete\nplanta\nplaqueta\nplatina\nplebeu\nplumagem\npluvial\npneu\npoda\npoeira\npoetisa\npolegada\npoliciar\npoluente\npolvilho\npomar\npomba\nponderar\npontaria\npopuloso\nporta\npossuir\npostal\npote\npoupar\npouso\npovoar\npraia\nprancha\nprato\npraxe\nprece\npredador\nprefeito\npremiar\nprensar\npreparar\npresilha\npretexto\nprevenir\nprezar\nprimata\nprincesa\nprisma\nprivado\nprocesso\nproduto\nprofeta\nproibido\nprojeto\nprometer\npropagar\nprosa\nprotetor\nprovador\npublicar\npudim\npular\npulmonar\npulseira\npunhal\npunir\npupilo\npureza\npuxador\nquadra\nquantia\nquarto\nquase\nquebrar\nqueda\nqueijo\nquente\nquerido\nquimono\nquina\nquiosque\nrabanada\nrabisco\nrachar\nracionar\nradial\nraiar\nrainha\nraio\nraiva\nrajada\nralado\nramal\nranger\nranhura\nrapadura\nrapel\nrapidez\nraposa\nraquete\nraridade\nrasante\nrascunho\nrasgar\nraspador\nrasteira\nrasurar\nratazana\nratoeira\nrealeza\nreanimar\nreaver\nrebaixar\nrebelde\nrebolar\nrecado\nrecente\nrecheio\nrecibo\nrecordar\nrecrutar\nrecuar\nrede\nredimir\nredonda\nreduzida\nreenvio\nrefinar\nrefletir\nrefogar\nrefresco\nrefugiar\nregalia\nregime\nregra\nreinado\nreitor\nrejeitar\nrelativo\nremador\nremendo\nremorso\nrenovado\nreparo\nrepelir\nrepleto\nrepolho\nrepresa\nrepudiar\nrequerer\nresenha\nresfriar\nresgatar\nresidir\nresolver\nrespeito\nressaca\nrestante\nresumir\nretalho\nreter\nretirar\nretomada\nretratar\nrevelar\nrevisor\nrevolta\nriacho\nrica\nrigidez\nrigoroso\nrimar\nringue\nrisada\nrisco\nrisonho\nrobalo\nrochedo\nrodada\nrodeio\nrodovia\nroedor\nroleta\nromano\nroncar\nrosado\nroseira\nrosto\nrota\nroteiro\nrotina\nrotular\nrouco\nroupa\nroxo\nrubro\nrugido\nrugoso\nruivo\nrumo\nrupestre\nrusso\nsabor\nsaciar\nsacola\nsacudir\nsadio\nsafira\nsaga\nsagrada\nsaibro\nsalada\nsaleiro\nsalgado\nsaliva\nsalpicar\nsalsicha\nsaltar\nsalvador\nsambar\nsamurai\nsanar\nsanfona\nsangue\nsanidade\nsapato\nsarda\nsargento\nsarjeta\nsaturar\nsaudade\nsaxofone\nsazonal\nsecar\nsecular\nseda\nsedento\nsediado\nsedoso\nsedutor\nsegmento\nsegredo\nsegundo\nseiva\nseleto\nselvagem\nsemanal\nsemente\nsenador\nsenhor\nsensual\nsentado\nseparado\nsereia\nseringa\nserra\nservo\nsetembro\nsetor\nsigilo\nsilhueta\nsilicone\nsimetria\nsimpatia\nsimular\nsinal\nsincero\nsingular\nsinopse\nsintonia\nsirene\nsiri\nsituado\nsoberano\nsobra\nsocorro\nsogro\nsoja\nsolda\nsoletrar\nsolteiro\nsombrio\nsonata\nsondar\nsonegar\nsonhador\nsono\nsoprano\nsoquete\nsorrir\nsorteio\nsossego\nsotaque\nsoterrar\nsovado\nsozinho\nsuavizar\nsubida\nsubmerso\nsubsolo\nsubtrair\nsucata\nsucesso\nsuco\nsudeste\nsufixo\nsugador\nsugerir\nsujeito\nsulfato\nsumir\nsuor\nsuperior\nsuplicar\nsuposto\nsuprimir\nsurdina\nsurfista\nsurpresa\nsurreal\nsurtir\nsuspiro\nsustento\ntabela\ntablete\ntabuada\ntacho\ntagarela\ntalher\ntalo\ntalvez\ntamanho\ntamborim\ntampa\ntangente\ntanto\ntapar\ntapioca\ntardio\ntarefa\ntarja\ntarraxa\ntatuagem\ntaurino\ntaxativo\ntaxista\nteatral\ntecer\ntecido\nteclado\ntedioso\nteia\nteimar\ntelefone\ntelhado\ntempero\ntenente\ntensor\ntentar\ntermal\nterno\nterreno\ntese\ntesoura\ntestado\nteto\ntextura\ntexugo\ntiara\ntigela\ntijolo\ntimbrar\ntimidez\ntingido\ntinteiro\ntiragem\ntitular\ntoalha\ntocha\ntolerar\ntolice\ntomada\ntomilho\ntonel\ntontura\ntopete\ntora\ntorcido\ntorneio\ntorque\ntorrada\ntorto\ntostar\ntouca\ntoupeira\ntoxina\ntrabalho\ntracejar\ntradutor\ntrafegar\ntrajeto\ntrama\ntrancar\ntrapo\ntraseiro\ntratador\ntravar\ntreino\ntremer\ntrepidar\ntrevo\ntriagem\ntribo\ntriciclo\ntridente\ntrilogia\ntrindade\ntriplo\ntriturar\ntriunfal\ntrocar\ntrombeta\ntrova\ntrunfo\ntruque\ntubular\ntucano\ntudo\ntulipa\ntupi\nturbo\nturma\nturquesa\ntutelar\ntutorial\nuivar\numbigo\nunha\nunidade\nuniforme\nurologia\nurso\nurtiga\nurubu\nusado\nusina\nusufruir\nvacina\nvadiar\nvagaroso\nvaidoso\nvala\nvalente\nvalidade\nvalores\nvantagem\nvaqueiro\nvaranda\nvareta\nvarrer\nvascular\nvasilha\nvassoura\nvazar\nvazio\nveado\nvedar\nvegetar\nveicular\nveleiro\nvelhice\nveludo\nvencedor\nvendaval\nvenerar\nventre\nverbal\nverdade\nvereador\nvergonha\nvermelho\nverniz\nversar\nvertente\nvespa\nvestido\nvetorial\nviaduto\nviagem\nviajar\nviatura\nvibrador\nvideira\nvidraria\nviela\nviga\nvigente\nvigiar\nvigorar\nvilarejo\nvinco\nvinheta\nvinil\nvioleta\nvirada\nvirtude\nvisitar\nvisto\nvitral\nviveiro\nvizinho\nvoador\nvoar\nvogal\nvolante\nvoleibol\nvoltagem\nvolumoso\nvontade\nvulto\nvuvuzela\nxadrez\nxarope\nxeque\nxeretar\nxerife\nxingar\nzangado\nzarpar\nzebu\nzelador\nzombar\nzoologia\nzumbido`.split('\\n');\n", "export const wordlist = `的\n一\n是\n在\n不\n了\n有\n和\n人\n这\n中\n大\n为\n上\n个\n国\n我\n以\n要\n他\n时\n来\n用\n们\n生\n到\n作\n地\n于\n出\n就\n分\n对\n成\n会\n可\n主\n发\n年\n动\n同\n工\n也\n能\n下\n过\n子\n说\n产\n种\n面\n而\n方\n后\n多\n定\n行\n学\n法\n所\n民\n得\n经\n十\n三\n之\n进\n着\n等\n部\n度\n家\n电\n力\n里\n如\n水\n化\n高\n自\n二\n理\n起\n小\n物\n现\n实\n加\n量\n都\n两\n体\n制\n机\n当\n使\n点\n从\n业\n本\n去\n把\n性\n好\n应\n开\n它\n合\n还\n因\n由\n其\n些\n然\n前\n外\n天\n政\n四\n日\n那\n社\n义\n事\n平\n形\n相\n全\n表\n间\n样\n与\n关\n各\n重\n新\n线\n内\n数\n正\n心\n反\n你\n明\n看\n原\n又\n么\n利\n比\n或\n但\n质\n气\n第\n向\n道\n命\n此\n变\n条\n只\n没\n结\n解\n问\n意\n建\n月\n公\n无\n系\n军\n很\n情\n者\n最\n立\n代\n想\n已\n通\n并\n提\n直\n题\n党\n程\n展\n五\n果\n料\n象\n员\n革\n位\n入\n常\n文\n总\n次\n品\n式\n活\n设\n及\n管\n特\n件\n长\n求\n老\n头\n基\n资\n边\n流\n路\n级\n少\n图\n山\n统\n接\n知\n较\n将\n组\n见\n计\n别\n她\n手\n角\n期\n根\n论\n运\n农\n指\n几\n九\n区\n强\n放\n决\n西\n被\n干\n做\n必\n战\n先\n回\n则\n任\n取\n据\n处\n队\n南\n给\n色\n光\n门\n即\n保\n治\n北\n造\n百\n规\n热\n领\n七\n海\n口\n东\n导\n器\n压\n志\n世\n金\n增\n争\n济\n阶\n油\n思\n术\n极\n交\n受\n联\n什\n认\n六\n共\n权\n收\n证\n改\n清\n美\n再\n采\n转\n更\n单\n风\n切\n打\n白\n教\n速\n花\n带\n安\n场\n身\n车\n例\n真\n务\n具\n万\n每\n目\n至\n达\n走\n积\n示\n议\n声\n报\n斗\n完\n类\n八\n离\n华\n名\n确\n才\n科\n张\n信\n马\n节\n话\n米\n整\n空\n元\n况\n今\n集\n温\n传\n土\n许\n步\n群\n广\n石\n记\n需\n段\n研\n界\n拉\n林\n律\n叫\n且\n究\n观\n越\n织\n装\n影\n算\n低\n持\n音\n众\n书\n布\n复\n容\n儿\n须\n际\n商\n非\n验\n连\n断\n深\n难\n近\n矿\n千\n周\n委\n素\n技\n备\n半\n办\n青\n省\n列\n习\n响\n约\n支\n般\n史\n感\n劳\n便\n团\n往\n酸\n历\n市\n克\n何\n除\n消\n构\n府\n称\n太\n准\n精\n值\n号\n率\n族\n维\n划\n选\n标\n写\n存\n候\n毛\n亲\n快\n效\n斯\n院\n查\n江\n型\n眼\n王\n按\n格\n养\n易\n置\n派\n层\n片\n始\n却\n专\n状\n育\n厂\n京\n识\n适\n属\n圆\n包\n火\n住\n调\n满\n县\n局\n照\n参\n红\n细\n引\n听\n该\n铁\n价\n严\n首\n底\n液\n官\n德\n随\n病\n苏\n失\n尔\n死\n讲\n配\n女\n黄\n推\n显\n谈\n罪\n神\n艺\n呢\n席\n含\n企\n望\n密\n批\n营\n项\n防\n举\n球\n英\n氧\n势\n告\n李\n台\n落\n木\n帮\n轮\n破\n亚\n师\n围\n注\n远\n字\n材\n排\n供\n河\n态\n封\n另\n施\n减\n树\n溶\n怎\n止\n案\n言\n士\n均\n武\n固\n叶\n鱼\n波\n视\n仅\n费\n紧\n爱\n左\n章\n早\n朝\n害\n续\n轻\n服\n试\n食\n充\n兵\n源\n判\n护\n司\n足\n某\n练\n差\n致\n板\n田\n降\n黑\n犯\n负\n击\n范\n继\n兴\n似\n余\n坚\n曲\n输\n修\n故\n城\n夫\n够\n送\n笔\n船\n占\n右\n财\n吃\n富\n春\n职\n觉\n汉\n画\n功\n巴\n跟\n虽\n杂\n飞\n检\n吸\n助\n升\n阳\n互\n初\n创\n抗\n考\n投\n坏\n策\n古\n径\n换\n未\n跑\n留\n钢\n曾\n端\n责\n站\n简\n述\n钱\n副\n尽\n帝\n射\n草\n冲\n承\n独\n令\n限\n阿\n宣\n环\n双\n请\n超\n微\n让\n控\n州\n良\n轴\n找\n否\n纪\n益\n依\n优\n顶\n础\n载\n倒\n房\n突\n坐\n粉\n敌\n略\n客\n袁\n冷\n胜\n绝\n析\n块\n剂\n测\n丝\n协\n诉\n念\n陈\n仍\n罗\n盐\n友\n洋\n错\n苦\n夜\n刑\n移\n频\n逐\n靠\n混\n母\n短\n皮\n终\n聚\n汽\n村\n云\n哪\n既\n距\n卫\n停\n烈\n央\n察\n烧\n迅\n境\n若\n印\n洲\n刻\n括\n激\n孔\n搞\n甚\n室\n待\n核\n校\n散\n侵\n吧\n甲\n游\n久\n菜\n味\n旧\n模\n湖\n货\n损\n预\n阻\n毫\n普\n稳\n乙\n妈\n植\n息\n扩\n银\n语\n挥\n酒\n守\n拿\n序\n纸\n医\n缺\n雨\n吗\n针\n刘\n啊\n急\n唱\n误\n训\n愿\n审\n附\n获\n茶\n鲜\n粮\n斤\n孩\n脱\n硫\n肥\n善\n龙\n演\n父\n渐\n血\n欢\n械\n掌\n歌\n沙\n刚\n攻\n谓\n盾\n讨\n晚\n粒\n乱\n燃\n矛\n乎\n杀\n药\n宁\n鲁\n贵\n钟\n煤\n读\n班\n伯\n香\n介\n迫\n句\n丰\n培\n握\n兰\n担\n弦\n蛋\n沉\n假\n穿\n执\n答\n乐\n谁\n顺\n烟\n缩\n征\n脸\n喜\n松\n脚\n困\n异\n免\n背\n星\n福\n买\n染\n井\n概\n慢\n怕\n磁\n倍\n祖\n皇\n促\n静\n补\n评\n翻\n肉\n践\n尼\n衣\n宽\n扬\n棉\n希\n伤\n操\n垂\n秋\n宜\n氢\n套\n督\n振\n架\n亮\n末\n宪\n庆\n编\n牛\n触\n映\n雷\n销\n诗\n座\n居\n抓\n裂\n胞\n呼\n娘\n景\n威\n绿\n晶\n厚\n盟\n衡\n鸡\n孙\n延\n危\n胶\n屋\n乡\n临\n陆\n顾\n掉\n呀\n灯\n岁\n措\n束\n耐\n剧\n玉\n赵\n跳\n哥\n季\n课\n凯\n胡\n额\n款\n绍\n卷\n齐\n伟\n蒸\n殖\n永\n宗\n苗\n川\n炉\n岩\n弱\n零\n杨\n奏\n沿\n露\n杆\n探\n滑\n镇\n饭\n浓\n航\n怀\n赶\n库\n夺\n伊\n灵\n税\n途\n灭\n赛\n归\n召\n鼓\n播\n盘\n裁\n险\n康\n唯\n录\n菌\n纯\n借\n糖\n盖\n横\n符\n私\n努\n堂\n域\n枪\n润\n幅\n哈\n竟\n熟\n虫\n泽\n脑\n壤\n碳\n欧\n遍\n侧\n寨\n敢\n彻\n虑\n斜\n薄\n庭\n纳\n弹\n饲\n伸\n折\n麦\n湿\n暗\n荷\n瓦\n塞\n床\n筑\n恶\n户\n访\n塔\n奇\n透\n梁\n刀\n旋\n迹\n卡\n氯\n遇\n份\n毒\n泥\n退\n洗\n摆\n灰\n彩\n卖\n耗\n夏\n择\n忙\n铜\n献\n硬\n予\n繁\n圈\n雪\n函\n亦\n抽\n篇\n阵\n阴\n丁\n尺\n追\n堆\n雄\n迎\n泛\n爸\n楼\n避\n谋\n吨\n野\n猪\n旗\n累\n偏\n典\n馆\n索\n秦\n脂\n潮\n爷\n豆\n忽\n托\n惊\n塑\n遗\n愈\n朱\n替\n纤\n粗\n倾\n尚\n痛\n楚\n谢\n奋\n购\n磨\n君\n池\n旁\n碎\n骨\n监\n捕\n弟\n暴\n割\n贯\n殊\n释\n词\n亡\n壁\n顿\n宝\n午\n尘\n闻\n揭\n炮\n残\n冬\n桥\n妇\n警\n综\n招\n吴\n付\n浮\n遭\n徐\n您\n摇\n谷\n赞\n箱\n隔\n订\n男\n吹\n园\n纷\n唐\n败\n宋\n玻\n巨\n耕\n坦\n荣\n闭\n湾\n键\n凡\n驻\n锅\n救\n恩\n剥\n凝\n碱\n齿\n截\n炼\n麻\n纺\n禁\n废\n盛\n版\n缓\n净\n睛\n昌\n婚\n涉\n筒\n嘴\n插\n岸\n朗\n庄\n街\n藏\n姑\n贸\n腐\n奴\n啦\n惯\n乘\n伙\n恢\n匀\n纱\n扎\n辩\n耳\n彪\n臣\n亿\n璃\n抵\n脉\n秀\n萨\n俄\n网\n舞\n店\n喷\n纵\n寸\n汗\n挂\n洪\n贺\n闪\n柬\n爆\n烯\n津\n稻\n墙\n软\n勇\n像\n滚\n厘\n蒙\n芳\n肯\n坡\n柱\n荡\n腿\n仪\n旅\n尾\n轧\n冰\n贡\n登\n黎\n削\n钻\n勒\n逃\n障\n氨\n郭\n峰\n币\n港\n伏\n轨\n亩\n毕\n擦\n莫\n刺\n浪\n秘\n援\n株\n健\n售\n股\n岛\n甘\n泡\n睡\n童\n铸\n汤\n阀\n休\n汇\n舍\n牧\n绕\n炸\n哲\n磷\n绩\n朋\n淡\n尖\n启\n陷\n柴\n呈\n徒\n颜\n泪\n稍\n忘\n泵\n蓝\n拖\n洞\n授\n镜\n辛\n壮\n锋\n贫\n虚\n弯\n摩\n泰\n幼\n廷\n尊\n窗\n纲\n弄\n隶\n疑\n氏\n宫\n姐\n震\n瑞\n怪\n尤\n琴\n循\n描\n膜\n违\n夹\n腰\n缘\n珠\n穷\n森\n枝\n竹\n沟\n催\n绳\n忆\n邦\n剩\n幸\n浆\n栏\n拥\n牙\n贮\n礼\n滤\n钠\n纹\n罢\n拍\n咱\n喊\n袖\n埃\n勤\n罚\n焦\n潜\n伍\n墨\n欲\n缝\n姓\n刊\n饱\n仿\n奖\n铝\n鬼\n丽\n跨\n默\n挖\n链\n扫\n喝\n袋\n炭\n污\n幕\n诸\n弧\n励\n梅\n奶\n洁\n灾\n舟\n鉴\n苯\n讼\n抱\n毁\n懂\n寒\n智\n埔\n寄\n届\n跃\n渡\n挑\n丹\n艰\n贝\n碰\n拔\n爹\n戴\n码\n梦\n芽\n熔\n赤\n渔\n哭\n敬\n颗\n奔\n铅\n仲\n虎\n稀\n妹\n乏\n珍\n申\n桌\n遵\n允\n隆\n螺\n仓\n魏\n锐\n晓\n氮\n兼\n隐\n碍\n赫\n拨\n忠\n肃\n缸\n牵\n抢\n博\n巧\n壳\n兄\n杜\n讯\n诚\n碧\n祥\n柯\n页\n巡\n矩\n悲\n灌\n龄\n伦\n票\n寻\n桂\n铺\n圣\n恐\n恰\n郑\n趣\n抬\n荒\n腾\n贴\n柔\n滴\n猛\n阔\n辆\n妻\n填\n撤\n储\n签\n闹\n扰\n紫\n砂\n递\n戏\n吊\n陶\n伐\n喂\n疗\n瓶\n婆\n抚\n臂\n摸\n忍\n虾\n蜡\n邻\n胸\n巩\n挤\n偶\n弃\n槽\n劲\n乳\n邓\n吉\n仁\n烂\n砖\n租\n乌\n舰\n伴\n瓜\n浅\n丙\n暂\n燥\n橡\n柳\n迷\n暖\n牌\n秧\n胆\n详\n簧\n踏\n瓷\n谱\n呆\n宾\n糊\n洛\n辉\n愤\n竞\n隙\n怒\n粘\n乃\n绪\n肩\n籍\n敏\n涂\n熙\n皆\n侦\n悬\n掘\n享\n纠\n醒\n狂\n锁\n淀\n恨\n牲\n霸\n爬\n赏\n逆\n玩\n陵\n祝\n秒\n浙\n貌\n役\n彼\n悉\n鸭\n趋\n凤\n晨\n畜\n辈\n秩\n卵\n署\n梯\n炎\n滩\n棋\n驱\n筛\n峡\n冒\n啥\n寿\n译\n浸\n泉\n帽\n迟\n硅\n疆\n贷\n漏\n稿\n冠\n嫩\n胁\n芯\n牢\n叛\n蚀\n奥\n鸣\n岭\n羊\n凭\n串\n塘\n绘\n酵\n融\n盆\n锡\n庙\n筹\n冻\n辅\n摄\n袭\n筋\n拒\n僚\n旱\n钾\n鸟\n漆\n沈\n眉\n疏\n添\n棒\n穗\n硝\n韩\n逼\n扭\n侨\n凉\n挺\n碗\n栽\n炒\n杯\n患\n馏\n劝\n豪\n辽\n勃\n鸿\n旦\n吏\n拜\n狗\n埋\n辊\n掩\n饮\n搬\n骂\n辞\n勾\n扣\n估\n蒋\n绒\n雾\n丈\n朵\n姆\n拟\n宇\n辑\n陕\n雕\n偿\n蓄\n崇\n剪\n倡\n厅\n咬\n驶\n薯\n刷\n斥\n番\n赋\n奉\n佛\n浇\n漫\n曼\n扇\n钙\n桃\n扶\n仔\n返\n俗\n亏\n腔\n鞋\n棱\n覆\n框\n悄\n叔\n撞\n骗\n勘\n旺\n沸\n孤\n吐\n孟\n渠\n屈\n疾\n妙\n惜\n仰\n狠\n胀\n谐\n抛\n霉\n桑\n岗\n嘛\n衰\n盗\n渗\n脏\n赖\n涌\n甜\n曹\n阅\n肌\n哩\n厉\n烃\n纬\n毅\n昨\n伪\n症\n煮\n叹\n钉\n搭\n茎\n笼\n酷\n偷\n弓\n锥\n恒\n杰\n坑\n鼻\n翼\n纶\n叙\n狱\n逮\n罐\n络\n棚\n抑\n膨\n蔬\n寺\n骤\n穆\n冶\n枯\n册\n尸\n凸\n绅\n坯\n牺\n焰\n轰\n欣\n晋\n瘦\n御\n锭\n锦\n丧\n旬\n锻\n垄\n搜\n扑\n邀\n亭\n酯\n迈\n舒\n脆\n酶\n闲\n忧\n酚\n顽\n羽\n涨\n卸\n仗\n陪\n辟\n惩\n杭\n姚\n肚\n捉\n飘\n漂\n昆\n欺\n吾\n郎\n烷\n汁\n呵\n饰\n萧\n雅\n邮\n迁\n燕\n撒\n姻\n赴\n宴\n烦\n债\n帐\n斑\n铃\n旨\n醇\n董\n饼\n雏\n姿\n拌\n傅\n腹\n妥\n揉\n贤\n拆\n歪\n葡\n胺\n丢\n浩\n徽\n昂\n垫\n挡\n览\n贪\n慰\n缴\n汪\n慌\n冯\n诺\n姜\n谊\n凶\n劣\n诬\n耀\n昏\n躺\n盈\n骑\n乔\n溪\n丛\n卢\n抹\n闷\n咨\n刮\n驾\n缆\n悟\n摘\n铒\n掷\n颇\n幻\n柄\n惠\n惨\n佳\n仇\n腊\n窝\n涤\n剑\n瞧\n堡\n泼\n葱\n罩\n霍\n捞\n胎\n苍\n滨\n俩\n捅\n湘\n砍\n霞\n邵\n萄\n疯\n淮\n遂\n熊\n粪\n烘\n宿\n档\n戈\n驳\n嫂\n裕\n徙\n箭\n捐\n肠\n撑\n晒\n辨\n殿\n莲\n摊\n搅\n酱\n屏\n疫\n哀\n蔡\n堵\n沫\n皱\n畅\n叠\n阁\n莱\n敲\n辖\n钩\n痕\n坝\n巷\n饿\n祸\n丘\n玄\n溜\n曰\n逻\n彭\n尝\n卿\n妨\n艇\n吞\n韦\n怨\n矮\n歇`.split('\\n');\n", "export const wordlist = `ábaco\nabdomen\nabeja\nabierto\nabogado\nabono\naborto\nabrazo\nabrir\nabuelo\nabuso\nacabar\nacademia\nacceso\nacción\naceite\nacelga\nacento\naceptar\nácido\naclarar\nacné\nacoger\nacoso\nactivo\nacto\nactriz\nactuar\nacudir\nacuerdo\nacusar\nadicto\nadmitir\nadoptar\nadorno\naduana\nadulto\naéreo\nafectar\nafición\nafinar\nafirmar\nágil\nagitar\nagonía\nagosto\nagotar\nagregar\nagrio\nagua\nagudo\náguila\naguja\nahogo\nahorro\naire\naislar\najedrez\najeno\najuste\nalacrán\nalambre\nalarma\nalba\nálbum\nalcalde\naldea\nalegre\nalejar\nalerta\naleta\nalfiler\nalga\nalgodón\naliado\naliento\nalivio\nalma\nalmeja\nalmíbar\naltar\nalteza\naltivo\nalto\naltura\nalumno\nalzar\namable\namante\namapola\namargo\namasar\námbar\námbito\nameno\namigo\namistad\namor\namparo\namplio\nancho\nanciano\nancla\nandar\nandén\nanemia\nángulo\nanillo\nánimo\nanís\nanotar\nantena\nantiguo\nantojo\nanual\nanular\nanuncio\nañadir\nañejo\naño\napagar\naparato\napetito\napio\naplicar\napodo\naporte\napoyo\naprender\naprobar\napuesta\napuro\narado\naraña\narar\nárbitro\nárbol\narbusto\narchivo\narco\narder\nardilla\narduo\nárea\nárido\naries\narmonía\narnés\naroma\narpa\narpón\narreglo\narroz\narruga\narte\nartista\nasa\nasado\nasalto\nascenso\nasegurar\naseo\nasesor\nasiento\nasilo\nasistir\nasno\nasombro\náspero\nastilla\nastro\nastuto\nasumir\nasunto\natajo\nataque\natar\natento\nateo\nático\natleta\nátomo\natraer\natroz\natún\naudaz\naudio\nauge\naula\naumento\nausente\nautor\naval\navance\navaro\nave\navellana\navena\navestruz\navión\naviso\nayer\nayuda\nayuno\nazafrán\nazar\nazote\nazúcar\nazufre\nazul\nbaba\nbabor\nbache\nbahía\nbaile\nbajar\nbalanza\nbalcón\nbalde\nbambú\nbanco\nbanda\nbaño\nbarba\nbarco\nbarniz\nbarro\nbáscula\nbastón\nbasura\nbatalla\nbatería\nbatir\nbatuta\nbaúl\nbazar\nbebé\nbebida\nbello\nbesar\nbeso\nbestia\nbicho\nbien\nbingo\nblanco\nbloque\nblusa\nboa\nbobina\nbobo\nboca\nbocina\nboda\nbodega\nboina\nbola\nbolero\nbolsa\nbomba\nbondad\nbonito\nbono\nbonsái\nborde\nborrar\nbosque\nbote\nbotín\nbóveda\nbozal\nbravo\nbrazo\nbrecha\nbreve\nbrillo\nbrinco\nbrisa\nbroca\nbroma\nbronce\nbrote\nbruja\nbrusco\nbruto\nbuceo\nbucle\nbueno\nbuey\nbufanda\nbufón\nbúho\nbuitre\nbulto\nburbuja\nburla\nburro\nbuscar\nbutaca\nbuzón\ncaballo\ncabeza\ncabina\ncabra\ncacao\ncadáver\ncadena\ncaer\ncafé\ncaída\ncaimán\ncaja\ncajón\ncal\ncalamar\ncalcio\ncaldo\ncalidad\ncalle\ncalma\ncalor\ncalvo\ncama\ncambio\ncamello\ncamino\ncampo\ncáncer\ncandil\ncanela\ncanguro\ncanica\ncanto\ncaña\ncañón\ncaoba\ncaos\ncapaz\ncapitán\ncapote\ncaptar\ncapucha\ncara\ncarbón\ncárcel\ncareta\ncarga\ncariño\ncarne\ncarpeta\ncarro\ncarta\ncasa\ncasco\ncasero\ncaspa\ncastor\ncatorce\ncatre\ncaudal\ncausa\ncazo\ncebolla\nceder\ncedro\ncelda\ncélebre\nceloso\ncélula\ncemento\nceniza\ncentro\ncerca\ncerdo\ncereza\ncero\ncerrar\ncerteza\ncésped\ncetro\nchacal\nchaleco\nchampú\nchancla\nchapa\ncharla\nchico\nchiste\nchivo\nchoque\nchoza\nchuleta\nchupar\nciclón\nciego\ncielo\ncien\ncierto\ncifra\ncigarro\ncima\ncinco\ncine\ncinta\nciprés\ncirco\nciruela\ncisne\ncita\nciudad\nclamor\nclan\nclaro\nclase\nclave\ncliente\nclima\nclínica\ncobre\ncocción\ncochino\ncocina\ncoco\ncódigo\ncodo\ncofre\ncoger\ncohete\ncojín\ncojo\ncola\ncolcha\ncolegio\ncolgar\ncolina\ncollar\ncolmo\ncolumna\ncombate\ncomer\ncomida\ncómodo\ncompra\nconde\nconejo\nconga\nconocer\nconsejo\ncontar\ncopa\ncopia\ncorazón\ncorbata\ncorcho\ncordón\ncorona\ncorrer\ncoser\ncosmos\ncosta\ncráneo\ncráter\ncrear\ncrecer\ncreído\ncrema\ncría\ncrimen\ncripta\ncrisis\ncromo\ncrónica\ncroqueta\ncrudo\ncruz\ncuadro\ncuarto\ncuatro\ncubo\ncubrir\ncuchara\ncuello\ncuento\ncuerda\ncuesta\ncueva\ncuidar\nculebra\nculpa\nculto\ncumbre\ncumplir\ncuna\ncuneta\ncuota\ncupón\ncúpula\ncurar\ncurioso\ncurso\ncurva\ncutis\ndama\ndanza\ndar\ndardo\ndátil\ndeber\ndébil\ndécada\ndecir\ndedo\ndefensa\ndefinir\ndejar\ndelfín\ndelgado\ndelito\ndemora\ndenso\ndental\ndeporte\nderecho\nderrota\ndesayuno\ndeseo\ndesfile\ndesnudo\ndestino\ndesvío\ndetalle\ndetener\ndeuda\ndía\ndiablo\ndiadema\ndiamante\ndiana\ndiario\ndibujo\ndictar\ndiente\ndieta\ndiez\ndifícil\ndigno\ndilema\ndiluir\ndinero\ndirecto\ndirigir\ndisco\ndiseño\ndisfraz\ndiva\ndivino\ndoble\ndoce\ndolor\ndomingo\ndon\ndonar\ndorado\ndormir\ndorso\ndos\ndosis\ndragón\ndroga\nducha\nduda\nduelo\ndueño\ndulce\ndúo\nduque\ndurar\ndureza\nduro\nébano\nebrio\nechar\neco\necuador\nedad\nedición\nedificio\neditor\neducar\nefecto\neficaz\neje\nejemplo\nelefante\nelegir\nelemento\nelevar\nelipse\nélite\nelixir\nelogio\neludir\nembudo\nemitir\nemoción\nempate\nempeño\nempleo\nempresa\nenano\nencargo\nenchufe\nencía\nenemigo\nenero\nenfado\nenfermo\nengaño\nenigma\nenlace\nenorme\nenredo\nensayo\nenseñar\nentero\nentrar\nenvase\nenvío\népoca\nequipo\nerizo\nescala\nescena\nescolar\nescribir\nescudo\nesencia\nesfera\nesfuerzo\nespada\nespejo\nespía\nesposa\nespuma\nesquí\nestar\neste\nestilo\nestufa\netapa\neterno\nética\netnia\nevadir\nevaluar\nevento\nevitar\nexacto\nexamen\nexceso\nexcusa\nexento\nexigir\nexilio\nexistir\néxito\nexperto\nexplicar\nexponer\nextremo\nfábrica\nfábula\nfachada\nfácil\nfactor\nfaena\nfaja\nfalda\nfallo\nfalso\nfaltar\nfama\nfamilia\nfamoso\nfaraón\nfarmacia\nfarol\nfarsa\nfase\nfatiga\nfauna\nfavor\nfax\nfebrero\nfecha\nfeliz\nfeo\nferia\nferoz\nfértil\nfervor\nfestín\nfiable\nfianza\nfiar\nfibra\nficción\nficha\nfideo\nfiebre\nfiel\nfiera\nfiesta\nfigura\nfijar\nfijo\nfila\nfilete\nfilial\nfiltro\nfin\nfinca\nfingir\nfinito\nfirma\nflaco\nflauta\nflecha\nflor\nflota\nfluir\nflujo\nflúor\nfobia\nfoca\nfogata\nfogón\nfolio\nfolleto\nfondo\nforma\nforro\nfortuna\nforzar\nfosa\nfoto\nfracaso\nfrágil\nfranja\nfrase\nfraude\nfreír\nfreno\nfresa\nfrío\nfrito\nfruta\nfuego\nfuente\nfuerza\nfuga\nfumar\nfunción\nfunda\nfurgón\nfuria\nfusil\nfútbol\nfuturo\ngacela\ngafas\ngaita\ngajo\ngala\ngalería\ngallo\ngamba\nganar\ngancho\nganga\nganso\ngaraje\ngarza\ngasolina\ngastar\ngato\ngavilán\ngemelo\ngemir\ngen\ngénero\ngenio\ngente\ngeranio\ngerente\ngermen\ngesto\ngigante\ngimnasio\ngirar\ngiro\nglaciar\nglobo\ngloria\ngol\ngolfo\ngoloso\ngolpe\ngoma\ngordo\ngorila\ngorra\ngota\ngoteo\ngozar\ngrada\ngráfico\ngrano\ngrasa\ngratis\ngrave\ngrieta\ngrillo\ngripe\ngris\ngrito\ngrosor\ngrúa\ngrueso\ngrumo\ngrupo\nguante\nguapo\nguardia\nguerra\nguía\nguiño\nguion\nguiso\nguitarra\ngusano\ngustar\nhaber\nhábil\nhablar\nhacer\nhacha\nhada\nhallar\nhamaca\nharina\nhaz\nhazaña\nhebilla\nhebra\nhecho\nhelado\nhelio\nhembra\nherir\nhermano\nhéroe\nhervir\nhielo\nhierro\nhígado\nhigiene\nhijo\nhimno\nhistoria\nhocico\nhogar\nhoguera\nhoja\nhombre\nhongo\nhonor\nhonra\nhora\nhormiga\nhorno\nhostil\nhoyo\nhueco\nhuelga\nhuerta\nhueso\nhuevo\nhuida\nhuir\nhumano\nhúmedo\nhumilde\nhumo\nhundir\nhuracán\nhurto\nicono\nideal\nidioma\nídolo\niglesia\niglú\nigual\nilegal\nilusión\nimagen\nimán\nimitar\nimpar\nimperio\nimponer\nimpulso\nincapaz\níndice\ninerte\ninfiel\ninforme\ningenio\ninicio\ninmenso\ninmune\ninnato\ninsecto\ninstante\ninterés\níntimo\nintuir\ninútil\ninvierno\nira\niris\nironía\nisla\nislote\njabalí\njabón\njamón\njarabe\njardín\njarra\njaula\njazmín\njefe\njeringa\njinete\njornada\njoroba\njoven\njoya\njuerga\njueves\njuez\njugador\njugo\njuguete\njuicio\njunco\njungla\njunio\njuntar\njúpiter\njurar\njusto\njuvenil\njuzgar\nkilo\nkoala\nlabio\nlacio\nlacra\nlado\nladrón\nlagarto\nlágrima\nlaguna\nlaico\nlamer\nlámina\nlámpara\nlana\nlancha\nlangosta\nlanza\nlápiz\nlargo\nlarva\nlástima\nlata\nlátex\nlatir\nlaurel\nlavar\nlazo\nleal\nlección\nleche\nlector\nleer\nlegión\nlegumbre\nlejano\nlengua\nlento\nleña\nleón\nleopardo\nlesión\nletal\nletra\nleve\nleyenda\nlibertad\nlibro\nlicor\nlíder\nlidiar\nlienzo\nliga\nligero\nlima\nlímite\nlimón\nlimpio\nlince\nlindo\nlínea\nlingote\nlino\nlinterna\nlíquido\nliso\nlista\nlitera\nlitio\nlitro\nllaga\nllama\nllanto\nllave\nllegar\nllenar\nllevar\nllorar\nllover\nlluvia\nlobo\nloción\nloco\nlocura\nlógica\nlogro\nlombriz\nlomo\nlonja\nlote\nlucha\nlucir\nlugar\nlujo\nluna\nlunes\nlupa\nlustro\nluto\nluz\nmaceta\nmacho\nmadera\nmadre\nmaduro\nmaestro\nmafia\nmagia\nmago\nmaíz\nmaldad\nmaleta\nmalla\nmalo\nmamá\nmambo\nmamut\nmanco\nmando\nmanejar\nmanga\nmaniquí\nmanjar\nmano\nmanso\nmanta\nmañana\nmapa\nmáquina\nmar\nmarco\nmarea\nmarfil\nmargen\nmarido\nmármol\nmarrón\nmartes\nmarzo\nmasa\nmáscara\nmasivo\nmatar\nmateria\nmatiz\nmatriz\nmáximo\nmayor\nmazorca\nmecha\nmedalla\nmedio\nmédula\nmejilla\nmejor\nmelena\nmelón\nmemoria\nmenor\nmensaje\nmente\nmenú\nmercado\nmerengue\nmérito\nmes\nmesón\nmeta\nmeter\nmétodo\nmetro\nmezcla\nmiedo\nmiel\nmiembro\nmiga\nmil\nmilagro\nmilitar\nmillón\nmimo\nmina\nminero\nmínimo\nminuto\nmiope\nmirar\nmisa\nmiseria\nmisil\nmismo\nmitad\nmito\nmochila\nmoción\nmoda\nmodelo\nmoho\nmojar\nmolde\nmoler\nmolino\nmomento\nmomia\nmonarca\nmoneda\nmonja\nmonto\nmoño\nmorada\nmorder\nmoreno\nmorir\nmorro\nmorsa\nmortal\nmosca\nmostrar\nmotivo\nmover\nmóvil\nmozo\nmucho\nmudar\nmueble\nmuela\nmuerte\nmuestra\nmugre\nmujer\nmula\nmuleta\nmulta\nmundo\nmuñeca\nmural\nmuro\nmúsculo\nmuseo\nmusgo\nmúsica\nmuslo\nnácar\nnación\nnadar\nnaipe\nnaranja\nnariz\nnarrar\nnasal\nnatal\nnativo\nnatural\nnáusea\nnaval\nnave\nnavidad\nnecio\nnéctar\nnegar\nnegocio\nnegro\nneón\nnervio\nneto\nneutro\nnevar\nnevera\nnicho\nnido\nniebla\nnieto\nniñez\nniño\nnítido\nnivel\nnobleza\nnoche\nnómina\nnoria\nnorma\nnorte\nnota\nnoticia\nnovato\nnovela\nnovio\nnube\nnuca\nnúcleo\nnudillo\nnudo\nnuera\nnueve\nnuez\nnulo\nnúmero\nnutria\noasis\nobeso\nobispo\nobjeto\nobra\nobrero\nobservar\nobtener\nobvio\noca\nocaso\nocéano\nochenta\nocho\nocio\nocre\noctavo\noctubre\noculto\nocupar\nocurrir\nodiar\nodio\nodisea\noeste\nofensa\noferta\noficio\nofrecer\nogro\noído\noír\nojo\nola\noleada\nolfato\nolivo\nolla\nolmo\nolor\nolvido\nombligo\nonda\nonza\nopaco\nopción\nópera\nopinar\noponer\noptar\nóptica\nopuesto\noración\norador\noral\nórbita\norca\norden\noreja\nórgano\norgía\norgullo\noriente\norigen\norilla\noro\norquesta\noruga\nosadía\noscuro\nosezno\noso\nostra\notoño\notro\noveja\nóvulo\nóxido\noxígeno\noyente\nozono\npacto\npadre\npaella\npágina\npago\npaís\npájaro\npalabra\npalco\npaleta\npálido\npalma\npaloma\npalpar\npan\npanal\npánico\npantera\npañuelo\npapá\npapel\npapilla\npaquete\nparar\nparcela\npared\nparir\nparo\npárpado\nparque\npárrafo\nparte\npasar\npaseo\npasión\npaso\npasta\npata\npatio\npatria\npausa\npauta\npavo\npayaso\npeatón\npecado\npecera\npecho\npedal\npedir\npegar\npeine\npelar\npeldaño\npelea\npeligro\npellejo\npelo\npeluca\npena\npensar\npeñón\npeón\npeor\npepino\npequeño\npera\npercha\nperder\npereza\nperfil\nperico\nperla\npermiso\nperro\npersona\npesa\npesca\npésimo\npestaña\npétalo\npetróleo\npez\npezuña\npicar\npichón\npie\npiedra\npierna\npieza\npijama\npilar\npiloto\npimienta\npino\npintor\npinza\npiña\npiojo\npipa\npirata\npisar\npiscina\npiso\npista\npitón\npizca\nplaca\nplan\nplata\nplaya\nplaza\npleito\npleno\nplomo\npluma\nplural\npobre\npoco\npoder\npodio\npoema\npoesía\npoeta\npolen\npolicía\npollo\npolvo\npomada\npomelo\npomo\npompa\nponer\nporción\nportal\nposada\nposeer\nposible\nposte\npotencia\npotro\npozo\nprado\nprecoz\npregunta\npremio\nprensa\npreso\nprevio\nprimo\npríncipe\nprisión\nprivar\nproa\nprobar\nproceso\nproducto\nproeza\nprofesor\nprograma\nprole\npromesa\npronto\npropio\npróximo\nprueba\npúblico\npuchero\npudor\npueblo\npuerta\npuesto\npulga\npulir\npulmón\npulpo\npulso\npuma\npunto\npuñal\npuño\npupa\npupila\npuré\nquedar\nqueja\nquemar\nquerer\nqueso\nquieto\nquímica\nquince\nquitar\nrábano\nrabia\nrabo\nración\nradical\nraíz\nrama\nrampa\nrancho\nrango\nrapaz\nrápido\nrapto\nrasgo\nraspa\nrato\nrayo\nraza\nrazón\nreacción\nrealidad\nrebaño\nrebote\nrecaer\nreceta\nrechazo\nrecoger\nrecreo\nrecto\nrecurso\nred\nredondo\nreducir\nreflejo\nreforma\nrefrán\nrefugio\nregalo\nregir\nregla\nregreso\nrehén\nreino\nreír\nreja\nrelato\nrelevo\nrelieve\nrelleno\nreloj\nremar\nremedio\nremo\nrencor\nrendir\nrenta\nreparto\nrepetir\nreposo\nreptil\nres\nrescate\nresina\nrespeto\nresto\nresumen\nretiro\nretorno\nretrato\nreunir\nrevés\nrevista\nrey\nrezar\nrico\nriego\nrienda\nriesgo\nrifa\nrígido\nrigor\nrincón\nriñón\nrío\nriqueza\nrisa\nritmo\nrito\nrizo\nroble\nroce\nrociar\nrodar\nrodeo\nrodilla\nroer\nrojizo\nrojo\nromero\nromper\nron\nronco\nronda\nropa\nropero\nrosa\nrosca\nrostro\nrotar\nrubí\nrubor\nrudo\nrueda\nrugir\nruido\nruina\nruleta\nrulo\nrumbo\nrumor\nruptura\nruta\nrutina\nsábado\nsaber\nsabio\nsable\nsacar\nsagaz\nsagrado\nsala\nsaldo\nsalero\nsalir\nsalmón\nsalón\nsalsa\nsalto\nsalud\nsalvar\nsamba\nsanción\nsandía\nsanear\nsangre\nsanidad\nsano\nsanto\nsapo\nsaque\nsardina\nsartén\nsastre\nsatán\nsauna\nsaxofón\nsección\nseco\nsecreto\nsecta\nsed\nseguir\nseis\nsello\nselva\nsemana\nsemilla\nsenda\nsensor\nseñal\nseñor\nseparar\nsepia\nsequía\nser\nserie\nsermón\nservir\nsesenta\nsesión\nseta\nsetenta\nsevero\nsexo\nsexto\nsidra\nsiesta\nsiete\nsiglo\nsigno\nsílaba\nsilbar\nsilencio\nsilla\nsímbolo\nsimio\nsirena\nsistema\nsitio\nsituar\nsobre\nsocio\nsodio\nsol\nsolapa\nsoldado\nsoledad\nsólido\nsoltar\nsolución\nsombra\nsondeo\nsonido\nsonoro\nsonrisa\nsopa\nsoplar\nsoporte\nsordo\nsorpresa\nsorteo\nsostén\nsótano\nsuave\nsubir\nsuceso\nsudor\nsuegra\nsuelo\nsueño\nsuerte\nsufrir\nsujeto\nsultán\nsumar\nsuperar\nsuplir\nsuponer\nsupremo\nsur\nsurco\nsureño\nsurgir\nsusto\nsutil\ntabaco\ntabique\ntabla\ntabú\ntaco\ntacto\ntajo\ntalar\ntalco\ntalento\ntalla\ntalón\ntamaño\ntambor\ntango\ntanque\ntapa\ntapete\ntapia\ntapón\ntaquilla\ntarde\ntarea\ntarifa\ntarjeta\ntarot\ntarro\ntarta\ntatuaje\ntauro\ntaza\ntazón\nteatro\ntecho\ntecla\ntécnica\ntejado\ntejer\ntejido\ntela\nteléfono\ntema\ntemor\ntemplo\ntenaz\ntender\ntener\ntenis\ntenso\nteoría\nterapia\nterco\ntérmino\nternura\nterror\ntesis\ntesoro\ntestigo\ntetera\ntexto\ntez\ntibio\ntiburón\ntiempo\ntienda\ntierra\ntieso\ntigre\ntijera\ntilde\ntimbre\ntímido\ntimo\ntinta\ntío\ntípico\ntipo\ntira\ntirón\ntitán\ntítere\ntítulo\ntiza\ntoalla\ntobillo\ntocar\ntocino\ntodo\ntoga\ntoldo\ntomar\ntono\ntonto\ntopar\ntope\ntoque\ntórax\ntorero\ntormenta\ntorneo\ntoro\ntorpedo\ntorre\ntorso\ntortuga\ntos\ntosco\ntoser\ntóxico\ntrabajo\ntractor\ntraer\ntráfico\ntrago\ntraje\ntramo\ntrance\ntrato\ntrauma\ntrazar\ntrébol\ntregua\ntreinta\ntren\ntrepar\ntres\ntribu\ntrigo\ntripa\ntriste\ntriunfo\ntrofeo\ntrompa\ntronco\ntropa\ntrote\ntrozo\ntruco\ntrueno\ntrufa\ntubería\ntubo\ntuerto\ntumba\ntumor\ntúnel\ntúnica\nturbina\nturismo\nturno\ntutor\nubicar\núlcera\numbral\nunidad\nunir\nuniverso\nuno\nuntar\nuña\nurbano\nurbe\nurgente\nurna\nusar\nusuario\nútil\nutopía\nuva\nvaca\nvacío\nvacuna\nvagar\nvago\nvaina\nvajilla\nvale\nválido\nvalle\nvalor\nválvula\nvampiro\nvara\nvariar\nvarón\nvaso\nvecino\nvector\nvehículo\nveinte\nvejez\nvela\nvelero\nveloz\nvena\nvencer\nvenda\nveneno\nvengar\nvenir\nventa\nvenus\nver\nverano\nverbo\nverde\nvereda\nverja\nverso\nverter\nvía\nviaje\nvibrar\nvicio\nvíctima\nvida\nvídeo\nvidrio\nviejo\nviernes\nvigor\nvil\nvilla\nvinagre\nvino\nviñedo\nviolín\nviral\nvirgo\nvirtud\nvisor\nvíspera\nvista\nvitamina\nviudo\nvivaz\nvivero\nvivir\nvivo\nvolcán\nvolumen\nvolver\nvoraz\nvotar\nvoto\nvoz\nvuelo\nvulgar\nyacer\nyate\nyegua\nyema\nyerno\nyeso\nyodo\nyoga\nyogur\nzafiro\nzanja\nzapato\nzarza\nzona\nzorro\nzumo\nzurdo`.split('\\n');\n", "export const wordlist = `的\n一\n是\n在\n不\n了\n有\n和\n人\n這\n中\n大\n為\n上\n個\n國\n我\n以\n要\n他\n時\n來\n用\n們\n生\n到\n作\n地\n於\n出\n就\n分\n對\n成\n會\n可\n主\n發\n年\n動\n同\n工\n也\n能\n下\n過\n子\n說\n產\n種\n面\n而\n方\n後\n多\n定\n行\n學\n法\n所\n民\n得\n經\n十\n三\n之\n進\n著\n等\n部\n度\n家\n電\n力\n裡\n如\n水\n化\n高\n自\n二\n理\n起\n小\n物\n現\n實\n加\n量\n都\n兩\n體\n制\n機\n當\n使\n點\n從\n業\n本\n去\n把\n性\n好\n應\n開\n它\n合\n還\n因\n由\n其\n些\n然\n前\n外\n天\n政\n四\n日\n那\n社\n義\n事\n平\n形\n相\n全\n表\n間\n樣\n與\n關\n各\n重\n新\n線\n內\n數\n正\n心\n反\n你\n明\n看\n原\n又\n麼\n利\n比\n或\n但\n質\n氣\n第\n向\n道\n命\n此\n變\n條\n只\n沒\n結\n解\n問\n意\n建\n月\n公\n無\n系\n軍\n很\n情\n者\n最\n立\n代\n想\n已\n通\n並\n提\n直\n題\n黨\n程\n展\n五\n果\n料\n象\n員\n革\n位\n入\n常\n文\n總\n次\n品\n式\n活\n設\n及\n管\n特\n件\n長\n求\n老\n頭\n基\n資\n邊\n流\n路\n級\n少\n圖\n山\n統\n接\n知\n較\n將\n組\n見\n計\n別\n她\n手\n角\n期\n根\n論\n運\n農\n指\n幾\n九\n區\n強\n放\n決\n西\n被\n幹\n做\n必\n戰\n先\n回\n則\n任\n取\n據\n處\n隊\n南\n給\n色\n光\n門\n即\n保\n治\n北\n造\n百\n規\n熱\n領\n七\n海\n口\n東\n導\n器\n壓\n志\n世\n金\n增\n爭\n濟\n階\n油\n思\n術\n極\n交\n受\n聯\n什\n認\n六\n共\n權\n收\n證\n改\n清\n美\n再\n採\n轉\n更\n單\n風\n切\n打\n白\n教\n速\n花\n帶\n安\n場\n身\n車\n例\n真\n務\n具\n萬\n每\n目\n至\n達\n走\n積\n示\n議\n聲\n報\n鬥\n完\n類\n八\n離\n華\n名\n確\n才\n科\n張\n信\n馬\n節\n話\n米\n整\n空\n元\n況\n今\n集\n溫\n傳\n土\n許\n步\n群\n廣\n石\n記\n需\n段\n研\n界\n拉\n林\n律\n叫\n且\n究\n觀\n越\n織\n裝\n影\n算\n低\n持\n音\n眾\n書\n布\n复\n容\n兒\n須\n際\n商\n非\n驗\n連\n斷\n深\n難\n近\n礦\n千\n週\n委\n素\n技\n備\n半\n辦\n青\n省\n列\n習\n響\n約\n支\n般\n史\n感\n勞\n便\n團\n往\n酸\n歷\n市\n克\n何\n除\n消\n構\n府\n稱\n太\n準\n精\n值\n號\n率\n族\n維\n劃\n選\n標\n寫\n存\n候\n毛\n親\n快\n效\n斯\n院\n查\n江\n型\n眼\n王\n按\n格\n養\n易\n置\n派\n層\n片\n始\n卻\n專\n狀\n育\n廠\n京\n識\n適\n屬\n圓\n包\n火\n住\n調\n滿\n縣\n局\n照\n參\n紅\n細\n引\n聽\n該\n鐵\n價\n嚴\n首\n底\n液\n官\n德\n隨\n病\n蘇\n失\n爾\n死\n講\n配\n女\n黃\n推\n顯\n談\n罪\n神\n藝\n呢\n席\n含\n企\n望\n密\n批\n營\n項\n防\n舉\n球\n英\n氧\n勢\n告\n李\n台\n落\n木\n幫\n輪\n破\n亞\n師\n圍\n注\n遠\n字\n材\n排\n供\n河\n態\n封\n另\n施\n減\n樹\n溶\n怎\n止\n案\n言\n士\n均\n武\n固\n葉\n魚\n波\n視\n僅\n費\n緊\n愛\n左\n章\n早\n朝\n害\n續\n輕\n服\n試\n食\n充\n兵\n源\n判\n護\n司\n足\n某\n練\n差\n致\n板\n田\n降\n黑\n犯\n負\n擊\n范\n繼\n興\n似\n餘\n堅\n曲\n輸\n修\n故\n城\n夫\n夠\n送\n筆\n船\n佔\n右\n財\n吃\n富\n春\n職\n覺\n漢\n畫\n功\n巴\n跟\n雖\n雜\n飛\n檢\n吸\n助\n昇\n陽\n互\n初\n創\n抗\n考\n投\n壞\n策\n古\n徑\n換\n未\n跑\n留\n鋼\n曾\n端\n責\n站\n簡\n述\n錢\n副\n盡\n帝\n射\n草\n衝\n承\n獨\n令\n限\n阿\n宣\n環\n雙\n請\n超\n微\n讓\n控\n州\n良\n軸\n找\n否\n紀\n益\n依\n優\n頂\n礎\n載\n倒\n房\n突\n坐\n粉\n敵\n略\n客\n袁\n冷\n勝\n絕\n析\n塊\n劑\n測\n絲\n協\n訴\n念\n陳\n仍\n羅\n鹽\n友\n洋\n錯\n苦\n夜\n刑\n移\n頻\n逐\n靠\n混\n母\n短\n皮\n終\n聚\n汽\n村\n雲\n哪\n既\n距\n衛\n停\n烈\n央\n察\n燒\n迅\n境\n若\n印\n洲\n刻\n括\n激\n孔\n搞\n甚\n室\n待\n核\n校\n散\n侵\n吧\n甲\n遊\n久\n菜\n味\n舊\n模\n湖\n貨\n損\n預\n阻\n毫\n普\n穩\n乙\n媽\n植\n息\n擴\n銀\n語\n揮\n酒\n守\n拿\n序\n紙\n醫\n缺\n雨\n嗎\n針\n劉\n啊\n急\n唱\n誤\n訓\n願\n審\n附\n獲\n茶\n鮮\n糧\n斤\n孩\n脫\n硫\n肥\n善\n龍\n演\n父\n漸\n血\n歡\n械\n掌\n歌\n沙\n剛\n攻\n謂\n盾\n討\n晚\n粒\n亂\n燃\n矛\n乎\n殺\n藥\n寧\n魯\n貴\n鐘\n煤\n讀\n班\n伯\n香\n介\n迫\n句\n豐\n培\n握\n蘭\n擔\n弦\n蛋\n沉\n假\n穿\n執\n答\n樂\n誰\n順\n煙\n縮\n徵\n臉\n喜\n松\n腳\n困\n異\n免\n背\n星\n福\n買\n染\n井\n概\n慢\n怕\n磁\n倍\n祖\n皇\n促\n靜\n補\n評\n翻\n肉\n踐\n尼\n衣\n寬\n揚\n棉\n希\n傷\n操\n垂\n秋\n宜\n氫\n套\n督\n振\n架\n亮\n末\n憲\n慶\n編\n牛\n觸\n映\n雷\n銷\n詩\n座\n居\n抓\n裂\n胞\n呼\n娘\n景\n威\n綠\n晶\n厚\n盟\n衡\n雞\n孫\n延\n危\n膠\n屋\n鄉\n臨\n陸\n顧\n掉\n呀\n燈\n歲\n措\n束\n耐\n劇\n玉\n趙\n跳\n哥\n季\n課\n凱\n胡\n額\n款\n紹\n卷\n齊\n偉\n蒸\n殖\n永\n宗\n苗\n川\n爐\n岩\n弱\n零\n楊\n奏\n沿\n露\n桿\n探\n滑\n鎮\n飯\n濃\n航\n懷\n趕\n庫\n奪\n伊\n靈\n稅\n途\n滅\n賽\n歸\n召\n鼓\n播\n盤\n裁\n險\n康\n唯\n錄\n菌\n純\n借\n糖\n蓋\n橫\n符\n私\n努\n堂\n域\n槍\n潤\n幅\n哈\n竟\n熟\n蟲\n澤\n腦\n壤\n碳\n歐\n遍\n側\n寨\n敢\n徹\n慮\n斜\n薄\n庭\n納\n彈\n飼\n伸\n折\n麥\n濕\n暗\n荷\n瓦\n塞\n床\n築\n惡\n戶\n訪\n塔\n奇\n透\n梁\n刀\n旋\n跡\n卡\n氯\n遇\n份\n毒\n泥\n退\n洗\n擺\n灰\n彩\n賣\n耗\n夏\n擇\n忙\n銅\n獻\n硬\n予\n繁\n圈\n雪\n函\n亦\n抽\n篇\n陣\n陰\n丁\n尺\n追\n堆\n雄\n迎\n泛\n爸\n樓\n避\n謀\n噸\n野\n豬\n旗\n累\n偏\n典\n館\n索\n秦\n脂\n潮\n爺\n豆\n忽\n托\n驚\n塑\n遺\n愈\n朱\n替\n纖\n粗\n傾\n尚\n痛\n楚\n謝\n奮\n購\n磨\n君\n池\n旁\n碎\n骨\n監\n捕\n弟\n暴\n割\n貫\n殊\n釋\n詞\n亡\n壁\n頓\n寶\n午\n塵\n聞\n揭\n炮\n殘\n冬\n橋\n婦\n警\n綜\n招\n吳\n付\n浮\n遭\n徐\n您\n搖\n谷\n贊\n箱\n隔\n訂\n男\n吹\n園\n紛\n唐\n敗\n宋\n玻\n巨\n耕\n坦\n榮\n閉\n灣\n鍵\n凡\n駐\n鍋\n救\n恩\n剝\n凝\n鹼\n齒\n截\n煉\n麻\n紡\n禁\n廢\n盛\n版\n緩\n淨\n睛\n昌\n婚\n涉\n筒\n嘴\n插\n岸\n朗\n莊\n街\n藏\n姑\n貿\n腐\n奴\n啦\n慣\n乘\n夥\n恢\n勻\n紗\n扎\n辯\n耳\n彪\n臣\n億\n璃\n抵\n脈\n秀\n薩\n俄\n網\n舞\n店\n噴\n縱\n寸\n汗\n掛\n洪\n賀\n閃\n柬\n爆\n烯\n津\n稻\n牆\n軟\n勇\n像\n滾\n厘\n蒙\n芳\n肯\n坡\n柱\n盪\n腿\n儀\n旅\n尾\n軋\n冰\n貢\n登\n黎\n削\n鑽\n勒\n逃\n障\n氨\n郭\n峰\n幣\n港\n伏\n軌\n畝\n畢\n擦\n莫\n刺\n浪\n秘\n援\n株\n健\n售\n股\n島\n甘\n泡\n睡\n童\n鑄\n湯\n閥\n休\n匯\n舍\n牧\n繞\n炸\n哲\n磷\n績\n朋\n淡\n尖\n啟\n陷\n柴\n呈\n徒\n顏\n淚\n稍\n忘\n泵\n藍\n拖\n洞\n授\n鏡\n辛\n壯\n鋒\n貧\n虛\n彎\n摩\n泰\n幼\n廷\n尊\n窗\n綱\n弄\n隸\n疑\n氏\n宮\n姐\n震\n瑞\n怪\n尤\n琴\n循\n描\n膜\n違\n夾\n腰\n緣\n珠\n窮\n森\n枝\n竹\n溝\n催\n繩\n憶\n邦\n剩\n幸\n漿\n欄\n擁\n牙\n貯\n禮\n濾\n鈉\n紋\n罷\n拍\n咱\n喊\n袖\n埃\n勤\n罰\n焦\n潛\n伍\n墨\n欲\n縫\n姓\n刊\n飽\n仿\n獎\n鋁\n鬼\n麗\n跨\n默\n挖\n鏈\n掃\n喝\n袋\n炭\n污\n幕\n諸\n弧\n勵\n梅\n奶\n潔\n災\n舟\n鑑\n苯\n訟\n抱\n毀\n懂\n寒\n智\n埔\n寄\n屆\n躍\n渡\n挑\n丹\n艱\n貝\n碰\n拔\n爹\n戴\n碼\n夢\n芽\n熔\n赤\n漁\n哭\n敬\n顆\n奔\n鉛\n仲\n虎\n稀\n妹\n乏\n珍\n申\n桌\n遵\n允\n隆\n螺\n倉\n魏\n銳\n曉\n氮\n兼\n隱\n礙\n赫\n撥\n忠\n肅\n缸\n牽\n搶\n博\n巧\n殼\n兄\n杜\n訊\n誠\n碧\n祥\n柯\n頁\n巡\n矩\n悲\n灌\n齡\n倫\n票\n尋\n桂\n鋪\n聖\n恐\n恰\n鄭\n趣\n抬\n荒\n騰\n貼\n柔\n滴\n猛\n闊\n輛\n妻\n填\n撤\n儲\n簽\n鬧\n擾\n紫\n砂\n遞\n戲\n吊\n陶\n伐\n餵\n療\n瓶\n婆\n撫\n臂\n摸\n忍\n蝦\n蠟\n鄰\n胸\n鞏\n擠\n偶\n棄\n槽\n勁\n乳\n鄧\n吉\n仁\n爛\n磚\n租\n烏\n艦\n伴\n瓜\n淺\n丙\n暫\n燥\n橡\n柳\n迷\n暖\n牌\n秧\n膽\n詳\n簧\n踏\n瓷\n譜\n呆\n賓\n糊\n洛\n輝\n憤\n競\n隙\n怒\n粘\n乃\n緒\n肩\n籍\n敏\n塗\n熙\n皆\n偵\n懸\n掘\n享\n糾\n醒\n狂\n鎖\n淀\n恨\n牲\n霸\n爬\n賞\n逆\n玩\n陵\n祝\n秒\n浙\n貌\n役\n彼\n悉\n鴨\n趨\n鳳\n晨\n畜\n輩\n秩\n卵\n署\n梯\n炎\n灘\n棋\n驅\n篩\n峽\n冒\n啥\n壽\n譯\n浸\n泉\n帽\n遲\n矽\n疆\n貸\n漏\n稿\n冠\n嫩\n脅\n芯\n牢\n叛\n蝕\n奧\n鳴\n嶺\n羊\n憑\n串\n塘\n繪\n酵\n融\n盆\n錫\n廟\n籌\n凍\n輔\n攝\n襲\n筋\n拒\n僚\n旱\n鉀\n鳥\n漆\n沈\n眉\n疏\n添\n棒\n穗\n硝\n韓\n逼\n扭\n僑\n涼\n挺\n碗\n栽\n炒\n杯\n患\n餾\n勸\n豪\n遼\n勃\n鴻\n旦\n吏\n拜\n狗\n埋\n輥\n掩\n飲\n搬\n罵\n辭\n勾\n扣\n估\n蔣\n絨\n霧\n丈\n朵\n姆\n擬\n宇\n輯\n陝\n雕\n償\n蓄\n崇\n剪\n倡\n廳\n咬\n駛\n薯\n刷\n斥\n番\n賦\n奉\n佛\n澆\n漫\n曼\n扇\n鈣\n桃\n扶\n仔\n返\n俗\n虧\n腔\n鞋\n棱\n覆\n框\n悄\n叔\n撞\n騙\n勘\n旺\n沸\n孤\n吐\n孟\n渠\n屈\n疾\n妙\n惜\n仰\n狠\n脹\n諧\n拋\n黴\n桑\n崗\n嘛\n衰\n盜\n滲\n臟\n賴\n湧\n甜\n曹\n閱\n肌\n哩\n厲\n烴\n緯\n毅\n昨\n偽\n症\n煮\n嘆\n釘\n搭\n莖\n籠\n酷\n偷\n弓\n錐\n恆\n傑\n坑\n鼻\n翼\n綸\n敘\n獄\n逮\n罐\n絡\n棚\n抑\n膨\n蔬\n寺\n驟\n穆\n冶\n枯\n冊\n屍\n凸\n紳\n坯\n犧\n焰\n轟\n欣\n晉\n瘦\n禦\n錠\n錦\n喪\n旬\n鍛\n壟\n搜\n撲\n邀\n亭\n酯\n邁\n舒\n脆\n酶\n閒\n憂\n酚\n頑\n羽\n漲\n卸\n仗\n陪\n闢\n懲\n杭\n姚\n肚\n捉\n飄\n漂\n昆\n欺\n吾\n郎\n烷\n汁\n呵\n飾\n蕭\n雅\n郵\n遷\n燕\n撒\n姻\n赴\n宴\n煩\n債\n帳\n斑\n鈴\n旨\n醇\n董\n餅\n雛\n姿\n拌\n傅\n腹\n妥\n揉\n賢\n拆\n歪\n葡\n胺\n丟\n浩\n徽\n昂\n墊\n擋\n覽\n貪\n慰\n繳\n汪\n慌\n馮\n諾\n姜\n誼\n兇\n劣\n誣\n耀\n昏\n躺\n盈\n騎\n喬\n溪\n叢\n盧\n抹\n悶\n諮\n刮\n駕\n纜\n悟\n摘\n鉺\n擲\n頗\n幻\n柄\n惠\n慘\n佳\n仇\n臘\n窩\n滌\n劍\n瞧\n堡\n潑\n蔥\n罩\n霍\n撈\n胎\n蒼\n濱\n倆\n捅\n湘\n砍\n霞\n邵\n萄\n瘋\n淮\n遂\n熊\n糞\n烘\n宿\n檔\n戈\n駁\n嫂\n裕\n徙\n箭\n捐\n腸\n撐\n曬\n辨\n殿\n蓮\n攤\n攪\n醬\n屏\n疫\n哀\n蔡\n堵\n沫\n皺\n暢\n疊\n閣\n萊\n敲\n轄\n鉤\n痕\n壩\n巷\n餓\n禍\n丘\n玄\n溜\n曰\n邏\n彭\n嘗\n卿\n妨\n艇\n吞\n韋\n怨\n矮\n歇`.split('\\n');\n", "import type * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as Hex from './Hex.js'\n\n/**\n * Encodes a personal sign message in [ERC-191 format](https://eips.ethereum.org/EIPS/eip-191#version-0x45-e): `0x19 ‖ \"Ethereum Signed Message:\\n\" + message.length ‖ message`.\n *\n * @example\n * ```ts twoslash\n * import { Hex, PersonalMessage } from 'ox'\n *\n * const data = PersonalMessage.encode(Hex.fromString('hello world'))\n * // @log: '0x19457468657265756d205369676e6564204d6573736167653a0a313168656c6c6f20776f726c64'\n * // @log: (0x19 ‖ 'Ethereum Signed Message:\\n11' ‖ 'hello world')\n * ```\n *\n * @param data - The data to encode.\n * @returns The encoded personal sign message.\n */\nexport function encode(data: Hex.Hex | Bytes.Bytes): Hex.Hex {\n  const message = Hex.from(data)\n  return Hex.concat(\n    // Personal Sign Format: `0x19 ‖ \"Ethereum Signed Message:\\n\" ‖ message.length ‖ message`\n    '0x19',\n    Hex.fromString('Ethereum Signed Message:\\n' + Hex.size(message)),\n    message,\n  )\n}\n\nexport declare namespace encode {\n  type ErrorType =\n    | Hex.concat.ErrorType\n    | Hex.from.ErrorType\n    | Hex.fromString.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Gets the payload to use for signing an [ERC-191 formatted](https://eips.ethereum.org/EIPS/eip-191#version-0x45-e) personal message.\n *\n * @example\n * ```ts twoslash\n * import { Hex, PersonalMessage, Secp256k1 } from 'ox'\n *\n * const payload = PersonalMessage.getSignPayload(Hex.fromString('hello world')) // [!code focus]\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @param data - The data to get the sign payload for.\n * @returns The payload to use for signing.\n */\nexport function getSignPayload(data: Hex.Hex | Bytes.Bytes): Hex.Hex {\n  return Hash.keccak256(encode(data))\n}\n\nexport declare namespace getSignPayload {\n  type ErrorType =\n    | Hash.keccak256.ErrorType\n    | encode.ErrorType\n    | Errors.GlobalErrorType\n}\n", "import { EventEmitter } from 'eventemitter3'\nimport type * as Address from './Address.js'\nimport * as Errors from './Errors.js'\nimport * as RpcResponse from './RpcResponse.js'\nimport type * as RpcSchema from './RpcSchema.js'\nimport type * as RpcSchema_internal from './internal/rpcSchema.js'\nimport type { Compute, IsNarrowable, IsNever } from './internal/types.js'\n\n/** Options for a {@link ox#Provider.Provider}. */\nexport type Options = {\n  /**\n   * Whether to include event functions (`on`, `removeListener`) on the Provider.\n   *\n   * @default true\n   */\n  includeEvents?: boolean | undefined\n  /**\n   * RPC Schema to use for the Provider's `request` function.\n   * See {@link ox#RpcSchema.(from:function)} for more.\n   *\n   * @default `RpcSchema.Generic`\n   */\n  schema?: RpcSchema.Generic | undefined\n}\n\n/** Root type for an EIP-1193 Provider. */\nexport type Provider<\n  options extends Options | undefined = undefined,\n  ///\n  _schema extends RpcSchema.Generic = options extends {\n    schema: infer schema extends RpcSchema.Generic\n  }\n    ? schema\n    : RpcSchema.Default,\n> = Compute<\n  {\n    request: RequestFn<_schema>\n  } & (options extends { includeEvents: true } | undefined\n    ? {\n        on: EventListenerFn\n        removeListener: EventListenerFn\n      }\n    : {})\n>\n\n/** Type for an EIP-1193 Provider's event emitter. */\nexport type Emitter = Compute<EventEmitter<EventMap>>\n\n/** EIP-1193 Provider's `request` function. */\nexport type RequestFn<schema extends RpcSchema.Generic = RpcSchema.Generic> = <\n  methodName extends RpcSchema.MethodNameGeneric,\n>(\n  parameters: RpcSchema_internal.ExtractRequestOpaque<schema, methodName>,\n) => Promise<RpcSchema.ExtractReturnType<schema, methodName>>\n\n/** Type for an EIP-1193 Provider's event listener functions (`on`, `removeListener`, etc). */\nexport type EventListenerFn = <event extends keyof EventMap>(\n  event: event,\n  listener: EventMap[event],\n) => void\n\nexport type ConnectInfo = {\n  chainId: string\n}\n\nexport type Message = {\n  type: string\n  data: unknown\n}\n\nexport class ProviderRpcError extends Error {\n  override name = 'ProviderRpcError'\n\n  code: number\n  details: string\n\n  constructor(code: number, message: string) {\n    super(message)\n    this.code = code\n    this.details = message\n  }\n}\n\nexport type EventMap = {\n  accountsChanged: (accounts: readonly Address.Address[]) => void\n  chainChanged: (chainId: string) => void\n  connect: (connectInfo: ConnectInfo) => void\n  disconnect: (error: ProviderRpcError) => void\n  message: (message: Message) => void\n}\n\n/** The user rejected the request. */\nexport class UserRejectedRequestError extends ProviderRpcError {\n  static readonly code = 4001\n  override readonly code = 4001\n  override readonly name = 'Provider.UserRejectedRequestError'\n\n  constructor({\n    message = 'The user rejected the request.',\n  }: { message?: string | undefined } = {}) {\n    super(4001, message)\n  }\n}\n\n/** The requested method and/or account has not been authorized by the user. */\nexport class UnauthorizedError extends ProviderRpcError {\n  static readonly code = 4100\n  override readonly code = 4100\n  override readonly name = 'Provider.UnauthorizedError'\n\n  constructor({\n    message = 'The requested method and/or account has not been authorized by the user.',\n  }: { message?: string | undefined } = {}) {\n    super(4100, message)\n  }\n}\n\n/** The provider does not support the requested method. */\nexport class UnsupportedMethodError extends ProviderRpcError {\n  static readonly code = 4200\n  override readonly code = 4200\n  override readonly name = 'Provider.UnsupportedMethodError'\n\n  constructor({\n    message = 'The provider does not support the requested method.',\n  }: { message?: string | undefined } = {}) {\n    super(4200, message)\n  }\n}\n\n/** The provider is disconnected from all chains. */\nexport class DisconnectedError extends ProviderRpcError {\n  static readonly code = 4900\n  override readonly code = 4900\n  override readonly name = 'Provider.DisconnectedError'\n\n  constructor({\n    message = 'The provider is disconnected from all chains.',\n  }: { message?: string | undefined } = {}) {\n    super(4900, message)\n  }\n}\n\n/** The provider is not connected to the requested chain. */\nexport class ChainDisconnectedError extends ProviderRpcError {\n  static readonly code = 4901\n  override readonly code = 4901\n  override readonly name = 'Provider.ChainDisconnectedError'\n\n  constructor({\n    message = 'The provider is not connected to the requested chain.',\n  }: { message?: string | undefined } = {}) {\n    super(4901, message)\n  }\n}\n\n/** An error occurred when attempting to switch chain. */\nexport class SwitchChainError extends ProviderRpcError {\n  static readonly code = 4902\n  override readonly code = 4902\n  override readonly name = 'Provider.SwitchChainError'\n\n  constructor({\n    message = 'An error occurred when attempting to switch chain.',\n  }: { message?: string | undefined } = {}) {\n    super(4902, message)\n  }\n}\n\n/** This Wallet does not support a capability that was not marked as optional. */\nexport class UnsupportedNonOptionalCapabilityError extends ProviderRpcError {\n  static readonly code = 5700\n  override readonly code = 5700\n  override readonly name = 'Provider.UnsupportedNonOptionalCapabilityError'\n\n  constructor({\n    message = 'This Wallet does not support a capability that was not marked as optional.',\n  }: { message?: string | undefined } = {}) {\n    super(5700, message)\n  }\n}\n\n/** This Wallet does not support the requested chain ID. */\nexport class UnsupportedChainIdError extends ProviderRpcError {\n  static readonly code = 5710\n  override readonly code = 5710\n  override readonly name = 'Provider.UnsupportedChainIdError'\n\n  constructor({\n    message = 'This Wallet does not support the requested chain ID.',\n  }: { message?: string | undefined } = {}) {\n    super(5710, message)\n  }\n}\n\n/** There is already a bundle submitted with this ID. */\nexport class DuplicateIdError extends ProviderRpcError {\n  static readonly code = 5720\n  override readonly code = 5720\n  override readonly name = 'Provider.DuplicateIdError'\n\n  constructor({\n    message = 'There is already a bundle submitted with this ID.',\n  }: { message?: string | undefined } = {}) {\n    super(5720, message)\n  }\n}\n\n/** This bundle id is unknown / has not been submitted. */\nexport class UnknownBundleIdError extends ProviderRpcError {\n  static readonly code = 5730\n  override readonly code = 5730\n  override readonly name = 'Provider.UnknownBundleIdError'\n\n  constructor({\n    message = 'This bundle id is unknown / has not been submitted.',\n  }: { message?: string | undefined } = {}) {\n    super(5730, message)\n  }\n}\n\n/** The call bundle is too large for the Wallet to process. */\nexport class BundleTooLargeError extends ProviderRpcError {\n  static readonly code = 5740\n  override readonly code = 5740\n  override readonly name = 'Provider.BundleTooLargeError'\n\n  constructor({\n    message = 'The call bundle is too large for the Wallet to process.',\n  }: { message?: string | undefined } = {}) {\n    super(5740, message)\n  }\n}\n\n/** The Wallet can support atomicity after an upgrade, but the user rejected the upgrade. */\nexport class AtomicReadyWalletRejectedUpgradeError extends ProviderRpcError {\n  static readonly code = 5750\n  override readonly code = 5750\n  override readonly name = 'Provider.AtomicReadyWalletRejectedUpgradeError'\n\n  constructor({\n    message = 'The Wallet can support atomicity after an upgrade, but the user rejected the upgrade.',\n  }: { message?: string | undefined } = {}) {\n    super(5750, message)\n  }\n}\n\n/** The wallet does not support atomic execution but the request requires it. */\nexport class AtomicityNotSupportedError extends ProviderRpcError {\n  static readonly code = 5760\n  override readonly code = 5760\n  override readonly name = 'Provider.AtomicityNotSupportedError'\n\n  constructor({\n    message = 'The wallet does not support atomic execution but the request requires it.',\n  }: { message?: string | undefined } = {}) {\n    super(5760, message)\n  }\n}\n\n/**\n * Creates an EIP-1193 flavored event emitter to be injected onto a Provider.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Provider, RpcRequest, RpcResponse } from 'ox' // [!code focus]\n *\n * // 1. Instantiate a Provider Emitter. // [!code focus]\n * const emitter = Provider.createEmitter() // [!code focus]\n *\n * const store = RpcRequest.createStore()\n *\n * const provider = Provider.from({\n *   // 2. Pass the Emitter to the Provider. // [!code focus]\n *   ...emitter, // [!code focus]\n *   async request(args) {\n *     return await fetch('https://1.rpc.thirdweb.com', {\n *       body: JSON.stringify(store.prepare(args)),\n *       method: 'POST',\n *       headers: {\n *         'Content-Type': 'application/json',\n *       },\n *     })\n *       .then((res) => res.json())\n *       .then(RpcResponse.parse)\n *   },\n * })\n *\n * // 3. Emit Provider Events. // [!code focus]\n * emitter.emit('accountsChanged', ['0x...']) // [!code focus]\n * ```\n *\n * @returns An event emitter.\n */\nexport function createEmitter(): Emitter {\n  const emitter = new EventEmitter<EventMap>()\n\n  return {\n    get eventNames() {\n      return emitter.eventNames.bind(emitter)\n    },\n    get listenerCount() {\n      return emitter.listenerCount.bind(emitter)\n    },\n    get listeners() {\n      return emitter.listeners.bind(emitter)\n    },\n    addListener: emitter.addListener.bind(emitter),\n    emit: emitter.emit.bind(emitter),\n    off: emitter.off.bind(emitter),\n    on: emitter.on.bind(emitter),\n    once: emitter.once.bind(emitter),\n    removeAllListeners: emitter.removeAllListeners.bind(emitter),\n    removeListener: emitter.removeListener.bind(emitter),\n  }\n}\n\nexport declare namespace createEmitter {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Instantiates an [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193) {@link ox#Provider.Provider}\n * from an arbitrary [EIP-1193 Provider](https://eips.ethereum.org/EIPS/eip-1193) interface.\n *\n * @example\n * ### Instantiating with RPC Transport\n *\n * Ox's {@link ox#RpcTransport} is EIP-1193 compliant, and can be used to instantiate an EIP-1193 Provider. This means you can use any HTTP RPC endpoint as an EIP-1193 Provider.\n *\n * ```ts twoslash\n * import { Provider, RpcTransport } from 'ox'\n *\n * const transport = RpcTransport.fromHttp('https://1.rpc.thirdweb.com')\n * const provider = Provider.from(transport)\n * ```\n *\n * @example\n * ### Instantiating with External Providers\n *\n * The example below demonstrates how we can instantiate a typed EIP-1193 Provider from an\n * external EIP-1193 Provider like `window.ethereum`.\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { Provider } from 'ox'\n *\n * const provider = Provider.from(window.ethereum)\n *\n * const blockNumber = await provider.request({ method: 'eth_blockNumber' })\n * ```\n *\n * :::tip\n *\n * There are also libraries that distribute EIP-1193 Provider objects that you can use with `Provider.from`:\n *\n * - [`@walletconnect/ethereum-provider`](https://www.npmjs.com/package/\\@walletconnect/ethereum-provider)\n *\n * - [`@coinbase/wallet-sdk`](https://www.npmjs.com/package/\\@coinbase/wallet-sdk)\n *\n * - [`@metamask/detect-provider`](https://www.npmjs.com/package/\\@metamask/detect-provider)\n *\n * - [`@safe-global/safe-apps-provider`](https://github.com/safe-global/safe-apps-sdk/tree/main/packages/safe-apps-provider)\n *\n * - [`mipd`](https://github.com/wevm/mipd): EIP-6963 Multi Injected Providers\n *\n * :::\n *\n * @example\n * ### Instantiating a Custom Provider\n *\n * The example below demonstrates how we can instantiate a typed EIP-1193 Provider from a\n * HTTP `fetch` JSON-RPC request. You can use this pattern to integrate with any asynchronous JSON-RPC\n * transport, including WebSockets and IPC.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Provider, RpcRequest, RpcResponse } from 'ox'\n *\n * const store = RpcRequest.createStore()\n *\n * const provider = Provider.from({\n *   async request(args) {\n *     return await fetch('https://1.rpc.thirdweb.com', {\n *       body: JSON.stringify(store.prepare(args)),\n *       method: 'POST',\n *       headers: {\n *         'Content-Type': 'application/json',\n *       },\n *     })\n *       .then((res) => res.json())\n *       .then(RpcResponse.parse)\n *   },\n * })\n *\n * const blockNumber = await provider.request({ method: 'eth_blockNumber' })\n * ```\n *\n * @example\n * ### Type-safe Custom Schemas\n *\n * It is possible to define your own type-safe schema by using the {@link ox#RpcSchema.(from:function)} type.\n *\n * ```ts twoslash\n * // @noErrors\n * import 'ox/window'\n * import { Provider, RpcSchema } from 'ox'\n *\n * const schema = RpcSchema.from<\n *   | RpcSchema.Default\n *   | {\n *       Request: {\n *         method: 'abe_foo',\n *         params: [id: number],\n *       }\n *       ReturnType: string\n *     }\n *   | {\n *       Request: {\n *         method: 'abe_bar',\n *         params: [id: string],\n *       }\n *       ReturnType: string\n *     }\n * >()\n *\n * const provider = Provider.from(window.ethereum, { schema })\n *\n * const blockNumber = await provider.request({ method: 'e' })\n * //                                                    ^|\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Instantiating a Provider with Events\n *\n * The example below demonstrates how to instantiate a Provider with your own EIP-1193 flavored event emitter.\n *\n * This example is useful for Wallets that distribute an EIP-1193 Provider (e.g. webpage injection via `window.ethereum`).\n *\n * ```ts twoslash\n * // @noErrors\n * import { Provider, RpcRequest, RpcResponse } from 'ox'\n *\n * // 1. Instantiate a Provider Emitter.\n * const emitter = Provider.createEmitter() // [!code ++]\n *\n * const store = RpcRequest.createStore()\n *\n * const provider = Provider.from({\n *   // 2. Pass the Emitter to the Provider.\n *   ...emitter, // [!code ++]\n *   async request(args) {\n *     return await fetch('https://1.rpc.thirdweb.com', {\n *       body: JSON.stringify(store.prepare(args)),\n *       method: 'POST',\n *       headers: {\n *         'Content-Type': 'application/json',\n *       },\n *     })\n *       .then((res) => res.json())\n *       .then(RpcResponse.parse)\n *   },\n * })\n *\n * // 3. Emit Provider Events.\n * emitter.emit('accountsChanged', ['0x...']) // [!code ++]\n * ```\n *\n * @param provider - The EIP-1193 provider to convert.\n * @returns An typed EIP-1193 Provider.\n */\nexport function from<\n  const provider extends Provider | unknown,\n  options extends Options | undefined = undefined,\n>(\n  provider: provider | Provider<{ schema: RpcSchema.Generic }>,\n  options?: options | Options,\n): Provider<options>\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function from(provider: any, options: Options = {}): Provider<Options> {\n  const { includeEvents = true } = options\n  if (!provider) throw new IsUndefinedError()\n  return {\n    ...(includeEvents\n      ? {\n          on: provider.on?.bind(provider),\n          removeListener: provider.removeListener?.bind(provider),\n        }\n      : {}),\n    async request(args) {\n      try {\n        const result = await provider.request(args)\n        if (\n          result &&\n          typeof result === 'object' &&\n          'jsonrpc' in (result as { jsonrpc?: unknown })\n        )\n          return RpcResponse.parse(result) as never\n        return result\n      } catch (error) {\n        throw parseError(error)\n      }\n    },\n  }\n}\n\nexport declare namespace from {\n  type ErrorType = IsUndefinedError | Errors.GlobalErrorType\n}\n\n/**\n * Parses an error into a Provider error instance.\n *\n * @example\n * ```ts twoslash\n * import { Provider } from 'ox'\n *\n * const error = Provider.parseError({ code: 4200, message: 'foo' })\n *\n * error\n * // ^?\n *\n * ```\n *\n * @param error - The error object to parse.\n * @returns An error instance.\n */\nexport function parseError<\n  const error extends RpcResponse.ErrorObject | Error | unknown,\n>(\n  error: error | Error | RpcResponse.ErrorObject,\n): parseError.ReturnType<error> {\n  const error_ = RpcResponse.parseError(error)\n  if (error_ instanceof RpcResponse.InternalError) {\n    if (!error_.data) return error_ as never\n\n    const { code } = error_.data as RpcResponse.ErrorObject\n    if (code === DisconnectedError.code)\n      return new DisconnectedError(error_) as never\n    if (code === ChainDisconnectedError.code)\n      return new ChainDisconnectedError(error_) as never\n    if (code === UserRejectedRequestError.code)\n      return new UserRejectedRequestError(error_) as never\n    if (code === UnauthorizedError.code)\n      return new UnauthorizedError(error_) as never\n    if (code === UnsupportedMethodError.code)\n      return new UnsupportedMethodError(error_) as never\n    if (code === SwitchChainError.code)\n      return new SwitchChainError(error_) as never\n    if (code === AtomicReadyWalletRejectedUpgradeError.code)\n      return new AtomicReadyWalletRejectedUpgradeError(error_) as never\n    if (code === AtomicityNotSupportedError.code)\n      return new AtomicityNotSupportedError(error_) as never\n    if (code === BundleTooLargeError.code)\n      return new BundleTooLargeError(error_) as never\n    if (code === UnknownBundleIdError.code)\n      return new UnknownBundleIdError(error_) as never\n    if (code === DuplicateIdError.code)\n      return new DuplicateIdError(error_) as never\n    if (code === UnsupportedChainIdError.code)\n      return new UnsupportedChainIdError(error_) as never\n    if (code === UnsupportedNonOptionalCapabilityError.code)\n      return new UnsupportedNonOptionalCapabilityError(error_) as never\n  }\n  return error_ as never\n}\n\nexport declare namespace parseError {\n  type ReturnType<\n    errorObject extends RpcResponse.ErrorObject | unknown,\n    //\n    error = errorObject extends RpcResponse.ErrorObject\n      ?\n          | (errorObject['code'] extends DisconnectedError['code']\n              ? DisconnectedError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? DisconnectedError\n              : never)\n          | (errorObject['code'] extends ChainDisconnectedError['code']\n              ? ChainDisconnectedError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? ChainDisconnectedError\n              : never)\n          | (errorObject['code'] extends UserRejectedRequestError['code']\n              ? UserRejectedRequestError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? UserRejectedRequestError\n              : never)\n          | (errorObject['code'] extends UnauthorizedError['code']\n              ? UnauthorizedError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? UnauthorizedError\n              : never)\n          | (errorObject['code'] extends UnsupportedMethodError['code']\n              ? UnsupportedMethodError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? UnsupportedMethodError\n              : never)\n          | (errorObject['code'] extends SwitchChainError['code']\n              ? SwitchChainError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? SwitchChainError\n              : never)\n          | (errorObject['code'] extends AtomicReadyWalletRejectedUpgradeError['code']\n              ? AtomicReadyWalletRejectedUpgradeError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? AtomicReadyWalletRejectedUpgradeError\n              : never)\n          | (errorObject['code'] extends AtomicityNotSupportedError['code']\n              ? AtomicityNotSupportedError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? AtomicityNotSupportedError\n              : never)\n          | (errorObject['code'] extends BundleTooLargeError['code']\n              ? BundleTooLargeError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? BundleTooLargeError\n              : never)\n          | (errorObject['code'] extends UnknownBundleIdError['code']\n              ? UnknownBundleIdError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? UnknownBundleIdError\n              : never)\n          | (errorObject['code'] extends DuplicateIdError['code']\n              ? DuplicateIdError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? DuplicateIdError\n              : never)\n          | (errorObject['code'] extends UnsupportedChainIdError['code']\n              ? UnsupportedChainIdError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? UnsupportedChainIdError\n              : never)\n          | (errorObject['code'] extends UnsupportedNonOptionalCapabilityError['code']\n              ? UnsupportedNonOptionalCapabilityError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? UnsupportedNonOptionalCapabilityError\n              : never)\n      : RpcResponse.parseError.ReturnType<RpcResponse.ErrorObject>,\n  > = IsNever<error> extends true\n    ? RpcResponse.parseError.ReturnType<errorObject>\n    : error\n}\n\n/** Thrown when the provider is undefined. */\nexport class IsUndefinedError extends Errors.BaseError {\n  override readonly name = 'Provider.IsUndefinedError'\n\n  constructor() {\n    super('`provider` is undefined.')\n  }\n}\n", "import EventEmitter from './index.js'\n\nexport { EventEmitter }\nexport default EventEmitter\n", "import type { Errors, RpcRequest } from '../index.js'\nimport type {\n  Compute,\n  IsNarrowable,\n  IsNever,\n  OneOf,\n  UnionPartialBy,\n} from './internal/types.js'\n\n/** A JSON-RPC response object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#request_object). */\nexport type RpcResponse<\n  result = unknown,\n  error extends ErrorObject = ErrorObject,\n> = Compute<\n  {\n    id: number\n    jsonrpc: '2.0'\n  } & OneOf<{ result: result } | { error: error }>\n>\n\n/** JSON-RPC error object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#error_object). */\nexport type ErrorObject = {\n  code: number\n  message: string\n  data?: unknown | undefined\n}\n\n/**\n * A type-safe interface to instantiate a JSON-RPC response object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#response_object).\n *\n * @example\n * ### Instantiating a Response Object\n *\n * ```ts twoslash\n * import { RpcResponse } from 'ox'\n *\n * const response = RpcResponse.from({\n *   id: 0,\n *   jsonrpc: '2.0',\n *   result: '0x69420',\n * })\n * ```\n *\n * @example\n * ### Type-safe Instantiation\n *\n * If you have a JSON-RPC request object, you can use it to strongly-type the response. If a `request` is provided,\n * then the `id` and `jsonrpc` properties will be overridden with the values from the request.\n *\n * ```ts twoslash\n * import { RpcRequest, RpcResponse } from 'ox'\n *\n * const request = RpcRequest.from({ id: 0, method: 'eth_blockNumber' })\n *\n * const response = RpcResponse.from(\n *   { result: '0x69420' },\n *   { request },\n * )\n * ```\n *\n * @param response - Opaque JSON-RPC response object.\n * @param options - Parsing options.\n * @returns Typed JSON-RPC result, or response object (if `raw` is `true`).\n */\nexport function from<\n  request extends RpcRequest.RpcRequest | undefined = undefined,\n  const response =\n    | (request extends RpcRequest.RpcRequest\n        ? request['_returnType']\n        : RpcResponse)\n    | unknown,\n>(\n  response: from.Response<request, response>,\n  options?: from.Options<request>,\n): Compute<from.ReturnType<response>>\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function from(response: RpcResponse, options: any = {}): RpcResponse {\n  const { request } = options\n  return {\n    ...response,\n    id: response.id ?? request?.id,\n    jsonrpc: response.jsonrpc ?? request.jsonrpc,\n  }\n}\n\nexport declare namespace from {\n  type Response<\n    request extends RpcRequest.RpcRequest | undefined = undefined,\n    response = unknown,\n  > = response &\n    (request extends RpcRequest.RpcRequest\n      ? UnionPartialBy<RpcResponse<request['_returnType']>, 'id' | 'jsonrpc'>\n      : RpcResponse)\n\n  type Options<\n    request extends RpcRequest.RpcRequest | undefined =\n      | RpcRequest.RpcRequest\n      | undefined,\n  > = {\n    request?: request | RpcRequest.RpcRequest | undefined\n  }\n\n  type ReturnType<response> = IsNarrowable<response, RpcResponse> extends true\n    ? RpcResponse\n    : response & Readonly<{ id: number; jsonrpc: '2.0' }>\n}\n\n/**\n * A type-safe interface to parse a JSON-RPC response object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#response_object), and extract the result.\n *\n * @example\n * ```ts twoslash\n * import { RpcRequest, RpcResponse } from 'ox'\n *\n * // 1. Create a request store.\n * const store = RpcRequest.createStore()\n *\n * // 2. Get a request object.\n * const request = store.prepare({\n *   method: 'eth_getBlockByNumber',\n *   params: ['0x1', false],\n * })\n *\n * // 3. Send the JSON-RPC request via HTTP.\n * const block = await fetch('https://1.rpc.thirdweb.com', {\n *   body: JSON.stringify(request),\n *   headers: {\n *     'Content-Type': 'application/json',\n *   },\n *   method: 'POST',\n * })\n *  .then((response) => response.json())\n *  // 4. Parse the JSON-RPC response into a type-safe result. // [!code focus]\n *  .then((response) => RpcResponse.parse(response, { request })) // [!code focus]\n *\n * block // [!code focus]\n * // ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * :::tip\n *\n * If you don't need the return type, you can omit the options entirely.\n *\n * ```ts twoslash\n * // @noErrors\n * import { RpcResponse } from 'ox'\n *\n * const block = await fetch('https://1.rpc.thirdweb.com', {})\n *  .then((response) => response.json())\n *  .then((response) => RpcResponse.parse(response, { request })) // [!code --]\n *  .then(RpcResponse.parse) // [!code ++]\n * ```\n * :::\n *\n * @example\n * ### Raw Mode\n *\n * If `raw` is `true`, the response will be returned as an object with `result` and `error` properties instead of returning the `result` directly and throwing errors.\n *\n * ```ts twoslash\n * import { RpcRequest, RpcResponse } from 'ox'\n *\n * const store = RpcRequest.createStore()\n *\n * const request = store.prepare({\n *   method: 'eth_blockNumber',\n * })\n *\n * const response = RpcResponse.parse({}, {\n *   request,\n *   raw: true, // [!code hl]\n * })\n *\n * response.result\n * //       ^?\n *\n *\n * response.error\n * //       ^?\n *\n *\n * ```\n *\n * @param response - Opaque JSON-RPC response object.\n * @param options - Parsing options.\n * @returns Typed JSON-RPC result, or response object (if `raw` is `true`).\n */\nexport function parse<\n  const response extends RpcResponse | unknown,\n  returnType,\n  raw extends boolean = false,\n>(\n  response: response,\n  options: parse.Options<returnType, raw> = {},\n): parse.ReturnType<\n  unknown extends response\n    ? returnType\n    : response extends RpcResponse\n      ? response extends { result: infer result }\n        ? result\n        : never\n      : returnType,\n  raw\n> {\n  const { raw = false } = options\n  const response_ = response as RpcResponse\n  if (raw) return response as never\n  if (response_.error) throw parseError(response_.error)\n  return response_.result as never\n}\n\nexport declare namespace parse {\n  type Options<returnType, raw extends boolean = false> = {\n    /**\n     * JSON-RPC Method that was used to make the request. Used for typing the response.\n     */\n    request?:\n      | {\n          _returnType: returnType\n        }\n      | RpcRequest.RpcRequest\n      | undefined\n    /**\n     * Enables raw mode – responses will return an object with `result` and `error` properties instead of returning the `result` directly and throwing errors.\n     *\n     * - `true`: a JSON-RPC response object will be returned with `result` and `error` properties.\n     * - `false`: the JSON-RPC response object's `result` property will be returned directly, and JSON-RPC Errors will be thrown.\n     *\n     * @default false\n     */\n    raw?: raw | boolean | undefined\n  }\n\n  type ReturnType<returnType, raw extends boolean = false> = Compute<\n    raw extends true ? RpcResponse<returnType> : returnType\n  >\n\n  type ErrorType =\n    | ParseError\n    | InvalidInputError\n    | ResourceNotFoundError\n    | ResourceUnavailableError\n    | TransactionRejectedError\n    | MethodNotSupportedError\n    | LimitExceededError\n    | VersionNotSupportedError\n    | InvalidRequestError\n    | MethodNotFoundError\n    | InvalidParamsError\n    | InternalError\n    | BaseErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Parses an error into a RPC Error instance.\n *\n * @example\n * ```ts twoslash\n * import { RpcResponse } from 'ox'\n *\n * const error = RpcResponse.parseError({ code: -32000, message: 'unsupported method' })\n *\n * error\n * // ^?\n *\n * ```\n *\n * @param error - Error.\n * @returns RPC Error instance.\n */\nexport function parseError<const error extends Error | ErrorObject | unknown>(\n  error: error | Error | ErrorObject,\n): parseError.ReturnType<error> {\n  const error_ = error as Error | ErrorObject\n\n  if (error_ instanceof Error && !('code' in error_))\n    return new InternalError({\n      cause: error_,\n      data: error_,\n      message: error_.message,\n    }) as never\n\n  const { code } = error_\n  if (code === InternalError.code)\n    return new InternalError(error_ as never) as never\n  if (code === InvalidInputError.code)\n    return new InvalidInputError(error_) as never\n  if (code === InvalidParamsError.code)\n    return new InvalidParamsError(error_) as never\n  if (code === InvalidRequestError.code)\n    return new InvalidRequestError(error_) as never\n  if (code === LimitExceededError.code)\n    return new LimitExceededError(error_) as never\n  if (code === MethodNotFoundError.code)\n    return new MethodNotFoundError(error_) as never\n  if (code === MethodNotSupportedError.code)\n    return new MethodNotSupportedError(error_) as never\n  if (code === ParseError.code) return new ParseError(error_) as never\n  if (code === ResourceNotFoundError.code)\n    return new ResourceNotFoundError(error_) as never\n  if (code === ResourceUnavailableError.code)\n    return new ResourceUnavailableError(error_) as never\n  if (code === TransactionRejectedError.code)\n    return new TransactionRejectedError(error_) as never\n  if (code === VersionNotSupportedError.code)\n    return new VersionNotSupportedError(error_) as never\n  return new InternalError({\n    cause: error_ instanceof Error ? error_ : undefined,\n    data: error_,\n    message: error_.message,\n  }) as never\n}\n\nexport declare namespace parseError {\n  type ReturnType<\n    errorObject extends ErrorObject | unknown,\n    //\n    error = errorObject extends ErrorObject\n      ?\n          | (errorObject['code'] extends InternalError['code']\n              ? InternalError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? InternalError\n              : never)\n          | (errorObject['code'] extends InvalidInputError['code']\n              ? InvalidInputError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? InvalidInputError\n              : never)\n          | (errorObject['code'] extends ResourceNotFoundError['code']\n              ? ResourceNotFoundError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? ResourceNotFoundError\n              : never)\n          | (errorObject['code'] extends ResourceUnavailableError['code']\n              ? ResourceUnavailableError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? ResourceUnavailableError\n              : never)\n          | (errorObject['code'] extends TransactionRejectedError['code']\n              ? TransactionRejectedError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? TransactionRejectedError\n              : never)\n          | (errorObject['code'] extends ParseError['code']\n              ? ParseError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? ParseError\n              : never)\n          | (errorObject['code'] extends MethodNotSupportedError['code']\n              ? MethodNotSupportedError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? MethodNotSupportedError\n              : never)\n          | (errorObject['code'] extends LimitExceededError['code']\n              ? LimitExceededError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? LimitExceededError\n              : never)\n          | (errorObject['code'] extends VersionNotSupportedError['code']\n              ? VersionNotSupportedError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? VersionNotSupportedError\n              : never)\n          | (errorObject['code'] extends InvalidRequestError['code']\n              ? InvalidRequestError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? InvalidRequestError\n              : never)\n          | (errorObject['code'] extends MethodNotFoundError['code']\n              ? MethodNotFoundError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? MethodNotFoundError\n              : never)\n          | (errorObject['code'] extends InvalidParamsError['code']\n              ? InvalidParamsError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? InvalidParamsError\n              : never)\n          | (IsNarrowable<errorObject['code'], number> extends false\n              ? BaseError\n              : never)\n      : parseError.ReturnType<ErrorObject>,\n  > = IsNever<error> extends true ? BaseError : error\n}\n\nexport type BaseErrorType = BaseError & { name: 'BaseError' }\n\n/** Thrown when a JSON-RPC error has occurred. */\nexport class BaseError extends Error {\n  override name = 'RpcResponse.BaseError'\n\n  override readonly cause: Error | undefined\n  readonly code: number\n  readonly data?: unknown | undefined\n\n  constructor(errorObject: ErrorObject & { cause?: Error | undefined }) {\n    const { cause, code, message, data } = errorObject\n\n    super(message, { cause })\n\n    this.cause = cause\n    this.code = code\n    this.data = data\n  }\n}\n\n/** Thrown when the input to a JSON-RPC method is invalid. */\nexport class InvalidInputError extends BaseError {\n  static readonly code = -32000\n  override readonly code = -32000\n  override readonly name = 'RpcResponse.InvalidInputError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: InvalidInputError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Missing or invalid parameters.',\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC resource is not found. */\nexport class ResourceNotFoundError extends BaseError {\n  static readonly code = -32001\n  override readonly code = -32001\n  override readonly name = 'RpcResponse.ResourceNotFoundError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: ResourceNotFoundError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Requested resource not found.',\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC resource is unavailable. */\nexport class ResourceUnavailableError extends BaseError {\n  static readonly code = -32002\n  override readonly code = -32002\n  override readonly name = 'RpcResponse.ResourceUnavailableError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: ResourceUnavailableError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Requested resource not available.',\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC transaction is rejected. */\nexport class TransactionRejectedError extends BaseError {\n  static readonly code = -32003\n  override readonly code = -32003\n  override readonly name = 'RpcResponse.TransactionRejectedError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: TransactionRejectedError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Transaction creation failed.',\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC method is not supported. */\nexport class MethodNotSupportedError extends BaseError {\n  static readonly code = -32004\n  override readonly code = -32004\n  override readonly name = 'RpcResponse.MethodNotSupportedError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: MethodNotSupportedError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Method is not implemented.',\n    })\n  }\n}\n\n/** Thrown when a rate-limit is exceeded. */\nexport class LimitExceededError extends BaseError {\n  static readonly code = -32005\n  override readonly code = -32005\n  override readonly name = 'RpcResponse.LimitExceededError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: LimitExceededError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Rate limit exceeded.',\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC version is not supported. */\nexport class VersionNotSupportedError extends BaseError {\n  static readonly code = -32006\n  override readonly code = -32006\n  override readonly name = 'RpcResponse.VersionNotSupportedError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: VersionNotSupportedError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'JSON-RPC version not supported.',\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC request is invalid. */\nexport class InvalidRequestError extends BaseError {\n  static readonly code = -32600\n  override readonly code = -32600\n  override readonly name = 'RpcResponse.InvalidRequestError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: InvalidRequestError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Input is not a valid JSON-RPC request.',\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC method is not found. */\nexport class MethodNotFoundError extends BaseError {\n  static readonly code = -32601\n  override readonly code = -32601\n  override readonly name = 'RpcResponse.MethodNotFoundError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: MethodNotFoundError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Method does not exist.',\n    })\n  }\n}\n\n/** Thrown when the parameters to a JSON-RPC method are invalid. */\nexport class InvalidParamsError extends BaseError {\n  static readonly code = -32602\n  override readonly code = -32602\n  override readonly name = 'RpcResponse.InvalidParamsError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: InvalidParamsError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Invalid method parameters.',\n    })\n  }\n}\n\n/** Thrown when an internal JSON-RPC error has occurred. */\nexport class InternalError extends BaseError {\n  static readonly code = -32603\n  override readonly code = -32603\n  override readonly name = 'RpcResponse.InternalError'\n\n  constructor(\n    parameters: Partial<Omit<ErrorObject, 'code'>> & {\n      cause?: Error | undefined\n    } = {},\n  ) {\n    super({\n      cause: parameters.cause,\n      code: InternalError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Internal JSON-RPC error.',\n    })\n  }\n}\n\n/** Thrown when a JSON-RPC response is invalid. */\nexport class ParseError extends BaseError {\n  static readonly code = -32700\n  override readonly code = -32700\n  override readonly name = 'RpcResponse.ParseError'\n\n  constructor(parameters: Partial<Omit<ErrorObject, 'code'>> = {}) {\n    super({\n      code: ParseError.code,\n      data: parameters.data,\n      message: parameters.message ?? 'Failed to parse JSON-RPC response.',\n    })\n  }\n}\n", "import type { ResolvedRegister } from './internal/register.js'\nimport type { Compute, IsNarrowable } from './internal/types.js'\n\nexport type { Eth } from './internal/rpcSchemas/eth.js'\nexport type { Wallet } from './internal/rpcSchemas/wallet.js'\n\n/**\n * Instantiates a statically typed Schema. This is a runtime-noop function, and is purposed\n * to be used as a type-level tag to be used with {@link ox#Provider.(from:function)} or\n * {@link ox#RpcTransport.(fromHttp:function)}.\n *\n * @example\n * ### Using with `Provider.from`\n *\n * ```ts twoslash\n * // @noErrors\n * import 'ox/window'\n * import { Provider, RpcSchema } from 'ox'\n *\n * const schema = RpcSchema.from<\n *   | RpcSchema.Default\n *   | {\n *       Request: {\n *         method: 'abe_foo',\n *         params: [id: number],\n *       }\n *       ReturnType: string\n *     }\n *   | {\n *       Request: {\n *         method: 'abe_bar',\n *         params: [id: string],\n *       }\n *       ReturnType: string\n *     }\n * >()\n *\n * const provider = Provider.from(window.ethereum, { schema })\n *\n * const blockNumber = await provider.request({ method: 'e' })\n * //                                                    ^|\n *\n *\n *\n *\n *\n * ```\n */\nexport function from<schema extends Generic>(): schema {\n  return null as never\n}\n\n/**\n * Extracts a schema item from a {@link ox#RpcSchema.Generic} or {@link ox#RpcSchema.MethodNameGeneric}.\n *\n * @example\n * ```ts twoslash\n * import { RpcSchema } from 'ox'\n *\n * type Item = RpcSchema.ExtractItem<RpcSchema.Eth, 'eth_getBlockByNumber'>\n * //   ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n */\nexport type ExtractItem<\n  schema extends Generic,\n  methodName extends MethodNameGeneric<schema> = MethodNameGeneric<schema>,\n> = Compute<{\n  Request: ExtractRequest<schema, methodName>\n  ReturnType: ExtractReturnType<schema, methodName>\n}>\n\n/**\n * Extracts request from a {@link ox#RpcSchema.Generic} or {@link ox#RpcSchema.MethodNameGeneric}.\n *\n * @example\n * ```ts twoslash\n * import { RpcSchema } from 'ox'\n *\n * type Request = RpcSchema.ExtractRequest<RpcSchema.Eth, 'eth_getBlockByNumber'>\n * //   ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n */\nexport type ExtractRequest<\n  schema extends Generic,\n  methodName extends MethodNameGeneric<schema> = MethodNameGeneric<schema>,\n> = Extract<schema['Request'], { method: methodName }>\n\n/**\n * Type-safe union of all JSON-RPC Method Names.\n *\n * @example\n * ```ts twoslash\n * import { RpcSchema } from 'ox'\n *\n * type MethodName = RpcSchema.ExtractMethodName<RpcSchema.Default>\n * //   ^?\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n */\nexport type ExtractMethodName<schema extends Generic> =\n  schema['Request']['method']\n\n/**\n * Extracts parameters from a {@link ox#RpcSchema.Generic} or {@link ox#RpcSchema.MethodNameGeneric}.\n *\n * @example\n * ```ts twoslash\n * import { RpcSchema } from 'ox'\n *\n * type Eth_GetBlockByNumber = RpcSchema.ExtractParams<RpcSchema.Eth, 'eth_getBlockByNumber'>\n * //   ^?\n *\n *\n *\n *\n *\n * ```\n */\nexport type ExtractParams<\n  schema extends Generic,\n  methodName extends MethodNameGeneric<schema> = MethodNameGeneric<schema>,\n> = ExtractRequest<schema, methodName>['params']\n\n/**\n * Extracts return type from a {@link ox#RpcSchema.Generic} or {@link ox#RpcSchema.MethodNameGeneric}.\n *\n * @example\n * ```ts twoslash\n * import { RpcSchema } from 'ox'\n *\n * type ReturnType = RpcSchema.ExtractReturnType<RpcSchema.Eth, 'eth_getBlockByNumber'>\n * //   ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n */\nexport type ExtractReturnType<\n  schema extends Generic,\n  methodName extends MethodNameGeneric<schema> = MethodNameGeneric<schema>,\n> = methodName extends schema['Request']['method']\n  ? IsNarrowable<schema, Generic> extends true\n    ? Extract<schema, { Request: { method: methodName } }>['ReturnType']\n    : unknown\n  : unknown\n\n/**\n * Type to define a custom type-safe JSON-RPC Schema.\n *\n * @example\n * ```ts twoslash\n * import { RpcSchema, RpcRequest } from 'ox'\n *\n * type Schema = RpcSchema.From<{\n *   Request: {\n *     method: 'eth_foobar',\n *     params: [id: number],\n *   }\n *   ReturnType: string\n * }>\n * ```\n */\nexport type From<schema extends Generic> = schema\n\n/**\n * Generic type to define a JSON-RPC Method.\n *\n * @example\n * ```ts twoslash\n * import { RpcSchema } from 'ox'\n *\n * type Schema = RpcSchema.Generic\n * //   ^?\n *\n *\n *\n *\n *\n *\n * ```\n */\nexport type Generic<name extends string = string, params = unknown> = {\n  Request: {\n    method: name\n    params?: params | undefined\n  }\n  ReturnType?: unknown\n}\n\n/**\n * Type-safe union of all JSON-RPC Methods.\n *\n * @example\n * ```ts twoslash\n * import { RpcSchema } from 'ox'\n *\n * type Schema = RpcSchema.Default\n * //   ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n */\nexport type Default = ResolvedRegister['RpcSchema']\n\n/**\n * Generic type to define a JSON-RPC Method Name.\n *\n * @example\n * ```ts twoslash\n * import { RpcSchema } from 'ox'\n *\n * type Name = RpcSchema.MethodNameGeneric\n * //   ^?\n *\n *\n *\n *\n *\n * ```\n */\nexport type MethodNameGeneric<schema extends Generic = Generic> =\n  | schema['Request']['method']\n  | (string & {})\n", "import type { Errors } from '../index.js'\nimport type * as RpcSchema from './RpcSchema.js'\nimport type * as RpcSchema_internal from './internal/rpcSchema.js'\nimport type { Compute } from './internal/types.js'\n\n/** A JSON-RPC request object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#request_object). */\nexport type RpcRequest<schema extends RpcSchema.Generic = RpcSchema.Generic> =\n  Compute<\n    schema extends any\n      ? schema['Request'] & {\n          id: number\n          jsonrpc: '2.0'\n          /** @deprecated internal */\n          _returnType: schema['ReturnType']\n        }\n      : never\n  >\n\n/** JSON-RPC request store type. */\nexport type Store<schema extends RpcSchema.Generic = RpcSchema.Default> =\n  Compute<{\n    prepare: <methodName extends RpcSchema.MethodNameGeneric>(\n      parameters: Compute<\n        RpcSchema_internal.ExtractRequestOpaque<schema, methodName>\n      >,\n    ) => Compute<RpcRequest<RpcSchema.ExtractItem<schema, methodName>>>\n    readonly id: number\n  }>\n\n/**\n * Creates a JSON-RPC request store to build requests with an incrementing `id`.\n *\n * Returns a type-safe `prepare` function to build a JSON-RPC request object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#request_object).\n *\n * @example\n * ```ts twoslash\n * import { RpcRequest } from 'ox'\n *\n * const store = RpcRequest.createStore()\n *\n * const request_1 = store.prepare({\n *   method: 'eth_blockNumber',\n * })\n * // @log: { id: 0, jsonrpc: '2.0', method: 'eth_blockNumber' }\n *\n * const request_2 = store.prepare({\n *   method: 'eth_call',\n *   params: [\n *     {\n *       to: '0x0000000000000000000000000000000000000000',\n *       data: '0xdeadbeef',\n *     },\n *   ],\n * })\n * // @log: { id: 1, jsonrpc: '2.0', method: 'eth_call', params: [{ to: '0x0000000000000000000000000000000000000000', data: '0xdeadbeef' }] }\n * ```\n *\n * @example\n * ### Type-safe Custom Schemas\n *\n * It is possible to define your own type-safe schema by using the {@link ox#RpcSchema.From} type.\n *\n * ```ts twoslash\n * import { RpcSchema, RpcRequest } from 'ox'\n *\n * type Schema = RpcSchema.From<{ // [!code focus]\n *   Request: { // [!code focus]\n *     method: 'eth_foobar' // [!code focus]\n *     params: [number] // [!code focus]\n *   } // [!code focus]\n *   ReturnType: string // [!code focus]\n * } | { // [!code focus]\n *   Request: { // [!code focus]\n *     method: 'eth_foobaz' // [!code focus]\n *     params: [string] // [!code focus]\n *   } // [!code focus]\n *   ReturnType: string // [!code focus]\n * }> // [!code focus]\n *\n * const store = RpcRequest.createStore<Schema>() // [!code focus]\n *\n * const request = store.prepare({\n *   method: 'eth_foobar', // [!code focus]\n *   // ^?\n *   params: [42],\n * })\n * ```\n *\n * @param options - Request store options.\n * @returns The request store\n */\nexport function createStore<\n  schema extends RpcSchema.Generic = RpcSchema.Default,\n>(options: createStore.Options = {}): createStore.ReturnType<schema> {\n  let id = options.id ?? 0\n  return {\n    prepare(options) {\n      return from({\n        id: id++,\n        ...options,\n      } as never) as never\n    },\n    get id() {\n      return id\n    },\n  }\n}\n\nexport declare namespace createStore {\n  type Options = {\n    /** The initial request ID. */\n    id?: number\n  }\n\n  type ReturnType<schema extends RpcSchema.Generic = RpcSchema.Default> =\n    Store<schema>\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * A type-safe interface to build a JSON-RPC request object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#request_object).\n *\n * :::warning\n *\n * You will likely want to use {@link ox#RpcRequest.(createStore:function)} instead as it will also manage `id`s and uses this function internally.\n *\n * :::\n *\n * @example\n * ```ts twoslash\n * import { RpcRequest, RpcResponse } from 'ox'\n *\n * // 1. Build a request object.\n * const request = RpcRequest.from({ // [!code focus]\n *   id: 0, // [!code focus]\n *   method: 'eth_estimateGas', // [!code focus]\n *   params: [ // [!code focus]\n *     { // [!code focus]\n *       from: '0xd2135CfB216b74109775236E36d4b433F1DF507B', // [!code focus]\n *       to: '0x0D44f617435088c947F00B31160f64b074e412B4', // [!code focus]\n *       value: '0x69420', // [!code focus]\n *     }, // [!code focus]\n *   ], // [!code focus]\n * }) // [!code focus]\n *\n * // 2. Send the JSON-RPC request via HTTP.\n * const gas = await fetch('https://1.rpc.thirdweb.com', {\n *   body: JSON.stringify(request),\n *   headers: {\n *     'Content-Type': 'application/json',\n *   },\n *   method: 'POST',\n * })\n *  .then((response) => response.json())\n *  // 3. Parse the JSON-RPC response into a type-safe result.\n *  .then((response) => RpcResponse.parse(response, { request }))\n * ```\n *\n * @param options - JSON-RPC request options.\n * @returns The fully-formed JSON-RPC request object.\n */\nexport function from<methodName extends RpcSchema.MethodNameGeneric>(\n  options: from.Options<methodName>,\n): from.ReturnType<methodName> {\n  return {\n    ...options,\n    jsonrpc: '2.0',\n  } as never\n}\n\nexport declare namespace from {\n  type Options<methodName extends RpcSchema.MethodNameGeneric> = Compute<\n    RpcSchema_internal.ExtractRequestOpaque<RpcSchema.Default, methodName> & {\n      id: number\n    }\n  >\n\n  type ReturnType<methodName extends RpcSchema.MethodNameGeneric> = Compute<\n    RpcRequest<RpcSchema.ExtractItem<RpcSchema.Default, methodName>>\n  >\n\n  type ErrorType = Errors.GlobalErrorType\n}\n", "import * as Errors from './Errors.js'\nimport type * as RpcResponse from './RpcResponse.js'\nimport type * as RpcSchema from './RpcSchema.js'\nimport { getUrl } from './internal/errors.js'\nimport * as promise from './internal/promise.js'\nimport type * as RpcSchema_internal from './internal/rpcSchema.js'\nimport * as internal from './internal/rpcTransport.js'\nimport type { Compute } from './internal/types.js'\n\n/** Root type for an RPC Transport. */\nexport type RpcTransport<\n  raw extends boolean = false,\n  options extends Record<string, unknown> = {},\n  schema extends RpcSchema.Generic = RpcSchema.Default,\n> = Compute<{\n  request: RequestFn<raw, options, schema>\n}>\n\n/** HTTP-based RPC Transport. */\nexport type Http<\n  raw extends boolean = false,\n  schema extends RpcSchema.Generic = RpcSchema.Default,\n> = RpcTransport<raw, HttpOptions, schema>\n\nexport type HttpOptions = {\n  /** Request configuration to pass to `fetch`. */\n  fetchOptions?:\n    | Omit<RequestInit, 'body'>\n    | ((\n        method: RpcSchema.Generic['Request'],\n      ) => Omit<RequestInit, 'body'> | Promise<Omit<RequestInit, 'body'>>)\n    | undefined\n  /** Function to use to make the request. @default fetch */\n  fetchFn?: typeof fetch | undefined\n  /** Timeout for the request in milliseconds. @default 10_000 */\n  timeout?: number | undefined\n}\n\nexport type RequestFn<\n  raw extends boolean = false,\n  options extends Record<string, unknown> = {},\n  schema extends RpcSchema.Generic = RpcSchema.Default,\n> = <\n  methodName extends RpcSchema.MethodNameGeneric,\n  raw_override extends boolean | undefined = undefined,\n>(\n  parameters: Compute<\n    RpcSchema_internal.ExtractRequestOpaque<schema, methodName>\n  >,\n  options?: internal.Options<raw_override, options, schema> | undefined,\n) => Promise<\n  raw_override extends boolean\n    ? raw_override extends true\n      ? RpcResponse.RpcResponse<RpcSchema.ExtractReturnType<schema, methodName>>\n      : RpcSchema.ExtractReturnType<schema, methodName>\n    : raw extends true\n      ? RpcResponse.RpcResponse<RpcSchema.ExtractReturnType<schema, methodName>>\n      : RpcSchema.ExtractReturnType<schema, methodName>\n>\n\n/**\n * Creates a HTTP JSON-RPC Transport from a URL.\n *\n * @example\n * ```ts twoslash\n * import { RpcTransport } from 'ox'\n *\n * const transport = RpcTransport.fromHttp('https://1.rpc.thirdweb.com')\n *\n * const blockNumber = await transport.request({ method: 'eth_blockNumber' })\n * // @log: '0x1a2b3c'\n * ```\n *\n * @param url - URL to perform the JSON-RPC requests to.\n * @param options - Transport options.\n * @returns HTTP JSON-RPC Transport.\n */\nexport function fromHttp<\n  raw extends boolean = false,\n  schema extends RpcSchema.Generic = RpcSchema.Default,\n>(url: string, options: fromHttp.Options<raw, schema> = {}): Http<raw, schema> {\n  return internal.create<HttpOptions, schema, raw>(\n    {\n      async request(body_, options_) {\n        const {\n          fetchFn = options.fetchFn ?? fetch,\n          fetchOptions: fetchOptions_ = options.fetchOptions,\n          timeout = options.timeout ?? 10_000,\n        } = options_\n\n        const body = JSON.stringify(body_)\n\n        const fetchOptions =\n          typeof fetchOptions_ === 'function'\n            ? await fetchOptions_(body_)\n            : fetchOptions_\n\n        const response = await promise.withTimeout(\n          ({ signal }) => {\n            const init: RequestInit = {\n              ...fetchOptions,\n              body,\n              headers: {\n                'Content-Type': 'application/json',\n                ...fetchOptions?.headers,\n              },\n              method: fetchOptions?.method ?? 'POST',\n              signal: fetchOptions?.signal ?? (timeout > 0 ? signal : null),\n            }\n            const request = new Request(url, init)\n            return fetchFn(request)\n          },\n          {\n            timeout,\n            signal: true,\n          },\n        )\n\n        const data = await (async () => {\n          if (\n            response.headers.get('Content-Type')?.startsWith('application/json')\n          )\n            return response.json()\n          return response.text().then((data) => {\n            try {\n              return JSON.parse(data || '{}')\n            } catch (err) {\n              if (response.ok)\n                throw new MalformedResponseError({\n                  response: data,\n                })\n              return { error: data }\n            }\n          })\n        })()\n\n        if (!response.ok)\n          throw new HttpError({\n            body,\n            details: JSON.stringify(data.error) ?? response.statusText,\n            response,\n            url,\n          })\n\n        return data as never\n      },\n    },\n    { raw: options.raw },\n  )\n}\n\nexport declare namespace fromHttp {\n  type Options<\n    raw extends boolean = false,\n    schema extends RpcSchema.Generic = RpcSchema.Default,\n  > = internal.Options<raw, HttpOptions, schema>\n\n  type ErrorType =\n    | promise.withTimeout.ErrorType\n    | HttpError\n    | Errors.GlobalErrorType\n}\n\n/** Thrown when a HTTP request fails. */\nexport class HttpError extends Errors.BaseError {\n  override readonly name = 'RpcTransport.HttpError'\n\n  constructor({\n    body,\n    details,\n    response,\n    url,\n  }: { body: unknown; details: string; response: Response; url: string }) {\n    super('HTTP request failed.', {\n      details,\n      metaMessages: [\n        `Status: ${response.status}`,\n        `URL: ${getUrl(url)}`,\n        body ? `Body: ${JSON.stringify(body)}` : undefined,\n      ],\n    })\n  }\n}\n\n/** Thrown when a HTTP response is malformed. */\nexport class MalformedResponseError extends Errors.BaseError {\n  override readonly name = 'RpcTransport.MalformedResponseError'\n\n  constructor({ response }: { response: string }) {\n    super('HTTP Response could not be parsed as JSON.', {\n      metaMessages: [`Response: ${response}`],\n    })\n  }\n}\n", "import * as Errors from '../Errors.js'\n\n/** @internal */\nexport function withTimeout<data>(\n  fn: withTimeout.Fn<data>,\n  options: withTimeout.Options,\n): Promise<data> {\n  const { errorInstance = new TimeoutError(), timeout, signal } = options\n  return new Promise((resolve, reject) => {\n    ;(async () => {\n      let timeoutId: any\n      try {\n        const controller = new AbortController()\n        if (timeout > 0)\n          timeoutId = setTimeout(() => {\n            if (signal) {\n              controller.abort()\n            } else {\n              reject(errorInstance)\n            }\n          }, timeout) as any\n        resolve(await fn({ signal: controller.signal }))\n      } catch (err) {\n        if ((err as Error)?.name === 'AbortError') reject(errorInstance)\n        reject(err)\n      } finally {\n        clearTimeout(timeoutId)\n      }\n    })()\n  })\n}\n\n/** @internal */\nexport declare namespace withTimeout {\n  type Fn<data> = ({\n    signal,\n  }: { signal: AbortController['signal'] | null }) => Promise<data>\n\n  type Options = {\n    // The error instance to throw when the timeout is reached.\n    errorInstance?: Error | undefined\n    // The timeout (in ms).\n    timeout: number\n    // Whether or not the timeout should use an abort signal.\n    signal?: boolean | undefined\n  }\n\n  type ErrorType = TimeoutError | Errors.GlobalErrorType\n}\n\n/** @internal */\n\n/**\n * Thrown when an operation times out.\n * @internal\n */\nexport class TimeoutError extends Errors.BaseError {\n  override readonly name = 'Promise.TimeoutError'\n\n  constructor() {\n    super('Operation timed out.')\n  }\n}\n", "import type * as Errors from '../Errors.js'\nimport * as RpcRequest from '../RpcRequest.js'\nimport * as RpcResponse from '../RpcResponse.js'\nimport type * as RpcSchema from '../RpcSchema.js'\nimport type * as RpcTransport from '../RpcTransport.js'\nimport type { Compute } from './types.js'\n\n/** @internal */\nexport type Options<\n  raw extends boolean | undefined = undefined,\n  options extends Record<string, unknown> = {},\n  schema extends RpcSchema.Generic = RpcSchema.Default,\n> = {\n  /**\n   * Enables raw mode – responses will return an object with `result` and `error` properties instead of returning the `result` directly and throwing errors.\n   *\n   * - `true`: a JSON-RPC response object will be returned with `result` and `error` properties.\n   * - `false`: the JSON-RPC response object's `result` property will be returned directly, and JSON-RPC Errors will be thrown.\n   *\n   * @default false\n   */\n  raw?: raw | boolean | undefined\n  /**\n   * RPC Schema to use for the Transport's `request` function.\n   * See {@link ox#RpcSchema.(from:function)} for more.\n   *\n   * @default `RpcSchema.Default`\n   */\n  schema?: schema | RpcSchema.Default | undefined\n} & options\n\n/** @internal */\nexport function create<\n  options extends Record<string, unknown> = {},\n  schema extends RpcSchema.Generic = RpcSchema.Default,\n  raw extends boolean = false,\n>(\n  transport: create.Transport<options>,\n  options_root?: Options<raw, options, schema>,\n): RpcTransport.RpcTransport<raw, options, schema> {\n  const requestStore = RpcRequest.createStore()\n\n  return {\n    request: async ({ method, params }, options: any = {}) => {\n      const body = requestStore.prepare({ method, params } as never)\n\n      const data = await transport.request(body as never, options as never)\n\n      return RpcResponse.parse(data, {\n        raw: options.raw ?? options_root?.raw,\n      }) as never\n    },\n  }\n}\n\n/** @internal */\nexport declare namespace create {\n  type Transport<options extends Record<string, unknown> = {}> = {\n    request: (\n      body: Compute<Omit<RpcRequest.RpcRequest, '_returnType'>>,\n      options: options,\n    ) => Promise<RpcResponse.RpcResponse>\n  }\n\n  type ErrorType =\n    | RpcRequest.createStore.ErrorType\n    | RpcResponse.parse.ErrorType\n    | Errors.GlobalErrorType\n}\n", "import { secp256r1 } from '@noble/curves/p256'\nimport * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport * as PublicKey from './PublicKey.js'\nimport type * as Signature from './Signature.js'\nimport * as Entropy from './internal/entropy.js'\n\n/** Re-export of noble/curves P256 utilities. */\nexport const noble = secp256r1\n\n/**\n * Computes the P256 ECDSA public key from a provided private key.\n *\n * @example\n * ```ts twoslash\n * import { P256 } from 'ox'\n *\n * const publicKey = P256.getPublicKey({ privateKey: '0x...' })\n * ```\n *\n * @param options - The options to compute the public key.\n * @returns The computed public key.\n */\nexport function getPublicKey(\n  options: getPublicKey.Options,\n): PublicKey.PublicKey {\n  const { privateKey } = options\n  const point = secp256r1.ProjectivePoint.fromPrivateKey(\n    typeof privateKey === 'string'\n      ? privateKey.slice(2)\n      : Hex.fromBytes(privateKey).slice(2),\n  )\n  return PublicKey.from(point)\n}\n\nexport declare namespace getPublicKey {\n  type Options = {\n    /**\n     * Private key to compute the public key from.\n     */\n    privateKey: Hex.Hex | Bytes.Bytes\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Generates a random P256 ECDSA private key.\n *\n * @example\n * ```ts twoslash\n * import { P256 } from 'ox'\n *\n * const privateKey = P256.randomPrivateKey()\n * ```\n *\n * @param options - The options to generate the private key.\n * @returns The generated private key.\n */\nexport function randomPrivateKey<as extends 'Hex' | 'Bytes' = 'Hex'>(\n  options: randomPrivateKey.Options<as> = {},\n): randomPrivateKey.ReturnType<as> {\n  const { as = 'Hex' } = options\n  const bytes = secp256r1.utils.randomPrivateKey()\n  if (as === 'Hex') return Hex.fromBytes(bytes) as never\n  return bytes as never\n}\n\nexport declare namespace randomPrivateKey {\n  type Options<as extends 'Hex' | 'Bytes' = 'Hex'> = {\n    /**\n     * Format of the returned private key.\n     * @default 'Hex'\n     */\n    as?: as | 'Hex' | 'Bytes' | undefined\n  }\n\n  type ReturnType<as extends 'Hex' | 'Bytes'> =\n    | (as extends 'Bytes' ? Bytes.Bytes : never)\n    | (as extends 'Hex' ? Hex.Hex : never)\n\n  type ErrorType = Hex.fromBytes.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Recovers the signing public key from the signed payload and signature.\n *\n * @example\n * ```ts twoslash\n * import { P256 } from 'ox'\n *\n * const signature = P256.sign({ payload: '0xdeadbeef', privateKey: '0x...' })\n *\n * const publicKey = P256.recoverPublicKey({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The recovery options.\n * @returns The recovered public key.\n */\nexport function recoverPublicKey(\n  options: recoverPublicKey.Options,\n): PublicKey.PublicKey {\n  const { payload, signature } = options\n  const { r, s, yParity } = signature\n  const signature_ = new secp256r1.Signature(\n    BigInt(r),\n    BigInt(s),\n  ).addRecoveryBit(yParity)\n  const payload_ =\n    payload instanceof Uint8Array ? Hex.fromBytes(payload) : payload\n  const point = signature_.recoverPublicKey(payload_.substring(2))\n  return PublicKey.from(point)\n}\n\nexport declare namespace recoverPublicKey {\n  type Options = {\n    /** Payload that was signed. */\n    payload: Hex.Hex | Bytes.Bytes\n    /** Signature of the payload. */\n    signature: Signature.Signature\n  }\n\n  type ErrorType =\n    | PublicKey.from.ErrorType\n    | Hex.fromBytes.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Signs the payload with the provided private key and returns a P256 signature.\n *\n * @example\n * ```ts twoslash\n * import { P256 } from 'ox'\n *\n * const signature = P256.sign({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   privateKey: '0x...' // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The signing options.\n * @returns The ECDSA {@link ox#Signature.Signature}.\n */\nexport function sign(options: sign.Options): Signature.Signature {\n  const {\n    extraEntropy = Entropy.extraEntropy,\n    hash,\n    payload,\n    privateKey,\n  } = options\n  const { r, s, recovery } = secp256r1.sign(\n    payload instanceof Uint8Array ? payload : Bytes.fromHex(payload),\n    privateKey instanceof Uint8Array ? privateKey : Bytes.fromHex(privateKey),\n    {\n      extraEntropy:\n        typeof extraEntropy === 'boolean'\n          ? extraEntropy\n          : Hex.from(extraEntropy).slice(2),\n      lowS: true,\n      ...(hash ? { prehash: true } : {}),\n    },\n  )\n  return {\n    r,\n    s,\n    yParity: recovery,\n  }\n}\n\nexport declare namespace sign {\n  type Options = {\n    /**\n     * Extra entropy to add to the signing process. Setting to `false` will disable it.\n     * @default true\n     */\n    extraEntropy?: boolean | Hex.Hex | Bytes.Bytes | undefined\n    /**\n     * If set to `true`, the payload will be hashed (sha256) before being signed.\n     */\n    hash?: boolean | undefined\n    /**\n     * Payload to sign.\n     */\n    payload: Hex.Hex | Bytes.Bytes\n    /**\n     * ECDSA private key.\n     */\n    privateKey: Hex.Hex | Bytes.Bytes\n  }\n\n  type ErrorType = Bytes.fromHex.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Verifies a payload was signed by the provided public key.\n *\n * @example\n *\n * ```ts twoslash\n * import { P256 } from 'ox'\n *\n * const privateKey = P256.randomPrivateKey()\n * const publicKey = P256.getPublicKey({ privateKey })\n * const signature = P256.sign({ payload: '0xdeadbeef', privateKey })\n *\n * const verified = P256.verify({ // [!code focus]\n *   publicKey, // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The verification options.\n * @returns Whether the payload was signed by the provided public key.\n */\nexport function verify(options: verify.Options): boolean {\n  const { hash, payload, publicKey, signature } = options\n  return secp256r1.verify(\n    signature,\n    payload instanceof Uint8Array ? payload : Bytes.fromHex(payload),\n    PublicKey.toHex(publicKey).substring(2),\n    ...(hash ? [{ prehash: true, lowS: true }] : []),\n  )\n}\n\nexport declare namespace verify {\n  type Options = {\n    /** If set to `true`, the payload will be hashed (sha256) before being verified. */\n    hash?: boolean | undefined\n    /** Payload that was signed. */\n    payload: Hex.Hex | Bytes.Bytes\n    /** Public key that signed the payload. */\n    publicKey: PublicKey.PublicKey<boolean>\n    /** Signature of the payload. */\n    signature: Signature.Signature<boolean>\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n", "/**\n * Internal module for NIST P256, P384, P521 curves.\n * Do not use for now.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256, sha384, sha512 } from '@noble/hashes/sha2';\nimport { createCurve, type CurveFnWithCreate } from './_shortw_utils.ts';\nimport { createHasher, type Hasher } from './abstract/hash-to-curve.ts';\nimport { Field } from './abstract/modular.ts';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.ts';\n\nconst Fp256 = Field(BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'));\nconst p256_a = Fp256.create(BigInt('-3'));\nconst p256_b = BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b');\n\n/**\n * secp256r1 curve, ECDSA and ECDH methods.\n * Field: `2n**224n * (2n**32n-1n) + 2n**192n + 2n**96n-1n`\n */\n// prettier-ignore\nexport const p256: CurveFnWithCreate = createCurve({\n  a: p256_a,\n  b: p256_b,\n  Fp: Fp256,\n  n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n  Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n  Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n  h: BigInt(1),\n  lowS: false\n} as const, sha256);\n/** Alias to p256. */\nexport const secp256r1: CurveFnWithCreate = p256;\n\nconst p256_mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp256, {\n    A: p256_a,\n    B: p256_b,\n    Z: Fp256.create(BigInt('-10')),\n  }))();\n\n/** Hashing / encoding to p256 points / field. RFC 9380 methods. */\nexport const p256_hasher: Hasher<bigint> = /* @__PURE__ */ (() =>\n  createHasher(secp256r1.ProjectivePoint, (scalars: bigint[]) => p256_mapSWU(scalars[0]), {\n    DST: 'P256_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',\n    p: Fp256.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n  }))();\n\n// Field over which we'll do calculations.\nconst Fp384 = Field(\n  BigInt(\n    '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff'\n  )\n);\nconst p384_a = Fp384.create(BigInt('-3'));\n// prettier-ignore\nconst p384_b = BigInt('0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef');\n\n/**\n * secp384r1 curve, ECDSA and ECDH methods.\n * Field: `2n**384n - 2n**128n - 2n**96n + 2n**32n - 1n`.\n * */\n// prettier-ignore\nexport const p384: CurveFnWithCreate = createCurve({\n  a: p384_a,\n  b: p384_b,\n  Fp: Fp384,\n  n: BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973'),\n  Gx: BigInt('0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7'),\n  Gy: BigInt('0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f'),\n  h: BigInt(1),\n  lowS: false\n} as const, sha384);\n/** Alias to p384. */\nexport const secp384r1: CurveFnWithCreate = p384;\n\nconst p384_mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp384, {\n    A: p384_a,\n    B: p384_b,\n    Z: Fp384.create(BigInt('-12')),\n  }))();\n\n/** Hashing / encoding to p384 points / field. RFC 9380 methods. */\nexport const p384_hasher: Hasher<bigint> = /* @__PURE__ */ (() =>\n  createHasher(secp384r1.ProjectivePoint, (scalars: bigint[]) => p384_mapSWU(scalars[0]), {\n    DST: 'P384_XMD:SHA-384_SSWU_RO_',\n    encodeDST: 'P384_XMD:SHA-384_SSWU_NU_',\n    p: Fp384.ORDER,\n    m: 1,\n    k: 192,\n    expand: 'xmd',\n    hash: sha384,\n  }))();\n\n// Field over which we'll do calculations.\nconst Fp521 = Field(\n  BigInt(\n    '0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n  )\n);\n\nconst p521_a = Fp521.create(BigInt('-3'));\nconst p521_b = BigInt(\n  '0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00'\n);\n\n/**\n * NIST secp521r1 aka p521 curve, ECDSA and ECDH methods.\n * Field: `2n**521n - 1n`.\n */\n// prettier-ignore\nexport const p521: CurveFnWithCreate = createCurve({\n  a: p521_a,\n  b: p521_b,\n  Fp: Fp521,\n  n: BigInt(\n    '0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409'\n  ),\n  Gx: BigInt(\n    '0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66'\n  ),\n  Gy: BigInt(\n    '0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650'\n  ),\n  h: BigInt(1),\n  lowS: false,\n  allowedPrivateKeyLengths: [130, 131, 132] // P521 keys are variable-length. Normalize to 132b\n} as const, sha512);\n/** Alias to p521. */\nexport const secp521r1: CurveFnWithCreate = p521;\n\nconst p521_mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp521, {\n    A: p521_a,\n    B: p521_b,\n    Z: Fp521.create(BigInt('-4')),\n  }))();\n\n/** Hashing / encoding to p521 points / field. RFC 9380 methods. */\nexport const p521_hasher: Hasher<bigint> = /* @__PURE__ */ (() =>\n  createHasher(secp521r1.ProjectivePoint, (scalars: bigint[]) => p521_mapSWU(scalars[0]), {\n    DST: 'P521_XMD:SHA-512_SSWU_RO_',\n    encodeDST: 'P521_XMD:SHA-512_SSWU_NU_',\n    p: Fp521.ORDER,\n    m: 1,\n    k: 256,\n    expand: 'xmd',\n    hash: sha512,\n  }))();\n", "/**\n * NIST secp256r1 aka p256.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { type HTFMethod } from './abstract/hash-to-curve.ts';\nimport { p256_hasher, p256 as p256n } from './nist.ts';\nexport const p256: typeof p256n = p256n;\nexport const secp256r1: typeof p256n = p256n;\nexport const hashToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() => p256_hasher.hashToCurve)();\nexport const encodeToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() => p256_hasher.encodeToCurve)();\n", "import * as Address from './Address.js'\nimport * as Errors from './Errors.js'\nimport type { ExactPartial } from './internal/types.js'\nimport { uid } from './internal/uid.js'\n\nexport const domainRegex =\n  /^([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,}(:[0-9]{1,5})?$/\n\nexport const ipRegex =\n  /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(:[0-9]{1,5})?$/\n\nexport const localhostRegex = /^localhost(:[0-9]{1,5})?$/\n\nexport const nonceRegex = /^[a-zA-Z0-9]{8,}$/\n\nexport const schemeRegex = /^([a-zA-Z][a-zA-Z0-9+-.]*)$/\n\n// https://regexr.com/80gdj\nexport const prefixRegex =\n  /^(?:(?<scheme>[a-zA-Z][a-zA-Z0-9+-.]*):\\/\\/)?(?<domain>[a-zA-Z0-9+-.]*(?::[0-9]{1,5})?) (?:wants you to sign in with your Ethereum account:\\n)(?<address>0x[a-fA-F0-9]{40})\\n\\n(?:(?<statement>.*)\\n\\n)?/\n\n// https://regexr.com/80gf9\nexport const suffixRegex =\n  /(?:URI: (?<uri>.+))\\n(?:Version: (?<version>.+))\\n(?:Chain ID: (?<chainId>\\d+))\\n(?:Nonce: (?<nonce>[a-zA-Z0-9]+))\\n(?:Issued At: (?<issuedAt>.+))(?:\\nExpiration Time: (?<expirationTime>.+))?(?:\\nNot Before: (?<notBefore>.+))?(?:\\nRequest ID: (?<requestId>.+))?/\n\n/** [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) message fields. */\nexport type Message = {\n  /**\n   * The Ethereum address performing the signing.\n   */\n  address: Address.Address\n  /**\n   * The [EIP-155](https://eips.ethereum.org/EIPS/eip-155) Chain ID to which the session is bound,\n   */\n  chainId: number\n  /**\n   * [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986) authority that is requesting the signing.\n   */\n  domain: string\n  /**\n   * Time when the signed authentication message is no longer valid.\n   */\n  expirationTime?: Date | undefined\n  /**\n   * Time when the message was generated, typically the current time.\n   */\n  issuedAt?: Date | undefined\n  /**\n   * A random string typically chosen by the relying party and used to prevent replay attacks.\n   */\n  nonce: string\n  /**\n   * Time when the signed authentication message will become valid.\n   */\n  notBefore?: Date | undefined\n  /**\n   * A system-specific identifier that may be used to uniquely refer to the sign-in request.\n   */\n  requestId?: string | undefined\n  /**\n   * A list of information or references to information the user wishes to have resolved as part of authentication by the relying party.\n   */\n  resources?: string[] | undefined\n  /**\n   * [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) URI scheme of the origin of the request.\n   */\n  scheme?: string | undefined\n  /**\n   * A human-readable ASCII assertion that the user will sign.\n   */\n  statement?: string | undefined\n  /**\n   * [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986) URI referring to the resource that is the subject of the signing (as in the subject of a claim).\n   */\n  uri: string\n  /**\n   * The current version of the SIWE Message.\n   */\n  version: '1'\n}\n\n/**\n * Creates [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) formatted message.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.createMessage({\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   chainId: 1,\n *   domain: 'example.com',\n *   nonce: 'foobarbaz',\n *   uri: 'https://example.com/path',\n *   version: '1',\n * })\n * // @log: \"example.com wants you to sign in with your Ethereum account:\n * // @log: 0xA0Cf798816D4b9b9866b5330EEa46a18382f251e\n * // @log:\n * // @log:\n * // @log: URI: https://example.com/path\n * // @log: Version: 1\n * // @log: Chain ID: 1\n * // @log: Nonce: foobarbaz\n * // @log: Issued At: 2023-02-01T00:00:00.000Z\"\n * ```\n *\n * @param value - Values to use when creating EIP-4361 formatted message.\n * @returns EIP-4361 formatted message.\n */\nexport function createMessage(value: Message): string {\n  const {\n    chainId,\n    domain,\n    expirationTime,\n    issuedAt = new Date(),\n    nonce,\n    notBefore,\n    requestId,\n    resources,\n    scheme,\n    uri,\n    version,\n  } = value\n\n  // Validate fields\n  {\n    // Required fields\n    if (chainId !== Math.floor(chainId))\n      throw new InvalidMessageFieldError({\n        field: 'chainId',\n        metaMessages: [\n          '- Chain ID must be a EIP-155 chain ID.',\n          '- See https://eips.ethereum.org/EIPS/eip-155',\n          '',\n          `Provided value: ${chainId}`,\n        ],\n      })\n    if (\n      !(\n        domainRegex.test(domain) ||\n        ipRegex.test(domain) ||\n        localhostRegex.test(domain)\n      )\n    )\n      throw new InvalidMessageFieldError({\n        field: 'domain',\n        metaMessages: [\n          '- Domain must be an RFC 3986 authority.',\n          '- See https://www.rfc-editor.org/rfc/rfc3986',\n          '',\n          `Provided value: ${domain}`,\n        ],\n      })\n    if (!nonceRegex.test(nonce))\n      throw new InvalidMessageFieldError({\n        field: 'nonce',\n        metaMessages: [\n          '- Nonce must be at least 8 characters.',\n          '- Nonce must be alphanumeric.',\n          '',\n          `Provided value: ${nonce}`,\n        ],\n      })\n    if (!isUri(uri))\n      throw new InvalidMessageFieldError({\n        field: 'uri',\n        metaMessages: [\n          '- URI must be a RFC 3986 URI referring to the resource that is the subject of the signing.',\n          '- See https://www.rfc-editor.org/rfc/rfc3986',\n          '',\n          `Provided value: ${uri}`,\n        ],\n      })\n    if (version !== '1')\n      throw new InvalidMessageFieldError({\n        field: 'version',\n        metaMessages: [\n          \"- Version must be '1'.\",\n          '',\n          `Provided value: ${version}`,\n        ],\n      })\n\n    // Optional fields\n    if (scheme && !schemeRegex.test(scheme))\n      throw new InvalidMessageFieldError({\n        field: 'scheme',\n        metaMessages: [\n          '- Scheme must be an RFC 3986 URI scheme.',\n          '- See https://www.rfc-editor.org/rfc/rfc3986#section-3.1',\n          '',\n          `Provided value: ${scheme}`,\n        ],\n      })\n    const statement = value.statement\n    if (statement?.includes('\\n'))\n      throw new InvalidMessageFieldError({\n        field: 'statement',\n        metaMessages: [\n          \"- Statement must not include '\\\\n'.\",\n          '',\n          `Provided value: ${statement}`,\n        ],\n      })\n  }\n\n  // Construct message\n  const address = Address.from(value.address, { checksum: true })\n  const origin = (() => {\n    if (scheme) return `${scheme}://${domain}`\n    return domain\n  })()\n  const statement = (() => {\n    if (!value.statement) return ''\n    return `${value.statement}\\n`\n  })()\n  const prefix = `${origin} wants you to sign in with your Ethereum account:\\n${address}\\n\\n${statement}`\n\n  let suffix = `URI: ${uri}\\nVersion: ${version}\\nChain ID: ${chainId}\\nNonce: ${nonce}\\nIssued At: ${issuedAt.toISOString()}`\n\n  if (expirationTime)\n    suffix += `\\nExpiration Time: ${expirationTime.toISOString()}`\n  if (notBefore) suffix += `\\nNot Before: ${notBefore.toISOString()}`\n  if (requestId) suffix += `\\nRequest ID: ${requestId}`\n  if (resources) {\n    let content = '\\nResources:'\n    for (const resource of resources) {\n      if (!isUri(resource))\n        throw new InvalidMessageFieldError({\n          field: 'resources',\n          metaMessages: [\n            '- Every resource must be a RFC 3986 URI.',\n            '- See https://www.rfc-editor.org/rfc/rfc3986',\n            '',\n            `Provided value: ${resource}`,\n          ],\n        })\n      content += `\\n- ${resource}`\n    }\n    suffix += content\n  }\n\n  return `${prefix}\\n${suffix}`\n}\n\nexport declare namespace createMessage {\n  type ErrorType =\n    | Address.from.ErrorType\n    | InvalidMessageFieldError\n    | Errors.GlobalErrorType\n}\n\n/**\n * Generates random [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) nonce.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.generateNonce()\n * // @log: '65ed4681d4efe0270b923ff5f4b097b1c95974dc33aeebecd5724c42fd86dfd25dc70b27ef836b2aa22e68f19ebcccc1'\n * ```\n *\n * @returns Random nonce.\n */\nexport function generateNonce(): string {\n  return uid(96)\n}\n\n/**\n * Check if the given URI is a valid [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986) URI.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.isUri('https://example.com/foo')\n * // @log: true\n * ```\n *\n * @param value - Value to check.\n * @returns `false` if invalid, otherwise the valid URI.\n */\n// based on https://github.com/ogt/valid-url\nexport function isUri(value: string): false | string {\n  // check for illegal characters\n  if (/[^a-z0-9\\:\\/\\?\\#\\[\\]\\@\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\.\\-\\_\\~\\%]/i.test(value))\n    return false\n\n  // check for hex escapes that aren't complete\n  if (/%[^0-9a-f]/i.test(value)) return false\n  if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value)) return false\n\n  // from RFC 3986\n  const splitted = splitUri(value)\n  const scheme = splitted[1]\n  const authority = splitted[2]\n  const path = splitted[3]\n  const query = splitted[4]\n  const fragment = splitted[5]\n\n  // scheme and path are required, though the path can be empty\n  if (!(scheme?.length && path && path.length >= 0)) return false\n\n  // if authority is present, the path must be empty or begin with a /\n  if (authority?.length) {\n    if (!(path.length === 0 || /^\\//.test(path))) return false\n  } else {\n    // if authority is not present, the path must not start with //\n    if (/^\\/\\//.test(path)) return false\n  }\n\n  // scheme must begin with a letter, then consist of letters, digits, +, ., or -\n  if (!/^[a-z][a-z0-9\\+\\-\\.]*$/.test(scheme.toLowerCase())) return false\n\n  let out = ''\n  // re-assemble the URL per section 5.3 in RFC 3986\n  out += `${scheme}:`\n  if (authority?.length) out += `//${authority}`\n\n  out += path\n\n  if (query?.length) out += `?${query}`\n  if (fragment?.length) out += `#${fragment}`\n\n  return out\n}\n\nfunction splitUri(value: string) {\n  return value.match(\n    /(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/,\n  )!\n}\n\n/**\n * [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) formatted message into message fields object.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.parseMessage(`example.com wants you to sign in with your Ethereum account:\n * 0xA0Cf798816D4b9b9866b5330EEa46a18382f251e\n *\n * I accept the ExampleOrg Terms of Service: https://example.com/tos\n *\n * URI: https://example.com/path\n * Version: 1\n * Chain ID: 1\n * Nonce: foobarbaz\n * Issued At: 2023-02-01T00:00:00.000Z`)\n * // @log: {\n * // @log:   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * // @log:   chainId: 1,\n * // @log:   domain: 'example.com',\n * // @log:   issuedAt: '2023-02-01T00:00:00.000Z',\n * // @log:   nonce: 'foobarbaz',\n * // @log:   statement: 'I accept the ExampleOrg Terms of Service: https://example.com/tos',\n * // @log:   uri: 'https://example.com/path',\n * // @log:   version: '1',\n * // @log: }\n * ```\n *\n * @param message - [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) formatted message.\n * @returns Message fields object.\n */\nexport function parseMessage(message: string): ExactPartial<Message> {\n  const { scheme, statement, ...prefix } = (message.match(prefixRegex)\n    ?.groups ?? {}) as {\n    address: Address.Address\n    domain: string\n    scheme?: string\n    statement?: string\n  }\n  const { chainId, expirationTime, issuedAt, notBefore, requestId, ...suffix } =\n    (message.match(suffixRegex)?.groups ?? {}) as {\n      chainId: string\n      expirationTime?: string\n      issuedAt?: string\n      nonce: string\n      notBefore?: string\n      requestId?: string\n      uri: string\n      version: '1'\n    }\n  const resources = message.split('Resources:')[1]?.split('\\n- ').slice(1)\n  return {\n    ...prefix,\n    ...suffix,\n    ...(chainId ? { chainId: Number(chainId) } : {}),\n    ...(expirationTime ? { expirationTime: new Date(expirationTime) } : {}),\n    ...(issuedAt ? { issuedAt: new Date(issuedAt) } : {}),\n    ...(notBefore ? { notBefore: new Date(notBefore) } : {}),\n    ...(requestId ? { requestId } : {}),\n    ...(resources ? { resources } : {}),\n    ...(scheme ? { scheme } : {}),\n    ...(statement ? { statement } : {}),\n  }\n}\n\n/**\n * Validates [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) message.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.validateMessage({\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   domain: 'example.com',\n *   message: {\n *     address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *     chainId: 1,\n *     domain: 'example.com',\n *     nonce: 'foobarbaz',\n *     uri: 'https://example.com/path',\n *     version: '1',\n *   },\n *   nonce: 'foobarbaz',\n * })\n * // @log: true\n * ```\n *\n * @param value - Values to use when validating EIP-4361 formatted message.\n * @returns Whether the message is valid.\n */\nexport function validateMessage(value: validateMessage.Value): boolean {\n  const { address, domain, message, nonce, scheme, time = new Date() } = value\n\n  if (domain && message.domain !== domain) return false\n  if (nonce && message.nonce !== nonce) return false\n  if (scheme && message.scheme !== scheme) return false\n\n  if (message.expirationTime && time >= message.expirationTime) return false\n  if (message.notBefore && time < message.notBefore) return false\n\n  try {\n    if (!message.address) return false\n    if (address && !Address.isEqual(message.address, address)) return false\n  } catch {\n    return false\n  }\n\n  return true\n}\n\nexport declare namespace validateMessage {\n  interface Value {\n    /**\n     * Ethereum address to check against.\n     */\n    address?: Address.Address | undefined\n    /**\n     * [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986) authority to check against.\n     */\n    domain?: string | undefined\n    /**\n     * EIP-4361 message fields.\n     */\n    message: ExactPartial<Message>\n    /**\n     * Random string to check against.\n     */\n    nonce?: string | undefined\n    /**\n     * [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) URI scheme to check against.\n     */\n    scheme?: string | undefined\n    /**\n     * Current time to check optional `expirationTime` and `notBefore` fields.\n     *\n     * @default new Date()\n     */\n    time?: Date | undefined\n  }\n}\n\n/**\n * Thrown when a field in a SIWE Message is invalid.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.createMessage({\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   chainId: 1.1,\n *   domain: 'example.com',\n *   nonce: 'foobarbaz',\n *   uri: 'https://example.com/path',\n *   version: '1',\n * })\n * // @error: Siwe.InvalidMessageFieldError: Invalid Sign-In with Ethereum message field \"chainId\".\n * // @error: - Chain ID must be a EIP-155 chain ID.\n * // @error: - See https://eips.ethereum.org/EIPS/eip-155\n * // @error: Provided value: 1.1\n * ```\n */\nexport class InvalidMessageFieldError extends Errors.BaseError {\n  override readonly name = 'Siwe.InvalidMessageFieldError'\n\n  constructor(parameters: {\n    field: string\n    metaMessages?: string[] | undefined\n  }) {\n    const { field, metaMessages } = parameters\n    super(`Invalid Sign-In with Ethereum message field \"${field}\".`, {\n      metaMessages,\n    })\n  }\n}\n", "const size = 256\nlet index = size\nlet buffer: string\n\n/** @internal */\nexport function uid(length = 11) {\n  if (!buffer || index + length > size * 2) {\n    buffer = ''\n    index = 0\n    for (let i = 0; i < size; i++) {\n      buffer += ((256 + Math.random() * 256) | 0).toString(16).substring(1)\n    }\n  }\n  return buffer.substring(index, index++ + length)\n}\n", "import type * as Address from './Address.js'\nimport * as Hex from './Hex.js'\nimport type { Compute, OneOf } from './internal/types.js'\n\n/**\n * State override set to specify state to be ephemerally overridden prior to executing a call.\n */\nexport type StateOverrides<bigintType = bigint> = Compute<{\n  [address: Address.Address]: AccountOverrides<bigintType>\n}>\n\n/**\n * RPC state overrides.\n */\nexport type Rpc = StateOverrides<Hex.Hex>\n\n/**\n * Details of an account to be overridden.\n */\nexport type AccountOverrides<bigintType = bigint> = Compute<\n  {\n    /** Balance to set for the account. */\n    balance?: bigintType | undefined\n    /** Code to set for the account. */\n    code?: Hex.Hex | undefined\n    /** Address to move the precompile to. */\n    movePrecompileToAddress?: Address.Address | undefined\n    /** Nonce to set for the account. */\n    nonce?: bigintType | undefined\n  } & OneOf<\n    | {\n        /** Key-value mapping to override all slots in the account storage. */\n        state?: AccountStorage | undefined\n      }\n    | {\n        /** Key-value mapping to override individual slots in the account storage. */\n        stateDiff?: AccountStorage | undefined\n      }\n  >\n>\n\n/**\n * RPC account overrides.\n */\nexport type RpcAccountOverrides = AccountOverrides<Hex.Hex>\n\n/**\n * Key-value mapping to override all slots in the account storage before executing the call.\n */\nexport type AccountStorage = Compute<{\n  [slot: Hex.Hex]: Hex.Hex\n}>\n\n/**\n * Converts an {@link ox#StateOverrides.Rpc} to an {@link ox#StateOverrides.StateOverrides}.\n *\n * @example\n * ```ts twoslash\n * import { StateOverrides } from 'ox'\n *\n * const stateOverrides = StateOverrides.fromRpc({\n *   '0x0000000000000000000000000000000000000000': {\n *     balance: '0x1',\n *   },\n * })\n * ```\n *\n * @param rpcStateOverrides - The RPC state overrides to convert.\n * @returns An instantiated {@link ox#StateOverrides.StateOverrides}.\n */\nexport function fromRpc(rpcStateOverrides: Rpc): StateOverrides {\n  const stateOverrides: StateOverrides = {}\n  for (const [address, accountOverridesRpc] of Object.entries(\n    rpcStateOverrides,\n  )) {\n    const accountOverrides: AccountOverrides = {}\n    if (accountOverridesRpc.balance)\n      accountOverrides.balance = BigInt(accountOverridesRpc.balance)\n    if (accountOverridesRpc.code)\n      accountOverrides.code = accountOverridesRpc.code\n    if (accountOverridesRpc.movePrecompileToAddress)\n      accountOverrides.movePrecompileToAddress =\n        accountOverridesRpc.movePrecompileToAddress\n    if (accountOverridesRpc.nonce)\n      accountOverrides.nonce = BigInt(accountOverridesRpc.nonce)\n    if (accountOverridesRpc.state)\n      accountOverrides.state = accountOverridesRpc.state\n    if (accountOverridesRpc.stateDiff)\n      accountOverrides.stateDiff = accountOverridesRpc.stateDiff\n    ;(stateOverrides as any)[address] = accountOverrides\n  }\n  return stateOverrides\n}\n\n/**\n * Converts an {@link ox#StateOverrides.StateOverrides} to an {@link ox#StateOverrides.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { StateOverrides } from 'ox'\n *\n * const stateOverrides = StateOverrides.toRpc({\n *   '0x0000000000000000000000000000000000000000': {\n *     balance: 1n,\n *   },\n * })\n * ```\n *\n * @param stateOverrides - The state overrides to convert.\n * @returns An instantiated {@link ox#StateOverrides.Rpc}.\n */\nexport function toRpc(stateOverrides: StateOverrides): Rpc {\n  const rpcStateOverrides: Rpc = {}\n  for (const [address, accountOverrides] of Object.entries(stateOverrides)) {\n    const accountOverridesRpc: RpcAccountOverrides = {}\n    if (typeof accountOverrides.balance === 'bigint')\n      accountOverridesRpc.balance = Hex.fromNumber(accountOverrides.balance)\n    if (accountOverrides.code) accountOverridesRpc.code = accountOverrides.code\n    if (accountOverrides.movePrecompileToAddress)\n      accountOverridesRpc.movePrecompileToAddress =\n        accountOverrides.movePrecompileToAddress\n    if (typeof accountOverrides.nonce === 'bigint')\n      accountOverridesRpc.nonce = Hex.fromNumber(accountOverrides.nonce)\n    if (accountOverrides.state)\n      accountOverridesRpc.state = accountOverrides.state\n    if (accountOverrides.stateDiff)\n      accountOverridesRpc.stateDiff = accountOverrides.stateDiff\n    ;(rpcStateOverrides as any)[address] = accountOverridesRpc\n  }\n  return rpcStateOverrides\n}\n", "import type * as Address from './Address.js'\nimport * as Errors from './Errors.js'\nimport type * as Hex from './Hex.js'\nimport * as Value from './Value.js'\nimport type { Compute } from './internal/types.js'\n\n/** Base type for a Transaction Envelope. Transaction Envelopes inherit this type. */\nexport type Base<\n  type extends string = string,\n  signed extends boolean = boolean,\n  bigintType = bigint,\n  numberType = number,\n> = Compute<\n  {\n    /** EIP-155 Chain ID. */\n    chainId: numberType\n    /** Contract code or a hashed method call with encoded args */\n    data?: Hex.Hex | undefined\n    /** @alias `data` – added for TransactionEnvelope - Transaction compatibility. */\n    input?: Hex.Hex | undefined\n    /** Sender of the transaction. */\n    from?: Address.Address | undefined\n    /** Gas provided for transaction execution */\n    gas?: bigintType | undefined\n    /** Unique number identifying this transaction */\n    nonce?: bigintType | undefined\n    /** Transaction recipient */\n    to?: Address.Address | null | undefined\n    /** Transaction type */\n    type: type\n    /** Value in wei sent with this transaction */\n    value?: bigintType | undefined\n    /** ECDSA signature r. */\n    r?: bigintType | undefined\n    /** ECDSA signature s. */\n    s?: bigintType | undefined\n    /** ECDSA signature yParity. */\n    yParity?: numberType | undefined\n    /** @deprecated ECDSA signature v (for backwards compatibility). */\n    v?: numberType | undefined\n  } & (signed extends true ? { r: bigintType; s: bigintType } : {})\n>\n\n/** RPC representation of a {@link ox#(TransactionEnvelope:namespace).Base}. */\nexport type BaseRpc<\n  type extends string = string,\n  signed extends boolean = boolean,\n> = Base<type, signed, Hex.Hex, Hex.Hex>\n\n/** Signed representation of a {@link ox#(TransactionEnvelope:namespace).Base}. */\nexport type BaseSigned<type extends string = string> = Base<type, true>\n\n/**\n * Thrown when a fee cap is too high.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * TransactionEnvelopeEip1559.assert({\n *   maxFeePerGas: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n * })\n * // @error: TransactionEnvelope.FeeCapTooHighError: The fee cap (`maxFeePerGas`/`maxPriorityFeePerGas` = 115792089237316195423570985008687907853269984665640564039457584007913.129639936 gwei) cannot be higher than the maximum allowed value (2^256-1).\n * ```\n */\nexport class FeeCapTooHighError extends Errors.BaseError {\n  override readonly name = 'TransactionEnvelope.FeeCapTooHighError'\n  constructor({\n    feeCap,\n  }: {\n    feeCap?: bigint | undefined\n  } = {}) {\n    super(\n      `The fee cap (\\`maxFeePerGas\\`/\\`maxPriorityFeePerGas\\`${\n        feeCap ? ` = ${Value.formatGwei(feeCap)} gwei` : ''\n      }) cannot be higher than the maximum allowed value (2^256-1).`,\n    )\n  }\n}\n\n/**\n * Thrown when a gas price is too high.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeLegacy } from 'ox'\n *\n * TransactionEnvelopeLegacy.assert({\n *   gasPrice: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n * })\n * // @error: TransactionEnvelope.GasPriceTooHighError: The gas price (`gasPrice` = 115792089237316195423570985008687907853269984665640564039457584007913.129639936 gwei) cannot be higher than the maximum allowed value (2^256-1).\n * ```\n */\nexport class GasPriceTooHighError extends Errors.BaseError {\n  override readonly name = 'TransactionEnvelope.GasPriceTooHighError'\n  constructor({\n    gasPrice,\n  }: {\n    gasPrice?: bigint | undefined\n  } = {}) {\n    super(\n      `The gas price (\\`gasPrice\\`${\n        gasPrice ? ` = ${Value.formatGwei(gasPrice)} gwei` : ''\n      }) cannot be higher than the maximum allowed value (2^256-1).`,\n    )\n  }\n}\n\n/**\n * Thrown when a chain ID is invalid.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * TransactionEnvelopeEip1559.assert({ chainId: 0 })\n * // @error: TransactionEnvelope.InvalidChainIdError: Chain ID \"0\" is invalid.\n * ```\n */\nexport class InvalidChainIdError extends Errors.BaseError {\n  override readonly name = 'TransactionEnvelope.InvalidChainIdError'\n  constructor({ chainId }: { chainId?: number | undefined }) {\n    super(\n      typeof chainId !== 'undefined'\n        ? `Chain ID \"${chainId}\" is invalid.`\n        : 'Chain ID is invalid.',\n    )\n  }\n}\n\n/**\n * Thrown when a serialized transaction is invalid.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * TransactionEnvelopeEip1559.deserialize('0x02c0')\n * // @error: TransactionEnvelope.InvalidSerializedError: Invalid serialized transaction of type \"eip1559\" was provided.\n * // @error: Serialized Transaction: \"0x02c0\"\n * // @error: Missing Attributes: chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, data, accessList\n * ```\n */\nexport class InvalidSerializedError extends Errors.BaseError {\n  override readonly name = 'TransactionEnvelope.InvalidSerializedError'\n  constructor({\n    attributes,\n    serialized,\n    type,\n  }: {\n    attributes: Record<string, unknown>\n    serialized: Hex.Hex\n    type: string\n  }) {\n    const missing = Object.entries(attributes)\n      .map(([key, value]) => (typeof value === 'undefined' ? key : undefined))\n      .filter(Boolean)\n    super(`Invalid serialized transaction of type \"${type}\" was provided.`, {\n      metaMessages: [\n        `Serialized Transaction: \"${serialized}\"`,\n        missing.length > 0 ? `Missing Attributes: ${missing.join(', ')}` : '',\n      ].filter(Boolean),\n    })\n  }\n}\n\n/**\n * Thrown when a tip is higher than a fee cap.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * TransactionEnvelopeEip1559.assert({\n *   chainId: 1,\n *   maxFeePerGas: 10n,\n *   maxPriorityFeePerGas: 11n,\n * })\n * // @error: TransactionEnvelope.TipAboveFeeCapError: The provided tip (`maxPriorityFeePerGas` = 11 gwei) cannot be higher than the fee cap (`maxFeePerGas` = 10 gwei).\n * ```\n */\nexport class TipAboveFeeCapError extends Errors.BaseError {\n  override readonly name = 'TransactionEnvelope.TipAboveFeeCapError'\n  constructor({\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n  }: {\n    maxPriorityFeePerGas?: bigint | undefined\n    maxFeePerGas?: bigint | undefined\n  } = {}) {\n    super(\n      [\n        `The provided tip (\\`maxPriorityFeePerGas\\`${\n          maxPriorityFeePerGas\n            ? ` = ${Value.formatGwei(maxPriorityFeePerGas)} gwei`\n            : ''\n        }) cannot be higher than the fee cap (\\`maxFeePerGas\\`${\n          maxFeePerGas ? ` = ${Value.formatGwei(maxFeePerGas)} gwei` : ''\n        }).`,\n      ].join('\\n'),\n    )\n  }\n}\n", "import * as Errors from './Errors.js'\n\n/** @see https://ethereum.github.io/yellowpaper/paper.pdf */\nexport const exponents = {\n  wei: 0,\n  gwei: 9,\n  szabo: 12,\n  finney: 15,\n  ether: 18,\n} as const\n\n/**\n * Formats a `bigint` Value to its string representation (divided by the given exponent).\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.format(420_000_000_000n, 9)\n * // @log: '420'\n * ```\n *\n * @param value - The `bigint` Value to format.\n * @param decimals - The exponent to divide the `bigint` Value by.\n * @returns The string representation of the Value.\n */\nexport function format(value: bigint, decimals = 0) {\n  let display = value.toString()\n\n  const negative = display.startsWith('-')\n  if (negative) display = display.slice(1)\n\n  display = display.padStart(decimals, '0')\n\n  let [integer, fraction] = [\n    display.slice(0, display.length - decimals),\n    display.slice(display.length - decimals),\n  ]\n  fraction = fraction.replace(/(0+)$/, '')\n  return `${negative ? '-' : ''}${integer || '0'}${\n    fraction ? `.${fraction}` : ''\n  }`\n}\n\nexport declare namespace format {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Formats a `bigint` Value (default: wei) to a string representation of Ether.\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.formatEther(1_000_000_000_000_000_000n)\n * // @log: '1'\n * ```\n *\n * @param wei - The Value to format.\n * @param unit - The unit to format the Value in. @default 'wei'.\n * @returns The Ether string representation of the Value.\n */\nexport function formatEther(\n  wei: bigint,\n  unit: 'wei' | 'gwei' | 'szabo' | 'finney' = 'wei',\n) {\n  return format(wei, exponents.ether - exponents[unit])\n}\n\nexport declare namespace formatEther {\n  type ErrorType = format.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Formats a `bigint` Value (default: wei) to a string representation of Gwei.\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.formatGwei(1_000_000_000n)\n * // @log: '1'\n * ```\n *\n * @param wei - The Value to format.\n * @param unit - The unit to format the Value in. @default 'wei'.\n * @returns The Gwei string representation of the Value.\n */\nexport function formatGwei(wei: bigint, unit: 'wei' = 'wei') {\n  return format(wei, exponents.gwei - exponents[unit])\n}\n\nexport declare namespace formatGwei {\n  type ErrorType = format.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Parses a `string` representation of a Value to `bigint` (multiplied by the given exponent).\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.from('420', 9)\n * // @log: 420000000000n\n * ```\n *\n * @param value - The string representation of the Value.\n * @param decimals - The exponent to multiply the Value by.\n * @returns The `bigint` representation of the Value.\n */\nexport function from(value: string, decimals = 0) {\n  if (!/^(-?)([0-9]*)\\.?([0-9]*)$/.test(value))\n    throw new InvalidDecimalNumberError({ value })\n\n  let [integer = '', fraction = '0'] = value.split('.')\n\n  const negative = integer.startsWith('-')\n  if (negative) integer = integer.slice(1)\n\n  // trim trailing zeros.\n  fraction = fraction.replace(/(0+)$/, '')\n\n  // round off if the fraction is larger than the number of decimals.\n  if (decimals === 0) {\n    if (Math.round(Number(`.${fraction}`)) === 1)\n      integer = `${BigInt(integer) + 1n}`\n    fraction = ''\n  } else if (fraction.length > decimals) {\n    const [left, unit, right] = [\n      fraction.slice(0, decimals - 1),\n      fraction.slice(decimals - 1, decimals),\n      fraction.slice(decimals),\n    ]\n\n    const rounded = Math.round(Number(`${unit}.${right}`))\n    if (rounded > 9)\n      fraction = `${BigInt(left) + BigInt(1)}0`.padStart(left.length + 1, '0')\n    else fraction = `${left}${rounded}`\n\n    if (fraction.length > decimals) {\n      fraction = fraction.slice(1)\n      integer = `${BigInt(integer) + 1n}`\n    }\n\n    fraction = fraction.slice(0, decimals)\n  } else {\n    fraction = fraction.padEnd(decimals, '0')\n  }\n\n  return BigInt(`${negative ? '-' : ''}${integer}${fraction}`)\n}\n\nexport declare namespace from {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Parses a string representation of Ether to a `bigint` Value (default: wei).\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.fromEther('420')\n * // @log: 420000000000000000000n\n * ```\n *\n * @param ether - String representation of Ether.\n * @param unit - The unit to parse to. @default 'wei'.\n * @returns A `bigint` Value.\n */\nexport function fromEther(\n  ether: string,\n  unit: 'wei' | 'gwei' | 'szabo' | 'finney' = 'wei',\n) {\n  return from(ether, exponents.ether - exponents[unit])\n}\n\nexport declare namespace fromEther {\n  type ErrorType = from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Parses a string representation of Gwei to a `bigint` Value (default: wei).\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.fromGwei('420')\n * // @log: 420000000000n\n * ```\n *\n * @param gwei - String representation of Gwei.\n * @param unit - The unit to parse to. @default 'wei'.\n * @returns A `bigint` Value.\n */\nexport function fromGwei(gwei: string, unit: 'wei' = 'wei') {\n  return from(gwei, exponents.gwei - exponents[unit])\n}\n\nexport declare namespace fromGwei {\n  type ErrorType = from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Thrown when a value is not a valid decimal number.\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.fromEther('123.456.789')\n * // @error: Value.InvalidDecimalNumberError: Value `123.456.789` is not a valid decimal number.\n * ```\n */\nexport class InvalidDecimalNumberError extends Errors.BaseError {\n  override readonly name = 'Value.InvalidDecimalNumberError'\n  constructor({ value }: { value: string }) {\n    super(`Value \\`${value}\\` is not a valid decimal number.`)\n  }\n}\n", "import * as Address from './Address.js'\nimport type * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as Hex from './Hex.js'\nimport * as Rlp from './Rlp.js'\nimport * as Signature from './Signature.js'\nimport * as TransactionEnvelope from './TransactionEnvelope.js'\nimport type {\n  Assign,\n  Branded,\n  Compute,\n  PartialBy,\n  UnionPartialBy,\n} from './internal/types.js'\n\nexport type TransactionEnvelopeLegacy<\n  signed extends boolean = boolean,\n  bigintType = bigint,\n  numberType = number,\n  type extends string = Type,\n> = Compute<\n  PartialBy<\n    TransactionEnvelope.Base<type, signed, bigintType, numberType>,\n    'chainId'\n  > & {\n    /** Base fee per gas. */\n    gasPrice?: bigintType | undefined\n  }\n>\n\nexport type Rpc<signed extends boolean = boolean> = TransactionEnvelopeLegacy<\n  signed,\n  Hex.Hex,\n  Hex.Hex,\n  '0x0'\n>\n\nexport type Serialized = Branded<`0x${string}`, 'legacy'>\n\nexport type Signed = TransactionEnvelopeLegacy<true>\n\nexport const type = 'legacy'\nexport type Type = typeof type\n\n/**\n * Asserts a {@link ox#TransactionEnvelopeLegacy.TransactionEnvelopeLegacy} is valid.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeLegacy, Value } from 'ox'\n *\n * TransactionEnvelopeLegacy.assert({\n *   gasPrice: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @error: GasPriceTooHighError:\n * // @error: The gas price (`gasPrice` = 115792089237316195423570985008687907853269984665640564039457584007913 gwei) cannot be\n * // @error: higher than the maximum allowed value (2^256-1).\n * ```\n *\n * @param envelope - The transaction envelope to assert.\n */\nexport function assert(envelope: PartialBy<TransactionEnvelopeLegacy, 'type'>) {\n  const { chainId, gasPrice, to } = envelope\n  if (to) Address.assert(to, { strict: false })\n  if (typeof chainId !== 'undefined' && chainId <= 0)\n    throw new TransactionEnvelope.InvalidChainIdError({ chainId })\n  if (gasPrice && BigInt(gasPrice) > 2n ** 256n - 1n)\n    throw new TransactionEnvelope.GasPriceTooHighError({ gasPrice })\n}\n\nexport declare namespace assert {\n  type ErrorType =\n    | Address.assert.ErrorType\n    | TransactionEnvelope.InvalidChainIdError\n    | TransactionEnvelope.GasPriceTooHighError\n    | Errors.GlobalErrorType\n}\n\n/**\n * Deserializes a {@link ox#TransactionEnvelopeLegacy.TransactionEnvelopeLegacy} from its serialized form.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeLegacy } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.deserialize('0x01ef0182031184773594008477359400809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c0')\n * // @log: {\n * // @log:   type: 'legacy',\n * // @log:   nonce: 785n,\n * // @log:   gasPrice: 2000000000n,\n * // @log:   gas: 1000000n,\n * // @log:   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param serialized - The serialized transaction.\n * @returns Deserialized Transaction Envelope.\n */\nexport function deserialize(\n  serialized: Hex.Hex,\n): Compute<TransactionEnvelopeLegacy> {\n  const tuple = Rlp.toHex(serialized)\n\n  const [nonce, gasPrice, gas, to, value, data, chainIdOrV_, r, s] =\n    tuple as readonly Hex.Hex[]\n\n  if (!(tuple.length === 6 || tuple.length === 9))\n    throw new TransactionEnvelope.InvalidSerializedError({\n      attributes: {\n        nonce,\n        gasPrice,\n        gas,\n        to,\n        value,\n        data,\n        ...(tuple.length > 6\n          ? {\n              v: chainIdOrV_,\n              r,\n              s,\n            }\n          : {}),\n      },\n      serialized,\n      type,\n    })\n\n  const transaction = {\n    type,\n  } as TransactionEnvelopeLegacy\n  if (Hex.validate(to) && to !== '0x') transaction.to = to\n  if (Hex.validate(gas) && gas !== '0x') transaction.gas = BigInt(gas)\n  if (Hex.validate(data) && data !== '0x') transaction.data = data\n  if (Hex.validate(nonce) && nonce !== '0x') transaction.nonce = BigInt(nonce)\n  if (Hex.validate(value) && value !== '0x') transaction.value = BigInt(value)\n  if (Hex.validate(gasPrice) && gasPrice !== '0x')\n    transaction.gasPrice = BigInt(gasPrice)\n\n  if (tuple.length === 6) return transaction\n\n  const chainIdOrV =\n    Hex.validate(chainIdOrV_) && chainIdOrV_ !== '0x'\n      ? Number(chainIdOrV_ as Hex.Hex)\n      : 0\n\n  if (s === '0x' && r === '0x') {\n    if (chainIdOrV > 0) transaction.chainId = Number(chainIdOrV)\n    return transaction\n  }\n\n  const v = chainIdOrV\n  const chainId: number | undefined = Math.floor((v - 35) / 2)\n  if (chainId > 0) transaction.chainId = chainId\n  else if (v !== 27 && v !== 28) throw new Signature.InvalidVError({ value: v })\n\n  transaction.yParity = Signature.vToYParity(v)\n  transaction.v = v\n  transaction.s = s === '0x' ? 0n : BigInt(s!)\n  transaction.r = r === '0x' ? 0n : BigInt(r!)\n\n  assert(transaction)\n\n  return transaction\n}\n\nexport declare namespace deserialize {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts an arbitrary transaction object into a legacy Transaction Envelope.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeLegacy, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.from({\n *   gasPrice: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the transaction envelope.\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeLegacy, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.from({\n *   chainId: 1,\n *   gasPrice: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeLegacy.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const envelope_signed = TransactionEnvelopeLegacy.from(envelope, { // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   authorizationList: [...],\n * // @log:   chainId: 1,\n * // @log:   gasPrice: 10000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip7702',\n * // @log:   value: 1000000000000000000n,\n * // @log:   r: 125...n,\n * // @log:   s: 642...n,\n * // @log:   yParity: 0,\n * // @log: }\n * ```\n *\n * @example\n * ### From Serialized\n *\n * It is possible to instantiate an legacy Transaction Envelope from a {@link ox#TransactionEnvelopeLegacy.Serialized} value.\n *\n * ```ts twoslash\n * import { TransactionEnvelopeLegacy } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.from('0xf858018203118502540be4008504a817c800809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c08477359400e1a001627c687261b0e7f8638af1112efa8a77e23656f6e7945275b19e9deed80261')\n * // @log: {\n * // @log:   chainId: 1,\n * // @log:   gasPrice: 10000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'legacy',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param envelope - The transaction object to convert.\n * @param options - Options.\n * @returns A legacy Transaction Envelope.\n */\nexport function from<\n  const envelope extends\n    | UnionPartialBy<TransactionEnvelopeLegacy, 'type'>\n    | Hex.Hex,\n  const signature extends Signature.Signature | undefined = undefined,\n>(\n  envelope:\n    | envelope\n    | UnionPartialBy<TransactionEnvelopeLegacy, 'type'>\n    | Hex.Hex,\n  options: from.Options<signature> = {},\n): from.ReturnType<envelope, signature> {\n  const { signature } = options\n\n  const envelope_ = (\n    typeof envelope === 'string' ? deserialize(envelope) : envelope\n  ) as TransactionEnvelopeLegacy\n\n  assert(envelope_)\n\n  const signature_ = (() => {\n    if (!signature) return {}\n    const s = Signature.from(signature) as any\n    s.v = Signature.yParityToV(s.yParity)\n    return s\n  })()\n\n  return {\n    ...envelope_,\n    ...signature_,\n    type: 'legacy',\n  } as never\n}\n\nexport declare namespace from {\n  type Options<signature extends Signature.Signature | undefined = undefined> =\n    {\n      signature?: signature | Signature.Signature | undefined\n    }\n\n  type ReturnType<\n    envelope extends\n      | UnionPartialBy<TransactionEnvelopeLegacy, 'type'>\n      | Hex.Hex = TransactionEnvelopeLegacy | Hex.Hex,\n    signature extends Signature.Signature | undefined = undefined,\n  > = Compute<\n    envelope extends Hex.Hex\n      ? TransactionEnvelopeLegacy\n      : Assign<\n          envelope,\n          (signature extends Signature.Signature\n            ? Readonly<\n                signature & {\n                  v: signature['yParity'] extends 0 ? 27 : 28\n                }\n              >\n            : {}) & {\n            readonly type: 'legacy'\n          }\n        >\n  >\n\n  type ErrorType =\n    | deserialize.ErrorType\n    | assert.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Returns the payload to sign for a {@link ox#TransactionEnvelopeLegacy.TransactionEnvelopeLegacy}.\n *\n * @example\n * The example below demonstrates how to compute the sign payload which can be used\n * with ECDSA signing utilities like {@link ox#Secp256k1.(sign:function)}.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Secp256k1, TransactionEnvelopeLegacy } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.from({\n *   nonce: 0n,\n *   gasPrice: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const payload = TransactionEnvelopeLegacy.getSignPayload(envelope) // [!code focus]\n * // @log: '0x...'\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @param envelope - The transaction envelope to get the sign payload for.\n * @returns The sign payload.\n */\nexport function getSignPayload(\n  envelope: TransactionEnvelopeLegacy<false>,\n): getSignPayload.ReturnType {\n  return hash(envelope, { presign: true })\n}\n\nexport declare namespace getSignPayload {\n  type ReturnType = Hex.Hex\n\n  type ErrorType = hash.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Hashes a {@link ox#TransactionEnvelopeLegacy.TransactionEnvelopeLegacy}. This is the \"transaction hash\".\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeLegacy } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   gasPrice: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeLegacy.getSignPayload(envelope),\n *   privateKey: '0x...'\n * })\n *\n * const envelope_signed = TransactionEnvelopeLegacy.from(envelope, { signature })\n *\n * const hash = TransactionEnvelopeLegacy.hash(envelope_signed) // [!code focus]\n * ```\n *\n * @param envelope - The Legacy Transaction Envelope to hash.\n * @param options - Options.\n * @returns The hash of the transaction envelope.\n */\nexport function hash<presign extends boolean = false>(\n  envelope: TransactionEnvelopeLegacy<presign extends true ? false : true>,\n  options: hash.Options<presign> = {},\n): hash.ReturnType {\n  const { presign } = options\n  return Hash.keccak256(\n    serialize({\n      ...envelope,\n      ...(presign\n        ? {\n            r: undefined,\n            s: undefined,\n            yParity: undefined,\n            v: undefined,\n          }\n        : {}),\n    }),\n  )\n}\n\nexport declare namespace hash {\n  type Options<presign extends boolean = false> = {\n    /** Whether to hash this transaction for signing. @default false */\n    presign?: presign | boolean | undefined\n  }\n\n  type ReturnType = Hex.Hex\n\n  type ErrorType =\n    | Hash.keccak256.ErrorType\n    | serialize.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Serializes a {@link ox#TransactionEnvelopeLegacy.TransactionEnvelopeLegacy}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { TransactionEnvelopeLegacy } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.from({\n *   chainId: 1,\n *   gasPrice: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const serialized = TransactionEnvelopeLegacy.serialize(envelope) // [!code focus]\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the serialized Transaction Envelope.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Secp256k1, TransactionEnvelopeLegacy, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.from({\n *   chainId: 1,\n *   gasPrice: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeLegacy.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const serialized = TransactionEnvelopeLegacy.serialize(envelope, { // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n *\n * // ... send `serialized` transaction to JSON-RPC `eth_sendRawTransaction`\n * ```\n *\n * @param envelope - The Transaction Envelope to serialize.\n * @param options - Options.\n * @returns The serialized Transaction Envelope.\n */\nexport function serialize(\n  envelope: PartialBy<TransactionEnvelopeLegacy, 'type'>,\n  options: serialize.Options = {},\n): Serialized {\n  const { chainId = 0, gas, data, input, nonce, to, value, gasPrice } = envelope\n\n  assert(envelope)\n\n  let serialized = [\n    nonce ? Hex.fromNumber(nonce) : '0x',\n    gasPrice ? Hex.fromNumber(gasPrice) : '0x',\n    gas ? Hex.fromNumber(gas) : '0x',\n    to ?? '0x',\n    value ? Hex.fromNumber(value) : '0x',\n    data ?? input ?? '0x',\n  ]\n\n  const signature = (() => {\n    if (options.signature)\n      return {\n        r: options.signature.r,\n        s: options.signature.s,\n        v: Signature.yParityToV(options.signature.yParity),\n      }\n\n    if (typeof envelope.r === 'undefined' || typeof envelope.s === 'undefined')\n      return undefined\n    return {\n      r: envelope.r,\n      s: envelope.s,\n      v: envelope.v!,\n    }\n  })()\n\n  if (signature) {\n    const v = (() => {\n      // EIP-155 (inferred chainId)\n      if (signature.v >= 35) {\n        const inferredChainId = Math.floor((signature.v - 35) / 2)\n        if (inferredChainId > 0) return signature.v\n        return 27 + (signature.v === 35 ? 0 : 1)\n      }\n\n      // EIP-155 (explicit chainId)\n      if (chainId > 0) return chainId * 2 + 35 + signature.v - 27\n\n      // Pre-EIP-155 (no chainId)\n      const v = 27 + (signature.v === 27 ? 0 : 1)\n      if (signature.v !== v)\n        throw new Signature.InvalidVError({ value: signature.v })\n      return v\n    })()\n\n    serialized = [\n      ...serialized,\n      Hex.fromNumber(v),\n      signature.r === 0n ? '0x' : Hex.trimLeft(Hex.fromNumber(signature.r)),\n      signature.s === 0n ? '0x' : Hex.trimLeft(Hex.fromNumber(signature.s)),\n    ]\n  } else if (chainId > 0)\n    serialized = [...serialized, Hex.fromNumber(chainId), '0x', '0x']\n\n  return Rlp.fromHex(serialized) as never\n}\n\nexport declare namespace serialize {\n  type Options = {\n    /** Signature to append to the serialized Transaction Envelope. */\n    signature?: Signature.Signature | undefined\n  }\n\n  type ErrorType =\n    | assert.ErrorType\n    | Hex.fromNumber.ErrorType\n    | Hex.trimLeft.ErrorType\n    | Rlp.fromHex.ErrorType\n    | Signature.InvalidVError\n    | Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#TransactionEnvelopeLegacy.TransactionEnvelopeLegacy} to an {@link ox#TransactionEnvelopeLegacy.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { RpcRequest, TransactionEnvelopeLegacy, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('1'),\n * })\n *\n * const envelope_rpc = TransactionEnvelopeLegacy.toRpc(envelope) // [!code focus]\n *\n * const request = RpcRequest.from({\n *   id: 0,\n *   method: 'eth_sendTransaction',\n *   params: [envelope_rpc],\n * })\n * ```\n *\n * @param envelope - The legacy transaction envelope to convert.\n * @returns An RPC-formatted legacy transaction envelope.\n */\nexport function toRpc(envelope: Omit<TransactionEnvelopeLegacy, 'type'>): Rpc {\n  const signature = Signature.extract(envelope)!\n\n  return {\n    ...envelope,\n    chainId:\n      typeof envelope.chainId === 'number'\n        ? Hex.fromNumber(envelope.chainId)\n        : undefined,\n    data: envelope.data ?? envelope.input,\n    type: '0x0',\n    ...(typeof envelope.gas === 'bigint'\n      ? { gas: Hex.fromNumber(envelope.gas) }\n      : {}),\n    ...(typeof envelope.nonce === 'bigint'\n      ? { nonce: Hex.fromNumber(envelope.nonce) }\n      : {}),\n    ...(typeof envelope.value === 'bigint'\n      ? { value: Hex.fromNumber(envelope.value) }\n      : {}),\n    ...(typeof envelope.gasPrice === 'bigint'\n      ? { gasPrice: Hex.fromNumber(envelope.gasPrice) }\n      : {}),\n    ...(signature\n      ? {\n          ...Signature.toRpc(signature),\n          v: signature.yParity === 0 ? '0x1b' : '0x1c',\n        }\n      : {}),\n  } as never\n}\n\nexport declare namespace toRpc {\n  export type ErrorType = Signature.extract.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Validates a {@link ox#TransactionEnvelopeLegacy.TransactionEnvelopeLegacy}. Returns `true` if the envelope is valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeLegacy, Value } from 'ox'\n *\n * const valid = TransactionEnvelopeLegacy.assert({\n *   gasPrice: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @log: false\n * ```\n *\n * @param envelope - The transaction envelope to validate.\n */\nexport function validate(\n  envelope: PartialBy<TransactionEnvelopeLegacy, 'type'>,\n) {\n  try {\n    assert(envelope)\n    return true\n  } catch {\n    return false\n  }\n}\n\nexport declare namespace validate {\n  type ErrorType = Errors.GlobalErrorType\n}\n", "import * as AccessList from './AccessList.js'\nimport * as Address from './Address.js'\nimport type * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as Hex from './Hex.js'\nimport * as Rlp from './Rlp.js'\nimport * as Signature from './Signature.js'\nimport * as TransactionEnvelope from './TransactionEnvelope.js'\nimport type {\n  Assign,\n  Compute,\n  PartialBy,\n  UnionPartialBy,\n} from './internal/types.js'\n\nexport type TransactionEnvelopeEip1559<\n  signed extends boolean = boolean,\n  bigintType = bigint,\n  numberType = number,\n  type extends string = Type,\n> = Compute<\n  TransactionEnvelope.Base<type, signed, bigintType, numberType> & {\n    /** EIP-2930 Access List. */\n    accessList?: AccessList.AccessList | undefined\n    /** Total fee per gas in wei (gasPrice/baseFeePerGas + maxPriorityFeePerGas). */\n    maxFeePerGas?: bigintType | undefined\n    /** Max priority fee per gas (in wei). */\n    maxPriorityFeePerGas?: bigintType | undefined\n  }\n>\n\nexport type Rpc<signed extends boolean = boolean> = TransactionEnvelopeEip1559<\n  signed,\n  Hex.Hex,\n  Hex.Hex,\n  '0x2'\n>\n\nexport type Serialized = `${SerializedType}${string}`\n\nexport const serializedType = '0x02' as const\nexport type SerializedType = typeof serializedType\n\nexport type Signed = TransactionEnvelopeEip1559<true>\n\nexport const type = 'eip1559' as const\nexport type Type = typeof type\n\n/**\n * Asserts a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559} is valid.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * TransactionEnvelopeEip1559.assert({\n *   maxFeePerGas: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @error: FeeCapTooHighError:\n * // @error: The fee cap (`masFeePerGas` = 115792089237316195423570985008687907853269984665640564039457584007913 gwei) cannot be\n * // @error: higher than the maximum allowed value (2^256-1).\n * ```\n *\n * @param envelope - The transaction envelope to assert.\n */\nexport function assert(\n  envelope: PartialBy<TransactionEnvelopeEip1559, 'type'>,\n) {\n  const { chainId, maxPriorityFeePerGas, maxFeePerGas, to } = envelope\n  if (chainId <= 0)\n    throw new TransactionEnvelope.InvalidChainIdError({ chainId })\n  if (to) Address.assert(to, { strict: false })\n  if (maxFeePerGas && BigInt(maxFeePerGas) > 2n ** 256n - 1n)\n    throw new TransactionEnvelope.FeeCapTooHighError({ feeCap: maxFeePerGas })\n  if (\n    maxPriorityFeePerGas &&\n    maxFeePerGas &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TransactionEnvelope.TipAboveFeeCapError({\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    })\n}\n\nexport declare namespace assert {\n  type ErrorType =\n    | Address.assert.ErrorType\n    | TransactionEnvelope.InvalidChainIdError\n    | TransactionEnvelope.FeeCapTooHighError\n    | TransactionEnvelope.TipAboveFeeCapError\n    | Errors.GlobalErrorType\n}\n\n/**\n * Deserializes a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559} from its serialized form.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.deserialize('0x02ef0182031184773594008477359400809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c0')\n * // @log: {\n * // @log:   type: 'eip1559',\n * // @log:   nonce: 785n,\n * // @log:   maxFeePerGas: 2000000000n,\n * // @log:   gas: 1000000n,\n * // @log:   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param serialized - The serialized transaction.\n * @returns Deserialized Transaction Envelope.\n */\nexport function deserialize(\n  serialized: Serialized,\n): Compute<TransactionEnvelopeEip1559> {\n  const transactionArray = Rlp.toHex(Hex.slice(serialized, 1))\n\n  const [\n    chainId,\n    nonce,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n    gas,\n    to,\n    value,\n    data,\n    accessList,\n    yParity,\n    r,\n    s,\n  ] = transactionArray as readonly Hex.Hex[]\n\n  if (!(transactionArray.length === 9 || transactionArray.length === 12))\n    throw new TransactionEnvelope.InvalidSerializedError({\n      attributes: {\n        chainId,\n        nonce,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n        gas,\n        to,\n        value,\n        data,\n        accessList,\n        ...(transactionArray.length > 9\n          ? {\n              yParity,\n              r,\n              s,\n            }\n          : {}),\n      },\n      serialized,\n      type,\n    })\n\n  let transaction = {\n    chainId: Number(chainId),\n    type,\n  } as TransactionEnvelopeEip1559\n  if (Hex.validate(to) && to !== '0x') transaction.to = to\n  if (Hex.validate(gas) && gas !== '0x') transaction.gas = BigInt(gas)\n  if (Hex.validate(data) && data !== '0x') transaction.data = data\n  if (Hex.validate(nonce) && nonce !== '0x') transaction.nonce = BigInt(nonce)\n  if (Hex.validate(value) && value !== '0x') transaction.value = BigInt(value)\n  if (Hex.validate(maxFeePerGas) && maxFeePerGas !== '0x')\n    transaction.maxFeePerGas = BigInt(maxFeePerGas)\n  if (Hex.validate(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x')\n    transaction.maxPriorityFeePerGas = BigInt(maxPriorityFeePerGas)\n  if (accessList!.length !== 0 && accessList !== '0x')\n    transaction.accessList = AccessList.fromTupleList(accessList as any)\n\n  const signature =\n    r && s && yParity ? Signature.fromTuple([yParity, r, s]) : undefined\n  if (signature)\n    transaction = {\n      ...transaction,\n      ...signature,\n    } as TransactionEnvelopeEip1559\n\n  assert(transaction)\n\n  return transaction\n}\n\nexport declare namespace deserialize {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts an arbitrary transaction object into an EIP-1559 Transaction Envelope.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the transaction envelope.\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip1559.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip1559.from(envelope, { // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   chainId: 1,\n * // @log:   maxFeePerGas: 10000000000n,\n * // @log:   maxPriorityFeePerGas: 1000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip1559',\n * // @log:   value: 1000000000000000000n,\n * // @log:   r: 125...n,\n * // @log:   s: 642...n,\n * // @log:   yParity: 0,\n * // @log: }\n * ```\n *\n * @example\n * ### From Serialized\n *\n * It is possible to instantiate an EIP-1559 Transaction Envelope from a {@link ox#TransactionEnvelopeEip1559.Serialized} value.\n *\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from('0x02f858018203118502540be4008504a817c800809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c08477359400e1a001627c687261b0e7f8638af1112efa8a77e23656f6e7945275b19e9deed80261')\n * // @log: {\n * // @log:   chainId: 1,\n * // @log:   maxFeePerGas: 10000000000n,\n * // @log:   maxPriorityFeePerGas: 1000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip1559',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param envelope - The transaction object to convert.\n * @param options - Options.\n * @returns An EIP-1559 Transaction Envelope.\n */\nexport function from<\n  const envelope extends\n    | UnionPartialBy<TransactionEnvelopeEip1559, 'type'>\n    | Serialized,\n  const signature extends Signature.Signature | undefined = undefined,\n>(\n  envelope:\n    | envelope\n    | UnionPartialBy<TransactionEnvelopeEip1559, 'type'>\n    | Serialized,\n  options: from.Options<signature> = {},\n): from.ReturnType<envelope, signature> {\n  const { signature } = options\n\n  const envelope_ = (\n    typeof envelope === 'string' ? deserialize(envelope) : envelope\n  ) as TransactionEnvelopeEip1559\n\n  assert(envelope_)\n\n  return {\n    ...envelope_,\n    ...(signature ? Signature.from(signature) : {}),\n    type: 'eip1559',\n  } as never\n}\n\nexport declare namespace from {\n  type Options<signature extends Signature.Signature | undefined = undefined> =\n    {\n      signature?: signature | Signature.Signature | undefined\n    }\n\n  type ReturnType<\n    envelope extends\n      | UnionPartialBy<TransactionEnvelopeEip1559, 'type'>\n      | Hex.Hex = TransactionEnvelopeEip1559 | Hex.Hex,\n    signature extends Signature.Signature | undefined = undefined,\n  > = Compute<\n    envelope extends Hex.Hex\n      ? TransactionEnvelopeEip1559\n      : Assign<\n          envelope,\n          (signature extends Signature.Signature ? Readonly<signature> : {}) & {\n            readonly type: 'eip1559'\n          }\n        >\n  >\n\n  type ErrorType =\n    | deserialize.ErrorType\n    | assert.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Returns the payload to sign for a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559}.\n *\n * @example\n * The example below demonstrates how to compute the sign payload which can be used\n * with ECDSA signing utilities like {@link ox#Secp256k1.(sign:function)}.\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip1559 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   maxFeePerGas: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const payload = TransactionEnvelopeEip1559.getSignPayload(envelope) // [!code focus]\n * // @log: '0x...'\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @param envelope - The transaction envelope to get the sign payload for.\n * @returns The sign payload.\n */\nexport function getSignPayload(\n  envelope: TransactionEnvelopeEip1559,\n): getSignPayload.ReturnType {\n  return hash(envelope, { presign: true })\n}\n\nexport declare namespace getSignPayload {\n  type ReturnType = Hex.Hex\n\n  type ErrorType = hash.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Hashes a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559}. This is the \"transaction hash\".\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip1559 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   maxFeePerGas: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip1559.getSignPayload(envelope),\n *   privateKey: '0x...'\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip1559.from(envelope, { signature })\n *\n * const hash = TransactionEnvelopeEip1559.hash(envelope_signed) // [!code focus]\n * ```\n *\n * @param envelope - The EIP-1559 Transaction Envelope to hash.\n * @param options - Options.\n * @returns The hash of the transaction envelope.\n */\nexport function hash<presign extends boolean = false>(\n  envelope: TransactionEnvelopeEip1559<presign extends true ? false : true>,\n  options: hash.Options<presign> = {},\n): hash.ReturnType {\n  const { presign } = options\n  return Hash.keccak256(\n    serialize({\n      ...envelope,\n      ...(presign\n        ? {\n            r: undefined,\n            s: undefined,\n            yParity: undefined,\n            v: undefined,\n          }\n        : {}),\n    }),\n  )\n}\n\nexport declare namespace hash {\n  type Options<presign extends boolean = false> = {\n    /** Whether to hash this transaction for signing. @default false */\n    presign?: presign | boolean | undefined\n  }\n\n  type ReturnType = Hex.Hex\n\n  type ErrorType =\n    | Hash.keccak256.ErrorType\n    | serialize.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Serializes a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559}.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const serialized = TransactionEnvelopeEip1559.serialize(envelope) // [!code focus]\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the serialized Transaction Envelope.\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip1559.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const serialized = TransactionEnvelopeEip1559.serialize(envelope, { // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n *\n * // ... send `serialized` transaction to JSON-RPC `eth_sendRawTransaction`\n * ```\n *\n * @param envelope - The Transaction Envelope to serialize.\n * @param options - Options.\n * @returns The serialized Transaction Envelope.\n */\nexport function serialize(\n  envelope: PartialBy<TransactionEnvelopeEip1559, 'type'>,\n  options: serialize.Options = {},\n): Serialized {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n    input,\n  } = envelope\n\n  assert(envelope)\n\n  const accessTupleList = AccessList.toTupleList(accessList)\n\n  const signature = Signature.extract(options.signature || envelope)\n\n  const serialized = [\n    Hex.fromNumber(chainId),\n    nonce ? Hex.fromNumber(nonce) : '0x',\n    maxPriorityFeePerGas ? Hex.fromNumber(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? Hex.fromNumber(maxFeePerGas) : '0x',\n    gas ? Hex.fromNumber(gas) : '0x',\n    to ?? '0x',\n    value ? Hex.fromNumber(value) : '0x',\n    data ?? input ?? '0x',\n    accessTupleList,\n    ...(signature ? Signature.toTuple(signature) : []),\n  ]\n\n  return Hex.concat(serializedType, Rlp.fromHex(serialized)) as Serialized\n}\n\nexport declare namespace serialize {\n  type Options = {\n    /** Signature to append to the serialized Transaction Envelope. */\n    signature?: Signature.Signature | undefined\n  }\n\n  type ErrorType =\n    | assert.ErrorType\n    | Hex.fromNumber.ErrorType\n    | Signature.toTuple.ErrorType\n    | Hex.concat.ErrorType\n    | Rlp.fromHex.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559} to an {@link ox#TransactionEnvelopeEip1559.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { RpcRequest, TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('1'),\n * })\n *\n * const envelope_rpc = TransactionEnvelopeEip1559.toRpc(envelope) // [!code focus]\n *\n * const request = RpcRequest.from({\n *   id: 0,\n *   method: 'eth_sendTransaction',\n *   params: [envelope_rpc],\n * })\n * ```\n *\n * @param envelope - The EIP-1559 transaction envelope to convert.\n * @returns An RPC-formatted EIP-1559 transaction envelope.\n */\nexport function toRpc(envelope: Omit<TransactionEnvelopeEip1559, 'type'>): Rpc {\n  const signature = Signature.extract(envelope)\n\n  return {\n    ...envelope,\n    chainId: Hex.fromNumber(envelope.chainId),\n    data: envelope.data ?? envelope.input,\n    type: '0x2',\n    ...(typeof envelope.gas === 'bigint'\n      ? { gas: Hex.fromNumber(envelope.gas) }\n      : {}),\n    ...(typeof envelope.nonce === 'bigint'\n      ? { nonce: Hex.fromNumber(envelope.nonce) }\n      : {}),\n    ...(typeof envelope.value === 'bigint'\n      ? { value: Hex.fromNumber(envelope.value) }\n      : {}),\n    ...(typeof envelope.maxFeePerGas === 'bigint'\n      ? { maxFeePerGas: Hex.fromNumber(envelope.maxFeePerGas) }\n      : {}),\n    ...(typeof envelope.maxPriorityFeePerGas === 'bigint'\n      ? {\n          maxPriorityFeePerGas: Hex.fromNumber(envelope.maxPriorityFeePerGas),\n        }\n      : {}),\n    ...(signature ? Signature.toRpc(signature) : {}),\n  } as never\n}\n\nexport declare namespace toRpc {\n  export type ErrorType = Signature.extract.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Validates a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559}. Returns `true` if the envelope is valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const valid = TransactionEnvelopeEip1559.assert({\n *   maxFeePerGas: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @log: false\n * ```\n *\n * @param envelope - The transaction envelope to validate.\n */\nexport function validate(\n  envelope: PartialBy<TransactionEnvelopeEip1559, 'type'>,\n) {\n  try {\n    assert(envelope)\n    return true\n  } catch {\n    return false\n  }\n}\n\nexport declare namespace validate {\n  type ErrorType = Errors.GlobalErrorType\n}\n", "import * as AccessList from './AccessList.js'\nimport * as Address from './Address.js'\nimport type * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as Hex from './Hex.js'\nimport * as Rlp from './Rlp.js'\nimport * as Signature from './Signature.js'\nimport * as TransactionEnvelope from './TransactionEnvelope.js'\nimport type {\n  Assign,\n  Compute,\n  PartialBy,\n  UnionPartialBy,\n} from './internal/types.js'\n\nexport type TransactionEnvelopeEip2930<\n  signed extends boolean = boolean,\n  bigintType = bigint,\n  numberType = number,\n  type extends string = Type,\n> = Compute<\n  TransactionEnvelope.Base<type, signed, bigintType, numberType> & {\n    /** EIP-2930 Access List. */\n    accessList?: AccessList.AccessList | undefined\n    /** Base fee per gas. */\n    gasPrice?: bigintType | undefined\n  }\n>\n\nexport type Rpc<signed extends boolean = boolean> = TransactionEnvelopeEip2930<\n  signed,\n  Hex.Hex,\n  Hex.Hex,\n  '0x1'\n>\n\nexport type Serialized = `${SerializedType}${string}`\n\nexport const serializedType = '0x01' as const\nexport type SerializedType = typeof serializedType\n\nexport type Signed = TransactionEnvelopeEip2930<true>\n\nexport const type = 'eip2930' as const\nexport type Type = typeof type\n\n/**\n * Asserts a {@link ox#TransactionEnvelopeEip2930.TransactionEnvelopeEip2930} is valid.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip2930, Value } from 'ox'\n *\n * TransactionEnvelopeEip2930.assert({\n *   gasPrice: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @error: GasPriceTooHighError:\n * // @error: The gas price (`gasPrice` = 115792089237316195423570985008687907853269984665640564039457584007913 gwei) cannot be\n * // @error: higher than the maximum allowed value (2^256-1).\n * ```\n *\n * @param envelope - The transaction envelope to assert.\n */\nexport function assert(\n  envelope: PartialBy<TransactionEnvelopeEip2930, 'type'>,\n) {\n  const { chainId, gasPrice, to } = envelope\n  if (chainId <= 0)\n    throw new TransactionEnvelope.InvalidChainIdError({ chainId })\n  if (to) Address.assert(to, { strict: false })\n  if (gasPrice && BigInt(gasPrice) > 2n ** 256n - 1n)\n    throw new TransactionEnvelope.GasPriceTooHighError({ gasPrice })\n}\n\nexport declare namespace assert {\n  type ErrorType =\n    | Address.assert.ErrorType\n    | TransactionEnvelope.InvalidChainIdError\n    | TransactionEnvelope.GasPriceTooHighError\n    | Errors.GlobalErrorType\n}\n\n/**\n * Deserializes a {@link ox#TransactionEnvelopeEip2930.TransactionEnvelopeEip2930} from its serialized form.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip2930 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.deserialize('0x01ef0182031184773594008477359400809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c0')\n * // @log: {\n * // @log:   type: 'eip2930',\n * // @log:   nonce: 785n,\n * // @log:   gasPrice: 2000000000n,\n * // @log:   gas: 1000000n,\n * // @log:   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param serialized - The serialized transaction.\n * @returns Deserialized Transaction Envelope.\n */\nexport function deserialize(\n  serialized: Serialized,\n): TransactionEnvelopeEip2930 {\n  const transactionArray = Rlp.toHex(Hex.slice(serialized, 1))\n\n  const [\n    chainId,\n    nonce,\n    gasPrice,\n    gas,\n    to,\n    value,\n    data,\n    accessList,\n    yParity,\n    r,\n    s,\n  ] = transactionArray as readonly Hex.Hex[]\n\n  if (!(transactionArray.length === 8 || transactionArray.length === 11))\n    throw new TransactionEnvelope.InvalidSerializedError({\n      attributes: {\n        chainId,\n        nonce,\n        gasPrice,\n        gas,\n        to,\n        value,\n        data,\n        accessList,\n        ...(transactionArray.length > 8\n          ? {\n              yParity,\n              r,\n              s,\n            }\n          : {}),\n      },\n      serialized,\n      type,\n    })\n\n  let transaction = {\n    chainId: Number(chainId as Hex.Hex),\n    type,\n  } as TransactionEnvelopeEip2930\n  if (Hex.validate(to) && to !== '0x') transaction.to = to\n  if (Hex.validate(gas) && gas !== '0x') transaction.gas = BigInt(gas)\n  if (Hex.validate(data) && data !== '0x') transaction.data = data\n  if (Hex.validate(nonce) && nonce !== '0x') transaction.nonce = BigInt(nonce)\n  if (Hex.validate(value) && value !== '0x') transaction.value = BigInt(value)\n  if (Hex.validate(gasPrice) && gasPrice !== '0x')\n    transaction.gasPrice = BigInt(gasPrice)\n  if (accessList!.length !== 0 && accessList !== '0x')\n    transaction.accessList = AccessList.fromTupleList(accessList as any)\n\n  const signature =\n    r && s && yParity ? Signature.fromTuple([yParity, r, s]) : undefined\n  if (signature)\n    transaction = {\n      ...transaction,\n      ...signature,\n    } as TransactionEnvelopeEip2930\n\n  assert(transaction)\n\n  return transaction\n}\n\nexport declare namespace deserialize {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts an arbitrary transaction object into an EIP-2930 Transaction Envelope.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { TransactionEnvelopeEip2930, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.from({\n *   chainId: 1,\n *   accessList: [...],\n *   gasPrice: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the transaction envelope.\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip2930, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.from({\n *   chainId: 1,\n *   gasPrice: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip2930.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip2930.from(envelope, { // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   chainId: 1,\n * // @log:   gasPrice: 10000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip2930',\n * // @log:   value: 1000000000000000000n,\n * // @log:   r: 125...n,\n * // @log:   s: 642...n,\n * // @log:   yParity: 0,\n * // @log: }\n * ```\n *\n * @example\n * ### From Serialized\n *\n * It is possible to instantiate an EIP-2930 Transaction Envelope from a {@link ox#TransactionEnvelopeEip2930.Serialized} value.\n *\n * ```ts twoslash\n * import { TransactionEnvelopeEip2930 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.from('0x01f858018203118502540be4008504a817c800809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c08477359400e1a001627c687261b0e7f8638af1112efa8a77e23656f6e7945275b19e9deed80261')\n * // @log: {\n * // @log:   chainId: 1,\n * // @log:   gasPrice: 10000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip2930',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param envelope - The transaction object to convert.\n * @param options - Options.\n * @returns A {@link ox#TransactionEnvelopeEip2930.TransactionEnvelopeEip2930}\n */\nexport function from<\n  const envelope extends\n    | UnionPartialBy<TransactionEnvelopeEip2930, 'type'>\n    | Serialized,\n  const signature extends Signature.Signature | undefined = undefined,\n>(\n  envelope:\n    | envelope\n    | UnionPartialBy<TransactionEnvelopeEip2930, 'type'>\n    | Serialized,\n  options: from.Options<signature> = {},\n): from.ReturnType<envelope, signature> {\n  const { signature } = options\n\n  const envelope_ = (\n    typeof envelope === 'string' ? deserialize(envelope) : envelope\n  ) as TransactionEnvelopeEip2930\n\n  assert(envelope_)\n\n  return {\n    ...envelope_,\n    ...(signature ? Signature.from(signature) : {}),\n    type: 'eip2930',\n  } as never\n}\n\nexport declare namespace from {\n  type Options<signature extends Signature.Signature | undefined = undefined> =\n    {\n      signature?: signature | Signature.Signature | undefined\n    }\n\n  type ReturnType<\n    envelope extends\n      | UnionPartialBy<TransactionEnvelopeEip2930, 'type'>\n      | Hex.Hex = TransactionEnvelopeEip2930 | Hex.Hex,\n    signature extends Signature.Signature | undefined = undefined,\n  > = Compute<\n    envelope extends Hex.Hex\n      ? TransactionEnvelopeEip2930\n      : Assign<\n          envelope,\n          (signature extends Signature.Signature ? Readonly<signature> : {}) & {\n            readonly type: 'eip2930'\n          }\n        >\n  >\n\n  type ErrorType =\n    | deserialize.ErrorType\n    | assert.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Returns the payload to sign for a {@link ox#TransactionEnvelopeEip2930.TransactionEnvelopeEip2930}.\n *\n * @example\n * The example below demonstrates how to compute the sign payload which can be used\n * with ECDSA signing utilities like {@link ox#Secp256k1.(sign:function)}.\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip2930 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   gasPrice: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const payload = TransactionEnvelopeEip2930.getSignPayload(envelope) // [!code focus]\n * // @log: '0x...'\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @param envelope - The transaction envelope to get the sign payload for.\n * @returns The sign payload.\n */\nexport function getSignPayload(\n  envelope: TransactionEnvelopeEip2930,\n): getSignPayload.ReturnType {\n  return hash(envelope, { presign: true })\n}\n\nexport declare namespace getSignPayload {\n  type ReturnType = Hex.Hex\n\n  type ErrorType = hash.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Hashes a {@link ox#TransactionEnvelopeEip2930.TransactionEnvelopeEip2930}. This is the \"transaction hash\".\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip2930 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   gasPrice: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip2930.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip2930.from(envelope, {\n *   signature,\n * })\n *\n * const hash = TransactionEnvelopeEip2930.hash(envelope_signed) // [!code focus]\n * ```\n *\n * @param envelope - The EIP-2930 Transaction Envelope to hash.\n * @param options - Options.\n * @returns The hash of the transaction envelope.\n */\nexport function hash<presign extends boolean = false>(\n  envelope: TransactionEnvelopeEip2930<presign extends true ? false : true>,\n  options: hash.Options<presign> = {},\n): hash.ReturnType {\n  const { presign } = options\n  return Hash.keccak256(\n    serialize({\n      ...envelope,\n      ...(presign\n        ? {\n            r: undefined,\n            s: undefined,\n            yParity: undefined,\n            v: undefined,\n          }\n        : {}),\n    }),\n  )\n}\n\nexport declare namespace hash {\n  type Options<presign extends boolean = false> = {\n    /** Whether to hash this transaction for signing. @default false */\n    presign?: presign | boolean | undefined\n  }\n\n  type ReturnType = Hex.Hex\n\n  type ErrorType =\n    | Hash.keccak256.ErrorType\n    | serialize.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Serializes a {@link ox#TransactionEnvelopeEip2930.TransactionEnvelopeEip2930}.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip2930, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.from({\n *   chainId: 1,\n *   gasPrice: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const serialized = TransactionEnvelopeEip2930.serialize(envelope) // [!code focus]\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the serialized Transaction Envelope.\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip2930, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.from({\n *   chainId: 1,\n *   gasPrice: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip2930.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const serialized = TransactionEnvelopeEip2930.serialize(envelope, { // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n *\n * // ... send `serialized` transaction to JSON-RPC `eth_sendRawTransaction`\n * ```\n *\n * @param envelope - The Transaction Envelope to serialize.\n * @param options - Options.\n * @returns The serialized Transaction Envelope.\n */\nexport function serialize(\n  envelope: PartialBy<TransactionEnvelopeEip2930, 'type'>,\n  options: serialize.Options = {},\n): Serialized {\n  const { chainId, gas, data, input, nonce, to, value, accessList, gasPrice } =\n    envelope\n\n  assert(envelope)\n\n  const accessTupleList = AccessList.toTupleList(accessList)\n\n  const signature = Signature.extract(options.signature || (envelope as any))\n\n  const serialized = [\n    Hex.fromNumber(chainId),\n    nonce ? Hex.fromNumber(nonce) : '0x',\n    gasPrice ? Hex.fromNumber(gasPrice) : '0x',\n    gas ? Hex.fromNumber(gas) : '0x',\n    to ?? '0x',\n    value ? Hex.fromNumber(value) : '0x',\n    data ?? input ?? '0x',\n    accessTupleList,\n    ...(signature ? Signature.toTuple(signature) : []),\n  ] as const\n\n  return Hex.concat('0x01', Rlp.fromHex(serialized)) as Serialized\n}\n\nexport declare namespace serialize {\n  type Options = {\n    /** Signature to append to the serialized Transaction Envelope. */\n    signature?: Signature.Signature | undefined\n  }\n\n  type ErrorType =\n    | assert.ErrorType\n    | Hex.fromNumber.ErrorType\n    | Signature.toTuple.ErrorType\n    | Hex.concat.ErrorType\n    | Rlp.fromHex.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#TransactionEnvelopeEip2930.TransactionEnvelopeEip2930} to an {@link ox#TransactionEnvelopeEip2930.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { RpcRequest, TransactionEnvelopeEip2930, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   gas: 21000n,\n *   maxFeePerGas: Value.fromGwei('20'),\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('1'),\n * })\n *\n * const envelope_rpc = TransactionEnvelopeEip2930.toRpc(envelope) // [!code focus]\n *\n * const request = RpcRequest.from({\n *   id: 0,\n *   method: 'eth_sendTransaction',\n *   params: [envelope_rpc],\n * })\n * ```\n *\n * @param envelope - The EIP-2930 transaction envelope to convert.\n * @returns An RPC-formatted EIP-2930 transaction envelope.\n */\nexport function toRpc(envelope: Omit<TransactionEnvelopeEip2930, 'type'>): Rpc {\n  const signature = Signature.extract(envelope)!\n\n  return {\n    ...envelope,\n    chainId: Hex.fromNumber(envelope.chainId),\n    data: envelope.data ?? envelope.input,\n    ...(typeof envelope.gas === 'bigint'\n      ? { gas: Hex.fromNumber(envelope.gas) }\n      : {}),\n    ...(typeof envelope.nonce === 'bigint'\n      ? { nonce: Hex.fromNumber(envelope.nonce) }\n      : {}),\n    ...(typeof envelope.value === 'bigint'\n      ? { value: Hex.fromNumber(envelope.value) }\n      : {}),\n    ...(typeof envelope.gasPrice === 'bigint'\n      ? { gasPrice: Hex.fromNumber(envelope.gasPrice) }\n      : {}),\n    type: '0x1',\n    ...(signature ? Signature.toRpc(signature) : {}),\n  } as never\n}\n\nexport declare namespace toRpc {\n  export type ErrorType = Signature.extract.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Validates a {@link ox#TransactionEnvelopeEip2930.TransactionEnvelopeEip2930}. Returns `true` if the envelope is valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip2930, Value } from 'ox'\n *\n * const valid = TransactionEnvelopeEip2930.assert({\n *   gasPrice: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @log: false\n * ```\n *\n * @param envelope - The transaction envelope to validate.\n */\nexport function validate(\n  envelope: PartialBy<TransactionEnvelopeEip2930, 'type'>,\n) {\n  try {\n    assert(envelope)\n    return true\n  } catch {\n    return false\n  }\n}\n\nexport declare namespace validate {\n  type ErrorType = Errors.GlobalErrorType\n}\n", "import * as AccessList from './AccessList.js'\nimport * as Blobs from './Blobs.js'\nimport type * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as Hex from './Hex.js'\nimport * as Kzg from './Kzg.js'\nimport * as Rlp from './Rlp.js'\nimport * as Signature from './Signature.js'\nimport * as TransactionEnvelope from './TransactionEnvelope.js'\nimport * as TransactionEnvelopeEip1559 from './TransactionEnvelopeEip1559.js'\nimport type {\n  Assign,\n  Compute,\n  PartialBy,\n  UnionPartialBy,\n} from './internal/types.js'\n\nexport type TransactionEnvelopeEip4844<\n  signed extends boolean = boolean,\n  bigintType = bigint,\n  numberType = number,\n  type extends string = Type,\n> = Compute<\n  TransactionEnvelope.Base<type, signed, bigintType, numberType> & {\n    /** EIP-2930 Access List. */\n    accessList?: AccessList.AccessList | undefined\n    /** Versioned hashes of blobs to be included in the transaction. */\n    blobVersionedHashes: readonly Hex.Hex[]\n    /** Maximum total fee per gas sender is willing to pay for blob gas (in wei). */\n    maxFeePerBlobGas?: bigintType | undefined\n    /** Total fee per gas in wei (gasPrice/baseFeePerGas + maxPriorityFeePerGas). */\n    maxFeePerGas?: bigintType | undefined\n    /** Max priority fee per gas (in wei). */\n    maxPriorityFeePerGas?: bigintType | undefined\n    /** The sidecars associated with this transaction. When defined, the envelope is in the \"network wrapper\" format. */\n    sidecars?: readonly Blobs.BlobSidecar<Hex.Hex>[] | undefined\n  }\n>\n\nexport type Rpc<signed extends boolean = boolean> = TransactionEnvelopeEip4844<\n  signed,\n  Hex.Hex,\n  Hex.Hex,\n  '0x3'\n>\n\nexport type Serialized = `${SerializedType}${string}`\n\nexport const serializedType = '0x03' as const\nexport type SerializedType = typeof serializedType\n\nexport type Signed = TransactionEnvelopeEip4844<true>\n\nexport const type = 'eip4844' as const\nexport type Type = 'eip4844'\n\n/**\n * Asserts a {@link ox#TransactionEnvelopeEip4844.TransactionEnvelopeEip4844} is valid.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip4844, Value } from 'ox'\n *\n * TransactionEnvelopeEip4844.assert({\n *   blobVersionedHashes: [],\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @error: EmptyBlobVersionedHashesError: Blob versioned hashes must not be empty.\n * ```\n *\n * @param envelope - The transaction envelope to assert.\n */\nexport function assert(\n  envelope: PartialBy<TransactionEnvelopeEip4844, 'type'>,\n) {\n  const { blobVersionedHashes } = envelope\n  if (blobVersionedHashes) {\n    if (blobVersionedHashes.length === 0)\n      throw new Blobs.EmptyBlobVersionedHashesError()\n    for (const hash of blobVersionedHashes) {\n      const size = Hex.size(hash)\n      const version = Hex.toNumber(Hex.slice(hash, 0, 1))\n      if (size !== 32)\n        throw new Blobs.InvalidVersionedHashSizeError({ hash, size })\n      if (version !== Kzg.versionedHashVersion)\n        throw new Blobs.InvalidVersionedHashVersionError({\n          hash,\n          version,\n        })\n    }\n  }\n  TransactionEnvelopeEip1559.assert(\n    envelope as {} as TransactionEnvelopeEip1559.TransactionEnvelopeEip1559,\n  )\n}\n\nexport declare namespace assert {\n  type ErrorType =\n    | TransactionEnvelopeEip1559.assert.ErrorType\n    | Hex.size.ErrorType\n    | Hex.toNumber.ErrorType\n    | Hex.slice.ErrorType\n    | Blobs.EmptyBlobVersionedHashesError\n    | Blobs.InvalidVersionedHashSizeError\n    | Blobs.InvalidVersionedHashVersionError\n    | Errors.GlobalErrorType\n}\n\n/**\n * Deserializes a {@link ox#TransactionEnvelopeEip4844.TransactionEnvelopeEip4844} from its serialized form.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip4844 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip4844.deserialize('0x03ef0182031184773594008477359400809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c0')\n * // @log: {\n * // @log:   blobVersionedHashes: [...],\n * // @log:   type: 'eip4844',\n * // @log:   nonce: 785n,\n * // @log:   maxFeePerGas: 2000000000n,\n * // @log:   gas: 1000000n,\n * // @log:   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param serialized - The serialized transaction.\n * @returns Deserialized Transaction Envelope.\n */\nexport function deserialize(\n  serialized: Serialized,\n): Compute<TransactionEnvelopeEip4844> {\n  const transactionOrWrapperArray = Rlp.toHex(Hex.slice(serialized, 1))\n\n  const hasNetworkWrapper = transactionOrWrapperArray.length === 4\n\n  const transactionArray = hasNetworkWrapper\n    ? transactionOrWrapperArray[0]!\n    : transactionOrWrapperArray\n  const wrapperArray = hasNetworkWrapper\n    ? transactionOrWrapperArray.slice(1)\n    : []\n\n  const [\n    chainId,\n    nonce,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n    gas,\n    to,\n    value,\n    data,\n    accessList,\n    maxFeePerBlobGas,\n    blobVersionedHashes,\n    yParity,\n    r,\n    s,\n  ] = transactionArray\n  const [blobs, commitments, proofs] = wrapperArray\n\n  if (!(transactionArray.length === 11 || transactionArray.length === 14))\n    throw new TransactionEnvelope.InvalidSerializedError({\n      attributes: {\n        chainId,\n        nonce,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n        gas,\n        to,\n        value,\n        data,\n        accessList,\n        ...(transactionArray.length > 9\n          ? {\n              yParity,\n              r,\n              s,\n            }\n          : {}),\n      },\n      serialized,\n      type,\n    })\n\n  let transaction = {\n    blobVersionedHashes: blobVersionedHashes as Hex.Hex[],\n    chainId: Number(chainId),\n    type,\n  } as TransactionEnvelopeEip4844\n  if (Hex.validate(to) && to !== '0x') transaction.to = to\n  if (Hex.validate(gas) && gas !== '0x') transaction.gas = BigInt(gas)\n  if (Hex.validate(data) && data !== '0x') transaction.data = data\n  if (Hex.validate(nonce) && nonce !== '0x') transaction.nonce = BigInt(nonce)\n  if (Hex.validate(value) && value !== '0x') transaction.value = BigInt(value)\n  if (Hex.validate(maxFeePerBlobGas) && maxFeePerBlobGas !== '0x')\n    transaction.maxFeePerBlobGas = BigInt(maxFeePerBlobGas)\n  if (Hex.validate(maxFeePerGas) && maxFeePerGas !== '0x')\n    transaction.maxFeePerGas = BigInt(maxFeePerGas)\n  if (Hex.validate(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x')\n    transaction.maxPriorityFeePerGas = BigInt(maxPriorityFeePerGas)\n  if (accessList?.length !== 0 && accessList !== '0x')\n    transaction.accessList = AccessList.fromTupleList(accessList as any)\n  if (blobs && commitments && proofs)\n    transaction.sidecars = Blobs.toSidecars(blobs as Hex.Hex[], {\n      commitments: commitments as Hex.Hex[],\n      proofs: proofs as Hex.Hex[],\n    })\n\n  const signature =\n    r && s && yParity\n      ? Signature.fromTuple([yParity as Hex.Hex, r as Hex.Hex, s as Hex.Hex])\n      : undefined\n  if (signature)\n    transaction = {\n      ...transaction,\n      ...signature,\n    } as TransactionEnvelopeEip4844\n\n  assert(transaction)\n\n  return transaction\n}\n\nexport declare namespace deserialize {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts an arbitrary transaction object into an EIP-4844 Transaction Envelope.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, TransactionEnvelopeEip4844, Value } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const blobVersionedHashes = Blobs.toVersionedHashes(blobs, { kzg })\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   chainId: 1,\n *   blobVersionedHashes,\n *   maxFeePerBlobGas: Value.fromGwei('3'),\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the transaction envelope.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, Secp256k1, TransactionEnvelopeEip4844, Value } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const sidecars = Blobs.toSidecars(blobs, { kzg })\n * const blobVersionedHashes = Blobs.sidecarsToVersionedHashes(sidecars)\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   blobVersionedHashes,\n *   chainId: 1,\n *   maxFeePerBlobGas: Value.fromGwei('3'),\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip4844.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip4844.from(envelope, { // [!code focus]\n *   sidecars, // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   blobVersionedHashes: [...],\n * // @log:   chainId: 1,\n * // @log:   maxFeePerBlobGas: 3000000000n,\n * // @log:   maxFeePerGas: 10000000000n,\n * // @log:   maxPriorityFeePerGas: 1000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip4844',\n * // @log:   value: 1000000000000000000n,\n * // @log:   r: 125...n,\n * // @log:   s: 642...n,\n * // @log:   yParity: 0,\n * // @log: }\n * ```\n *\n * @example\n * ### From Serialized\n *\n * It is possible to instantiate an EIP-4844 Transaction Envelope from a {@link ox#TransactionEnvelopeEip4844.Serialized} value.\n *\n * ```ts twoslash\n * import { TransactionEnvelopeEip4844 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip4844.from('0x03f858018203118502540be4008504a817c800809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c08477359400e1a001627c687261b0e7f8638af1112efa8a77e23656f6e7945275b19e9deed80261')\n * // @log: {\n * // @log:   blobVersionedHashes: [...],\n * // @log:   chainId: 1,\n * // @log:   maxFeePerGas: 10000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip4844',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param envelope - The transaction object to convert.\n * @param options - Options.\n * @returns An EIP-4844 Transaction Envelope.\n */\nexport function from<\n  const envelope extends\n    | UnionPartialBy<TransactionEnvelopeEip4844, 'type'>\n    | Serialized,\n  const signature extends Signature.Signature | undefined = undefined,\n>(\n  envelope:\n    | envelope\n    | UnionPartialBy<TransactionEnvelopeEip4844, 'type'>\n    | Serialized,\n  options: from.Options<signature> = {},\n): from.ReturnType<envelope, signature> {\n  const { signature } = options\n\n  const envelope_ = (\n    typeof envelope === 'string' ? deserialize(envelope) : envelope\n  ) as TransactionEnvelopeEip4844\n\n  assert(envelope_)\n\n  return {\n    ...envelope_,\n    ...(signature ? Signature.from(signature) : {}),\n    type: 'eip4844',\n  } as never\n}\n\nexport declare namespace from {\n  type Options<signature extends Signature.Signature | undefined = undefined> =\n    {\n      signature?: signature | Signature.Signature | undefined\n    }\n\n  type ReturnType<\n    envelope extends\n      | UnionPartialBy<TransactionEnvelopeEip4844, 'type'>\n      | Hex.Hex = TransactionEnvelopeEip4844 | Hex.Hex,\n    signature extends Signature.Signature | undefined = undefined,\n  > = Compute<\n    envelope extends Hex.Hex\n      ? TransactionEnvelopeEip4844\n      : Assign<\n          envelope,\n          (signature extends Signature.Signature ? Readonly<signature> : {}) & {\n            readonly type: 'eip4844'\n          }\n        >\n  >\n\n  type ErrorType =\n    | deserialize.ErrorType\n    | assert.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Returns the payload to sign for a {@link ox#TransactionEnvelopeEip4844.TransactionEnvelopeEip4844}.\n *\n * @example\n * The example below demonstrates how to compute the sign payload which can be used\n * with ECDSA signing utilities like {@link ox#Secp256k1.(sign:function)}.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, Secp256k1, TransactionEnvelopeEip4844 } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const blobVersionedHashes = Blobs.toVersionedHashes(blobs, { kzg })\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   blobVersionedHashes,\n *   chainId: 1,\n *   nonce: 0n,\n *   maxFeePerGas: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const payload = TransactionEnvelopeEip4844.getSignPayload(envelope) // [!code focus]\n * // @log: '0x...'\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @param envelope - The transaction envelope to get the sign payload for.\n * @returns The sign payload.\n */\nexport function getSignPayload(\n  envelope: TransactionEnvelopeEip4844,\n): getSignPayload.ReturnType {\n  return hash(envelope, { presign: true })\n}\n\nexport declare namespace getSignPayload {\n  type ReturnType = Hex.Hex\n\n  type ErrorType = hash.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Hashes a {@link ox#TransactionEnvelopeEip4844.TransactionEnvelopeEip4844}. This is the \"transaction hash\".\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, TransactionEnvelopeEip4844 } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const blobVersionedHashes = Blobs.toVersionedHashes(blobs, { kzg })\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   blobVersionedHashes,\n *   chainId: 1,\n *   nonce: 0n,\n *   maxFeePerGas: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const hash = TransactionEnvelopeEip4844.hash(envelope) // [!code focus]\n * ```\n *\n * @param envelope - The EIP-4844 Transaction Envelope to hash.\n * @param options - Options.\n * @returns The hash of the transaction envelope.\n */\nexport function hash<presign extends boolean = false>(\n  envelope: TransactionEnvelopeEip4844<presign extends true ? false : true>,\n  options: hash.Options<presign> = {},\n): hash.ReturnType {\n  const { presign } = options\n  return Hash.keccak256(\n    serialize({\n      ...envelope,\n      ...(presign\n        ? {\n            sidecars: undefined,\n            r: undefined,\n            s: undefined,\n            yParity: undefined,\n            v: undefined,\n          }\n        : {}),\n    }),\n  )\n}\n\nexport declare namespace hash {\n  type Options<presign extends boolean = false> = {\n    /** Whether to hash this transaction for signing. @default false */\n    presign?: presign | boolean | undefined\n  }\n\n  type ReturnType = Hex.Hex\n\n  type ErrorType =\n    | Hash.keccak256.ErrorType\n    | serialize.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Serializes a {@link ox#TransactionEnvelopeEip4844.TransactionEnvelopeEip4844}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, TransactionEnvelopeEip4844 } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const blobVersionedHashes = Blobs.toVersionedHashes(blobs, { kzg })\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   blobVersionedHashes,\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const serialized = TransactionEnvelopeEip4844.serialize(envelope) // [!code focus]\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the serialized Transaction Envelope.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, Secp256k1, TransactionEnvelopeEip4844, Value } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const sidecars = Blobs.toSidecars(blobs, { kzg })\n * const blobVersionedHashes = Blobs.sidecarsToVersionedHashes(blobs)\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   blobVersionedHashes,\n *   chainId: 1,\n *   maxFeePerBlobGas: Value.fromGwei('3'),\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip4844.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const serialized = TransactionEnvelopeEip4844.serialize(envelope, { // [!code focus]\n *   sidecars, // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n *\n * // ... send `serialized` transaction to JSON-RPC `eth_sendRawTransaction`\n * ```\n *\n * @param envelope - The Transaction Envelope to serialize.\n * @param options - Options.\n * @returns The serialized Transaction Envelope.\n */\nexport function serialize(\n  envelope: PartialBy<TransactionEnvelopeEip4844, 'type'>,\n  options: serialize.Options = {},\n): Serialized {\n  const {\n    blobVersionedHashes,\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n  } = envelope\n\n  assert(envelope)\n\n  const accessTupleList = AccessList.toTupleList(accessList)\n\n  const signature = Signature.extract(options.signature || envelope)\n\n  const serialized = [\n    Hex.fromNumber(chainId),\n    nonce ? Hex.fromNumber(nonce) : '0x',\n    maxPriorityFeePerGas ? Hex.fromNumber(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? Hex.fromNumber(maxFeePerGas) : '0x',\n    gas ? Hex.fromNumber(gas) : '0x',\n    to ?? '0x',\n    value ? Hex.fromNumber(value) : '0x',\n    data ?? '0x',\n    accessTupleList,\n    maxFeePerBlobGas ? Hex.fromNumber(maxFeePerBlobGas) : '0x',\n    blobVersionedHashes ?? [],\n    ...(signature ? Signature.toTuple(signature) : []),\n  ] as const\n\n  const sidecars = options.sidecars || envelope.sidecars\n  const blobs: Hex.Hex[] = []\n  const commitments: Hex.Hex[] = []\n  const proofs: Hex.Hex[] = []\n  if (sidecars)\n    for (let i = 0; i < sidecars.length; i++) {\n      const { blob, commitment, proof } = sidecars[i]!\n      blobs.push(blob)\n      commitments.push(commitment)\n      proofs.push(proof)\n    }\n\n  return Hex.concat(\n    '0x03',\n    sidecars\n      ? // If sidecars are provided, envelope turns into a \"network wrapper\":\n        Rlp.fromHex([serialized, blobs, commitments, proofs])\n      : // Otherwise, standard envelope is used:\n        Rlp.fromHex(serialized),\n  ) as Serialized\n}\n\nexport declare namespace serialize {\n  type Options = {\n    /** Signature to append to the serialized Transaction Envelope. */\n    signature?: Signature.Signature | undefined\n    /** Sidecars to append to the serialized Transaction Envelope. */\n    sidecars?: Blobs.BlobSidecars<Hex.Hex> | undefined\n  }\n\n  type ErrorType =\n    | assert.ErrorType\n    | Hex.fromNumber.ErrorType\n    | Signature.toTuple.ErrorType\n    | Hex.concat.ErrorType\n    | Rlp.fromHex.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Converts an {@link ox#TransactionEnvelopeEip4844.TransactionEnvelopeEip4844} to an {@link ox#TransactionEnvelopeEip4844.Rpc}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, RpcRequest, TransactionEnvelopeEip4844, Value } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const blobVersionedHashes = Blobs.toVersionedHashes(blobs, { kzg })\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   blobVersionedHashes,\n *   chainId: 1,\n *   nonce: 0n,\n *   gas: 21000n,\n *   maxFeePerBlobGas: Value.fromGwei('20'),\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('1'),\n * })\n *\n * const envelope_rpc = TransactionEnvelopeEip4844.toRpc(envelope) // [!code focus]\n *\n * const request = RpcRequest.from({\n *   id: 0,\n *   method: 'eth_sendTransaction',\n *   params: [envelope_rpc],\n * })\n * ```\n *\n * @param envelope - The EIP-4844 transaction envelope to convert.\n * @returns An RPC-formatted EIP-4844 transaction envelope.\n */\nexport function toRpc(envelope: Omit<TransactionEnvelopeEip4844, 'type'>): Rpc {\n  const signature = Signature.extract(envelope)\n\n  return {\n    ...envelope,\n    chainId: Hex.fromNumber(envelope.chainId),\n    data: envelope.data ?? envelope.input,\n    ...(typeof envelope.gas === 'bigint'\n      ? { gas: Hex.fromNumber(envelope.gas) }\n      : {}),\n    ...(typeof envelope.nonce === 'bigint'\n      ? { nonce: Hex.fromNumber(envelope.nonce) }\n      : {}),\n    ...(typeof envelope.value === 'bigint'\n      ? { value: Hex.fromNumber(envelope.value) }\n      : {}),\n    ...(typeof envelope.maxFeePerBlobGas === 'bigint'\n      ? { maxFeePerBlobGas: Hex.fromNumber(envelope.maxFeePerBlobGas) }\n      : {}),\n    ...(typeof envelope.maxFeePerGas === 'bigint'\n      ? { maxFeePerGas: Hex.fromNumber(envelope.maxFeePerGas) }\n      : {}),\n    ...(typeof envelope.maxPriorityFeePerGas === 'bigint'\n      ? { maxPriorityFeePerGas: Hex.fromNumber(envelope.maxPriorityFeePerGas) }\n      : {}),\n    type: '0x3',\n    ...(signature ? Signature.toRpc(signature) : {}),\n  } as never\n}\n\nexport declare namespace toRpc {\n  export type ErrorType = Signature.extract.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Validates a {@link ox#TransactionEnvelopeEip4844.TransactionEnvelopeEip4844}. Returns `true` if the envelope is valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip4844, Value } from 'ox'\n *\n * const valid = TransactionEnvelopeEip4844.assert({\n *   blobVersionedHashes: [],\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @log: false\n * ```\n *\n * @param envelope - The transaction envelope to validate.\n */\nexport function validate(\n  envelope: PartialBy<TransactionEnvelopeEip4844, 'type'>,\n) {\n  try {\n    assert(envelope)\n    return true\n  } catch {\n    return false\n  }\n}\n\nexport declare namespace validate {\n  type ErrorType = Errors.GlobalErrorType\n}\n", "import type { Assign } from './internal/types.js'\n\nimport type { PartialBy, UnionPartialBy } from './internal/types.js'\n\nimport * as AccessList from './AccessList.js'\nimport * as Address from './Address.js'\nimport * as Authorization from './Authorization.js'\nimport type * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as Hex from './Hex.js'\nimport * as Rlp from './Rlp.js'\nimport * as Signature from './Signature.js'\nimport * as TransactionEnvelope from './TransactionEnvelope.js'\nimport * as TransactionEnvelopeEip1559 from './TransactionEnvelopeEip1559.js'\nimport type { Compute } from './internal/types.js'\n\nexport type TransactionEnvelopeEip7702<\n  signed extends boolean = boolean,\n  bigintType = bigint,\n  numberType = number,\n  type extends string = Type,\n> = Compute<\n  TransactionEnvelope.Base<type, signed, bigintType, numberType> & {\n    /** EIP-2930 Access List. */\n    accessList?: AccessList.AccessList | undefined\n    /** EIP-7702 Authorization List. */\n    authorizationList: Authorization.ListSigned<bigintType, numberType>\n    /** Total fee per gas in wei (gasPrice/baseFeePerGas + maxPriorityFeePerGas). */\n    maxFeePerGas?: bigintType | undefined\n    /** Max priority fee per gas (in wei). */\n    maxPriorityFeePerGas?: bigintType | undefined\n  }\n>\n\nexport type Rpc<signed extends boolean = boolean> = TransactionEnvelopeEip7702<\n  signed,\n  Hex.Hex,\n  Hex.Hex,\n  '0x4'\n>\n\nexport type Serialized = `${SerializedType}${string}`\n\nexport type Signed = TransactionEnvelopeEip7702<true>\n\nexport const serializedType = '0x04' as const\nexport type SerializedType = typeof serializedType\n\nexport const type = 'eip7702' as const\nexport type Type = typeof type\n\n/**\n * Asserts a {@link ox#TransactionEnvelopeEip7702.TransactionEnvelopeEip7702} is valid.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip7702, Value } from 'ox'\n *\n * TransactionEnvelopeEip7702.assert({\n *   authorizationList: [],\n *   maxFeePerGas: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @error: FeeCapTooHighError:\n * // @error: The fee cap (`masFeePerGas` = 115792089237316195423570985008687907853269984665640564039457584007913 gwei) cannot be\n * // @error: higher than the maximum allowed value (2^256-1).\n * ```\n *\n * @param envelope - The transaction envelope to assert.\n */\nexport function assert(\n  envelope: PartialBy<TransactionEnvelopeEip7702, 'type'>,\n) {\n  const { authorizationList } = envelope\n  if (authorizationList) {\n    for (const authorization of authorizationList) {\n      const { address, chainId } = authorization\n      if (address) Address.assert(address, { strict: false })\n      if (Number(chainId) < 0)\n        throw new TransactionEnvelope.InvalidChainIdError({ chainId })\n    }\n  }\n  TransactionEnvelopeEip1559.assert(\n    envelope as {} as TransactionEnvelopeEip1559.TransactionEnvelopeEip1559,\n  )\n}\n\nexport declare namespace assert {\n  type ErrorType =\n    | Address.assert.ErrorType\n    | TransactionEnvelope.InvalidChainIdError\n    | Errors.GlobalErrorType\n}\n\n/**\n * Deserializes a {@link ox#TransactionEnvelopeEip7702.TransactionEnvelopeEip7702} from its serialized form.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip7702 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip7702.deserialize('0x04ef0182031184773594008477359400809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c0')\n * // @log: {\n * // @log:   authorizationList: [...],\n * // @log:   type: 'eip7702',\n * // @log:   nonce: 785n,\n * // @log:   maxFeePerGas: 2000000000n,\n * // @log:   gas: 1000000n,\n * // @log:   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param serialized - The serialized transaction.\n * @returns Deserialized Transaction Envelope.\n */\nexport function deserialize(\n  serialized: Serialized,\n): Compute<TransactionEnvelopeEip7702> {\n  const transactionArray = Rlp.toHex(Hex.slice(serialized, 1))\n\n  const [\n    chainId,\n    nonce,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n    gas,\n    to,\n    value,\n    data,\n    accessList,\n    authorizationList,\n    yParity,\n    r,\n    s,\n  ] = transactionArray as readonly Hex.Hex[]\n\n  if (!(transactionArray.length === 10 || transactionArray.length === 13))\n    throw new TransactionEnvelope.InvalidSerializedError({\n      attributes: {\n        chainId,\n        nonce,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n        gas,\n        to,\n        value,\n        data,\n        accessList,\n        authorizationList,\n        ...(transactionArray.length > 9\n          ? {\n              yParity,\n              r,\n              s,\n            }\n          : {}),\n      },\n      serialized,\n      type,\n    })\n\n  let transaction = {\n    chainId: Number(chainId),\n    type,\n  } as TransactionEnvelopeEip7702\n  if (Hex.validate(to) && to !== '0x') transaction.to = to\n  if (Hex.validate(gas) && gas !== '0x') transaction.gas = BigInt(gas)\n  if (Hex.validate(data) && data !== '0x') transaction.data = data\n  if (Hex.validate(nonce) && nonce !== '0x') transaction.nonce = BigInt(nonce)\n  if (Hex.validate(value) && value !== '0x') transaction.value = BigInt(value)\n  if (Hex.validate(maxFeePerGas) && maxFeePerGas !== '0x')\n    transaction.maxFeePerGas = BigInt(maxFeePerGas)\n  if (Hex.validate(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x')\n    transaction.maxPriorityFeePerGas = BigInt(maxPriorityFeePerGas)\n  if (accessList!.length !== 0 && accessList !== '0x')\n    transaction.accessList = AccessList.fromTupleList(accessList as never)\n  if (authorizationList !== '0x')\n    transaction.authorizationList = Authorization.fromTupleList(\n      authorizationList as never,\n    )\n\n  const signature =\n    r && s && yParity ? Signature.fromTuple([yParity, r, s]) : undefined\n  if (signature)\n    transaction = {\n      ...transaction,\n      ...signature,\n    } as TransactionEnvelopeEip7702\n\n  assert(transaction)\n\n  return transaction\n}\n\nexport declare namespace deserialize {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Converts an arbitrary transaction object into an EIP-7702 Transaction Envelope.\n *\n * @example\n * ```ts twoslash\n * import { Authorization, Secp256k1, TransactionEnvelopeEip7702, Value } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   chainId: 1,\n *   nonce: 0n,\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: Authorization.getSignPayload(authorization),\n *   privateKey: '0x...',\n * })\n *\n * const authorizationList = [Authorization.from(authorization, { signature })]\n *\n * const envelope = TransactionEnvelopeEip7702.from({ // [!code focus]\n *   authorizationList, // [!code focus]\n *   chainId: 1, // [!code focus]\n *   maxFeePerGas: Value.fromGwei('10'), // [!code focus]\n *   maxPriorityFeePerGas: Value.fromGwei('1'), // [!code focus]\n *   to: '0x0000000000000000000000000000000000000000', // [!code focus]\n *   value: Value.fromEther('1'), // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the transaction envelope.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Secp256k1, TransactionEnvelopeEip7702, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip7702.from({\n *   authorizationList: [...],\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip7702.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip7702.from(envelope, { // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   authorizationList: [...],\n * // @log:   chainId: 1,\n * // @log:   maxFeePerGas: 10000000000n,\n * // @log:   maxPriorityFeePerGas: 1000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip7702',\n * // @log:   value: 1000000000000000000n,\n * // @log:   r: 125...n,\n * // @log:   s: 642...n,\n * // @log:   yParity: 0,\n * // @log: }\n * ```\n *\n * @example\n * ### From Serialized\n *\n * It is possible to instantiate an EIP-7702 Transaction Envelope from a {@link ox#TransactionEnvelopeEip7702.Serialized} value.\n *\n * ```ts twoslash\n * import { TransactionEnvelopeEip7702 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip7702.from('0x04f858018203118502540be4008504a817c800809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c08477359400e1a001627c687261b0e7f8638af1112efa8a77e23656f6e7945275b19e9deed80261')\n * // @log: {\n * // @log:   authorizationList: [...],\n * // @log:   chainId: 1,\n * // @log:   maxFeePerGas: 10000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip7702',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param envelope - The transaction object to convert.\n * @param options - Options.\n * @returns An EIP-7702 Transaction Envelope.\n */\nexport function from<\n  const envelope extends\n    | UnionPartialBy<TransactionEnvelopeEip7702, 'type'>\n    | Serialized,\n  const signature extends Signature.Signature | undefined = undefined,\n>(\n  envelope:\n    | envelope\n    | UnionPartialBy<TransactionEnvelopeEip7702, 'type'>\n    | Serialized,\n  options: from.Options<signature> = {},\n): from.ReturnType<envelope, signature> {\n  const { signature } = options\n\n  const envelope_ = (\n    typeof envelope === 'string' ? deserialize(envelope) : envelope\n  ) as TransactionEnvelopeEip7702\n\n  assert(envelope_)\n\n  return {\n    ...envelope_,\n    ...(signature ? Signature.from(signature) : {}),\n    type: 'eip7702',\n  } as never\n}\n\nexport declare namespace from {\n  type Options<signature extends Signature.Signature | undefined = undefined> =\n    {\n      signature?: signature | Signature.Signature | undefined\n    }\n\n  type ReturnType<\n    envelope extends\n      | UnionPartialBy<TransactionEnvelopeEip7702, 'type'>\n      | Hex.Hex = TransactionEnvelopeEip7702 | Hex.Hex,\n    signature extends Signature.Signature | undefined = undefined,\n  > = Compute<\n    envelope extends Hex.Hex\n      ? TransactionEnvelopeEip7702\n      : Assign<\n          envelope,\n          (signature extends Signature.Signature ? Readonly<signature> : {}) & {\n            readonly type: 'eip7702'\n          }\n        >\n  >\n\n  type ErrorType =\n    | deserialize.ErrorType\n    | assert.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Returns the payload to sign for a {@link ox#TransactionEnvelopeEip7702.TransactionEnvelopeEip7702}.\n *\n * @example\n * The example below demonstrates how to compute the sign payload which can be used\n * with ECDSA signing utilities like {@link ox#Secp256k1.(sign:function)}.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Secp256k1, TransactionEnvelopeEip7702 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip7702.from({\n *   authorizationList: [...],\n *   chainId: 1,\n *   nonce: 0n,\n *   maxFeePerGas: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const payload = TransactionEnvelopeEip7702.getSignPayload(envelope) // [!code focus]\n * // @log: '0x...'\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @param envelope - The transaction envelope to get the sign payload for.\n * @returns The sign payload.\n */\nexport function getSignPayload(\n  envelope: TransactionEnvelopeEip7702,\n): getSignPayload.ReturnType {\n  return hash(envelope, { presign: true })\n}\n\nexport declare namespace getSignPayload {\n  type ReturnType = Hex.Hex\n\n  type ErrorType = hash.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Hashes a {@link ox#TransactionEnvelopeEip7702.TransactionEnvelopeEip7702}. This is the \"transaction hash\".\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Secp256k1, TransactionEnvelopeEip7702 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip7702.from({\n *   authorizationList: [...],\n *   chainId: 1,\n *   nonce: 0n,\n *   maxFeePerGas: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip7702.getSignPayload(envelope),\n *   privateKey: '0x...'\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip7702.from(envelope, { signature })\n *\n * const hash = TransactionEnvelopeEip7702.hash(envelope_signed) // [!code focus]\n * ```\n *\n * @param envelope - The EIP-7702 Transaction Envelope to hash.\n * @param options - Options.\n * @returns The hash of the transaction envelope.\n */\nexport function hash<presign extends boolean = false>(\n  envelope: TransactionEnvelopeEip7702<presign extends true ? false : true>,\n  options: hash.Options<presign> = {},\n): hash.ReturnType {\n  const { presign } = options\n  return Hash.keccak256(\n    serialize({\n      ...envelope,\n      ...(presign\n        ? {\n            r: undefined,\n            s: undefined,\n            yParity: undefined,\n          }\n        : {}),\n    }),\n  )\n}\n\nexport declare namespace hash {\n  type Options<presign extends boolean = false> = {\n    /** Whether to hash this transaction for signing. @default false */\n    presign?: presign | boolean | undefined\n  }\n\n  type ReturnType = Hex.Hex\n\n  type ErrorType =\n    | Hash.keccak256.ErrorType\n    | serialize.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Serializes a {@link ox#TransactionEnvelopeEip7702.TransactionEnvelopeEip7702}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Authorization, Secp256k1, TransactionEnvelopeEip7702, Value } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   chainId: 1,\n *   nonce: 0n,\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: Authorization.getSignPayload(authorization),\n *   privateKey: '0x...',\n * })\n *\n * const authorizationList = [Authorization.from(authorization, { signature })]\n *\n * const envelope = TransactionEnvelopeEip7702.from({\n *   authorizationList,\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const serialized = TransactionEnvelopeEip7702.serialize(envelope) // [!code focus]\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the serialized Transaction Envelope.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Secp256k1, TransactionEnvelopeEip7702, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip7702.from({\n *   authorizationList: [...],\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip7702.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const serialized = TransactionEnvelopeEip7702.serialize(envelope, { // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n *\n * // ... send `serialized` transaction to JSON-RPC `eth_sendRawTransaction`\n * ```\n *\n * @param envelope - The Transaction Envelope to serialize.\n * @param options - Options.\n * @returns The serialized Transaction Envelope.\n */\nexport function serialize(\n  envelope: PartialBy<TransactionEnvelopeEip7702, 'type'>,\n  options: serialize.Options = {},\n): Serialized {\n  const {\n    authorizationList,\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    data,\n    input,\n  } = envelope\n\n  assert(envelope)\n\n  const accessTupleList = AccessList.toTupleList(accessList)\n  const authorizationTupleList = Authorization.toTupleList(authorizationList)\n\n  const signature = Signature.extract(options.signature || envelope)\n\n  const serialized = [\n    Hex.fromNumber(chainId),\n    nonce ? Hex.fromNumber(nonce) : '0x',\n    maxPriorityFeePerGas ? Hex.fromNumber(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? Hex.fromNumber(maxFeePerGas) : '0x',\n    gas ? Hex.fromNumber(gas) : '0x',\n    to ?? '0x',\n    value ? Hex.fromNumber(value) : '0x',\n    data ?? input ?? '0x',\n    accessTupleList,\n    authorizationTupleList,\n    ...(signature ? Signature.toTuple(signature) : []),\n  ]\n\n  return Hex.concat(serializedType, Rlp.fromHex(serialized)) as Serialized\n}\n\nexport declare namespace serialize {\n  type Options = {\n    /** Signature to append to the serialized Transaction Envelope. */\n    signature?: Signature.Signature | undefined\n  }\n\n  type ErrorType =\n    | assert.ErrorType\n    | Hex.fromNumber.ErrorType\n    | Signature.toTuple.ErrorType\n    | Hex.concat.ErrorType\n    | Rlp.fromHex.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Validates a {@link ox#TransactionEnvelopeEip7702.TransactionEnvelopeEip7702}. Returns `true` if the envelope is valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip7702, Value } from 'ox'\n *\n * const valid = TransactionEnvelopeEip7702.validate({\n *   authorizationList: [],\n *   maxFeePerGas: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @log: false\n * ```\n *\n * @param envelope - The transaction envelope to validate.\n */\nexport function validate(\n  envelope: PartialBy<TransactionEnvelopeEip7702, 'type'>,\n) {\n  try {\n    assert(envelope)\n    return true\n  } catch {\n    return false\n  }\n}\n\nexport declare namespace validate {\n  type ErrorType = Errors.GlobalErrorType\n}\n", "import type * as Address from './Address.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport * as Log from './Log.js'\nimport type { Compute } from './internal/types.js'\n\n/** An Transaction Receipt as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/receipt.yaml). */\nexport type TransactionReceipt<\n  status = Status,\n  type = Type,\n  bigintType = bigint,\n  numberType = number,\n> = Compute<{\n  /** The actual value per gas deducted from the sender's account for blob gas. Only specified for blob transactions as defined by EIP-4844. */\n  blobGasPrice?: bigintType | undefined\n  /** The amount of blob gas used. Only specified for blob transactions as defined by EIP-4844. */\n  blobGasUsed?: bigintType | undefined\n  /** Hash of block containing this transaction */\n  blockHash: Hex.Hex\n  /** Number of block containing this transaction */\n  blockNumber: bigintType\n  /** Address of new contract or `null` if no contract was created */\n  contractAddress?: Address.Address | null | undefined\n  /** Gas used by this and all preceding transactions in this block */\n  cumulativeGasUsed: bigintType\n  /** Pre-London, it is equal to the transaction's gasPrice. Post-London, it is equal to the actual gas price paid for inclusion. */\n  effectiveGasPrice: bigintType\n  /** Transaction sender */\n  from: Address.Address\n  /** Gas used by this transaction */\n  gasUsed: bigintType\n  /** List of log objects generated by this transaction */\n  logs: Log.Log<false, bigintType, numberType>[]\n  /** Logs bloom filter */\n  logsBloom: Hex.Hex\n  /** The post-transaction state root. Only specified for transactions included before the Byzantium upgrade. */\n  root?: Hex.Hex | undefined\n  /** `success` if this transaction was successful or `reverted` if it failed */\n  status: status\n  /** Transaction recipient or `null` if deploying a contract */\n  to: Address.Address | null\n  /** Hash of this transaction */\n  transactionHash: Hex.Hex\n  /** Index of this transaction in the block */\n  transactionIndex: numberType\n  /** Transaction type */\n  type: type\n}>\n\n/** An RPC Transaction Receipt as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/receipt.yaml). */\nexport type Rpc = TransactionReceipt<RpcStatus, RpcType, Hex.Hex, Hex.Hex>\n\n/**\n * Union of Transaction Receipt statuses.\n *\n * - `success`\n * - `reverted`\n */\nexport type Status = 'success' | 'reverted'\n\n/**\n * Union of RPC Transaction Receipt statuses.\n *\n * - `0x0`\n * - `0x1`\n */\nexport type RpcStatus = '0x0' | '0x1'\n\n/**\n * Union of Transaction Receipt types.\n *\n * - `legacy`\n * - `eip1559`\n * - `eip2930`\n * - `eip4844`\n * - `eip7702`\n * - any other string\n */\nexport type Type =\n  | 'legacy'\n  | 'eip1559'\n  | 'eip2930'\n  | 'eip4844'\n  | 'eip7702'\n  | (string & {})\n\n/**\n * Union of RPC Transaction Receipt types.\n *\n * - `0x0`: legacy transactions\n * - `0x1`: EIP-1559 transactions\n * - `0x2`: EIP-2930 transactions\n * - `0x3`: EIP-4844 transactions\n * - `0x4`: EIP-7702 transactions\n * - any other string\n */\nexport type RpcType = '0x0' | '0x1' | '0x2' | '0x3' | '0x4' | (string & {})\n\n/** RPC status to status mapping. */\nexport const fromRpcStatus = {\n  '0x0': 'reverted',\n  '0x1': 'success',\n} as const\n\n/** Status to RPC status mapping. */\nexport const toRpcStatus = {\n  reverted: '0x0',\n  success: '0x1',\n} as const\n\n/** RPC type to type mapping. */\nexport const fromRpcType = {\n  '0x0': 'legacy',\n  '0x1': 'eip2930',\n  '0x2': 'eip1559',\n  '0x3': 'eip4844',\n  '0x4': 'eip7702',\n} as const\n\n/** Type to RPC type mapping. */\nexport const toRpcType = {\n  legacy: '0x0',\n  eip2930: '0x1',\n  eip1559: '0x2',\n  eip4844: '0x3',\n  eip7702: '0x4',\n} as const\n\n/**\n * Converts a {@link ox#TransactionReceipt.Rpc} to an {@link ox#TransactionReceipt.TransactionReceipt}.\n *\n * @example\n * ```ts twoslash\n * import { TransactionReceipt } from 'ox'\n *\n * const receipt = TransactionReceipt.fromRpc({\n *   blobGasPrice: '0x42069',\n *   blobGasUsed: '0x1337',\n *   blockHash:\n *     '0xc350d807505fb835650f0013632c5515592987ba169bbc6626d9fc54d91f0f0b',\n *   blockNumber: '0x12f296f',\n *   contractAddress: null,\n *   cumulativeGasUsed: '0x82515',\n *   effectiveGasPrice: '0x21c2f6c09',\n *   from: '0x814e5e0e31016b9a7f138c76b7e7b2bb5c1ab6a6',\n *   gasUsed: '0x2abba',\n *   logs: [],\n *   logsBloom:\n *     '0x00200000000000000000008080000000000000000040000000000000000000000000000000000000000000000000000022000000080000000000000000000000000000080000000000000008000000200000000000000000000200008020400000000000000000280000000000100000000000000000000000000010000000000000000000020000000000000020000000000001000000080000004000000000000000000000000000000000000000000000400000000000001000000000000000000002000000000000000020000000000000000000001000000000000000000000200000000000000000000000000000001000000000c00000000000000000',\n *   status: '0x1',\n *   to: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad',\n *   transactionHash:\n *     '0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0',\n *   transactionIndex: '0x2',\n *   type: '0x2',\n * })\n * // @log: {\n * // @log:   blobGasPrice: 270441n,\n * // @log:   blobGasUsed: 4919n,\n * // @log:   blockHash: \"0xc350d807505fb835650f0013632c5515592987ba169bbc6626d9fc54d91f0f0b\",\n * // @log:   blockNumber: 19868015n,\n * // @log:   contractAddress: null,\n * // @log:   cumulativeGasUsed: 533781n,\n * // @log:   effectiveGasPrice: 9062804489n,\n * // @log:   from: \"0x814e5e0e31016b9a7f138c76b7e7b2bb5c1ab6a6\",\n * // @log:   gasUsed: 175034n,\n * // @log:   logs: [],\n * // @log:   logsBloom: \"0x00200000000000000000008080000000000000000040000000000000000000000000000000000000000000000000000022000000080000000000000000000000000000080000000000000008000000200000000000000000000200008020400000000000000000280000000000100000000000000000000000000010000000000000000000020000000000000020000000000001000000080000004000000000000000000000000000000000000000000000400000000000001000000000000000000002000000000000000020000000000000000000001000000000000000000000200000000000000000000000000000001000000000c00000000000000000\",\n * // @log:   root: undefined,\n * // @log:   status: \"success\",\n * // @log:   to: \"0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad\",\n * // @log:   transactionHash: \"0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0\",\n * // @log:   transactionIndex: 2,\n * // @log:   type: \"eip1559\",\n * // @log: }\n * ```\n *\n * @example\n * ### End-to-end\n *\n * Below is an example of how to use the `TransactionReceipt.fromRpc` method to convert an RPC transaction receipt to a {@link ox#TransactionReceipt.TransactionReceipt} object.\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { TransactionReceipt } from 'ox'\n *\n * const receipt = await window.ethereum!\n *   .request({\n *     method: 'eth_getTransactionReceipt',\n *     params: [\n *       '0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0',\n *     ],\n *   })\n *   .then(TransactionReceipt.fromRpc) // [!code hl]\n * // @log: {\n * // @log:   blobGasPrice: 270441n,\n * // @log:   blobGasUsed: 4919n,\n * // @log:   blockHash: \"0xc350d807505fb835650f0013632c5515592987ba169bbc6626d9fc54d91f0f0b\",\n * // @log:   blockNumber: 19868015n,\n * // @log:   contractAddress: null,\n * // @log:   cumulativeGasUsed: 533781n,\n * // @log:   effectiveGasPrice: 9062804489n,\n * // @log:   from: \"0x814e5e0e31016b9a7f138c76b7e7b2bb5c1ab6a6\",\n * // @log:   gasUsed: 175034n,\n * // @log:   logs: [],\n * // @log:   logsBloom: \"0x00200000000000000000008080000000000000000040000000000000000000000000000000000000000000000000000022000000080000000000000000000000000000080000000000000008000000200000000000000000000200008020400000000000000000280000000000100000000000000000000000000010000000000000000000020000000000000020000000000001000000080000004000000000000000000000000000000000000000000000400000000000001000000000000000000002000000000000000020000000000000000000001000000000000000000000200000000000000000000000000000001000000000c00000000000000000\",\n * // @log:   root: undefined,\n * // @log:   status: \"success\",\n * // @log:   to: \"0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad\",\n * // @log:   transactionHash: \"0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0\",\n * // @log:   transactionIndex: 2,\n * // @log:   type: \"eip1559\",\n * // @log: }\n * ```\n *\n * :::note\n *\n * For simplicity, the above example uses `window.ethereum.request`, but you can use any\n * type of JSON-RPC interface.\n *\n * :::\n *\n * @param receipt - The RPC receipt to convert.\n * @returns An instantiated {@link ox#TransactionReceipt.TransactionReceipt}.\n */\nexport function fromRpc<const receipt extends Rpc | null>(\n  receipt: receipt | Rpc | null,\n): receipt extends Rpc ? TransactionReceipt : null {\n  if (!receipt) return null as never\n\n  return {\n    ...receipt,\n    blobGasPrice: receipt.blobGasPrice\n      ? BigInt(receipt.blobGasPrice)\n      : undefined,\n    blobGasUsed: receipt.blobGasUsed ? BigInt(receipt.blobGasUsed) : undefined,\n    blockNumber: BigInt(receipt.blockNumber ?? 0n),\n    cumulativeGasUsed: BigInt(receipt.cumulativeGasUsed ?? 0n),\n    effectiveGasPrice: BigInt(receipt.effectiveGasPrice ?? 0n),\n    gasUsed: BigInt(receipt.gasUsed ?? 0n),\n    logs: receipt.logs.map((log) => Log.fromRpc(log, { pending: false })),\n    status: fromRpcStatus[receipt.status],\n    transactionIndex: Number(receipt.transactionIndex ?? 0),\n    type: (fromRpcType as any)[receipt.type] || receipt.type,\n  } as never\n}\n\nexport declare namespace fromRpc {\n  export type ErrorType = Log.fromRpc.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Converts a {@link ox#TransactionReceipt.TransactionReceipt} to a {@link ox#TransactionReceipt.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { TransactionReceipt } from 'ox'\n *\n * const receipt = TransactionReceipt.toRpc({\n *   blobGasPrice: 270441n,\n *   blobGasUsed: 4919n,\n *   blockHash:\n *     '0xc350d807505fb835650f0013632c5515592987ba169bbc6626d9fc54d91f0f0b',\n *   blockNumber: 19868015n,\n *   contractAddress: null,\n *   cumulativeGasUsed: 533781n,\n *   effectiveGasPrice: 9062804489n,\n *   from: '0x814e5e0e31016b9a7f138c76b7e7b2bb5c1ab6a6',\n *   gasUsed: 175034n,\n *   logs: [],\n *   logsBloom:\n *     '0x00200000000000000000008080000000000000000040000000000000000000000000000000000000000000000000000022000000080000000000000000000000000000080000000000000008000000200000000000000000000200008020400000000000000000280000000000100000000000000000000000000010000000000000000000020000000000000020000000000001000000080000004000000000000000000000000000000000000000000000400000000000001000000000000000000002000000000000000020000000000000000000001000000000000000000000200000000000000000000000000000001000000000c00000000000000000',\n *   root: undefined,\n *   status: 'success',\n *   to: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad',\n *   transactionHash:\n *     '0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0',\n *   transactionIndex: 2,\n *   type: 'eip1559',\n * })\n * // @log: {\n * // @log:   blobGasPrice: \"0x042069\",\n * // @log:   blobGasUsed: \"0x1337\",\n * // @log:   blockHash: \"0xc350d807505fb835650f0013632c5515592987ba169bbc6626d9fc54d91f0f0b\",\n * // @log:   blockNumber: \"0x012f296f\",\n * // @log:   contractAddress: null,\n * // @log:   cumulativeGasUsed: \"0x082515\",\n * // @log:   effectiveGasPrice: \"0x021c2f6c09\",\n * // @log:   from: \"0x814e5e0e31016b9a7f138c76b7e7b2bb5c1ab6a6\",\n * // @log:   gasUsed: \"0x02abba\",\n * // @log:   logs: [],\n * // @log:   logsBloom: \"0x00200000000000000000008080000000000000000040000000000000000000000000000000000000000000000000000022000000080000000000000000000000000000080000000000000008000000200000000000000000000200008020400000000000000000280000000000100000000000000000000000000010000000000000000000020000000000000020000000000001000000080000004000000000000000000000000000000000000000000000400000000000001000000000000000000002000000000000000020000000000000000000001000000000000000000000200000000000000000000000000000001000000000c00000000000000000\",\n * // @log:   root: undefined,\n * // @log:   status: \"0x1\",\n * // @log:   to: \"0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad\",\n * // @log:   transactionHash: \"0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0\",\n * // @log:   transactionIndex: \"0x02\",\n * // @log:   type: \"eip1559\",\n * // @log: }\n * ```\n *\n * @param receipt - The receipt to convert.\n * @returns An RPC receipt.\n */\nexport function toRpc(receipt: TransactionReceipt): Rpc {\n  return {\n    blobGasPrice: receipt.blobGasPrice\n      ? Hex.fromNumber(receipt.blobGasPrice)\n      : undefined,\n    blobGasUsed: receipt.blobGasUsed\n      ? Hex.fromNumber(receipt.blobGasUsed)\n      : undefined,\n    blockHash: receipt.blockHash,\n    blockNumber: Hex.fromNumber(receipt.blockNumber),\n    contractAddress: receipt.contractAddress,\n    cumulativeGasUsed: Hex.fromNumber(receipt.cumulativeGasUsed),\n    effectiveGasPrice: Hex.fromNumber(receipt.effectiveGasPrice),\n    from: receipt.from,\n    gasUsed: Hex.fromNumber(receipt.gasUsed),\n    logs: receipt.logs.map(Log.toRpc as never),\n    logsBloom: receipt.logsBloom,\n    root: receipt.root,\n    status: toRpcStatus[receipt.status],\n    to: receipt.to,\n    transactionHash: receipt.transactionHash,\n    transactionIndex: Hex.fromNumber(receipt.transactionIndex),\n    type: (toRpcType as any)[receipt.type] ?? receipt.type,\n  }\n}\n\nexport declare namespace toRpc {\n  export type ErrorType = Hex.fromNumber.ErrorType | Errors.GlobalErrorType\n}\n", "import type * as AccessList from './AccessList.js'\nimport type * as Address from './Address.js'\nimport * as Authorization from './Authorization.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport type { Compute } from './internal/types.js'\n\n/** A Transaction Request that is generic to all transaction types, as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/4aca1d7a3e5aab24c8f6437131289ad386944eaa/src/schemas/transaction.yaml#L358-L423). */\nexport type TransactionRequest<\n  bigintType = bigint,\n  numberType = number,\n  type extends string = string,\n> = Compute<{\n  /** EIP-2930 Access List. */\n  accessList?: AccessList.AccessList | undefined\n  /** EIP-7702 Authorization List. */\n  authorizationList?:\n    | Authorization.ListSigned<bigintType, numberType>\n    | undefined\n  /** Versioned hashes of blobs to be included in the transaction. */\n  blobVersionedHashes?: readonly Hex.Hex[]\n  /** Raw blob data. */\n  blobs?: readonly Hex.Hex[] | undefined\n  /** EIP-155 Chain ID. */\n  chainId?: numberType | undefined\n  /** Contract code or a hashed method call with encoded args */\n  data?: Hex.Hex | undefined\n  /** @alias `data` – added for TransactionEnvelope - Transaction compatibility. */\n  input?: Hex.Hex | undefined\n  /** Sender of the transaction. */\n  from?: Address.Address | undefined\n  /** Gas provided for transaction execution */\n  gas?: bigintType | undefined\n  /** Base fee per gas. */\n  gasPrice?: bigintType | undefined\n  /** Maximum total fee per gas sender is willing to pay for blob gas (in wei). */\n  maxFeePerBlobGas?: bigintType | undefined\n  /** Total fee per gas in wei (gasPrice/baseFeePerGas + maxPriorityFeePerGas). */\n  maxFeePerGas?: bigintType | undefined\n  /** Max priority fee per gas (in wei). */\n  maxPriorityFeePerGas?: bigintType | undefined\n  /** Unique number identifying this transaction */\n  nonce?: bigintType | undefined\n  /** Transaction recipient */\n  to?: Address.Address | null | undefined\n  /** Transaction type */\n  type?: type | undefined\n  /** Value in wei sent with this transaction */\n  value?: bigintType | undefined\n}>\n\n/** RPC representation of a {@link ox#TransactionRequest.TransactionRequest}. */\nexport type Rpc = TransactionRequest<Hex.Hex, Hex.Hex, string>\n\n/**\n * Converts a {@link ox#TransactionRequest.TransactionRequest} to a {@link ox#TransactionRequest.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { TransactionRequest, Value } from 'ox'\n *\n * const request = TransactionRequest.toRpc({\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('0.01'),\n * })\n * ```\n *\n * @example\n * ### Using with a Provider\n *\n * You can use {@link ox#Provider.(from:function)} to instantiate an EIP-1193 Provider and\n * send a transaction to the Wallet using the `eth_sendTransaction` method.\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { Provider, TransactionRequest, Value } from 'ox'\n *\n * const provider = Provider.from(window.ethereum!)\n *\n * const request = TransactionRequest.toRpc({\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('0.01'),\n * })\n *\n * const hash = await provider.request({ // [!code focus]\n *   method: 'eth_sendTransaction', // [!code focus]\n *   params: [request], // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param request - The request to convert.\n * @returns An RPC request.\n */\nexport function toRpc(request: TransactionRequest): Rpc {\n  const request_rpc: Rpc = {}\n\n  if (typeof request.accessList !== 'undefined')\n    request_rpc.accessList = request.accessList\n  if (typeof request.authorizationList !== 'undefined')\n    request_rpc.authorizationList = Authorization.toRpcList(\n      request.authorizationList,\n    )\n  if (typeof request.blobVersionedHashes !== 'undefined')\n    request_rpc.blobVersionedHashes = request.blobVersionedHashes\n  if (typeof request.blobs !== 'undefined') request_rpc.blobs = request.blobs\n  if (typeof request.chainId !== 'undefined')\n    request_rpc.chainId = Hex.fromNumber(request.chainId)\n  if (typeof request.data !== 'undefined') {\n    request_rpc.data = request.data\n    request_rpc.input = request.data\n  } else if (typeof request.input !== 'undefined') {\n    request_rpc.data = request.input\n    request_rpc.input = request.input\n  }\n  if (typeof request.from !== 'undefined') request_rpc.from = request.from\n  if (typeof request.gas !== 'undefined')\n    request_rpc.gas = Hex.fromNumber(request.gas)\n  if (typeof request.gasPrice !== 'undefined')\n    request_rpc.gasPrice = Hex.fromNumber(request.gasPrice)\n  if (typeof request.maxFeePerBlobGas !== 'undefined')\n    request_rpc.maxFeePerBlobGas = Hex.fromNumber(request.maxFeePerBlobGas)\n  if (typeof request.maxFeePerGas !== 'undefined')\n    request_rpc.maxFeePerGas = Hex.fromNumber(request.maxFeePerGas)\n  if (typeof request.maxPriorityFeePerGas !== 'undefined')\n    request_rpc.maxPriorityFeePerGas = Hex.fromNumber(\n      request.maxPriorityFeePerGas,\n    )\n  if (typeof request.maxPriorityFeePerGas !== 'undefined')\n    request_rpc.maxPriorityFeePerGas = Hex.fromNumber(\n      request.maxPriorityFeePerGas,\n    )\n  if (typeof request.nonce !== 'undefined')\n    request_rpc.nonce = Hex.fromNumber(request.nonce)\n  if (typeof request.to !== 'undefined') request_rpc.to = request.to\n  if (typeof request.type !== 'undefined') request_rpc.type = request.type\n  if (typeof request.value !== 'undefined')\n    request_rpc.value = Hex.fromNumber(request.value)\n\n  return request_rpc\n}\n\nexport declare namespace toRpc {\n  export type ErrorType =\n    | Authorization.toRpcList.ErrorType\n    | Hex.fromNumber.ErrorType\n    | Errors.GlobalErrorType\n}\n", "import type * as abitype from 'abitype'\nimport * as AbiParameters from './AbiParameters.js'\nimport * as Address from './Address.js'\nimport * as Bytes from './Bytes.js'\nimport * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as Hex from './Hex.js'\nimport * as Json from './Json.js'\nimport * as Solidity from './Solidity.js'\nimport type { Compute } from './internal/types.js'\n\nexport type TypedData = abitype.TypedData\nexport type Domain = abitype.TypedDataDomain\nexport type Parameter = abitype.TypedDataParameter\n\n// TODO: Make reusable for Viem?\nexport type Definition<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n  ///\n  primaryTypes = typedData extends TypedData ? keyof typedData : string,\n> = primaryType extends 'EIP712Domain'\n  ? EIP712DomainDefinition<typedData, primaryType>\n  : MessageDefinition<typedData, primaryType, primaryTypes>\n\nexport type EIP712DomainDefinition<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends 'EIP712Domain' = 'EIP712Domain',\n  ///\n  schema extends Record<string, unknown> = typedData extends TypedData\n    ? abitype.TypedDataToPrimitiveTypes<typedData>\n    : Record<string, unknown>,\n> = {\n  types?: typedData | undefined\n} & {\n  primaryType:\n    | 'EIP712Domain'\n    | (primaryType extends 'EIP712Domain' ? primaryType : never)\n  domain: schema extends { EIP712Domain: infer domain }\n    ? domain\n    : Compute<Domain>\n  message?: undefined\n}\n\nexport type MessageDefinition<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData = keyof typedData,\n  ///\n  primaryTypes = typedData extends TypedData ? keyof typedData : string,\n  schema extends Record<string, unknown> = typedData extends TypedData\n    ? abitype.TypedDataToPrimitiveTypes<typedData>\n    : Record<string, unknown>,\n  message = schema[primaryType extends keyof schema\n    ? primaryType\n    : keyof schema],\n> = {\n  types: typedData\n} & {\n  primaryType:\n    | primaryTypes // show all values\n    | (primaryType extends primaryTypes ? primaryType : never) // infer value\n  domain?:\n    | (schema extends { EIP712Domain: infer domain } ? domain : Compute<Domain>)\n    | undefined\n  message: { [_: string]: any } extends message // Check if message was inferred\n    ? Record<string, unknown>\n    : message\n}\n\n/**\n * Asserts that [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) is valid.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * TypedData.assert({\n *   domain: {\n *     name: 'Ether!',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n *   },\n *   primaryType: 'Foo',\n *   types: {\n *     Foo: [\n *       { name: 'address', type: 'address' },\n *       { name: 'name', type: 'string' },\n *       { name: 'foo', type: 'string' },\n *     ],\n *   },\n *   message: {\n *     address: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *     name: 'jxom',\n *     foo: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *   },\n * })\n * ```\n *\n * @param value - The Typed Data to validate.\n */\nexport function assert<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(value: assert.Value<typedData, primaryType>): void {\n  const { domain, message, primaryType, types } =\n    value as unknown as assert.Value\n\n  const validateData = (\n    struct: readonly Parameter[],\n    data: Record<string, unknown>,\n  ) => {\n    for (const param of struct) {\n      const { name, type } = param\n      const value = data[name]\n\n      const integerMatch = type.match(Solidity.integerRegex)\n      if (\n        integerMatch &&\n        (typeof value === 'number' || typeof value === 'bigint')\n      ) {\n        const [, base, size_] = integerMatch\n        // If number cannot be cast to a sized hex value, it is out of range\n        // and will throw.\n        Hex.fromNumber(value, {\n          signed: base === 'int',\n          size: Number.parseInt(size_ ?? '') / 8,\n        })\n      }\n\n      if (\n        type === 'address' &&\n        typeof value === 'string' &&\n        !Address.validate(value)\n      )\n        throw new Address.InvalidAddressError({\n          address: value,\n          cause: new Address.InvalidInputError(),\n        })\n\n      const bytesMatch = type.match(Solidity.bytesRegex)\n      if (bytesMatch) {\n        const [, size] = bytesMatch\n        if (size && Hex.size(value as Hex.Hex) !== Number.parseInt(size))\n          throw new BytesSizeMismatchError({\n            expectedSize: Number.parseInt(size),\n            givenSize: Hex.size(value as Hex.Hex),\n          })\n      }\n\n      const struct = types[type]\n      if (struct) {\n        validateReference(type)\n        validateData(struct, value as Record<string, unknown>)\n      }\n    }\n  }\n\n  // Validate domain types.\n  if (types.EIP712Domain && domain) {\n    if (typeof domain !== 'object') throw new InvalidDomainError({ domain })\n    validateData(types.EIP712Domain, domain)\n  }\n\n  // Validate message types.\n  if (primaryType !== 'EIP712Domain') {\n    if (types[primaryType]) validateData(types[primaryType], message)\n    else throw new InvalidPrimaryTypeError({ primaryType, types })\n  }\n}\n\nexport declare namespace assert {\n  type Value<\n    typedData extends TypedData | Record<string, unknown> = TypedData,\n    primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n  > = Definition<typedData, primaryType>\n\n  type ErrorType =\n    | Address.InvalidAddressError\n    | BytesSizeMismatchError\n    | InvalidPrimaryTypeError\n    | Hex.fromNumber.ErrorType\n    | Hex.size.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Creates [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) [`domainSeparator`](https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator) for the provided domain.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * TypedData.domainSeparator({\n *   name: 'Ether!',\n *   version: '1',\n *   chainId: 1,\n *   verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n * })\n * // @log: '0x9911ee4f58a7059a8f5385248040e6984d80e2c849500fe6a4d11c4fa98c2af3'\n * ```\n *\n * @param domain - The domain for which to create the domain separator.\n * @returns The domain separator.\n */\nexport function domainSeparator(domain: Domain): Hex.Hex {\n  return hashDomain({\n    domain,\n  })\n}\n\nexport declare namespace domainSeparator {\n  type ErrorType = hashDomain.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Encodes typed data in [EIP-712 format](https://eips.ethereum.org/EIPS/eip-712): `0x19 ‖ 0x01 ‖ domainSeparator ‖ hashStruct(message)`.\n *\n * @example\n * ```ts twoslash\n * import { TypedData, Hash } from 'ox'\n *\n * const data = TypedData.encode({ // [!code focus:33]\n *   domain: {\n *     name: 'Ether Mail',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0x0000000000000000000000000000000000000000',\n *   },\n *   types: {\n *     Person: [\n *       { name: 'name', type: 'string' },\n *       { name: 'wallet', type: 'address' },\n *     ],\n *     Mail: [\n *       { name: 'from', type: 'Person' },\n *       { name: 'to', type: 'Person' },\n *       { name: 'contents', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Mail',\n *   message: {\n *     from: {\n *       name: 'Cow',\n *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n *     },\n *     to: {\n *       name: 'Bob',\n *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n *     },\n *     contents: 'Hello, Bob!',\n *   },\n * })\n * // @log: '0x19012fdf3441fcaf4f30c7e16292b258a5d7054a4e2e00dbd7b7d2f467f2b8fb9413c52c0ee5d84264471806290a3f2c4cecfc5490626bf912d01f240d7a274b371e'\n * // @log: (0x19 ‖ 0x01 ‖ domainSeparator ‖ hashStruct(message))\n *\n * const hash = Hash.keccak256(data)\n * ```\n *\n * @param value - The Typed Data to encode.\n * @returns The encoded Typed Data.\n */\nexport function encode<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(value: encode.Value<typedData, primaryType>): Hex.Hex {\n  const { domain = {}, message, primaryType } = value as encode.Value\n\n  const types = {\n    EIP712Domain: extractEip712DomainTypes(domain),\n    ...value.types,\n  } as TypedData\n\n  // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n  // as we can't statically check this with TypeScript.\n  assert({\n    domain,\n    message,\n    primaryType,\n    types,\n  })\n\n  // Typed Data Format: `0x19 ‖ 0x01 ‖ domainSeparator ‖ hashStruct(message)`\n  const parts: Hex.Hex[] = ['0x19', '0x01']\n  if (domain)\n    parts.push(\n      hashDomain({\n        domain,\n        types,\n      }),\n    )\n  if (primaryType !== 'EIP712Domain')\n    parts.push(\n      hashStruct({\n        data: message,\n        primaryType,\n        types,\n      }),\n    )\n\n  return Hex.concat(...parts)\n}\n\nexport declare namespace encode {\n  type Value<\n    typedData extends TypedData | Record<string, unknown> = TypedData,\n    primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n  > = Definition<typedData, primaryType>\n\n  type ErrorType =\n    | extractEip712DomainTypes.ErrorType\n    | hashDomain.ErrorType\n    | hashStruct.ErrorType\n    | assert.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Encodes [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) schema for the provided primaryType.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * TypedData.encodeType({\n *   types: {\n *     Foo: [\n *       { name: 'address', type: 'address' },\n *       { name: 'name', type: 'string' },\n *       { name: 'foo', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Foo',\n * })\n * // @log: 'Foo(address address,string name,string foo)'\n * ```\n *\n * @param value - The Typed Data schema.\n * @returns The encoded type.\n */\nexport function encodeType(value: encodeType.Value): string {\n  const { primaryType, types } = value\n\n  let result = ''\n  const unsortedDeps = findTypeDependencies({ primaryType, types })\n  unsortedDeps.delete(primaryType)\n\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()]\n  for (const type of deps) {\n    result += `${type}(${(types[type] ?? [])\n      .map(({ name, type: t }) => `${t} ${name}`)\n      .join(',')})`\n  }\n\n  return result\n}\n\nexport declare namespace encodeType {\n  type Value = {\n    primaryType: string\n    types: TypedData\n  }\n\n  type ErrorType = findTypeDependencies.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Gets [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) schema for EIP-721 domain.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * TypedData.extractEip712DomainTypes({\n *   name: 'Ether!',\n *   version: '1',\n *   chainId: 1,\n *   verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n * })\n * // @log: [\n * // @log:   { 'name': 'name', 'type': 'string' },\n * // @log:   { 'name': 'version', 'type': 'string' },\n * // @log:   { 'name': 'chainId', 'type': 'uint256' },\n * // @log:   { 'name': 'verifyingContract', 'type': 'address' },\n * // @log: ]\n * ```\n *\n * @param domain - The EIP-712 domain.\n * @returns The EIP-712 domain schema.\n */\nexport function extractEip712DomainTypes(\n  domain: Domain | undefined,\n): Parameter[] {\n  return [\n    typeof domain?.name === 'string' && { name: 'name', type: 'string' },\n    domain?.version && { name: 'version', type: 'string' },\n    typeof domain?.chainId === 'number' && {\n      name: 'chainId',\n      type: 'uint256',\n    },\n    domain?.verifyingContract && {\n      name: 'verifyingContract',\n      type: 'address',\n    },\n    domain?.salt && { name: 'salt', type: 'bytes32' },\n  ].filter(Boolean) as Parameter[]\n}\n\nexport declare namespace extractEip712DomainTypes {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Gets the payload to use for signing typed data in [EIP-712 format](https://eips.ethereum.org/EIPS/eip-712).\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1, TypedData, Hash } from 'ox'\n *\n * const payload = TypedData.getSignPayload({ // [!code focus:99]\n *   domain: {\n *     name: 'Ether Mail',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0x0000000000000000000000000000000000000000',\n *   },\n *   types: {\n *     Person: [\n *       { name: 'name', type: 'string' },\n *       { name: 'wallet', type: 'address' },\n *     ],\n *     Mail: [\n *       { name: 'from', type: 'Person' },\n *       { name: 'to', type: 'Person' },\n *       { name: 'contents', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Mail',\n *   message: {\n *     from: {\n *       name: 'Cow',\n *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n *     },\n *     to: {\n *       name: 'Bob',\n *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n *     },\n *     contents: 'Hello, Bob!',\n *   },\n * })\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @param value - The typed data to get the sign payload for.\n * @returns The payload to use for signing.\n */\nexport function getSignPayload<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(value: encode.Value<typedData, primaryType>): Hex.Hex {\n  return Hash.keccak256(encode(value))\n}\n\nexport declare namespace getSignPayload {\n  type ErrorType =\n    | Hash.keccak256.ErrorType\n    | encode.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Hashes [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) domain.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * TypedData.hashDomain({\n *   domain: {\n *     name: 'Ether Mail',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0x0000000000000000000000000000000000000000',\n *   },\n * })\n * // @log: '0x6192106f129ce05c9075d319c1fa6ea9b3ae37cbd0c1ef92e2be7137bb07baa1'\n * ```\n *\n * @param value - The Typed Data domain and types.\n * @returns The hashed domain.\n */\nexport function hashDomain(value: hashDomain.Value): Hex.Hex {\n  const { domain, types } = value\n  return hashStruct({\n    data: domain,\n    primaryType: 'EIP712Domain',\n    types: {\n      ...types,\n      EIP712Domain: types?.EIP712Domain || extractEip712DomainTypes(domain),\n    },\n  })\n}\n\nexport declare namespace hashDomain {\n  type Value = {\n    /** The Typed Data domain. */\n    domain: Domain\n    /** The Typed Data types. */\n    types?:\n      | {\n          EIP712Domain?: readonly Parameter[] | undefined\n          [key: string]: readonly Parameter[] | undefined\n        }\n      | undefined\n  }\n\n  type ErrorType = hashStruct.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Hashes [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) struct.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * TypedData.hashStruct({\n *   types: {\n *     Foo: [\n *       { name: 'address', type: 'address' },\n *       { name: 'name', type: 'string' },\n *       { name: 'foo', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Foo',\n *   data: {\n *     address: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *     name: 'jxom',\n *     foo: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *   },\n * })\n * // @log: '0x996fb3b6d48c50312d69abdd4c1b6fb02057c85aa86bb8d04c6f023326a168ce'\n * ```\n *\n * @param value - The Typed Data struct to hash.\n * @returns The hashed Typed Data struct.\n */\nexport function hashStruct(value: hashStruct.Value): Hex.Hex {\n  const { data, primaryType, types } = value\n  const encoded = encodeData({\n    data,\n    primaryType,\n    types,\n  })\n  return Hash.keccak256(encoded)\n}\n\nexport declare namespace hashStruct {\n  type Value = {\n    /** The Typed Data struct to hash. */\n    data: Record<string, unknown>\n    /** The primary type of the Typed Data struct. */\n    primaryType: string\n    /** The types of the Typed Data struct. */\n    types: TypedData\n  }\n\n  type ErrorType =\n    | encodeData.ErrorType\n    | Hash.keccak256.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Serializes [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) schema into string.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * TypedData.serialize({\n *   domain: {\n *     name: 'Ether!',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n *   },\n *   primaryType: 'Foo',\n *   types: {\n *     Foo: [\n *       { name: 'address', type: 'address' },\n *       { name: 'name', type: 'string' },\n *       { name: 'foo', type: 'string' },\n *     ],\n *   },\n *   message: {\n *     address: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *     name: 'jxom',\n *     foo: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *   },\n * })\n * // @log: \"{\"domain\":{},\"message\":{\"address\":\"0xb9cab4f0e46f7f6b1024b5a7463734fa68e633f9\",\"name\":\"jxom\",\"foo\":\"0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9\"},\"primaryType\":\"Foo\",\"types\":{\"Foo\":[{\"name\":\"address\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"foo\",\"type\":\"string\"}]}}\"\n * ```\n *\n * @param value - The Typed Data schema to serialize.\n * @returns The serialized Typed Data schema. w\n */\nexport function serialize<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(value: serialize.Value<typedData, primaryType>): string {\n  const {\n    domain: domain_,\n    message: message_,\n    primaryType,\n    types,\n  } = value as unknown as serialize.Value\n\n  const normalizeData = (\n    struct: readonly Parameter[],\n    value: Record<string, unknown>,\n  ) => {\n    const data = { ...value }\n    for (const param of struct) {\n      const { name, type } = param\n      if (type === 'address') data[name] = (data[name] as string).toLowerCase()\n    }\n    return data\n  }\n\n  const domain = (() => {\n    if (!domain_) return {}\n    const type = types.EIP712Domain ?? extractEip712DomainTypes(domain_)\n    return normalizeData(type, domain_)\n  })()\n\n  const message = (() => {\n    if (primaryType === 'EIP712Domain') return undefined\n    if (!types[primaryType]) return {}\n    return normalizeData(types[primaryType], message_)\n  })()\n\n  return Json.stringify({ domain, message, primaryType, types }, (_, value) => {\n    if (typeof value === 'bigint') return value.toString()\n    return value\n  })\n}\n\nexport declare namespace serialize {\n  type Value<\n    typedData extends TypedData | Record<string, unknown> = TypedData,\n    primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n  > = Definition<typedData, primaryType>\n\n  type ErrorType = Json.stringify.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Checks if [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) is valid.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * const valid = TypedData.validate({\n *   domain: {\n *     name: 'Ether!',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n *   },\n *   primaryType: 'Foo',\n *   types: {\n *     Foo: [\n *       { name: 'address', type: 'address' },\n *       { name: 'name', type: 'string' },\n *       { name: 'foo', type: 'string' },\n *     ],\n *   },\n *   message: {\n *     address: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *     name: 'jxom',\n *     foo: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *   },\n * })\n * // @log: true\n * ```\n *\n * @param value - The Typed Data to validate.\n */\nexport function validate<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(value: assert.Value<typedData, primaryType>): boolean {\n  try {\n    assert(value)\n    return true\n  } catch {\n    return false\n  }\n}\n\nexport declare namespace validate {\n  type ErrorType = assert.ErrorType | Errors.GlobalErrorType\n}\n\n/** Thrown when the bytes size of a typed data value does not match the expected size. */\nexport class BytesSizeMismatchError extends Errors.BaseError {\n  override readonly name = 'TypedData.BytesSizeMismatchError'\n\n  constructor({\n    expectedSize,\n    givenSize,\n  }: { expectedSize: number; givenSize: number }) {\n    super(`Expected bytes${expectedSize}, got bytes${givenSize}.`)\n  }\n}\n\n/** Thrown when the domain is invalid. */\nexport class InvalidDomainError extends Errors.BaseError {\n  override readonly name = 'TypedData.InvalidDomainError'\n\n  constructor({ domain }: { domain: unknown }) {\n    super(`Invalid domain \"${Json.stringify(domain)}\".`, {\n      metaMessages: ['Must be a valid EIP-712 domain.'],\n    })\n  }\n}\n\n/** Thrown when the primary type of a typed data value is invalid. */\nexport class InvalidPrimaryTypeError extends Errors.BaseError {\n  override readonly name = 'TypedData.InvalidPrimaryTypeError'\n\n  constructor({\n    primaryType,\n    types,\n  }: { primaryType: string; types: TypedData | Record<string, unknown> }) {\n    super(\n      `Invalid primary type \\`${primaryType}\\` must be one of \\`${JSON.stringify(Object.keys(types))}\\`.`,\n      {\n        metaMessages: ['Check that the primary type is a key in `types`.'],\n      },\n    )\n  }\n}\n\n/** Thrown when the struct type is not a valid type. */\nexport class InvalidStructTypeError extends Errors.BaseError {\n  override readonly name = 'TypedData.InvalidStructTypeError'\n\n  constructor({ type }: { type: string }) {\n    super(`Struct type \"${type}\" is invalid.`, {\n      metaMessages: ['Struct type must not be a Solidity type.'],\n    })\n  }\n}\n\n/** @internal */\nexport function encodeData(value: {\n  data: Record<string, unknown>\n  primaryType: string\n  types: TypedData\n}): Hex.Hex {\n  const { data, primaryType, types } = value\n  const encodedTypes: AbiParameters.Parameter[] = [{ type: 'bytes32' }]\n  const encodedValues: unknown[] = [hashType({ primaryType, types })]\n\n  for (const field of types[primaryType] ?? []) {\n    const [type, value] = encodeField({\n      types,\n      name: field.name,\n      type: field.type,\n      value: data[field.name],\n    })\n    encodedTypes.push(type)\n    encodedValues.push(value)\n  }\n\n  return AbiParameters.encode(encodedTypes, encodedValues)\n}\n\n/** @internal */\nexport declare namespace encodeData {\n  type ErrorType =\n    | AbiParameters.encode.ErrorType\n    | encodeField.ErrorType\n    | hashType.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function hashType(value: {\n  primaryType: string\n  types: TypedData\n}): Hex.Hex {\n  const { primaryType, types } = value\n  const encodedHashType = Hex.fromString(encodeType({ primaryType, types }))\n  return Hash.keccak256(encodedHashType)\n}\n\n/** @internal */\nexport declare namespace hashType {\n  type ErrorType =\n    | Hex.fromString.ErrorType\n    | encodeType.ErrorType\n    | Hash.keccak256.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function encodeField(properties: {\n  types: TypedData\n  name: string\n  type: string\n  value: any\n}): [type: AbiParameters.Parameter, value: Hex.Hex] {\n  let { types, name, type, value } = properties\n\n  if (types[type] !== undefined)\n    return [\n      { type: 'bytes32' },\n      Hash.keccak256(encodeData({ data: value, primaryType: type, types })),\n    ]\n\n  if (type === 'bytes') {\n    const prepend = value.length % 2 ? '0' : ''\n    value = `0x${prepend + value.slice(2)}`\n    return [{ type: 'bytes32' }, Hash.keccak256(value, { as: 'Hex' })]\n  }\n\n  if (type === 'string')\n    return [\n      { type: 'bytes32' },\n      Hash.keccak256(Bytes.fromString(value), { as: 'Hex' }),\n    ]\n\n  if (type.lastIndexOf(']') === type.length - 1) {\n    const parsedType = type.slice(0, type.lastIndexOf('['))\n    const typeValuePairs = (value as [AbiParameters.Parameter, any][]).map(\n      (item) =>\n        encodeField({\n          name,\n          type: parsedType,\n          types,\n          value: item,\n        }),\n    )\n    return [\n      { type: 'bytes32' },\n      Hash.keccak256(\n        AbiParameters.encode(\n          typeValuePairs.map(([t]) => t),\n          typeValuePairs.map(([, v]) => v),\n        ),\n      ),\n    ]\n  }\n\n  return [{ type }, value]\n}\n\n/** @internal */\nexport declare namespace encodeField {\n  type ErrorType =\n    | AbiParameters.encode.ErrorType\n    | Hash.keccak256.ErrorType\n    | Bytes.fromString.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function findTypeDependencies(\n  value: {\n    primaryType: string\n    types: TypedData\n  },\n  results: Set<string> = new Set(),\n): Set<string> {\n  const { primaryType: primaryType_, types } = value\n  const match = primaryType_.match(/^\\w*/u)\n  const primaryType = match?.[0]!\n  if (results.has(primaryType) || types[primaryType] === undefined)\n    return results\n\n  results.add(primaryType)\n\n  for (const field of types[primaryType])\n    findTypeDependencies({ primaryType: field.type, types }, results)\n  return results\n}\n\n/** @internal */\nexport declare namespace findTypeDependencies {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/** @internal */\nfunction validateReference(type: string) {\n  // Struct type must not be a Solidity type.\n  if (\n    type === 'address' ||\n    type === 'bool' ||\n    type === 'string' ||\n    type.startsWith('bytes') ||\n    type.startsWith('uint') ||\n    type.startsWith('int')\n  )\n    throw new InvalidStructTypeError({ type })\n}\n", "import type * as Address from './Address.js'\nimport type * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as Hex from './Hex.js'\n\n/**\n * Encodes data with a validator in [ERC-191 format](https://eips.ethereum.org/EIPS/eip-191#version-0x00): `0x19 ‖ 0x00 ‖ <intended validator address> ‖ <data to sign>`.\n *\n * @example\n * ```ts twoslash\n * import { Hex, ValidatorData } from 'ox'\n *\n * const encoded = ValidatorData.encode({\n *   data: Hex.fromString('hello world'),\n *   validator: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n * })\n * // @log: '0x1900d8da6bf26964af9d7eed9e03e53415d37aa9604568656c6c6f20776f726c64'\n * // @log: '0x19 ‖ 0x00 ‖ 0xd8da6bf26964af9d7eed9e03e53415d37aa96045 ‖ \"hello world\"'\n * ```\n *\n * @param value - The data to encode.\n * @returns The encoded personal sign message.\n */\nexport function encode(value: encode.Value): Hex.Hex {\n  const { data, validator } = value\n  return Hex.concat(\n    // Validator Data Format: `0x19 ‖ 0x00 ‖ <intended validator address> ‖ <data to sign>`\n    '0x19',\n    '0x00',\n    validator,\n    Hex.from(data),\n  )\n}\n\nexport declare namespace encode {\n  type Value = {\n    data: Hex.Hex | Bytes.Bytes\n    validator: Address.Address\n  }\n\n  type ErrorType =\n    | Hex.concat.ErrorType\n    | Hex.from.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Gets the payload to use for signing [ERC-191 formatted](https://eips.ethereum.org/EIPS/eip-191#0x00) data with an intended validator.\n *\n * @example\n * ```ts twoslash\n * import { Hex, Secp256k1, ValidatorData } from 'ox'\n *\n * const payload = ValidatorData.getSignPayload({ // [!code focus]\n *   data: Hex.fromString('hello world'), // [!code focus]\n *   validator: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045', // [!code focus]\n * }) // [!code focus]\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @param value - The data to get the sign payload for.\n * @returns The payload to use for signing.\n */\nexport function getSignPayload(value: getSignPayload.Value): Hex.Hex {\n  return Hash.keccak256(encode(value))\n}\n\nexport declare namespace getSignPayload {\n  type Value = {\n    data: Hex.Hex | Bytes.Bytes\n    validator: Address.Address\n  }\n\n  type ErrorType =\n    | Hash.keccak256.ErrorType\n    | encode.ErrorType\n    | Errors.GlobalErrorType\n}\n", "import * as Base64 from './Base64.js'\nimport * as Bytes from './Bytes.js'\nimport * as Errors from './Errors.js'\nimport * as Hash from './Hash.js'\nimport * as Hex from './Hex.js'\nimport * as P256 from './P256.js'\nimport type * as PublicKey from './PublicKey.js'\nimport type * as Signature from './Signature.js'\nimport type { Compute, OneOf } from './internal/types.js'\nimport * as internal from './internal/webauthn.js'\n\n/** A WebAuthn-flavored P256 credential. */\nexport type P256Credential = {\n  id: string\n  publicKey: PublicKey.PublicKey\n  raw: internal.PublicKeyCredential\n}\n\n/** Metadata for a WebAuthn P256 signature. */\nexport type SignMetadata = Compute<{\n  authenticatorData: Hex.Hex\n  challengeIndex: number\n  clientDataJSON: string\n  typeIndex: number\n  userVerificationRequired: boolean\n}>\n\nexport const createChallenge = Uint8Array.from([\n  105, 171, 180, 181, 160, 222, 75, 198, 42, 42, 32, 31, 141, 37, 186, 233,\n])\n\n/**\n * Creates a new WebAuthn P256 Credential, which can be stored and later used for signing.\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const credential = await WebAuthnP256.createCredential({ name: 'Example' }) // [!code focus]\n * // @log: {\n * // @log:   id: 'oZ48...',\n * // @log:   publicKey: { x: 51421...5123n, y: 12345...6789n },\n * // @log:   raw: PublicKeyCredential {},\n * // @log: }\n *\n * const { metadata, signature } = await WebAuthnP256.sign({\n *   credentialId: credential.id,\n *   challenge: '0xdeadbeef',\n * })\n * ```\n *\n * @param options - Credential creation options.\n * @returns A WebAuthn P256 credential.\n */\nexport async function createCredential(\n  options: createCredential.Options,\n): Promise<P256Credential> {\n  const {\n    createFn = window.navigator.credentials.create.bind(\n      window.navigator.credentials,\n    ),\n    ...rest\n  } = options\n  const creationOptions = getCredentialCreationOptions(rest)\n  try {\n    const credential = (await createFn(\n      creationOptions,\n    )) as internal.PublicKeyCredential\n    if (!credential) throw new CredentialCreationFailedError()\n\n    const response = credential.response as AuthenticatorAttestationResponse\n    const publicKey = await internal.parseCredentialPublicKey(response)\n\n    return {\n      id: credential.id,\n      publicKey,\n      raw: credential,\n    }\n  } catch (error) {\n    throw new CredentialCreationFailedError({\n      cause: error as Error,\n    })\n  }\n}\n\nexport declare namespace createCredential {\n  type Options = getCredentialCreationOptions.Options & {\n    /**\n     * Credential creation function. Useful for environments that do not support\n     * the WebAuthn API natively (i.e. React Native or testing environments).\n     *\n     * @default window.navigator.credentials.create\n     */\n    createFn?:\n      | ((\n          options?: internal.CredentialCreationOptions | undefined,\n        ) => Promise<internal.Credential | null>)\n      | undefined\n  }\n\n  type ErrorType =\n    | getCredentialCreationOptions.ErrorType\n    | internal.parseCredentialPublicKey.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Gets the authenticator data which contains information about the\n * processing of an authenticator request (ie. from `WebAuthnP256.sign`).\n *\n * :::warning\n *\n * This function is mainly for testing purposes or for manually constructing\n * autenticator data. In most cases you will not need this function.\n * `authenticatorData` is typically returned as part of the\n * {@link ox#WebAuthnP256.(sign:function)} response (ie. an authenticator response).\n *\n * :::\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const authenticatorData = WebAuthnP256.getAuthenticatorData({\n *   rpId: 'example.com',\n *   signCount: 420,\n * })\n * // @log: \"0xa379a6f6eeafb9a55e378c118034e2751e682fab9f2d30ab13d2125586ce194705000001a4\"\n * ```\n *\n * @param options - Options to construct the authenticator data.\n * @returns The authenticator data.\n */\nexport function getAuthenticatorData(\n  options: getAuthenticatorData.Options = {},\n): Hex.Hex {\n  const { flag = 5, rpId = window.location.hostname, signCount = 0 } = options\n  const rpIdHash = Hash.sha256(Hex.fromString(rpId))\n  const flag_bytes = Hex.fromNumber(flag, { size: 1 })\n  const signCount_bytes = Hex.fromNumber(signCount, { size: 4 })\n  return Hex.concat(rpIdHash, flag_bytes, signCount_bytes)\n}\n\nexport declare namespace getAuthenticatorData {\n  type Options = {\n    /** A bitfield that indicates various attributes that were asserted by the authenticator. [Read more](https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Authenticator_data#flags) */\n    flag?: number | undefined\n    /** The [Relying Party ID](https://w3c.github.io/webauthn/#relying-party-identifier) that the credential is scoped to. */\n    rpId?: internal.PublicKeyCredentialRequestOptions['rpId'] | undefined\n    /** A signature counter, if supported by the authenticator (set to 0 otherwise). */\n    signCount?: number | undefined\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Constructs the Client Data in stringified JSON format which represents client data that\n * was passed to `credentials.get()` in {@link ox#WebAuthnP256.(sign:function)}.\n *\n * :::warning\n *\n * This function is mainly for testing purposes or for manually constructing\n * client data. In most cases you will not need this function.\n * `clientDataJSON` is typically returned as part of the\n * {@link ox#WebAuthnP256.(sign:function)} response (ie. an authenticator response).\n *\n * :::\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const clientDataJSON = WebAuthnP256.getClientDataJSON({\n *   challenge: '0xdeadbeef',\n *   origin: 'https://example.com',\n * })\n * // @log: \"{\"type\":\"webauthn.get\",\"challenge\":\"3q2-7w\",\"origin\":\"https://example.com\",\"crossOrigin\":false}\"\n * ```\n *\n * @param options - Options to construct the client data.\n * @returns The client data.\n */\nexport function getClientDataJSON(options: getClientDataJSON.Options): string {\n  const {\n    challenge,\n    crossOrigin = false,\n    extraClientData,\n    origin = window.location.origin,\n  } = options\n\n  return JSON.stringify({\n    type: 'webauthn.get',\n    challenge: Base64.fromHex(challenge, { url: true, pad: false }),\n    origin,\n    crossOrigin,\n    ...extraClientData,\n  })\n}\n\nexport declare namespace getClientDataJSON {\n  type Options = {\n    /** The challenge to sign. */\n    challenge: Hex.Hex\n    /** If set to `true`, it means that the calling context is an `<iframe>` that is not same origin with its ancestor frames. */\n    crossOrigin?: boolean | undefined\n    /** Additional client data to include in the client data JSON. */\n    extraClientData?: Record<string, unknown> | undefined\n    /** The fully qualified origin of the relying party which has been given by the client/browser to the authenticator. */\n    origin?: string | undefined\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Returns the creation options for a P256 WebAuthn Credential to be used with\n * the Web Authentication API.\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const options = WebAuthnP256.getCredentialCreationOptions({ name: 'Example' })\n *\n * const credential = await window.navigator.credentials.create(options)\n * ```\n *\n * @param options - Options.\n * @returns The credential creation options.\n */\nexport function getCredentialCreationOptions(\n  options: getCredentialCreationOptions.Options,\n): internal.CredentialCreationOptions {\n  const {\n    attestation = 'none',\n    authenticatorSelection = {\n      residentKey: 'preferred',\n      requireResidentKey: false,\n      userVerification: 'required',\n    },\n    challenge = createChallenge,\n    excludeCredentialIds,\n    name: name_,\n    rp = {\n      id: window.location.hostname,\n      name: window.document.title,\n    },\n    user,\n    extensions,\n  } = options\n  const name = (user?.name ?? name_)!\n  return {\n    publicKey: {\n      attestation,\n      authenticatorSelection,\n      challenge,\n      ...(excludeCredentialIds\n        ? {\n            excludeCredentials: excludeCredentialIds?.map((id) => ({\n              id: Base64.toBytes(id),\n              type: 'public-key',\n            })),\n          }\n        : {}),\n      pubKeyCredParams: [\n        {\n          type: 'public-key',\n          alg: -7, // p256\n        },\n      ],\n      rp,\n      user: {\n        id: user?.id ?? Hash.keccak256(Bytes.fromString(name), { as: 'Bytes' }),\n        name,\n        displayName: user?.displayName ?? name,\n      },\n      extensions,\n    },\n  } as internal.CredentialCreationOptions\n}\n\nexport declare namespace getCredentialCreationOptions {\n  type Options = {\n    /**\n     * A string specifying the relying party's preference for how the attestation statement\n     * (i.e., provision of verifiable evidence of the authenticity of the authenticator and its data)\n     * is conveyed during credential creation.\n     */\n    attestation?:\n      | internal.PublicKeyCredentialCreationOptions['attestation']\n      | undefined\n    /**\n     * An object whose properties are criteria used to filter out the potential authenticators\n     * for the credential creation operation.\n     */\n    authenticatorSelection?:\n      | internal.PublicKeyCredentialCreationOptions['authenticatorSelection']\n      | undefined\n    /**\n     * An `ArrayBuffer`, `TypedArray`, or `DataView` used as a cryptographic challenge.\n     */\n    challenge?:\n      | internal.PublicKeyCredentialCreationOptions['challenge']\n      | undefined\n    /**\n     * List of credential IDs to exclude from the creation. This property can be used\n     * to prevent creation of a credential if it already exists.\n     */\n    excludeCredentialIds?: readonly string[] | undefined\n    /**\n     * List of Web Authentication API credentials to use during creation or authentication.\n     */\n    extensions?:\n      | internal.PublicKeyCredentialCreationOptions['extensions']\n      | undefined\n    /**\n     * An object describing the relying party that requested the credential creation\n     */\n    rp?:\n      | {\n          id: string\n          name: string\n        }\n      | undefined\n    /**\n     * A numerical hint, in milliseconds, which indicates the time the calling web app is willing to wait for the creation operation to complete.\n     */\n    timeout?: internal.PublicKeyCredentialCreationOptions['timeout'] | undefined\n  } & OneOf<\n    | {\n        /** Name for the credential (user.name). */\n        name: string\n      }\n    | {\n        /**\n         * An object describing the user account for which the credential is generated.\n         */\n        user: {\n          displayName?: string\n          id?: BufferSource\n          name: string\n        }\n      }\n  >\n\n  type ErrorType =\n    | Base64.toBytes.ErrorType\n    | Hash.keccak256.ErrorType\n    | Bytes.fromString.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Returns the request options to sign a challenge with the Web Authentication API.\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const options = WebAuthnP256.getCredentialRequestOptions({\n *   challenge: '0xdeadbeef',\n * })\n *\n * const credential = await window.navigator.credentials.get(options)\n * ```\n *\n * @param options - Options.\n * @returns The credential request options.\n */\nexport function getCredentialRequestOptions(\n  options: getCredentialRequestOptions.Options,\n): internal.CredentialRequestOptions {\n  const {\n    credentialId,\n    challenge,\n    rpId = window.location.hostname,\n    userVerification = 'required',\n  } = options\n  return {\n    publicKey: {\n      ...(credentialId\n        ? {\n            allowCredentials: Array.isArray(credentialId)\n              ? credentialId.map((id) => ({\n                  id: Base64.toBytes(id),\n                  type: 'public-key',\n                }))\n              : [\n                  {\n                    id: Base64.toBytes(credentialId),\n                    type: 'public-key',\n                  },\n                ],\n          }\n        : {}),\n      challenge: Bytes.fromHex(challenge),\n      rpId,\n      userVerification,\n    },\n  }\n}\n\nexport declare namespace getCredentialRequestOptions {\n  type Options = {\n    /** The credential ID to use. */\n    credentialId?: string | string[] | undefined\n    /** The challenge to sign. */\n    challenge: Hex.Hex\n    /** The relying party identifier to use. */\n    rpId?: internal.PublicKeyCredentialRequestOptions['rpId'] | undefined\n    /** The user verification requirement. */\n    userVerification?:\n      | internal.PublicKeyCredentialRequestOptions['userVerification']\n      | undefined\n  }\n\n  type ErrorType =\n    | Bytes.fromHex.ErrorType\n    | Base64.toBytes.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Constructs the final digest that was signed and computed by the authenticator. This payload includes\n * the cryptographic `challenge`, as well as authenticator metadata (`authenticatorData` + `clientDataJSON`).\n * This value can be also used with raw P256 verification (such as {@link ox#P256.(verify:function)} or\n * {@link ox#WebCryptoP256.(verify:function)}).\n *\n * :::warning\n *\n * This function is mainly for testing purposes or for manually constructing\n * signing payloads. In most cases you will not need this function and\n * instead use {@link ox#WebAuthnP256.(sign:function)}.\n *\n * :::\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256, WebCryptoP256 } from 'ox'\n *\n * const { metadata, payload } = WebAuthnP256.getSignPayload({ // [!code focus]\n *   challenge: '0xdeadbeef', // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   metadata: {\n * // @log:     authenticatorData: \"0x49960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97630500000000\",\n * // @log:     challengeIndex: 23,\n * // @log:     clientDataJSON: \"{\"type\":\"webauthn.get\",\"challenge\":\"9jEFijuhEWrM4SOW-tChJbUEHEP44VcjcJ-Bqo1fTM8\",\"origin\":\"http://localhost:5173\",\"crossOrigin\":false}\",\n * // @log:     typeIndex: 1,\n * // @log:     userVerificationRequired: true,\n * // @log:   },\n * // @log:   payload: \"0x49960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d9763050000000045086dcb06a5f234db625bcdc94e657f86b76b6fd3eb9c30543eabc1e577a4b0\",\n * // @log: }\n *\n * const { publicKey, privateKey } = await WebCryptoP256.createKeyPair()\n *\n * const signature = await WebCryptoP256.sign({\n *   payload,\n *   privateKey,\n * })\n * ```\n *\n * @param options - Options to construct the signing payload.\n * @returns The signing payload.\n */\nexport function getSignPayload(\n  options: getSignPayload.Options,\n): getSignPayload.ReturnType {\n  const {\n    challenge,\n    crossOrigin,\n    extraClientData,\n    flag,\n    origin,\n    rpId,\n    signCount,\n    userVerification = 'required',\n  } = options\n\n  const authenticatorData = getAuthenticatorData({\n    flag,\n    rpId,\n    signCount,\n  })\n  const clientDataJSON = getClientDataJSON({\n    challenge,\n    crossOrigin,\n    extraClientData,\n    origin,\n  })\n  const clientDataJSONHash = Hash.sha256(Hex.fromString(clientDataJSON))\n\n  const challengeIndex = clientDataJSON.indexOf('\"challenge\"')\n  const typeIndex = clientDataJSON.indexOf('\"type\"')\n\n  const metadata = {\n    authenticatorData,\n    clientDataJSON,\n    challengeIndex,\n    typeIndex,\n    userVerificationRequired: userVerification === 'required',\n  }\n\n  const payload = Hex.concat(authenticatorData, clientDataJSONHash)\n\n  return { metadata, payload }\n}\n\nexport declare namespace getSignPayload {\n  type Options = {\n    /** The challenge to sign. */\n    challenge: Hex.Hex\n    /** If set to `true`, it means that the calling context is an `<iframe>` that is not same origin with its ancestor frames. */\n    crossOrigin?: boolean | undefined\n    /** Additional client data to include in the client data JSON. */\n    extraClientData?: Record<string, unknown> | undefined\n    /** If set to `true`, the payload will be hashed before being returned. */\n    hash?: boolean | undefined\n    /** A bitfield that indicates various attributes that were asserted by the authenticator. [Read more](https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Authenticator_data#flags) */\n    flag?: number | undefined\n    /** The fully qualified origin of the relying party which has been given by the client/browser to the authenticator. */\n    origin?: string | undefined\n    /** The [Relying Party ID](https://w3c.github.io/webauthn/#relying-party-identifier) that the credential is scoped to. */\n    rpId?: internal.PublicKeyCredentialRequestOptions['rpId'] | undefined\n    /** A signature counter, if supported by the authenticator (set to 0 otherwise). */\n    signCount?: number | undefined\n    /** The user verification requirement that the authenticator will enforce. */\n    userVerification?:\n      | internal.PublicKeyCredentialRequestOptions['userVerification']\n      | undefined\n  }\n\n  type ReturnType = {\n    metadata: SignMetadata\n    payload: Hex.Hex\n  }\n\n  type ErrorType =\n    | Hash.sha256.ErrorType\n    | Hex.concat.ErrorType\n    | Hex.fromString.ErrorType\n    | getAuthenticatorData.ErrorType\n    | getClientDataJSON.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Signs a challenge using a stored WebAuthn P256 Credential. If no Credential is provided,\n * a prompt will be displayed for the user to select an existing Credential\n * that was previously registered.\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const credential = await WebAuthnP256.createCredential({\n *   name: 'Example',\n * })\n *\n * const { metadata, signature } = await WebAuthnP256.sign({ // [!code focus]\n *   credentialId: credential.id, // [!code focus]\n *   challenge: '0xdeadbeef', // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   metadata: {\n * // @log:     authenticatorData: '0x49960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97630500000000',\n * // @log:     clientDataJSON: '{\"type\":\"webauthn.get\",\"challenge\":\"9jEFijuhEWrM4SOW-tChJbUEHEP44VcjcJ-Bqo1fTM8\",\"origin\":\"http://localhost:5173\",\"crossOrigin\":false}',\n * // @log:     challengeIndex: 23,\n * // @log:     typeIndex: 1,\n * // @log:     userVerificationRequired: true,\n * // @log:   },\n * // @log:   signature: { r: 51231...4215n, s: 12345...6789n },\n * // @log: }\n * ```\n *\n * @param options - Options.\n * @returns The signature.\n */\nexport async function sign(options: sign.Options): Promise<sign.ReturnType> {\n  const {\n    getFn = window.navigator.credentials.get.bind(window.navigator.credentials),\n    ...rest\n  } = options\n  const requestOptions = getCredentialRequestOptions(rest)\n  try {\n    const credential = (await getFn(\n      requestOptions,\n    )) as internal.PublicKeyCredential\n    if (!credential) throw new CredentialRequestFailedError()\n    const response = credential.response as AuthenticatorAssertionResponse\n\n    const clientDataJSON = String.fromCharCode(\n      ...new Uint8Array(response.clientDataJSON),\n    )\n    const challengeIndex = clientDataJSON.indexOf('\"challenge\"')\n    const typeIndex = clientDataJSON.indexOf('\"type\"')\n\n    const signature = internal.parseAsn1Signature(\n      new Uint8Array(response.signature),\n    )\n\n    return {\n      metadata: {\n        authenticatorData: Hex.fromBytes(\n          new Uint8Array(response.authenticatorData),\n        ),\n        clientDataJSON,\n        challengeIndex,\n        typeIndex,\n        userVerificationRequired:\n          requestOptions.publicKey!.userVerification === 'required',\n      },\n      signature,\n      raw: credential,\n    }\n  } catch (error) {\n    throw new CredentialRequestFailedError({\n      cause: error as Error,\n    })\n  }\n}\n\nexport declare namespace sign {\n  type Options = getCredentialRequestOptions.Options & {\n    /**\n     * Credential request function. Useful for environments that do not support\n     * the WebAuthn API natively (i.e. React Native or testing environments).\n     *\n     * @default window.navigator.credentials.get\n     */\n    getFn?:\n      | ((\n          options?: internal.CredentialRequestOptions | undefined,\n        ) => Promise<internal.Credential | null>)\n      | undefined\n  }\n\n  type ReturnType = {\n    metadata: SignMetadata\n    raw: internal.PublicKeyCredential\n    signature: Signature.Signature<false>\n  }\n\n  type ErrorType =\n    | Hex.fromBytes.ErrorType\n    | getCredentialRequestOptions.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/**\n * Verifies a signature using the Credential's public key and the challenge which was signed.\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const credential = await WebAuthnP256.createCredential({\n *   name: 'Example',\n * })\n *\n * const { metadata, signature } = await WebAuthnP256.sign({\n *   credentialId: credential.id,\n *   challenge: '0xdeadbeef',\n * })\n *\n * const result = await WebAuthnP256.verify({ // [!code focus]\n *   metadata, // [!code focus]\n *   challenge: '0xdeadbeef', // [!code focus]\n *   publicKey: credential.publicKey, // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: true\n * ```\n *\n * @param options - Options.\n * @returns Whether the signature is valid.\n */\nexport function verify(options: verify.Options): boolean {\n  const { challenge, hash = true, metadata, publicKey, signature } = options\n  const {\n    authenticatorData,\n    challengeIndex,\n    clientDataJSON,\n    typeIndex,\n    userVerificationRequired,\n  } = metadata\n\n  const authenticatorDataBytes = Bytes.fromHex(authenticatorData)\n\n  // Check length of `authenticatorData`.\n  if (authenticatorDataBytes.length < 37) return false\n\n  const flag = authenticatorDataBytes[32]!\n\n  // Verify that the UP bit of the flags in authData is set.\n  if ((flag & 0x01) !== 0x01) return false\n\n  // If user verification was determined to be required, verify that\n  // the UV bit of the flags in authData is set. Otherwise, ignore the\n  // value of the UV flag.\n  if (userVerificationRequired && (flag & 0x04) !== 0x04) return false\n\n  // If the BE bit of the flags in authData is not set, verify that\n  // the BS bit is not set.\n  if ((flag & 0x08) !== 0x08 && (flag & 0x10) === 0x10) return false\n\n  // Check that response is for an authentication assertion\n  const type = '\"type\":\"webauthn.get\"'\n  if (type !== clientDataJSON.slice(Number(typeIndex), type.length + 1))\n    return false\n\n  // Check that hash is in the clientDataJSON.\n  const match = clientDataJSON\n    .slice(Number(challengeIndex))\n    .match(/^\"challenge\":\"(.*?)\"/)\n  if (!match) return false\n\n  // Validate the challenge in the clientDataJSON.\n  const [_, challenge_extracted] = match\n  if (Hex.fromBytes(Base64.toBytes(challenge_extracted!)) !== challenge)\n    return false\n\n  const clientDataJSONHash = Hash.sha256(Bytes.fromString(clientDataJSON), {\n    as: 'Bytes',\n  })\n  const payload = Bytes.concat(authenticatorDataBytes, clientDataJSONHash)\n\n  return P256.verify({\n    hash,\n    payload,\n    publicKey,\n    signature,\n  })\n}\n\nexport declare namespace verify {\n  type Options = {\n    /** The challenge to verify. */\n    challenge: Hex.Hex\n    /** If set to `true`, the payload will be hashed (sha256) before being verified. */\n    hash?: boolean | undefined\n    /** The public key to verify the signature with. */\n    publicKey: PublicKey.PublicKey\n    /** The signature to verify. */\n    signature: Signature.Signature<false>\n    /** The metadata to verify the signature with. */\n    metadata: SignMetadata\n  }\n\n  type ErrorType =\n    | Base64.toBytes.ErrorType\n    | Bytes.concat.ErrorType\n    | Bytes.fromHex.ErrorType\n    | P256.verify.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** Thrown when a WebAuthn P256 credential creation fails. */\nexport class CredentialCreationFailedError extends Errors.BaseError<Error> {\n  override readonly name = 'WebAuthnP256.CredentialCreationFailedError'\n\n  constructor({ cause }: { cause?: Error | undefined } = {}) {\n    super('Failed to create credential.', {\n      cause,\n    })\n  }\n}\n\n/** Thrown when a WebAuthn P256 credential request fails. */\nexport class CredentialRequestFailedError extends Errors.BaseError<Error> {\n  override readonly name = 'WebAuthnP256.CredentialRequestFailedError'\n\n  constructor({ cause }: { cause?: Error | undefined } = {}) {\n    super('Failed to request credential.', {\n      cause,\n    })\n  }\n}\n", "import { p256 } from '@noble/curves/p256'\nimport type * as Errors from '../Errors.js'\nimport * as Hex from '../Hex.js'\nimport * as PublicKey from '../PublicKey.js'\nimport { CredentialCreationFailedError } from '../WebAuthnP256.js'\n\n/** @internal */\nexport type AttestationConveyancePreference =\n  | 'direct'\n  | 'enterprise'\n  | 'indirect'\n  | 'none'\n\n/** @internal */\nexport type AuthenticatorAttachment = 'cross-platform' | 'platform'\n\n/** @internal */\nexport type AuthenticatorTransport =\n  | 'ble'\n  | 'hybrid'\n  | 'internal'\n  | 'nfc'\n  | 'usb'\n\n/** @internal */\nexport type COSEAlgorithmIdentifier = number\n\n/** @internal */\nexport type CredentialMediationRequirement =\n  | 'conditional'\n  | 'optional'\n  | 'required'\n  | 'silent'\n\n/** @internal */\nexport type PublicKeyCredentialType = 'public-key'\n\n/** @internal */\nexport type ResidentKeyRequirement = 'discouraged' | 'preferred' | 'required'\n\n/** @internal */\nexport type UserVerificationRequirement =\n  | 'discouraged'\n  | 'preferred'\n  | 'required'\n\n/** @internal */\nexport type LargeBlobSupport = {\n  support: 'required' | 'preferred'\n}\n\n/** @internal */\nexport type BufferSource = ArrayBufferView | ArrayBuffer\n\n/** @internal */\nexport type PrfExtension = Record<'eval', Record<'first', Uint8Array>>\n\n/** @internal */\nexport interface AuthenticationExtensionsClientInputs {\n  appid?: string\n  credProps?: boolean\n  hmacCreateSecret?: boolean\n  minPinLength?: boolean\n  prf?: PrfExtension\n  largeBlob?: LargeBlobSupport\n}\n\n/** @internal */\nexport interface AuthenticatorSelectionCriteria {\n  authenticatorAttachment?: AuthenticatorAttachment\n  requireResidentKey?: boolean\n  residentKey?: ResidentKeyRequirement\n  userVerification?: UserVerificationRequirement\n}\n\n/** @internal */\nexport interface Credential {\n  readonly id: string\n  readonly type: string\n}\n\n/** @internal */\nexport interface CredentialCreationOptions {\n  publicKey?: PublicKeyCredentialCreationOptions\n  signal?: AbortSignal\n}\n\n/** @internal */\nexport interface CredentialRequestOptions {\n  mediation?: CredentialMediationRequirement\n  publicKey?: PublicKeyCredentialRequestOptions\n  signal?: AbortSignal\n}\n\n/** @internal */\nexport interface PublicKeyCredential extends Credential {\n  readonly authenticatorAttachment: string | null\n  readonly rawId: ArrayBuffer\n  readonly response: AuthenticatorResponse\n  getClientExtensionResults(): AuthenticationExtensionsClientOutputs\n}\n\n/** @internal */\nexport interface PublicKeyCredentialCreationOptions {\n  attestation?: AttestationConveyancePreference\n  authenticatorSelection?: AuthenticatorSelectionCriteria\n  challenge: BufferSource\n  excludeCredentials?: PublicKeyCredentialDescriptor[]\n  extensions?: AuthenticationExtensionsClientInputs\n  pubKeyCredParams: PublicKeyCredentialParameters[]\n  rp: PublicKeyCredentialRpEntity\n  timeout?: number\n  user: PublicKeyCredentialUserEntity\n}\n\n/** @internal */\nexport interface PublicKeyCredentialDescriptor {\n  id: BufferSource\n  transports?: AuthenticatorTransport[]\n  type: PublicKeyCredentialType\n}\n\n/** @internal */\nexport interface PublicKeyCredentialEntity {\n  name: string\n}\n\n/** @internal */\nexport interface PublicKeyCredentialParameters {\n  alg: COSEAlgorithmIdentifier\n  type: PublicKeyCredentialType\n}\n\n/** @internal */\nexport interface PublicKeyCredentialRequestOptions {\n  allowCredentials?: PublicKeyCredentialDescriptor[]\n  challenge: BufferSource\n  extensions?: AuthenticationExtensionsClientInputs\n  rpId?: string\n  timeout?: number\n  userVerification?: UserVerificationRequirement\n}\n\n/** @internal */\nexport interface PublicKeyCredentialRpEntity extends PublicKeyCredentialEntity {\n  id?: string\n}\n\n/** @internal */\nexport interface PublicKeyCredentialUserEntity\n  extends PublicKeyCredentialEntity {\n  displayName: string\n  id: BufferSource\n}\n\n/**\n * Parses an ASN.1 signature into a r and s value.\n *\n * @internal\n */\nexport function parseAsn1Signature(bytes: Uint8Array) {\n  const r_start = bytes[4] === 0 ? 5 : 4\n  const r_end = r_start + 32\n  const s_start = bytes[r_end + 2] === 0 ? r_end + 3 : r_end + 2\n\n  const r = BigInt(Hex.fromBytes(bytes.slice(r_start, r_end)))\n  const s = BigInt(Hex.fromBytes(bytes.slice(s_start)))\n\n  return {\n    r,\n    s: s > p256.CURVE.n / 2n ? p256.CURVE.n - s : s,\n  }\n}\n\n/**\n * Parses a public key into x and y coordinates from the public key\n * defined on the credential.\n *\n * @internal\n */\nexport async function parseCredentialPublicKey(\n  response: AuthenticatorAttestationResponse,\n): Promise<PublicKey.PublicKey> {\n  try {\n    const publicKeyBuffer = response.getPublicKey()\n    if (!publicKeyBuffer) throw new CredentialCreationFailedError()\n\n    // Converting `publicKeyBuffer` throws when credential is created by 1Password Firefox Add-on\n    const publicKeyBytes = new Uint8Array(publicKeyBuffer)\n    const cryptoKey = await crypto.subtle.importKey(\n      'spki',\n      new Uint8Array(publicKeyBytes),\n      {\n        name: 'ECDSA',\n        namedCurve: 'P-256',\n        hash: 'SHA-256',\n      },\n      true,\n      ['verify'],\n    )\n    const publicKey = new Uint8Array(\n      await crypto.subtle.exportKey('raw', cryptoKey),\n    )\n    return PublicKey.from(publicKey)\n  } catch (error) {\n    // Fallback for 1Password Firefox Add-on restricts access to certain credential properties\n    // so we need to use `attestationObject` to extract the public key.\n    // https://github.com/passwordless-id/webauthn/issues/50#issuecomment-2072902094\n    if ((error as Error).message !== 'Permission denied to access object')\n      throw error\n\n    const data = new Uint8Array(response.attestationObject)\n    const coordinateLength = 0x20\n    const cborPrefix = 0x58\n\n    const findStart = (key: number) => {\n      const coordinate = new Uint8Array([key, cborPrefix, coordinateLength])\n      for (let i = 0; i < data.length - coordinate.length; i++)\n        if (coordinate.every((byte, j) => data[i + j] === byte))\n          return i + coordinate.length\n      throw new CredentialCreationFailedError()\n    }\n\n    const xStart = findStart(0x21)\n    const yStart = findStart(0x22)\n\n    return PublicKey.from(\n      new Uint8Array([\n        0x04,\n        ...data.slice(xStart, xStart + coordinateLength),\n        ...data.slice(yStart, yStart + coordinateLength),\n      ]),\n    )\n  }\n}\n\nexport declare namespace parseCredentialPublicKey {\n  type ErrorType = CredentialCreationFailedError | Errors.GlobalErrorType\n}\n", "import { p256 } from '@noble/curves/p256'\nimport * as Bytes from './Bytes.js'\nimport type * as Errors from './Errors.js'\nimport type * as Hex from './Hex.js'\nimport * as PublicKey from './PublicKey.js'\nimport type * as Signature from './Signature.js'\nimport type { Compute } from './internal/types.js'\n\n/**\n * Generates an ECDSA P256 key pair that includes:\n *\n * - a `privateKey` of type [`CryptoKey`](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey)\n *\n * - a `publicKey` of type {@link ox#Hex.Hex} or {@link ox#Bytes.Bytes}\n *\n * @example\n * ```ts twoslash\n * import { WebCryptoP256 } from 'ox'\n *\n * const { publicKey, privateKey } = await WebCryptoP256.createKeyPair()\n * // @log: {\n * // @log:   privateKey: CryptoKey {},\n * // @log:   publicKey: {\n * // @log:     x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n * // @log:     y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * // @log:     prefix: 4,\n * // @log:   },\n * // @log: }\n * ```\n *\n * @param options - Options for creating the key pair.\n * @returns The key pair.\n */\nexport async function createKeyPair(\n  options: createKeyPair.Options = {},\n): Promise<createKeyPair.ReturnType> {\n  const { extractable = false } = options\n  const keypair = await globalThis.crypto.subtle.generateKey(\n    {\n      name: 'ECDSA',\n      namedCurve: 'P-256',\n    },\n    extractable,\n    ['sign', 'verify'],\n  )\n  const publicKey_raw = await globalThis.crypto.subtle.exportKey(\n    'raw',\n    keypair.publicKey,\n  )\n  const publicKey = PublicKey.from(new Uint8Array(publicKey_raw))\n  return {\n    privateKey: keypair.privateKey,\n    publicKey,\n  }\n}\n\nexport declare namespace createKeyPair {\n  type Options = {\n    /** A boolean value indicating whether it will be possible to export the private key using `globalThis.crypto.subtle.exportKey()`. */\n    extractable?: boolean | undefined\n  }\n\n  type ReturnType = Compute<{\n    privateKey: CryptoKey\n    publicKey: PublicKey.PublicKey\n  }>\n\n  type ErrorType = PublicKey.from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Signs a payload with the provided `CryptoKey` private key and returns a P256 signature.\n *\n * @example\n * ```ts twoslash\n * import { WebCryptoP256 } from 'ox'\n *\n * const { privateKey } = await WebCryptoP256.createKeyPair()\n *\n * const signature = await WebCryptoP256.sign({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   privateKey, // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   r: 151231...4423n,\n * // @log:   s: 516123...5512n,\n * // @log: }\n * ```\n *\n * @param options - Options for signing the payload.\n * @returns The P256 ECDSA {@link ox#Signature.Signature}.\n */\nexport async function sign(\n  options: sign.Options,\n): Promise<Signature.Signature<false>> {\n  const { payload, privateKey } = options\n  const signature = await globalThis.crypto.subtle.sign(\n    {\n      name: 'ECDSA',\n      hash: 'SHA-256',\n    },\n    privateKey,\n    Bytes.from(payload),\n  )\n  const signature_bytes = Bytes.fromArray(new Uint8Array(signature))\n  const r = Bytes.toBigInt(Bytes.slice(signature_bytes, 0, 32))\n  let s = Bytes.toBigInt(Bytes.slice(signature_bytes, 32, 64))\n  if (s > p256.CURVE.n / 2n) s = p256.CURVE.n - s\n  return { r, s }\n}\n\nexport declare namespace sign {\n  type Options = {\n    /** Payload to sign. */\n    payload: Hex.Hex | Bytes.Bytes\n    /** ECDSA private key. */\n    privateKey: CryptoKey\n  }\n\n  type ErrorType = Bytes.fromArray.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Verifies a payload was signed by the provided public key.\n *\n * @example\n *\n * ```ts twoslash\n * import { WebCryptoP256 } from 'ox'\n *\n * const { privateKey, publicKey } = await WebCryptoP256.createKeyPair()\n * const signature = await WebCryptoP256.sign({ payload: '0xdeadbeef', privateKey })\n *\n * const verified = await WebCryptoP256.verify({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   publicKey, // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: true\n * ```\n *\n * @param options - The verification options.\n * @returns Whether the payload was signed by the provided public key.\n */\nexport async function verify(options: verify.Options): Promise<boolean> {\n  const { payload, signature } = options\n\n  const publicKey = await globalThis.crypto.subtle.importKey(\n    'raw',\n    PublicKey.toBytes(options.publicKey),\n    { name: 'ECDSA', namedCurve: 'P-256' },\n    true,\n    ['verify'],\n  )\n\n  return await globalThis.crypto.subtle.verify(\n    {\n      name: 'ECDSA',\n      hash: 'SHA-256',\n    },\n    publicKey,\n    Bytes.concat(Bytes.fromNumber(signature.r), Bytes.fromNumber(signature.s)),\n    Bytes.from(payload),\n  )\n}\n\nexport declare namespace verify {\n  type Options = {\n    /** Public key that signed the payload. */\n    publicKey: PublicKey.PublicKey<boolean>\n    /** Signature of the payload. */\n    signature: Signature.Signature<false>\n    /** Payload that was signed. */\n    payload: Hex.Hex | Bytes.Bytes\n  }\n\n  type ErrorType = Errors.GlobalErrorType\n}\n", "import { Bytes } from '../../index.js'\nimport * as Ens from '../Ens.js'\nimport type * as Errors from '../Errors.js'\nimport * as Hex from '../Hex.js'\n\n/**\n * @internal\n * Encodes a [DNS packet](https://docs.ens.domains/resolution/names#dns) into a ByteArray containing a UDP payload.\n */\nexport function packetToBytes(packet: string): Bytes.Bytes {\n  // strip leading and trailing `.`\n  const value = packet.replace(/^\\.|\\.$/gm, '')\n  if (value.length === 0) return new Uint8Array(1)\n\n  const bytes = new Uint8Array(Bytes.fromString(value).byteLength + 2)\n\n  let offset = 0\n  const list = value.split('.')\n  for (let i = 0; i < list.length; i++) {\n    let encoded = Bytes.fromString(list[i]!)\n    // if the length is > 255, make the encoded label value a labelhash\n    // this is compatible with the universal resolver\n    if (encoded.byteLength > 255)\n      encoded = Bytes.fromString(wrapLabelhash(Ens.labelhash(list[i]!)))\n    bytes[offset] = encoded.length\n    bytes.set(encoded, offset + 1)\n    offset += encoded.length + 1\n  }\n\n  if (bytes.byteLength !== offset + 1) return bytes.slice(0, offset + 1)\n\n  return bytes\n}\n\nexport declare namespace packetToBytes {\n  type ErrorType =\n    | wrapLabelhash.ErrorType\n    | Ens.labelhash.ErrorType\n    | Bytes.fromString.ErrorType\n    | Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function wrapLabelhash(hash: Hex.Hex): `[${string}]` {\n  return `[${hash.slice(2)}]`\n}\n\nexport declare namespace wrapLabelhash {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/** @internal */\nexport function unwrapLabelhash(label: string): Hex.Hex | null {\n  if (label.length !== 66) return null\n  if (label.indexOf('[') !== 0) return null\n  if (label.indexOf(']') !== 65) return null\n  const hash = `0x${label.slice(1, 65)}`\n  if (!Hex.validate(hash, { strict: true })) return null\n  return hash\n}\n\nexport declare namespace unwrapLabelhash {\n  type ErrorType = Hex.validate.ErrorType | Errors.GlobalErrorType\n}\n", "import * as Ens from 'ox/Ens'\nimport type { ErrorType } from '../../errors/utils.js'\n\nexport type NormalizeErrorType = ErrorType\n\n/**\n * @description Normalizes ENS name according to ENSIP-15.\n *\n * @example\n * normalize('wevm.eth')\n * 'wevm.eth'\n *\n * @see https://docs.ens.domains/contract-api-reference/name-processing#normalising-names\n * @see https://github.com/ensdomains/docs/blob/9edf9443de4333a0ea7ec658a870672d5d180d53/ens-improvement-proposals/ensip-15-normalization-standard.md\n */\nexport function normalize(name: string) {\n  return Ens.normalize(name)\n}\n", null, null, null, null, null],
  "mappings": "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AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;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",
  "names": ["EventEmitter", "ee", "j", "ConstantsUtil", "ConstantsUtil", "ConstantsUtil", "SocialProviderEnum", "_a", "chain", "modal", "W3mAccountButton", "_a", "W3mButton", "__decorate", "W3mConnectButton", "__decorate", "styles_default", "W3mNetworkButton", "_a", "styles_default", "__decorate", "styles_default", "ConstantsUtil", "W3mRouter", "ConstantsUtil", "_a", "styles_default", "__decorate", "styles_default", "W3mOnrampWidget", "_a", "styles_default", "__decorate", "W3mAccountSettingsView", "_a", "type", "authConnector", "ConstantsUtil", "__decorate", "W3mAccountView", "type", "authConnector", "__decorate", "W3mAllWalletsView", "__decorate", "styles_default", "W3mBuyInProgressView", "_a", "styles_default", "__decorate", "styles_default", "W3mConnectView", "authConnector", "styles_default", "__decorate", "styles_default", "_a", "styles_default", "__decorate", "W3mConnectingExternalView", "ConstantsUtil", "__decorate", "styles_default", "W3mConnectingMultiChainView", "_a", "styles_default", "__decorate", "W3mConnectingWcView", "_a", "ConstantsUtil", "injected", "__decorate", "styles_default", "W3mChooseAccountNameView", "styles_default", "__decorate", "W3mDownloadsView", "_a", "__decorate", "W3mGetWalletView", "__decorate", "styles_default", "W3mRegisterAccountNameView", "_a", "styles_default", "__decorate", "styles_default", "W3mRegisterAccountNameSuccess", "styles_default", "__decorate", "styles_default", "NetworkUtil", "_a", "W3mNetworkSwitchView", "_a", "type", "authConnector", "NetworkUtil", "styles_default", "__decorate", "styles_default", "W3mNetworksView", "_a", "NetworkUtil", "styles_default", "__decorate", "styles_default", "W3mOnRampActivityView", "_a", "styles_default", "__decorate", "styles_default", "W3mOnrampFiatSelectView", "_a", "styles_default", "__decorate", "W3mOnRampProvidersView", "index", "ConstantsUtil", "__decorate", "styles_default", "W3mOnrampTokensView", "_a", "styles_default", "__decorate", "styles_default", "W3mSwapView", "_a", "styles_default", "__decorate", "styles_default", "W3mSwitchActiveChainView", "_a", "styles_default", "__decorate", "styles_default", "W3mSwapPreviewView", "_a", "styles_default", "__decorate", "styles_default", "W3mSwapSelectTokenView", "_a", "styles_default", "__decorate", "styles_default", "W3mTransactionsView", "styles_default", "__decorate", "W3mWhatIsANetworkView", "__decorate", "data", "W3mWhatIsAWalletView", "__decorate", "W3mWhatIsABuyView", "__decorate", "styles_default", "W3mEmailOtpWidget", "_a", "authConnector", "styles_default", "__decorate", "W3mEmailVerifyOtpView", "__decorate", "styles_default", "W3mEmailVerifyDeviceView", "_a", "styles_default", "__decorate", "styles_default", "W3mApproveTransactionView", "_a", "authConnector", "styles_default", "__decorate", "W3mUpgradeWalletView", "ConstantsUtil", "__decorate", "W3mUpgradeToSmartAccountView", "__decorate", "styles_default", "W3mUpdateEmailWalletView", "_a", "authConnector", "styles_default", "__decorate", "W3mUpdateEmailPrimaryOtpView", "_a", "__decorate", "W3mUpdateEmailSecondaryOtpView", "_a", "__decorate", "styles_default", "W3mUnsupportedChainView", "_a", "ConstantsUtil", "NetworkUtil", "styles_default", "__decorate", "styles_default", "W3mWalletReceiveView", "_a", "styles_default", "__decorate", "styles_default", "W3mWalletCompatibleNetworksView", "styles_default", "__decorate", "styles_default", "W3mWalletSendView", "_a", "styles_default", "__decorate", "styles_default", "W3mSendSelectTokenView", "_a", "styles_default", "__decorate", "styles_default", "W3mWalletSendPreviewView", "_a", "styles_default", "__decorate", "styles_default", "W3mConnectWalletsView", "styles_default", "__decorate", "styles_default", "W3mConnectSocialsView", "styles_default", "__decorate", "styles_default", "W3mConnectingSocialView", "_a", "ConstantsUtil", "styles_default", "__decorate", "styles_default", "W3mProfileView", "_a", "styles_default", "__decorate", "styles_default", "W3mSelectAddressesView", "add", "_a", "styles_default", "__decorate", "styles_default", "W3mSwitchAddressView", "_a", "type", "index", "styles_default", "__decorate", "styles_default", "W3mConnectingFarcasterView", "_a", "size", "styles_default", "__decorate", "styles_default", "_a", "W3mAllWalletsList", "_a", "styles_default", "__decorate", "styles_default", "W3mAllWalletsListItem", "_a", "styles_default", "__decorate", "styles_default", "W3mAllWalletsSearch", "styles_default", "__decorate", "W3mConnectingHeader", "index", "_a", "__decorate", "W3mConnectingWcBrowser", "_a", "__decorate", "W3mConnectingWcDesktop", "_a", "__decorate", "W3mConnectingWcMobile", "_a", "__decorate", "styles_default", "W3mConnectingWcQrcode", "_a", "size", "styles_default", "__decorate", "W3mConnectingWcUnsupported", "_a", "__decorate", "W3mConnectingWcWeb", "_a", "__decorate", "styles_default", "ConstantsUtil", "WuiSwapDetails", "_a", "styles_default", "__decorate", "styles_default", "W3mSwapInput", "_a", "state", "styles_default", "__decorate", "styles_default", "W3mSwapInputSkeleton", "styles_default", "__decorate", "styles_default", "_a", "_f", "W3mHeader", "ConstantsUtil", "styles_default", "__decorate", "W3mHelpWidget", "__decorate", "styles_default", "W3mOnRampActivityItem", "styles_default", "__decorate", "styles_default", "W3mInputCurrency", "_a", "styles_default", "__decorate", "styles_default", "W3mOnRampProviderItem", "_a", "styles_default", "__decorate", "styles_default", "W3mLegalFooter", "styles_default", "__decorate", "styles_default", "W3mMobileDownloadLinks", "_a", "styles_default", "__decorate", "styles_default", "W3mOnRampProvidersFooter", "styles_default", "__decorate", "styles_default", "W3mSnackBar", "styles_default", "__decorate", "styles_default", "W3mEmailLoginWidget", "_a", "chain", "authConnector", "styles_default", "__decorate", "styles_default", "W3mAccountDefaultWidget", "type", "authConnector", "ConstantsUtil", "_a", "styles_default", "__decorate", "styles_default", "W3mAccountWalletFeaturesWidget", "ConstantsUtil", "_a", "index", "styles_default", "__decorate", "styles_default", "W3mAccountActivityWidget", "styles_default", "__decorate", "styles_default", "W3mAccountNftsWidget", "styles_default", "__decorate", "styles_default", "W3mAccountTokensWidget", "_a", "styles_default", "__decorate", "styles_default", "PAGINATOR_ID", "LOADING_ITEM_COUNT", "W3mActivityList", "_a", "index", "type", "styles_default", "__decorate", "styles_default", "W3mInputToken", "ConstantsUtil", "_a", "styles_default", "__decorate", "styles_default", "W3mInputAddress", "_a", "styles_default", "__decorate", "styles_default", "W3mWalletSendDetails", "_a", "styles_default", "__decorate", "styles_default", "W3mTooltip", "styles_default", "__decorate", "styles_default", "WuiTooltipTrigger", "styles_default", "__decorate", "styles_default", "W3mSocialLoginWidget", "_a", "_b", "authConnector", "styles_default", "__decorate", "W3mWalletLoginList", "__decorate", "styles_default", "W3mSocialLoginList", "_a", "authConnector", "styles_default", "__decorate", "W3mConnectAnnouncedWidget", "_a", "__decorate", "W3mConnectCustomWidget", "_a", "index", "__decorate", "_a", "index", "W3mConnectFeaturedWidget", "__decorate", "W3mConnectInjectedWidget", "_a", "__decorate", "W3mConnectMultiChainWidget", "__decorate", "W3mConnectExternalWidget", "__decorate", "W3mConnectRecentWidget", "__decorate", "W3mConnectRecommendedWidget", "injected", "__decorate", "W3mConnectWalletConnectWidget", "__decorate", "styles_default", "W3mConnectorList", "injected", "styles_default", "__decorate", "W3mAllWalletsWidget", "__decorate", "W3mAccountAuthButton", "type", "authConnector", "__decorate", "chain", "ConstantsUtil", "_a", "normalize", "j", "decode", "Q", "br", "S0", "L0", "V0", "T0", "add", "j", "Q", "V", "nf", "ef", "type", "split", "g", "decomposed", "j", "V", "format", "from", "format", "from", "decode", "encode", "format", "from", "fromAbi", "getSelector", "decode", "data", "size", "slice", "encode", "getSelector", "concat", "format", "from", "fromAbi", "validate", "decode", "encode", "format", "from", "fromAbi", "getSelector", "isEqual", "index", "value", "input", "decode", "data", "getSelector", "size", "encode", "fromString", "j", "format", "from", "fromAbi", "type", "validate", "j", "size", "data", "from", "size", "from", "fromRpc", "fromTuple", "fromTupleList", "toRpc", "toTuple", "toTupleList", "from", "fromBytes", "fromHex", "toBytes", "toHex", "toBytes", "toHex", "to", "length", "from", "fromBytes", "fromHex", "hex", "encode", "assert", "from", "fromBytes", "fromHex", "fromRpc", "toBytes", "toHex", "toRpc", "validate", "gcd", "Fp", "Q", "Fp", "num", "Fp", "bitLen", "isLE", "num", "isLE", "num", "_0n", "_1n", "window", "j", "wbits", "Fp", "data", "num", "_0n", "hex", "size", "bytesToHex", "_1n", "_2n", "_3n", "_4n", "toBytes", "concatBytes", "fromBytes", "Point", "z", "t0", "endo", "Q", "mul", "a", "modN", "from", "to", "ir", "hexToBytes", "utils", "getPublicKey", "hash", "randomBytes", "sign", "C", "verify", "_a", "format", "tv5", "c1", "c2", "hash", "create", "abytes", "concatBytes", "utf8ToBytes", "hash", "j", "xn", "Point", "num", "_0n", "_1n", "_2n", "_3n", "concatBytes", "Q", "j", "assert", "fromBytes", "fromHex", "slice", "yParity", "from", "fromRpc", "toBytes", "toHex", "concat", "fromNumber", "toRpc", "validate", "size", "from", "fromRpc", "fromTuple", "fromTupleList", "concat", "fromHex", "toTuple", "toRpc", "fromNumber", "toTupleList", "fromBytes", "fromHex", "fromString", "toBytes", "toHex", "toString", "from", "hex", "fromBytes", "from", "fromHex", "fromString", "toBytes", "toHex", "toString", "fromBytes", "fromHex", "fromString", "toBytes", "toHex", "toString", "fromBytes", "j", "base64", "fromHex", "fromString", "toBytes", "size", "toHex", "toString", "create", "data", "buffer", "to", "j", "v0", "v0", "to", "state", "create", "stem", "subIndex", "value", "hash", "internal", "bit", "j", "from", "to", "toBytes", "toHex", "from", "sha256", "from", "data", "size", "to", "length", "toHex", "toBytes", "hash", "fromRpc", "toRpc", "fromRpc", "toRpc", "fromRpc", "toRpc", "fromNumber", "toRpc", "_a", "fromNumber", "fromRpc", "validate", "hash", "validate", "size", "sign", "verify", "_0n", "_1n", "_2n", "_3n", "Fp", "Fr", "Fp2", "Fp6", "Fp12", "c0", "t0", "Qa", "Q", "utils", "getPublicKey", "sign", "verify", "msg", "_0n", "_1n", "_2n", "_3n", "Fp", "num", "powers", "j", "Fp2", "G2psi", "G2psi2", "c0", "r0", "o0", "a0", "x0", "concatBytes", "t0", "Fp6", "b0", "Fp4Square", "Fp12", "_0n", "_1n", "_2n", "_3n", "_4n", "c0", "t0", "num", "z", "Fr", "j", "concatBytes", "x0", "y0", "x", "hex", "bytesToHex", "Q", "from", "to", "_a", "point", "size", "from", "sign", "verify", "fromBytes", "fromHex", "toBytes", "toHex", "toBytes", "toHex", "fromBytes", "fromHex", "hex", "from", "from", "fromBytes", "slice", "fromRpc", "toRpc", "fromRpc", "validate", "toRpc", "fromNumber", "isBytes", "abytes", "anumber", "encode", "decode", "from", "to", "data", "padding", "num", "re", "alphabet", "sha256", "data", "encode", "limit", "isBytes", "decode", "data", "data", "abytes", "Point", "num", "data", "path", "index", "hash", "getPublicKey", "noble", "randomPrivateKey", "sign", "verify", "noble", "getPublicKey", "from", "randomPrivateKey", "sign", "extraEntropy", "hash", "verify", "isEqual", "toBytes", "path", "getPublicKey", "index", "decrypt", "encrypt", "pbkdf2", "pbkdf2Async", "scrypt", "scryptAsync", "isBytes", "abool", "abytes", "isBytes", "aexists", "aoutput", "abytes", "u8", "u32", "clean", "createView", "hasHexBuiltin", "utf8ToBytes", "toBytes", "data", "utf8ToBytes", "isBytes", "concatBytes", "abytes", "abytes", "data", "isLE", "abool", "num", "createView", "u32", "s0", "toBytes", "abytes", "createView", "k0", "j", "d0", "o0", "num", "e0", "data", "aexists", "clean", "aoutput", "BLOCK_SIZE", "POLY", "mul2", "clean", "j", "sbox", "T0", "T1", "sbox2", "abytes", "u32", "s0", "encrypt", "t0", "t1", "t2", "t3", "decrypt", "ctr", "i", "u8", "isLE", "createView", "data", "o0", "e0", "num", "abytes", "u32", "s0", "encrypt", "decrypt", "a0", "j", "ctr", "concatBytes", "hash", "Ti", "pi", "V", "Pi", "j", "decrypt", "data", "encrypt", "pbkdf2", "pbkdf2Async", "scrypt", "scryptAsync", "fromRpc", "toRpc", "fromRpc", "toRpc", "fromNumber", "wordlist", "random", "validate", "wordlist", "normalize", "normalize", "wordlist", "wordlist", "wordlist", "wordlist", "wordlist", "wordlist", "wordlist", "wordlist", "wordlist", "random", "wordlist", "path", "validate", "encode", "getSignPayload", "encode", "data", "from", "concat", "fromString", "size", "getSignPayload", "SwitchChainError", "from", "parseError", "BaseError", "InvalidInputError", "from", "parse", "data", "SwitchChainError", "EventEmitter", "from", "_a", "parse", "parseError", "from", "from", "options", "create", "data", "parse", "create", "init", "data", "_a", "getPublicKey", "noble", "randomPrivateKey", "recoverPublicKey", "sign", "verify", "p256", "secp256r1", "hashToCurve", "encodeToCurve", "noble", "secp256r1", "getPublicKey", "from", "randomPrivateKey", "recoverPublicKey", "sign", "extraEntropy", "hash", "verify", "toHex", "size", "statement", "from", "path", "_a", "isEqual", "fromRpc", "toRpc", "fromRpc", "toRpc", "fromNumber", "format", "from", "format", "from", "type", "assert", "from", "getSignPayload", "hash", "toRpc", "validate", "assert", "to", "toHex", "data", "validate", "from", "getSignPayload", "hash", "fromNumber", "v", "fromHex", "toRpc", "assert", "deserialize", "from", "getSignPayload", "hash", "serialize", "toRpc", "type", "validate", "type", "assert", "to", "deserialize", "toHex", "slice", "data", "validate", "from", "getSignPayload", "hash", "serialize", "fromNumber", "concat", "fromHex", "toRpc", "assert", "deserialize", "from", "getSignPayload", "hash", "serialize", "serializedType", "toRpc", "type", "validate", "serializedType", "type", "assert", "to", "deserialize", "toHex", "slice", "data", "validate", "from", "getSignPayload", "hash", "serialize", "fromNumber", "concat", "fromHex", "toRpc", "assert", "deserialize", "from", "getSignPayload", "hash", "serialize", "serializedType", "toRpc", "type", "validate", "serializedType", "type", "assert", "hash", "size", "slice", "deserialize", "toHex", "to", "data", "validate", "from", "getSignPayload", "serialize", "fromNumber", "concat", "fromHex", "toRpc", "assert", "deserialize", "from", "getSignPayload", "hash", "serialize", "serializedType", "type", "validate", "serializedType", "type", "assert", "deserialize", "toHex", "slice", "to", "data", "validate", "fromTupleList", "from", "getSignPayload", "hash", "serialize", "toTupleList", "fromNumber", "concat", "fromHex", "fromRpc", "fromRpcType", "toRpc", "toRpcType", "fromRpcType", "toRpcType", "fromRpc", "toRpc", "fromNumber", "toRpc", "toRpc", "fromNumber", "assert", "encode", "encodeData", "getSignPayload", "serialize", "validate", "assert", "data", "type", "value", "fromNumber", "validate", "size", "struct", "encode", "concat", "getSignPayload", "encodeData", "serialize", "fromString", "encode", "getSignPayload", "encode", "data", "concat", "from", "getSignPayload", "getSignPayload", "sign", "verify", "p256", "from", "data", "j", "sha256", "fromString", "fromNumber", "concat", "challenge", "fromHex", "toBytes", "getSignPayload", "sign", "verify", "hash", "type", "sign", "verify", "from", "sign", "p256", "verify", "toBytes", "hash", "validate", "fromString", "normalize", "normalize", "_a", "_b", "ConstantsUtil", "_c", "_f", "_i", "data", "normalize", "state", "chain", "type", "authConnector", "ConstantsUtil", "chain", "_a", "chain", "themeMode", "setThemeVariables", "themeVariables", "state", "ConstantsUtil"]
}
